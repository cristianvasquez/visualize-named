{"mappings":"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","sources":["<anon>","node_modules/dagre/lib/graphlib.js","node_modules/graphlib/index.js","node_modules/graphlib/lib/index.js","node_modules/graphlib/lib/graph.js","node_modules/graphlib/lib/lodash.js","node_modules/lodash/clone.js","node_modules/lodash/_baseClone.js","node_modules/lodash/_Stack.js","node_modules/lodash/_ListCache.js","node_modules/lodash/_listCacheClear.js","node_modules/lodash/_listCacheDelete.js","node_modules/lodash/_assocIndexOf.js","node_modules/lodash/eq.js","node_modules/lodash/_listCacheGet.js","node_modules/lodash/_listCacheHas.js","node_modules/lodash/_listCacheSet.js","node_modules/lodash/_stackClear.js","node_modules/lodash/_stackDelete.js","node_modules/lodash/_stackGet.js","node_modules/lodash/_stackHas.js","node_modules/lodash/_stackSet.js","node_modules/lodash/_Map.js","node_modules/lodash/_getNative.js","node_modules/lodash/_baseIsNative.js","node_modules/lodash/isFunction.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_root.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/isObject.js","node_modules/lodash/_isMasked.js","node_modules/lodash/_coreJsData.js","node_modules/lodash/_toSource.js","node_modules/lodash/_getValue.js","node_modules/lodash/_MapCache.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_Hash.js","node_modules/lodash/_hashClear.js","node_modules/lodash/_nativeCreate.js","node_modules/lodash/_hashDelete.js","node_modules/lodash/_hashGet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_mapCacheDelete.js","node_modules/lodash/_getMapData.js","node_modules/lodash/_isKeyable.js","node_modules/lodash/_mapCacheGet.js","node_modules/lodash/_mapCacheHas.js","node_modules/lodash/_mapCacheSet.js","node_modules/lodash/_arrayEach.js","node_modules/lodash/_assignValue.js","node_modules/lodash/_baseAssignValue.js","node_modules/lodash/_defineProperty.js","node_modules/lodash/_baseAssign.js","node_modules/lodash/_copyObject.js","node_modules/lodash/keys.js","node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseTimes.js","node_modules/lodash/isArguments.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/isArray.js","node_modules/lodash/isBuffer.js","node_modules/lodash/stubFalse.js","node_modules/lodash/_isIndex.js","node_modules/lodash/isTypedArray.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/isLength.js","node_modules/lodash/_baseUnary.js","node_modules/lodash/_nodeUtil.js","node_modules/lodash/_baseKeys.js","node_modules/lodash/_isPrototype.js","node_modules/lodash/_nativeKeys.js","node_modules/lodash/_overArg.js","node_modules/lodash/isArrayLike.js","node_modules/lodash/_baseAssignIn.js","node_modules/lodash/keysIn.js","node_modules/lodash/_baseKeysIn.js","node_modules/lodash/_nativeKeysIn.js","node_modules/lodash/_cloneBuffer.js","node_modules/lodash/_copyArray.js","node_modules/lodash/_copySymbols.js","node_modules/lodash/_getSymbols.js","node_modules/lodash/_arrayFilter.js","node_modules/lodash/stubArray.js","node_modules/lodash/_copySymbolsIn.js","node_modules/lodash/_getSymbolsIn.js","node_modules/lodash/_arrayPush.js","node_modules/lodash/_getPrototype.js","node_modules/lodash/_getAllKeys.js","node_modules/lodash/_baseGetAllKeys.js","node_modules/lodash/_getAllKeysIn.js","node_modules/lodash/_getTag.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_initCloneArray.js","node_modules/lodash/_initCloneByTag.js","node_modules/lodash/_cloneArrayBuffer.js","node_modules/lodash/_Uint8Array.js","node_modules/lodash/_cloneDataView.js","node_modules/lodash/_cloneRegExp.js","node_modules/lodash/_cloneSymbol.js","node_modules/lodash/_cloneTypedArray.js","node_modules/lodash/_initCloneObject.js","node_modules/lodash/_baseCreate.js","node_modules/lodash/isMap.js","node_modules/lodash/_baseIsMap.js","node_modules/lodash/isSet.js","node_modules/lodash/_baseIsSet.js","node_modules/lodash/constant.js","node_modules/lodash/each.js","node_modules/lodash/forEach.js","node_modules/lodash/_baseEach.js","node_modules/lodash/_baseForOwn.js","node_modules/lodash/_baseFor.js","node_modules/lodash/_createBaseFor.js","node_modules/lodash/_createBaseEach.js","node_modules/lodash/_castFunction.js","node_modules/lodash/identity.js","node_modules/lodash/filter.js","node_modules/lodash/_baseFilter.js","node_modules/lodash/_baseIteratee.js","node_modules/lodash/_baseMatches.js","node_modules/lodash/_baseIsMatch.js","node_modules/lodash/_baseIsEqual.js","node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_equalArrays.js","node_modules/lodash/_SetCache.js","node_modules/lodash/_setCacheAdd.js","node_modules/lodash/_setCacheHas.js","node_modules/lodash/_arraySome.js","node_modules/lodash/_cacheHas.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_mapToArray.js","node_modules/lodash/_setToArray.js","node_modules/lodash/_equalObjects.js","node_modules/lodash/_getMatchData.js","node_modules/lodash/_isStrictComparable.js","node_modules/lodash/_matchesStrictComparable.js","node_modules/lodash/_baseMatchesProperty.js","node_modules/lodash/get.js","node_modules/lodash/_baseGet.js","node_modules/lodash/_castPath.js","node_modules/lodash/_isKey.js","node_modules/lodash/isSymbol.js","node_modules/lodash/_stringToPath.js","node_modules/lodash/_memoizeCapped.js","node_modules/lodash/memoize.js","node_modules/lodash/toString.js","node_modules/lodash/_baseToString.js","node_modules/lodash/_arrayMap.js","node_modules/lodash/_toKey.js","node_modules/lodash/hasIn.js","node_modules/lodash/_baseHasIn.js","node_modules/lodash/_hasPath.js","node_modules/lodash/property.js","node_modules/lodash/_baseProperty.js","node_modules/lodash/_basePropertyDeep.js","node_modules/lodash/has.js","node_modules/lodash/_baseHas.js","node_modules/lodash/isEmpty.js","node_modules/lodash/isUndefined.js","node_modules/lodash/map.js","node_modules/lodash/_baseMap.js","node_modules/lodash/reduce.js","node_modules/lodash/_arrayReduce.js","node_modules/lodash/_baseReduce.js","node_modules/lodash/size.js","node_modules/lodash/isString.js","node_modules/lodash/_stringSize.js","node_modules/lodash/_asciiSize.js","node_modules/lodash/_hasUnicode.js","node_modules/lodash/_unicodeSize.js","node_modules/lodash/transform.js","node_modules/lodash/union.js","node_modules/lodash/_baseFlatten.js","node_modules/lodash/_isFlattenable.js","node_modules/lodash/_baseRest.js","node_modules/lodash/_overRest.js","node_modules/lodash/_apply.js","node_modules/lodash/_setToString.js","node_modules/lodash/_baseSetToString.js","node_modules/lodash/_shortOut.js","node_modules/lodash/_baseUniq.js","node_modules/lodash/_arrayIncludes.js","node_modules/lodash/_baseIndexOf.js","node_modules/lodash/_baseFindIndex.js","node_modules/lodash/_baseIsNaN.js","node_modules/lodash/_strictIndexOf.js","node_modules/lodash/_arrayIncludesWith.js","node_modules/lodash/_createSet.js","node_modules/lodash/noop.js","node_modules/lodash/isArrayLikeObject.js","node_modules/lodash/values.js","node_modules/lodash/_baseValues.js","node_modules/graphlib/lib/version.js","node_modules/graphlib/lib/json.js","node_modules/graphlib/lib/alg/index.js","node_modules/graphlib/lib/alg/components.js","node_modules/graphlib/lib/alg/dijkstra.js","node_modules/graphlib/lib/data/priority-queue.js","node_modules/graphlib/lib/alg/dijkstra-all.js","node_modules/graphlib/lib/alg/find-cycles.js","node_modules/graphlib/lib/alg/tarjan.js","node_modules/graphlib/lib/alg/floyd-warshall.js","node_modules/graphlib/lib/alg/is-acyclic.js","node_modules/graphlib/lib/alg/topsort.js","node_modules/graphlib/lib/alg/postorder.js","node_modules/graphlib/lib/alg/dfs.js","node_modules/graphlib/lib/alg/preorder.js","node_modules/graphlib/lib/alg/prim.js","node_modules/dagre/lib/layout.js","node_modules/dagre/lib/lodash.js","node_modules/lodash/cloneDeep.js","node_modules/lodash/defaults.js","node_modules/lodash/_isIterateeCall.js","node_modules/lodash/find.js","node_modules/lodash/_createFind.js","node_modules/lodash/findIndex.js","node_modules/lodash/toInteger.js","node_modules/lodash/toFinite.js","node_modules/lodash/toNumber.js","node_modules/lodash/_baseTrim.js","node_modules/lodash/_trimmedEndIndex.js","node_modules/lodash/flatten.js","node_modules/lodash/forIn.js","node_modules/lodash/last.js","node_modules/lodash/mapValues.js","node_modules/lodash/max.js","node_modules/lodash/_baseExtremum.js","node_modules/lodash/_baseGt.js","node_modules/lodash/merge.js","node_modules/lodash/_baseMerge.js","node_modules/lodash/_assignMergeValue.js","node_modules/lodash/_baseMergeDeep.js","node_modules/lodash/isPlainObject.js","node_modules/lodash/_safeGet.js","node_modules/lodash/toPlainObject.js","node_modules/lodash/_createAssigner.js","node_modules/lodash/min.js","node_modules/lodash/_baseLt.js","node_modules/lodash/minBy.js","node_modules/lodash/now.js","node_modules/lodash/pick.js","node_modules/lodash/_basePick.js","node_modules/lodash/_basePickBy.js","node_modules/lodash/_baseSet.js","node_modules/lodash/_flatRest.js","node_modules/lodash/range.js","node_modules/lodash/_createRange.js","node_modules/lodash/_baseRange.js","node_modules/lodash/sortBy.js","node_modules/lodash/_baseOrderBy.js","node_modules/lodash/_baseSortBy.js","node_modules/lodash/_compareMultiple.js","node_modules/lodash/_compareAscending.js","node_modules/lodash/uniqueId.js","node_modules/lodash/zipObject.js","node_modules/lodash/_baseZipObject.js","node_modules/dagre/lib/acyclic.js","node_modules/dagre/lib/greedy-fas.js","node_modules/dagre/lib/data/list.js","node_modules/dagre/lib/normalize.js","node_modules/dagre/lib/util.js","node_modules/dagre/lib/rank/index.js","node_modules/dagre/lib/rank/util.js","node_modules/dagre/lib/rank/feasible-tree.js","node_modules/dagre/lib/rank/network-simplex.js","node_modules/dagre/lib/parent-dummy-chains.js","node_modules/dagre/lib/nesting-graph.js","node_modules/dagre/lib/add-border-segments.js","node_modules/dagre/lib/coordinate-system.js","node_modules/dagre/lib/order/index.js","node_modules/dagre/lib/order/init-order.js","node_modules/dagre/lib/order/cross-count.js","node_modules/dagre/lib/order/sort-subgraph.js","node_modules/dagre/lib/order/barycenter.js","node_modules/dagre/lib/order/resolve-conflicts.js","node_modules/dagre/lib/order/sort.js","node_modules/dagre/lib/order/build-layer-graph.js","node_modules/dagre/lib/order/add-subgraph-constraints.js","node_modules/dagre/lib/position/index.js","node_modules/dagre/lib/position/bk.js","node_modules/dagre/lib/debug.js","node_modules/dagre/lib/version.js","node_modules/@antv/layout/lib/worker.js","node_modules/@antv/layout/src/worker.js","node_modules/tslib/tslib.es6.js","node_modules/@antv/graphlib/esm/graph.js","node_modules/@antv/graphlib/src/graph.ts","node_modules/@antv/event-emitter/esm/index.js","node_modules/@antv/event-emitter/src/index.ts","node_modules/@antv/graphlib/esm/graphView.js","node_modules/@antv/graphlib/src/graphView.ts","node_modules/@antv/graphlib/esm/utils/traverse.js","node_modules/@antv/graphlib/src/utils/traverse.ts","node_modules/comlink/dist/esm/comlink.mjs","node_modules/comlink/src/comlink.ts","node_modules/@antv/layout/lib/registry.js","node_modules/@antv/layout/src/registry.ts","node_modules/@antv/layout/lib/antv-dagre.js","node_modules/@antv/layout/src/antv-dagre.ts","node_modules/@antv/util/esm/lodash/is-number.js","node_modules/@antv/util/esm/lodash/src/lodash/is-number.ts","node_modules/@antv/layout/lib/antv-dagre/layout.js","node_modules/@antv/layout/src/antv-dagre/layout.ts","node_modules/@antv/util/esm/lodash/is-nil.js","node_modules/@antv/util/esm/lodash/src/lodash/is-nil.ts","node_modules/@antv/layout/lib/antv-dagre/acyclic.js","node_modules/@antv/layout/src/antv-dagre/acyclic.ts","node_modules/@antv/layout/lib/antv-dagre/greedy-fas.js","node_modules/@antv/layout/src/antv-dagre/greedy-fas.ts","node_modules/@antv/layout/lib/antv-dagre/data/list.js","node_modules/@antv/layout/src/antv-dagre/data/list.ts","node_modules/@antv/layout/lib/antv-dagre/add-border-segments.js","node_modules/@antv/layout/src/antv-dagre/add-border-segments.ts","node_modules/@antv/layout/lib/antv-dagre/util.js","node_modules/@antv/layout/src/antv-dagre/util.ts","node_modules/@antv/layout/lib/antv-dagre/coordinate-system.js","node_modules/@antv/layout/src/antv-dagre/coordinate-system.ts","node_modules/@antv/layout/lib/antv-dagre/nesting-graph.js","node_modules/@antv/layout/src/antv-dagre/nesting-graph.ts","node_modules/@antv/layout/lib/antv-dagre/normalize.js","node_modules/@antv/layout/src/antv-dagre/normalize.ts","node_modules/@antv/layout/lib/antv-dagre/order/index.js","node_modules/@antv/layout/src/antv-dagre/order/index.ts","node_modules/@antv/util/esm/lodash/clone.js","node_modules/@antv/util/esm/lodash/src/lodash/clone.ts","node_modules/@antv/util/esm/lodash/is-array.js","node_modules/@antv/util/esm/lodash/src/lodash/is-array.ts","node_modules/@antv/layout/lib/antv-dagre/order/add-subgraph-constraints.js","node_modules/@antv/layout/src/antv-dagre/order/add-subgraph-constraints.ts","node_modules/@antv/layout/lib/antv-dagre/order/build-layer-graph.js","node_modules/@antv/layout/src/antv-dagre/order/build-layer-graph.ts","node_modules/@antv/layout/lib/antv-dagre/order/cross-count.js","node_modules/@antv/layout/src/antv-dagre/order/cross-count.ts","node_modules/@antv/layout/lib/antv-dagre/order/init-order.js","node_modules/@antv/layout/src/antv-dagre/order/init-order.ts","node_modules/@antv/layout/lib/antv-dagre/order/sort-subgraph.js","node_modules/@antv/layout/src/antv-dagre/order/sort-subgraph.ts","node_modules/@antv/layout/lib/antv-dagre/order/barycenter.js","node_modules/@antv/layout/src/antv-dagre/order/barycenter.ts","node_modules/@antv/layout/lib/antv-dagre/order/resolve-conflicts.js","node_modules/@antv/layout/src/antv-dagre/order/resolve-conflicts.ts","node_modules/@antv/layout/lib/antv-dagre/order/sort.js","node_modules/@antv/layout/src/antv-dagre/order/sort.ts","node_modules/@antv/layout/lib/antv-dagre/order/init-data-order.js","node_modules/@antv/layout/src/antv-dagre/order/init-data-order.ts","node_modules/@antv/layout/lib/antv-dagre/parent-dummy-chains.js","node_modules/@antv/layout/src/antv-dagre/parent-dummy-chains.ts","node_modules/@antv/layout/lib/antv-dagre/position/index.js","node_modules/@antv/layout/src/antv-dagre/position/index.ts","node_modules/@antv/layout/lib/antv-dagre/position/bk.js","node_modules/@antv/layout/src/antv-dagre/position/bk.ts","node_modules/@antv/layout/lib/antv-dagre/rank/index.js","node_modules/@antv/layout/src/antv-dagre/rank/index.ts","node_modules/@antv/layout/lib/antv-dagre/rank/feasible-tree.js","node_modules/@antv/layout/src/antv-dagre/rank/feasible-tree.ts","node_modules/@antv/layout/lib/antv-dagre/rank/util.js","node_modules/@antv/layout/src/antv-dagre/rank/util.ts","node_modules/@antv/layout/lib/antv-dagre/rank/network-simplex.js","node_modules/@antv/layout/src/antv-dagre/rank/network-simplex.ts","node_modules/@antv/layout/lib/util/object.js","node_modules/@antv/layout/src/util/object.ts","node_modules/@antv/layout/lib/util/function.js","node_modules/@antv/layout/src/util/function.ts","node_modules/@antv/util/esm/lodash/is-function.js","node_modules/@antv/util/esm/lodash/src/lodash/is-function.ts","node_modules/@antv/util/esm/lodash/is-object.js","node_modules/@antv/util/esm/lodash/src/lodash/is-object.ts","node_modules/@antv/layout/lib/util/size.js","node_modules/@antv/layout/src/util/size.ts","node_modules/@antv/layout/lib/circular.js","node_modules/@antv/layout/src/circular.ts","node_modules/@antv/layout/lib/util/common.js","node_modules/@antv/layout/src/util/common.ts","node_modules/@antv/layout/lib/combo-combined.js","node_modules/@antv/layout/src/combo-combined.ts","node_modules/@antv/layout/lib/concentric.js","node_modules/@antv/layout/src/concentric.ts","node_modules/@antv/util/esm/lodash/is-string.js","node_modules/@antv/util/esm/lodash/src/lodash/is-string.ts","node_modules/@antv/layout/lib/util/array.js","node_modules/@antv/layout/src/util/array.ts","node_modules/@antv/layout/lib/force/index.js","node_modules/@antv/layout/src/force/index.ts","node_modules/@antv/layout/lib/force/force-n-body.js","node_modules/@antv/layout/src/force/force-n-body.ts","node_modules/d3-quadtree/src/quadtree.js","node_modules/d3-quadtree/src/add.js","node_modules/d3-quadtree/src/cover.js","node_modules/d3-quadtree/src/data.js","node_modules/d3-quadtree/src/extent.js","node_modules/d3-quadtree/src/find.js","node_modules/d3-quadtree/src/quad.js","node_modules/d3-quadtree/src/remove.js","node_modules/d3-quadtree/src/root.js","node_modules/d3-quadtree/src/size.js","node_modules/d3-quadtree/src/visit.js","node_modules/d3-quadtree/src/visitAfter.js","node_modules/d3-quadtree/src/x.js","node_modules/d3-quadtree/src/y.js","node_modules/d3-octree/src/octree.js","node_modules/d3-octree/src/add.js","node_modules/d3-octree/src/cover.js","node_modules/d3-octree/src/data.js","node_modules/d3-octree/src/extent.js","node_modules/d3-octree/src/find.js","node_modules/d3-octree/src/octant.js","node_modules/d3-octree/src/remove.js","node_modules/d3-octree/src/root.js","node_modules/d3-octree/src/size.js","node_modules/d3-octree/src/visit.js","node_modules/d3-octree/src/visitAfter.js","node_modules/d3-octree/src/x.js","node_modules/d3-octree/src/y.js","node_modules/d3-octree/src/z.js","node_modules/@antv/layout/lib/mds.js","node_modules/@antv/layout/src/mds.ts","node_modules/ml-matrix/src/matrix.js","node_modules/is-any-array/lib-esm/index.js","node_modules/is-any-array/src/index.ts","node_modules/ml-array-rescale/lib-es6/index.js","node_modules/ml-array-max/lib-es6/index.js","node_modules/ml-array-min/lib-es6/index.js","node_modules/ml-matrix/src/inspect.js","node_modules/ml-matrix/src/mathOperations.js","node_modules/ml-matrix/src/stat.js","node_modules/ml-matrix/src/util.js","node_modules/ml-matrix/src/dc/svd.js","node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","node_modules/ml-matrix/src/dc/util.js","node_modules/@antv/layout/lib/util/math.js","node_modules/@antv/layout/src/util/math.ts","node_modules/@antv/layout/lib/types.js","node_modules/@antv/layout/src/types.ts","node_modules/@antv/layout/lib/d3-force/index.js","node_modules/@antv/layout/src/d3-force/index.ts","node_modules/@antv/util/esm/lodash/deep-mix.js","node_modules/@antv/util/esm/lodash/src/lodash/deep-mix.ts","node_modules/@antv/util/esm/lodash/is-plain-object.js","node_modules/@antv/util/esm/lodash/src/lodash/is-plain-object.ts","node_modules/@antv/util/esm/lodash/is-object-like.js","node_modules/@antv/util/esm/lodash/src/lodash/is-object-like.ts","node_modules/@antv/util/esm/lodash/is-type.js","node_modules/@antv/util/esm/lodash/src/lodash/is-type.ts","node_modules/@antv/util/esm/lodash/pick.js","node_modules/@antv/util/esm/lodash/src/lodash/pick.ts","node_modules/@antv/util/esm/lodash/each.js","node_modules/@antv/util/esm/lodash/src/lodash/each.ts","node_modules/d3-force/src/center.js","node_modules/d3-force/src/collide.js","node_modules/d3-force/src/constant.js","node_modules/d3-force/src/jiggle.js","node_modules/d3-force/src/link.js","node_modules/d3-force/src/manyBody.js","node_modules/d3-force/src/simulation.js","node_modules/d3-dispatch/src/dispatch.js","node_modules/d3-timer/src/timer.js","node_modules/d3-force/src/lcg.js","node_modules/d3-force/src/radial.js","node_modules/d3-force/src/x.js","node_modules/d3-force/src/y.js","node_modules/@antv/layout/lib/d3-force-3d/index.js","node_modules/@antv/layout/src/d3-force-3d/index.ts","node_modules/d3-force-3d/src/center.js","node_modules/d3-force-3d/src/collide.js","node_modules/d3-binarytree/src/binarytree.js","node_modules/d3-binarytree/src/add.js","node_modules/d3-binarytree/src/cover.js","node_modules/d3-binarytree/src/data.js","node_modules/d3-binarytree/src/extent.js","node_modules/d3-binarytree/src/find.js","node_modules/d3-binarytree/src/half.js","node_modules/d3-binarytree/src/remove.js","node_modules/d3-binarytree/src/root.js","node_modules/d3-binarytree/src/size.js","node_modules/d3-binarytree/src/visit.js","node_modules/d3-binarytree/src/visitAfter.js","node_modules/d3-binarytree/src/x.js","node_modules/d3-force-3d/src/constant.js","node_modules/d3-force-3d/src/jiggle.js","node_modules/d3-force-3d/src/link.js","node_modules/d3-force-3d/src/manyBody.js","node_modules/d3-force-3d/src/simulation.js","node_modules/d3-force-3d/src/lcg.js","node_modules/d3-force-3d/src/radial.js","node_modules/d3-force-3d/src/x.js","node_modules/d3-force-3d/src/y.js","node_modules/d3-force-3d/src/z.js","node_modules/@antv/layout/lib/dagre.js","node_modules/@antv/layout/src/dagre.ts","node_modules/dagre/index.js","node_modules/@antv/layout/lib/force-atlas2/index.js","node_modules/@antv/layout/src/force-atlas2/index.ts","node_modules/@antv/layout/lib/force-atlas2/body.js","node_modules/@antv/layout/src/force-atlas2/body.ts","node_modules/@antv/layout/lib/force-atlas2/quad.js","node_modules/@antv/layout/src/force-atlas2/quad.ts","node_modules/@antv/layout/lib/force-atlas2/quad-tree.js","node_modules/@antv/layout/src/force-atlas2/quad-tree.ts","node_modules/@antv/layout/lib/fruchterman.js","node_modules/@antv/layout/src/fruchterman.ts","node_modules/@antv/layout/lib/grid.js","node_modules/@antv/layout/src/grid.ts","node_modules/@antv/layout/lib/radial/index.js","node_modules/@antv/layout/src/radial/index.ts","node_modules/@antv/layout/lib/radial/mds.js","node_modules/@antv/layout/src/radial/mds.ts","node_modules/@antv/layout/lib/radial/radial-nonoverlap-force.js","node_modules/@antv/layout/src/radial/radial-nonoverlap-force.ts","node_modules/@antv/layout/lib/random.js","node_modules/@antv/layout/src/random.ts"],"sourcesContent":["(() => {\n\n      var $parcel$global = globalThis;\n    \nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3vj6M\", function(module, exports) {\n/* global window */ var $28d316e2c4fea3a4$var$graphlib;\n\ntry {\n    $28d316e2c4fea3a4$var$graphlib = (parcelRequire(\"7GN1a\"));\n} catch (e) {\n// continue regardless of error\n}\nif (!$28d316e2c4fea3a4$var$graphlib) $28d316e2c4fea3a4$var$graphlib = window.graphlib;\nmodule.exports = $28d316e2c4fea3a4$var$graphlib;\n\n});\nparcelRegister(\"7GN1a\", function(module, exports) {\n/**\n * Copyright (c) 2014, Chris Pettitt\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */ \nvar $c397w = parcelRequire(\"c397w\");\n\n\nmodule.exports = {\n    Graph: $c397w.Graph,\n    json: (parcelRequire(\"9f8tS\")),\n    alg: (parcelRequire(\"768Bj\")),\n    version: $c397w.version\n};\n\n});\nparcelRegister(\"c397w\", function(module, exports) {\n// Includes only the \"core\" of graphlib\n\n\nmodule.exports = {\n    Graph: (parcelRequire(\"eK8oE\")),\n    version: (parcelRequire(\"6G3oS\"))\n};\n\n});\nparcelRegister(\"eK8oE\", function(module, exports) {\n\"use strict\";\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $abbbdff860cc0ef5$var$Graph;\nvar $abbbdff860cc0ef5$var$DEFAULT_EDGE_NAME = \"\\x00\";\nvar $abbbdff860cc0ef5$var$GRAPH_NODE = \"\\x00\";\nvar $abbbdff860cc0ef5$var$EDGE_KEY_DELIM = \"\\x01\";\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nfunction $abbbdff860cc0ef5$var$Graph(opts) {\n    this._isDirected = $dE3aD.has(opts, \"directed\") ? opts.directed : true;\n    this._isMultigraph = $dE3aD.has(opts, \"multigraph\") ? opts.multigraph : false;\n    this._isCompound = $dE3aD.has(opts, \"compound\") ? opts.compound : false;\n    // Label for the graph itself\n    this._label = undefined;\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = $dE3aD.constant(undefined);\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = $dE3aD.constant(undefined);\n    // v -> label\n    this._nodes = {};\n    if (this._isCompound) {\n        // v -> parent\n        this._parent = {};\n        // v -> children\n        this._children = {};\n        this._children[$abbbdff860cc0ef5$var$GRAPH_NODE] = {};\n    }\n    // v -> edgeObj\n    this._in = {};\n    // u -> v -> Number\n    this._preds = {};\n    // v -> edgeObj\n    this._out = {};\n    // v -> w -> Number\n    this._sucs = {};\n    // e -> edgeObj\n    this._edgeObjs = {};\n    // e -> label\n    this._edgeLabels = {};\n}\n/* Number of nodes in the graph. Should only be changed by the implementation. */ $abbbdff860cc0ef5$var$Graph.prototype._nodeCount = 0;\n/* Number of edges in the graph. Should only be changed by the implementation. */ $abbbdff860cc0ef5$var$Graph.prototype._edgeCount = 0;\n/* === Graph functions ========= */ $abbbdff860cc0ef5$var$Graph.prototype.isDirected = function() {\n    return this._isDirected;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.isMultigraph = function() {\n    return this._isMultigraph;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.isCompound = function() {\n    return this._isCompound;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.setGraph = function(label) {\n    this._label = label;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.graph = function() {\n    return this._label;\n};\n/* === Node functions ========== */ $abbbdff860cc0ef5$var$Graph.prototype.setDefaultNodeLabel = function(newDefault) {\n    if (!$dE3aD.isFunction(newDefault)) newDefault = $dE3aD.constant(newDefault);\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.nodeCount = function() {\n    return this._nodeCount;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.nodes = function() {\n    return $dE3aD.keys(this._nodes);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.sources = function() {\n    var self = this;\n    return $dE3aD.filter(this.nodes(), function(v) {\n        return $dE3aD.isEmpty(self._in[v]);\n    });\n};\n$abbbdff860cc0ef5$var$Graph.prototype.sinks = function() {\n    var self = this;\n    return $dE3aD.filter(this.nodes(), function(v) {\n        return $dE3aD.isEmpty(self._out[v]);\n    });\n};\n$abbbdff860cc0ef5$var$Graph.prototype.setNodes = function(vs, value) {\n    var args = arguments;\n    var self = this;\n    $dE3aD.each(vs, function(v) {\n        if (args.length > 1) self.setNode(v, value);\n        else self.setNode(v);\n    });\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.setNode = function(v, value) {\n    if ($dE3aD.has(this._nodes, v)) {\n        if (arguments.length > 1) this._nodes[v] = value;\n        return this;\n    }\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n        this._parent[v] = $abbbdff860cc0ef5$var$GRAPH_NODE;\n        this._children[v] = {};\n        this._children[$abbbdff860cc0ef5$var$GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.node = function(v) {\n    return this._nodes[v];\n};\n$abbbdff860cc0ef5$var$Graph.prototype.hasNode = function(v) {\n    return $dE3aD.has(this._nodes, v);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.removeNode = function(v) {\n    var self = this;\n    if ($dE3aD.has(this._nodes, v)) {\n        var removeEdge = function(e) {\n            self.removeEdge(self._edgeObjs[e]);\n        };\n        delete this._nodes[v];\n        if (this._isCompound) {\n            this._removeFromParentsChildList(v);\n            delete this._parent[v];\n            $dE3aD.each(this.children(v), function(child) {\n                self.setParent(child);\n            });\n            delete this._children[v];\n        }\n        $dE3aD.each($dE3aD.keys(this._in[v]), removeEdge);\n        delete this._in[v];\n        delete this._preds[v];\n        $dE3aD.each($dE3aD.keys(this._out[v]), removeEdge);\n        delete this._out[v];\n        delete this._sucs[v];\n        --this._nodeCount;\n    }\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.setParent = function(v, parent) {\n    if (!this._isCompound) throw new Error(\"Cannot set parent in a non-compound graph\");\n    if ($dE3aD.isUndefined(parent)) parent = $abbbdff860cc0ef5$var$GRAPH_NODE;\n    else {\n        // Coerce parent to string\n        parent += \"\";\n        for(var ancestor = parent; !$dE3aD.isUndefined(ancestor); ancestor = this.parent(ancestor)){\n            if (ancestor === v) throw new Error(\"Setting \" + parent + \" as parent of \" + v + \" would create a cycle\");\n        }\n        this.setNode(parent);\n    }\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype._removeFromParentsChildList = function(v) {\n    delete this._children[this._parent[v]][v];\n};\n$abbbdff860cc0ef5$var$Graph.prototype.parent = function(v) {\n    if (this._isCompound) {\n        var parent = this._parent[v];\n        if (parent !== $abbbdff860cc0ef5$var$GRAPH_NODE) return parent;\n    }\n};\n$abbbdff860cc0ef5$var$Graph.prototype.children = function(v) {\n    if ($dE3aD.isUndefined(v)) v = $abbbdff860cc0ef5$var$GRAPH_NODE;\n    if (this._isCompound) {\n        var children = this._children[v];\n        if (children) return $dE3aD.keys(children);\n    } else if (v === $abbbdff860cc0ef5$var$GRAPH_NODE) return this.nodes();\n    else if (this.hasNode(v)) return [];\n};\n$abbbdff860cc0ef5$var$Graph.prototype.predecessors = function(v) {\n    var predsV = this._preds[v];\n    if (predsV) return $dE3aD.keys(predsV);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.successors = function(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) return $dE3aD.keys(sucsV);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.neighbors = function(v) {\n    var preds = this.predecessors(v);\n    if (preds) return $dE3aD.union(preds, this.successors(v));\n};\n$abbbdff860cc0ef5$var$Graph.prototype.isLeaf = function(v) {\n    var neighbors;\n    if (this.isDirected()) neighbors = this.successors(v);\n    else neighbors = this.neighbors(v);\n    return neighbors.length === 0;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.filterNodes = function(filter) {\n    var copy = new this.constructor({\n        directed: this._isDirected,\n        multigraph: this._isMultigraph,\n        compound: this._isCompound\n    });\n    copy.setGraph(this.graph());\n    var self = this;\n    $dE3aD.each(this._nodes, function(value, v) {\n        if (filter(v)) copy.setNode(v, value);\n    });\n    $dE3aD.each(this._edgeObjs, function(e) {\n        if (copy.hasNode(e.v) && copy.hasNode(e.w)) copy.setEdge(e, self.edge(e));\n    });\n    var parents = {};\n    function findParent(v) {\n        var parent = self.parent(v);\n        if (parent === undefined || copy.hasNode(parent)) {\n            parents[v] = parent;\n            return parent;\n        } else if (parent in parents) return parents[parent];\n        else return findParent(parent);\n    }\n    if (this._isCompound) $dE3aD.each(copy.nodes(), function(v) {\n        copy.setParent(v, findParent(v));\n    });\n    return copy;\n};\n/* === Edge functions ========== */ $abbbdff860cc0ef5$var$Graph.prototype.setDefaultEdgeLabel = function(newDefault) {\n    if (!$dE3aD.isFunction(newDefault)) newDefault = $dE3aD.constant(newDefault);\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.edgeCount = function() {\n    return this._edgeCount;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.edges = function() {\n    return $dE3aD.values(this._edgeObjs);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.setPath = function(vs, value) {\n    var self = this;\n    var args = arguments;\n    $dE3aD.reduce(vs, function(v, w) {\n        if (args.length > 1) self.setEdge(v, w, value);\n        else self.setEdge(v, w);\n        return w;\n    });\n    return this;\n};\n/*\n * setEdge(v, w, [value, [name]])\n * setEdge({ v, w, [name] }, [value])\n */ $abbbdff860cc0ef5$var$Graph.prototype.setEdge = function() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n    if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n        v = arg0.v;\n        w = arg0.w;\n        name = arg0.name;\n        if (arguments.length === 2) {\n            value = arguments[1];\n            valueSpecified = true;\n        }\n    } else {\n        v = arg0;\n        w = arguments[1];\n        name = arguments[3];\n        if (arguments.length > 2) {\n            value = arguments[2];\n            valueSpecified = true;\n        }\n    }\n    v = \"\" + v;\n    w = \"\" + w;\n    if (!$dE3aD.isUndefined(name)) name = \"\" + name;\n    var e = $abbbdff860cc0ef5$var$edgeArgsToId(this._isDirected, v, w, name);\n    if ($dE3aD.has(this._edgeLabels, e)) {\n        if (valueSpecified) this._edgeLabels[e] = value;\n        return this;\n    }\n    if (!$dE3aD.isUndefined(name) && !this._isMultigraph) throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n    var edgeObj = $abbbdff860cc0ef5$var$edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    $abbbdff860cc0ef5$var$incrementOrInitEntry(this._preds[w], v);\n    $abbbdff860cc0ef5$var$incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.edge = function(v, w, name) {\n    var e = arguments.length === 1 ? $abbbdff860cc0ef5$var$edgeObjToId(this._isDirected, arguments[0]) : $abbbdff860cc0ef5$var$edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n};\n$abbbdff860cc0ef5$var$Graph.prototype.hasEdge = function(v, w, name) {\n    var e = arguments.length === 1 ? $abbbdff860cc0ef5$var$edgeObjToId(this._isDirected, arguments[0]) : $abbbdff860cc0ef5$var$edgeArgsToId(this._isDirected, v, w, name);\n    return $dE3aD.has(this._edgeLabels, e);\n};\n$abbbdff860cc0ef5$var$Graph.prototype.removeEdge = function(v, w, name) {\n    var e = arguments.length === 1 ? $abbbdff860cc0ef5$var$edgeObjToId(this._isDirected, arguments[0]) : $abbbdff860cc0ef5$var$edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n        v = edge.v;\n        w = edge.w;\n        delete this._edgeLabels[e];\n        delete this._edgeObjs[e];\n        $abbbdff860cc0ef5$var$decrementOrRemoveEntry(this._preds[w], v);\n        $abbbdff860cc0ef5$var$decrementOrRemoveEntry(this._sucs[v], w);\n        delete this._in[w][e];\n        delete this._out[v][e];\n        this._edgeCount--;\n    }\n    return this;\n};\n$abbbdff860cc0ef5$var$Graph.prototype.inEdges = function(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n        var edges = $dE3aD.values(inV);\n        if (!u) return edges;\n        return $dE3aD.filter(edges, function(edge) {\n            return edge.v === u;\n        });\n    }\n};\n$abbbdff860cc0ef5$var$Graph.prototype.outEdges = function(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n        var edges = $dE3aD.values(outV);\n        if (!w) return edges;\n        return $dE3aD.filter(edges, function(edge) {\n            return edge.w === w;\n        });\n    }\n};\n$abbbdff860cc0ef5$var$Graph.prototype.nodeEdges = function(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) return inEdges.concat(this.outEdges(v, w));\n};\nfunction $abbbdff860cc0ef5$var$incrementOrInitEntry(map, k) {\n    if (map[k]) map[k]++;\n    else map[k] = 1;\n}\nfunction $abbbdff860cc0ef5$var$decrementOrRemoveEntry(map, k) {\n    if (!--map[k]) delete map[k];\n}\nfunction $abbbdff860cc0ef5$var$edgeArgsToId(isDirected, v_, w_, name) {\n    var v = \"\" + v_;\n    var w = \"\" + w_;\n    if (!isDirected && v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    return v + $abbbdff860cc0ef5$var$EDGE_KEY_DELIM + w + $abbbdff860cc0ef5$var$EDGE_KEY_DELIM + ($dE3aD.isUndefined(name) ? $abbbdff860cc0ef5$var$DEFAULT_EDGE_NAME : name);\n}\nfunction $abbbdff860cc0ef5$var$edgeArgsToObj(isDirected, v_, w_, name) {\n    var v = \"\" + v_;\n    var w = \"\" + w_;\n    if (!isDirected && v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    var edgeObj = {\n        v: v,\n        w: w\n    };\n    if (name) edgeObj.name = name;\n    return edgeObj;\n}\nfunction $abbbdff860cc0ef5$var$edgeObjToId(isDirected, edgeObj) {\n    return $abbbdff860cc0ef5$var$edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n\n});\nparcelRegister(\"dE3aD\", function(module, exports) {\n/* global window */ var $9ef17868adc3ead7$var$lodash;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntry {\n    $9ef17868adc3ead7$var$lodash = {\n        clone: (parcelRequire(\"kIqz2\")),\n        constant: (parcelRequire(\"b9IkD\")),\n        each: (parcelRequire(\"l9hnn\")),\n        filter: (parcelRequire(\"31LU8\")),\n        has: (parcelRequire(\"9GT8b\")),\n        isArray: (parcelRequire(\"6Lnro\")),\n        isEmpty: (parcelRequire(\"8ku2x\")),\n        isFunction: (parcelRequire(\"jszNw\")),\n        isUndefined: (parcelRequire(\"5VjJh\")),\n        keys: (parcelRequire(\"j7Pgn\")),\n        map: (parcelRequire(\"2TKBM\")),\n        reduce: (parcelRequire(\"9NasI\")),\n        size: (parcelRequire(\"Wt5Gh\")),\n        transform: (parcelRequire(\"h1I6F\")),\n        union: (parcelRequire(\"eWafo\")),\n        values: (parcelRequire(\"eolCs\"))\n    };\n} catch (e) {\n// continue regardless of error\n}\nif (!$9ef17868adc3ead7$var$lodash) $9ef17868adc3ead7$var$lodash = window._;\nmodule.exports = $9ef17868adc3ead7$var$lodash;\n\n});\nparcelRegister(\"kIqz2\", function(module, exports) {\n\nvar $kzaQ8 = parcelRequire(\"kzaQ8\");\n/** Used to compose bitmasks for cloning. */ var $f14c85ccf4a5b189$var$CLONE_SYMBOLS_FLAG = 4;\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */ function $f14c85ccf4a5b189$var$clone(value) {\n    return $kzaQ8(value, $f14c85ccf4a5b189$var$CLONE_SYMBOLS_FLAG);\n}\nmodule.exports = $f14c85ccf4a5b189$var$clone;\n\n});\nparcelRegister(\"kzaQ8\", function(module, exports) {\n\nvar $abWak = parcelRequire(\"abWak\");\n\nvar $jqArt = parcelRequire(\"jqArt\");\n\nvar $9isRA = parcelRequire(\"9isRA\");\n\nvar $sviK3 = parcelRequire(\"sviK3\");\n\nvar $lwZY6 = parcelRequire(\"lwZY6\");\n\nvar $l0BR0 = parcelRequire(\"l0BR0\");\n\nvar $4qSSq = parcelRequire(\"4qSSq\");\n\nvar $fCZ0B = parcelRequire(\"fCZ0B\");\n\nvar $ixbZL = parcelRequire(\"ixbZL\");\n\nvar $2viWo = parcelRequire(\"2viWo\");\n\nvar $63iG1 = parcelRequire(\"63iG1\");\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $kWuVO = parcelRequire(\"kWuVO\");\n\nvar $hcU9w = parcelRequire(\"hcU9w\");\n\nvar $fb83i = parcelRequire(\"fb83i\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $kBTZK = parcelRequire(\"kBTZK\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $fNGSJ = parcelRequire(\"fNGSJ\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/** Used to compose bitmasks for cloning. */ var $ef8f7c1e1e396ef4$var$CLONE_DEEP_FLAG = 1, $ef8f7c1e1e396ef4$var$CLONE_FLAT_FLAG = 2, $ef8f7c1e1e396ef4$var$CLONE_SYMBOLS_FLAG = 4;\n/** `Object#toString` result references. */ var $ef8f7c1e1e396ef4$var$argsTag = '[object Arguments]', $ef8f7c1e1e396ef4$var$arrayTag = '[object Array]', $ef8f7c1e1e396ef4$var$boolTag = '[object Boolean]', $ef8f7c1e1e396ef4$var$dateTag = '[object Date]', $ef8f7c1e1e396ef4$var$errorTag = '[object Error]', $ef8f7c1e1e396ef4$var$funcTag = '[object Function]', $ef8f7c1e1e396ef4$var$genTag = '[object GeneratorFunction]', $ef8f7c1e1e396ef4$var$mapTag = '[object Map]', $ef8f7c1e1e396ef4$var$numberTag = '[object Number]', $ef8f7c1e1e396ef4$var$objectTag = '[object Object]', $ef8f7c1e1e396ef4$var$regexpTag = '[object RegExp]', $ef8f7c1e1e396ef4$var$setTag = '[object Set]', $ef8f7c1e1e396ef4$var$stringTag = '[object String]', $ef8f7c1e1e396ef4$var$symbolTag = '[object Symbol]', $ef8f7c1e1e396ef4$var$weakMapTag = '[object WeakMap]';\nvar $ef8f7c1e1e396ef4$var$arrayBufferTag = '[object ArrayBuffer]', $ef8f7c1e1e396ef4$var$dataViewTag = '[object DataView]', $ef8f7c1e1e396ef4$var$float32Tag = '[object Float32Array]', $ef8f7c1e1e396ef4$var$float64Tag = '[object Float64Array]', $ef8f7c1e1e396ef4$var$int8Tag = '[object Int8Array]', $ef8f7c1e1e396ef4$var$int16Tag = '[object Int16Array]', $ef8f7c1e1e396ef4$var$int32Tag = '[object Int32Array]', $ef8f7c1e1e396ef4$var$uint8Tag = '[object Uint8Array]', $ef8f7c1e1e396ef4$var$uint8ClampedTag = '[object Uint8ClampedArray]', $ef8f7c1e1e396ef4$var$uint16Tag = '[object Uint16Array]', $ef8f7c1e1e396ef4$var$uint32Tag = '[object Uint32Array]';\n/** Used to identify `toStringTag` values supported by `_.clone`. */ var $ef8f7c1e1e396ef4$var$cloneableTags = {};\n$ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$argsTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$arrayTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$arrayBufferTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$dataViewTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$boolTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$dateTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$float32Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$float64Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$int8Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$int16Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$int32Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$mapTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$numberTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$objectTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$regexpTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$setTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$stringTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$symbolTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$uint8Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$uint8ClampedTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$uint16Tag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$uint32Tag] = true;\n$ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$errorTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$funcTag] = $ef8f7c1e1e396ef4$var$cloneableTags[$ef8f7c1e1e396ef4$var$weakMapTag] = false;\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */ function $ef8f7c1e1e396ef4$var$baseClone(value, bitmask, customizer, key, object, stack) {\n    var result, isDeep = bitmask & $ef8f7c1e1e396ef4$var$CLONE_DEEP_FLAG, isFlat = bitmask & $ef8f7c1e1e396ef4$var$CLONE_FLAT_FLAG, isFull = bitmask & $ef8f7c1e1e396ef4$var$CLONE_SYMBOLS_FLAG;\n    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);\n    if (result !== undefined) return result;\n    if (!$5M7nH(value)) return value;\n    var isArr = $6Lnro(value);\n    if (isArr) {\n        result = $kWuVO(value);\n        if (!isDeep) return $4qSSq(value, result);\n    } else {\n        var tag = $fMYcx(value), isFunc = tag == $ef8f7c1e1e396ef4$var$funcTag || tag == $ef8f7c1e1e396ef4$var$genTag;\n        if ($8yjfX(value)) return $l0BR0(value, isDeep);\n        if (tag == $ef8f7c1e1e396ef4$var$objectTag || tag == $ef8f7c1e1e396ef4$var$argsTag || isFunc && !object) {\n            result = isFlat || isFunc ? {} : $fb83i(value);\n            if (!isDeep) return isFlat ? $ixbZL(value, $lwZY6(result, value)) : $fCZ0B(value, $sviK3(result, value));\n        } else {\n            if (!$ef8f7c1e1e396ef4$var$cloneableTags[tag]) return object ? value : {};\n            result = $hcU9w(value, tag, isDeep);\n        }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new $abWak);\n    var stacked = stack.get(value);\n    if (stacked) return stacked;\n    stack.set(value, result);\n    if ($fNGSJ(value)) value.forEach(function(subValue) {\n        result.add($ef8f7c1e1e396ef4$var$baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n    else if ($kBTZK(value)) value.forEach(function(subValue, key) {\n        result.set(key, $ef8f7c1e1e396ef4$var$baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    var keysFunc = isFull ? isFlat ? $63iG1 : $2viWo : isFlat ? $6ngQz : $j7Pgn;\n    var props = isArr ? undefined : keysFunc(value);\n    $jqArt(props || value, function(subValue, key) {\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        // Recursively populate clone (susceptible to call stack limits).\n        $9isRA(result, key, $ef8f7c1e1e396ef4$var$baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    return result;\n}\nmodule.exports = $ef8f7c1e1e396ef4$var$baseClone;\n\n});\nparcelRegister(\"abWak\", function(module, exports) {\n\nvar $nSdhU = parcelRequire(\"nSdhU\");\n\nvar $5e7qB = parcelRequire(\"5e7qB\");\n\nvar $lwBwT = parcelRequire(\"lwBwT\");\n\nvar $jkZPF = parcelRequire(\"jkZPF\");\n\nvar $kPppJ = parcelRequire(\"kPppJ\");\n\nvar $4ai1a = parcelRequire(\"4ai1a\");\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function $76b80cf11a0f2b5c$var$Stack(entries) {\n    var data = this.__data__ = new $nSdhU(entries);\n    this.size = data.size;\n}\n// Add methods to `Stack`.\n$76b80cf11a0f2b5c$var$Stack.prototype.clear = $5e7qB;\n$76b80cf11a0f2b5c$var$Stack.prototype['delete'] = $lwBwT;\n$76b80cf11a0f2b5c$var$Stack.prototype.get = $jkZPF;\n$76b80cf11a0f2b5c$var$Stack.prototype.has = $kPppJ;\n$76b80cf11a0f2b5c$var$Stack.prototype.set = $4ai1a;\nmodule.exports = $76b80cf11a0f2b5c$var$Stack;\n\n});\nparcelRegister(\"nSdhU\", function(module, exports) {\n\nvar $e0n50 = parcelRequire(\"e0n50\");\n\nvar $5hsQa = parcelRequire(\"5hsQa\");\n\nvar $5BwSU = parcelRequire(\"5BwSU\");\n\nvar $dSo0a = parcelRequire(\"dSo0a\");\n\nvar $al82B = parcelRequire(\"al82B\");\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function $047c33bbac81ea74$var$ListCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `ListCache`.\n$047c33bbac81ea74$var$ListCache.prototype.clear = $e0n50;\n$047c33bbac81ea74$var$ListCache.prototype['delete'] = $5hsQa;\n$047c33bbac81ea74$var$ListCache.prototype.get = $5BwSU;\n$047c33bbac81ea74$var$ListCache.prototype.has = $dSo0a;\n$047c33bbac81ea74$var$ListCache.prototype.set = $al82B;\nmodule.exports = $047c33bbac81ea74$var$ListCache;\n\n});\nparcelRegister(\"e0n50\", function(module, exports) {\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */ function $a322f7ec4896a5f4$var$listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n}\nmodule.exports = $a322f7ec4896a5f4$var$listCacheClear;\n\n});\n\nparcelRegister(\"5hsQa\", function(module, exports) {\n\nvar $6Lgbm = parcelRequire(\"6Lgbm\");\n/** Used for built-in method references. */ var $3d84e967a041191e$var$arrayProto = Array.prototype;\n/** Built-in value references. */ var $3d84e967a041191e$var$splice = $3d84e967a041191e$var$arrayProto.splice;\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function $3d84e967a041191e$var$listCacheDelete(key) {\n    var data = this.__data__, index = $6Lgbm(data, key);\n    if (index < 0) return false;\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) data.pop();\n    else $3d84e967a041191e$var$splice.call(data, index, 1);\n    --this.size;\n    return true;\n}\nmodule.exports = $3d84e967a041191e$var$listCacheDelete;\n\n});\nparcelRegister(\"6Lgbm\", function(module, exports) {\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function $4ec3af52623f163b$var$assocIndexOf(array, key) {\n    var length = array.length;\n    while(length--){\n        if ($gJ8Nu(array[length][0], key)) return length;\n    }\n    return -1;\n}\nmodule.exports = $4ec3af52623f163b$var$assocIndexOf;\n\n});\nparcelRegister(\"gJ8Nu\", function(module, exports) {\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */ function $c2d7ac3c82021049$var$eq(value, other) {\n    return value === other || value !== value && other !== other;\n}\nmodule.exports = $c2d7ac3c82021049$var$eq;\n\n});\n\n\n\nparcelRegister(\"5BwSU\", function(module, exports) {\n\nvar $6Lgbm = parcelRequire(\"6Lgbm\");\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function $4149eaa12270ab44$var$listCacheGet(key) {\n    var data = this.__data__, index = $6Lgbm(data, key);\n    return index < 0 ? undefined : data[index][1];\n}\nmodule.exports = $4149eaa12270ab44$var$listCacheGet;\n\n});\n\nparcelRegister(\"dSo0a\", function(module, exports) {\n\nvar $6Lgbm = parcelRequire(\"6Lgbm\");\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function $a1a2efbe4372d6b7$var$listCacheHas(key) {\n    return $6Lgbm(this.__data__, key) > -1;\n}\nmodule.exports = $a1a2efbe4372d6b7$var$listCacheHas;\n\n});\n\nparcelRegister(\"al82B\", function(module, exports) {\n\nvar $6Lgbm = parcelRequire(\"6Lgbm\");\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */ function $78721a5692f833a0$var$listCacheSet(key, value) {\n    var data = this.__data__, index = $6Lgbm(data, key);\n    if (index < 0) {\n        ++this.size;\n        data.push([\n            key,\n            value\n        ]);\n    } else data[index][1] = value;\n    return this;\n}\nmodule.exports = $78721a5692f833a0$var$listCacheSet;\n\n});\n\n\nparcelRegister(\"5e7qB\", function(module, exports) {\n\nvar $nSdhU = parcelRequire(\"nSdhU\");\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */ function $3ce405a18c5ebd17$var$stackClear() {\n    this.__data__ = new $nSdhU;\n    this.size = 0;\n}\nmodule.exports = $3ce405a18c5ebd17$var$stackClear;\n\n});\n\nparcelRegister(\"lwBwT\", function(module, exports) {\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function $fab9b2b232f152de$var$stackDelete(key) {\n    var data = this.__data__, result = data['delete'](key);\n    this.size = data.size;\n    return result;\n}\nmodule.exports = $fab9b2b232f152de$var$stackDelete;\n\n});\n\nparcelRegister(\"jkZPF\", function(module, exports) {\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function $e13fd92f4b438e95$var$stackGet(key) {\n    return this.__data__.get(key);\n}\nmodule.exports = $e13fd92f4b438e95$var$stackGet;\n\n});\n\nparcelRegister(\"kPppJ\", function(module, exports) {\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function $f29c48bd56ededd9$var$stackHas(key) {\n    return this.__data__.has(key);\n}\nmodule.exports = $f29c48bd56ededd9$var$stackHas;\n\n});\n\nparcelRegister(\"4ai1a\", function(module, exports) {\n\nvar $nSdhU = parcelRequire(\"nSdhU\");\n\nvar $krNFA = parcelRequire(\"krNFA\");\n\nvar $hmXFj = parcelRequire(\"hmXFj\");\n/** Used as the size to enable large array optimizations. */ var $30861294fbf1d724$var$LARGE_ARRAY_SIZE = 200;\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */ function $30861294fbf1d724$var$stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof $nSdhU) {\n        var pairs = data.__data__;\n        if (!$krNFA || pairs.length < $30861294fbf1d724$var$LARGE_ARRAY_SIZE - 1) {\n            pairs.push([\n                key,\n                value\n            ]);\n            this.size = ++data.size;\n            return this;\n        }\n        data = this.__data__ = new $hmXFj(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n}\nmodule.exports = $30861294fbf1d724$var$stackSet;\n\n});\nparcelRegister(\"krNFA\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/* Built-in method references that are verified to be native. */ var $ee2cdba6ed8fd054$var$Map = $4J8an($6c6tI, 'Map');\nmodule.exports = $ee2cdba6ed8fd054$var$Map;\n\n});\nparcelRegister(\"4J8an\", function(module, exports) {\n\nvar $24c2f = parcelRequire(\"24c2f\");\n\nvar $8P65K = parcelRequire(\"8P65K\");\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */ function $3711b30e3c587969$var$getNative(object, key) {\n    var value = $8P65K(object, key);\n    return $24c2f(value) ? value : undefined;\n}\nmodule.exports = $3711b30e3c587969$var$getNative;\n\n});\nparcelRegister(\"24c2f\", function(module, exports) {\n\nvar $jszNw = parcelRequire(\"jszNw\");\n\nvar $iUDp4 = parcelRequire(\"iUDp4\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $oJAWi = parcelRequire(\"oJAWi\");\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */ var $18154a6d5586aeca$var$reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */ var $18154a6d5586aeca$var$reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used for built-in method references. */ var $18154a6d5586aeca$var$funcProto = Function.prototype, $18154a6d5586aeca$var$objectProto = Object.prototype;\n/** Used to resolve the decompiled source of functions. */ var $18154a6d5586aeca$var$funcToString = $18154a6d5586aeca$var$funcProto.toString;\n/** Used to check objects for own properties. */ var $18154a6d5586aeca$var$hasOwnProperty = $18154a6d5586aeca$var$objectProto.hasOwnProperty;\n/** Used to detect if a method is native. */ var $18154a6d5586aeca$var$reIsNative = RegExp('^' + $18154a6d5586aeca$var$funcToString.call($18154a6d5586aeca$var$hasOwnProperty).replace($18154a6d5586aeca$var$reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */ function $18154a6d5586aeca$var$baseIsNative(value) {\n    if (!$5M7nH(value) || $iUDp4(value)) return false;\n    var pattern = $jszNw(value) ? $18154a6d5586aeca$var$reIsNative : $18154a6d5586aeca$var$reIsHostCtor;\n    return pattern.test($oJAWi(value));\n}\nmodule.exports = $18154a6d5586aeca$var$baseIsNative;\n\n});\nparcelRegister(\"jszNw\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n/** `Object#toString` result references. */ var $e2ac668e8f892e3f$var$asyncTag = '[object AsyncFunction]', $e2ac668e8f892e3f$var$funcTag = '[object Function]', $e2ac668e8f892e3f$var$genTag = '[object GeneratorFunction]', $e2ac668e8f892e3f$var$proxyTag = '[object Proxy]';\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */ function $e2ac668e8f892e3f$var$isFunction(value) {\n    if (!$5M7nH(value)) return false;\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = $fuLlh(value);\n    return tag == $e2ac668e8f892e3f$var$funcTag || tag == $e2ac668e8f892e3f$var$genTag || tag == $e2ac668e8f892e3f$var$asyncTag || tag == $e2ac668e8f892e3f$var$proxyTag;\n}\nmodule.exports = $e2ac668e8f892e3f$var$isFunction;\n\n});\nparcelRegister(\"fuLlh\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n\nvar $cDy9R = parcelRequire(\"cDy9R\");\n\nvar $4cbWB = parcelRequire(\"4cbWB\");\n/** `Object#toString` result references. */ var $b47e6184f4c9f4e2$var$nullTag = '[object Null]', $b47e6184f4c9f4e2$var$undefinedTag = '[object Undefined]';\n/** Built-in value references. */ var $b47e6184f4c9f4e2$var$symToStringTag = $bx7XH ? $bx7XH.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function $b47e6184f4c9f4e2$var$baseGetTag(value) {\n    if (value == null) return value === undefined ? $b47e6184f4c9f4e2$var$undefinedTag : $b47e6184f4c9f4e2$var$nullTag;\n    return $b47e6184f4c9f4e2$var$symToStringTag && $b47e6184f4c9f4e2$var$symToStringTag in Object(value) ? $cDy9R(value) : $4cbWB(value);\n}\nmodule.exports = $b47e6184f4c9f4e2$var$baseGetTag;\n\n});\nparcelRegister(\"bx7XH\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/** Built-in value references. */ var $022ab99c54b0f974$var$Symbol = $6c6tI.Symbol;\nmodule.exports = $022ab99c54b0f974$var$Symbol;\n\n});\nparcelRegister(\"6c6tI\", function(module, exports) {\n\nvar $kXUyy = parcelRequire(\"kXUyy\");\n/** Detect free variable `self`. */ var $4828e37eb1667bff$var$freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var $4828e37eb1667bff$var$root = $kXUyy || $4828e37eb1667bff$var$freeSelf || Function('return this')();\nmodule.exports = $4828e37eb1667bff$var$root;\n\n});\nparcelRegister(\"kXUyy\", function(module, exports) {\n/** Detect free variable `global` from Node.js. */ var $f43530384b453fea$var$freeGlobal = typeof $parcel$global == 'object' && $parcel$global && $parcel$global.Object === Object && $parcel$global;\nmodule.exports = $f43530384b453fea$var$freeGlobal;\n\n});\n\n\n\nparcelRegister(\"cDy9R\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n/** Used for built-in method references. */ var $93339f9ed5fb3826$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $93339f9ed5fb3826$var$hasOwnProperty = $93339f9ed5fb3826$var$objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var $93339f9ed5fb3826$var$nativeObjectToString = $93339f9ed5fb3826$var$objectProto.toString;\n/** Built-in value references. */ var $93339f9ed5fb3826$var$symToStringTag = $bx7XH ? $bx7XH.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function $93339f9ed5fb3826$var$getRawTag(value) {\n    var isOwn = $93339f9ed5fb3826$var$hasOwnProperty.call(value, $93339f9ed5fb3826$var$symToStringTag), tag = value[$93339f9ed5fb3826$var$symToStringTag];\n    try {\n        value[$93339f9ed5fb3826$var$symToStringTag] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = $93339f9ed5fb3826$var$nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) value[$93339f9ed5fb3826$var$symToStringTag] = tag;\n        else delete value[$93339f9ed5fb3826$var$symToStringTag];\n    }\n    return result;\n}\nmodule.exports = $93339f9ed5fb3826$var$getRawTag;\n\n});\n\nparcelRegister(\"4cbWB\", function(module, exports) {\n/** Used for built-in method references. */ var $30e18c4f146c6604$var$objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var $30e18c4f146c6604$var$nativeObjectToString = $30e18c4f146c6604$var$objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function $30e18c4f146c6604$var$objectToString(value) {\n    return $30e18c4f146c6604$var$nativeObjectToString.call(value);\n}\nmodule.exports = $30e18c4f146c6604$var$objectToString;\n\n});\n\n\nparcelRegister(\"5M7nH\", function(module, exports) {\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ function $434729394ffc0578$var$isObject(value) {\n    var type = typeof value;\n    return value != null && (type == 'object' || type == 'function');\n}\nmodule.exports = $434729394ffc0578$var$isObject;\n\n});\n\n\nparcelRegister(\"iUDp4\", function(module, exports) {\n\nvar $byoEp = parcelRequire(\"byoEp\");\n/** Used to detect methods masquerading as native. */ var $dc4c05a43effb81f$var$maskSrcKey = function() {\n    var uid = /[^.]+$/.exec($byoEp && $byoEp.keys && $byoEp.keys.IE_PROTO || '');\n    return uid ? 'Symbol(src)_1.' + uid : '';\n}();\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */ function $dc4c05a43effb81f$var$isMasked(func) {\n    return !!$dc4c05a43effb81f$var$maskSrcKey && $dc4c05a43effb81f$var$maskSrcKey in func;\n}\nmodule.exports = $dc4c05a43effb81f$var$isMasked;\n\n});\nparcelRegister(\"byoEp\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/** Used to detect overreaching core-js shims. */ var $8695fdceb6b3f4ed$var$coreJsData = $6c6tI[\"__core-js_shared__\"];\nmodule.exports = $8695fdceb6b3f4ed$var$coreJsData;\n\n});\n\n\nparcelRegister(\"oJAWi\", function(module, exports) {\n/** Used for built-in method references. */ var $04a59c2ea517d01f$var$funcProto = Function.prototype;\n/** Used to resolve the decompiled source of functions. */ var $04a59c2ea517d01f$var$funcToString = $04a59c2ea517d01f$var$funcProto.toString;\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */ function $04a59c2ea517d01f$var$toSource(func) {\n    if (func != null) {\n        try {\n            return $04a59c2ea517d01f$var$funcToString.call(func);\n        } catch (e) {}\n        try {\n            return func + '';\n        } catch (e) {}\n    }\n    return '';\n}\nmodule.exports = $04a59c2ea517d01f$var$toSource;\n\n});\n\n\nparcelRegister(\"8P65K\", function(module, exports) {\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function $66c7cfd6f0b3cc7f$var$getValue(object, key) {\n    return object == null ? undefined : object[key];\n}\nmodule.exports = $66c7cfd6f0b3cc7f$var$getValue;\n\n});\n\n\n\nparcelRegister(\"hmXFj\", function(module, exports) {\n\nvar $9wvKI = parcelRequire(\"9wvKI\");\n\nvar $bRsFs = parcelRequire(\"bRsFs\");\n\nvar $3gWGz = parcelRequire(\"3gWGz\");\n\nvar $jySyt = parcelRequire(\"jySyt\");\n\nvar $6sETD = parcelRequire(\"6sETD\");\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function $ca52c60406ed3ce3$var$MapCache(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `MapCache`.\n$ca52c60406ed3ce3$var$MapCache.prototype.clear = $9wvKI;\n$ca52c60406ed3ce3$var$MapCache.prototype['delete'] = $bRsFs;\n$ca52c60406ed3ce3$var$MapCache.prototype.get = $3gWGz;\n$ca52c60406ed3ce3$var$MapCache.prototype.has = $jySyt;\n$ca52c60406ed3ce3$var$MapCache.prototype.set = $6sETD;\nmodule.exports = $ca52c60406ed3ce3$var$MapCache;\n\n});\nparcelRegister(\"9wvKI\", function(module, exports) {\n\nvar $5no0Y = parcelRequire(\"5no0Y\");\n\nvar $nSdhU = parcelRequire(\"nSdhU\");\n\nvar $krNFA = parcelRequire(\"krNFA\");\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */ function $6eefbb981140d7c9$var$mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n        'hash': new $5no0Y,\n        'map': new ($krNFA || $nSdhU),\n        'string': new $5no0Y\n    };\n}\nmodule.exports = $6eefbb981140d7c9$var$mapCacheClear;\n\n});\nparcelRegister(\"5no0Y\", function(module, exports) {\n\nvar $i2PMW = parcelRequire(\"i2PMW\");\n\nvar $9GpTD = parcelRequire(\"9GpTD\");\n\nvar $dMNK2 = parcelRequire(\"dMNK2\");\n\nvar $7OSfN = parcelRequire(\"7OSfN\");\n\nvar $kEYBO = parcelRequire(\"kEYBO\");\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */ function $3ea1ba884f7746ce$var$Hash(entries) {\n    var index = -1, length = entries == null ? 0 : entries.length;\n    this.clear();\n    while(++index < length){\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n    }\n}\n// Add methods to `Hash`.\n$3ea1ba884f7746ce$var$Hash.prototype.clear = $i2PMW;\n$3ea1ba884f7746ce$var$Hash.prototype['delete'] = $9GpTD;\n$3ea1ba884f7746ce$var$Hash.prototype.get = $dMNK2;\n$3ea1ba884f7746ce$var$Hash.prototype.has = $7OSfN;\n$3ea1ba884f7746ce$var$Hash.prototype.set = $kEYBO;\nmodule.exports = $3ea1ba884f7746ce$var$Hash;\n\n});\nparcelRegister(\"i2PMW\", function(module, exports) {\n\nvar $11stn = parcelRequire(\"11stn\");\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */ function $d23095f74ff3a799$var$hashClear() {\n    this.__data__ = $11stn ? $11stn(null) : {};\n    this.size = 0;\n}\nmodule.exports = $d23095f74ff3a799$var$hashClear;\n\n});\nparcelRegister(\"11stn\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n/* Built-in method references that are verified to be native. */ var $0bebf8868a36a122$var$nativeCreate = $4J8an(Object, 'create');\nmodule.exports = $0bebf8868a36a122$var$nativeCreate;\n\n});\n\n\nparcelRegister(\"9GpTD\", function(module, exports) {\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function $70cc1fc7d986c02d$var$hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n}\nmodule.exports = $70cc1fc7d986c02d$var$hashDelete;\n\n});\n\nparcelRegister(\"dMNK2\", function(module, exports) {\n\nvar $11stn = parcelRequire(\"11stn\");\n/** Used to stand-in for `undefined` hash values. */ var $a09657b6c9450056$var$HASH_UNDEFINED = '__lodash_hash_undefined__';\n/** Used for built-in method references. */ var $a09657b6c9450056$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $a09657b6c9450056$var$hasOwnProperty = $a09657b6c9450056$var$objectProto.hasOwnProperty;\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function $a09657b6c9450056$var$hashGet(key) {\n    var data = this.__data__;\n    if ($11stn) {\n        var result = data[key];\n        return result === $a09657b6c9450056$var$HASH_UNDEFINED ? undefined : result;\n    }\n    return $a09657b6c9450056$var$hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\nmodule.exports = $a09657b6c9450056$var$hashGet;\n\n});\n\nparcelRegister(\"7OSfN\", function(module, exports) {\n\nvar $11stn = parcelRequire(\"11stn\");\n/** Used for built-in method references. */ var $5b174996fcb05ff7$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $5b174996fcb05ff7$var$hasOwnProperty = $5b174996fcb05ff7$var$objectProto.hasOwnProperty;\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function $5b174996fcb05ff7$var$hashHas(key) {\n    var data = this.__data__;\n    return $11stn ? data[key] !== undefined : $5b174996fcb05ff7$var$hasOwnProperty.call(data, key);\n}\nmodule.exports = $5b174996fcb05ff7$var$hashHas;\n\n});\n\nparcelRegister(\"kEYBO\", function(module, exports) {\n\nvar $11stn = parcelRequire(\"11stn\");\n/** Used to stand-in for `undefined` hash values. */ var $f0a68ebd6a73ec68$var$HASH_UNDEFINED = '__lodash_hash_undefined__';\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */ function $f0a68ebd6a73ec68$var$hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = $11stn && value === undefined ? $f0a68ebd6a73ec68$var$HASH_UNDEFINED : value;\n    return this;\n}\nmodule.exports = $f0a68ebd6a73ec68$var$hashSet;\n\n});\n\n\n\nparcelRegister(\"bRsFs\", function(module, exports) {\n\nvar $dFA1a = parcelRequire(\"dFA1a\");\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */ function $8a2ae1c0593d0d41$var$mapCacheDelete(key) {\n    var result = $dFA1a(this, key)['delete'](key);\n    this.size -= result ? 1 : 0;\n    return result;\n}\nmodule.exports = $8a2ae1c0593d0d41$var$mapCacheDelete;\n\n});\nparcelRegister(\"dFA1a\", function(module, exports) {\n\nvar $c2ceU = parcelRequire(\"c2ceU\");\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */ function $9f3b0b11e404ed79$var$getMapData(map, key) {\n    var data = map.__data__;\n    return $c2ceU(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n}\nmodule.exports = $9f3b0b11e404ed79$var$getMapData;\n\n});\nparcelRegister(\"c2ceU\", function(module, exports) {\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */ function $8c2f2a7800f99260$var$isKeyable(value) {\n    var type = typeof value;\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n}\nmodule.exports = $8c2f2a7800f99260$var$isKeyable;\n\n});\n\n\n\nparcelRegister(\"3gWGz\", function(module, exports) {\n\nvar $dFA1a = parcelRequire(\"dFA1a\");\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */ function $262063725b5ebc9e$var$mapCacheGet(key) {\n    return $dFA1a(this, key).get(key);\n}\nmodule.exports = $262063725b5ebc9e$var$mapCacheGet;\n\n});\n\nparcelRegister(\"jySyt\", function(module, exports) {\n\nvar $dFA1a = parcelRequire(\"dFA1a\");\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function $e3db82c968c6293e$var$mapCacheHas(key) {\n    return $dFA1a(this, key).has(key);\n}\nmodule.exports = $e3db82c968c6293e$var$mapCacheHas;\n\n});\n\nparcelRegister(\"6sETD\", function(module, exports) {\n\nvar $dFA1a = parcelRequire(\"dFA1a\");\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */ function $4b4514c25a855fe5$var$mapCacheSet(key, value) {\n    var data = $dFA1a(this, key), size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n}\nmodule.exports = $4b4514c25a855fe5$var$mapCacheSet;\n\n});\n\n\n\n\nparcelRegister(\"jqArt\", function(module, exports) {\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */ function $e24cb6a868eeaf5d$var$arrayEach(array, iteratee) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (iteratee(array[index], index, array) === false) break;\n    }\n    return array;\n}\nmodule.exports = $e24cb6a868eeaf5d$var$arrayEach;\n\n});\n\nparcelRegister(\"9isRA\", function(module, exports) {\n\nvar $hJTMd = parcelRequire(\"hJTMd\");\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n/** Used for built-in method references. */ var $6c4c2f22cfddb999$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $6c4c2f22cfddb999$var$hasOwnProperty = $6c4c2f22cfddb999$var$objectProto.hasOwnProperty;\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function $6c4c2f22cfddb999$var$assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!($6c4c2f22cfddb999$var$hasOwnProperty.call(object, key) && $gJ8Nu(objValue, value)) || value === undefined && !(key in object)) $hJTMd(object, key, value);\n}\nmodule.exports = $6c4c2f22cfddb999$var$assignValue;\n\n});\nparcelRegister(\"hJTMd\", function(module, exports) {\n\nvar $u8Dni = parcelRequire(\"u8Dni\");\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function $cea1e7b8d97071dd$var$baseAssignValue(object, key, value) {\n    if (key == '__proto__' && $u8Dni) $u8Dni(object, key, {\n        'configurable': true,\n        'enumerable': true,\n        'value': value,\n        'writable': true\n    });\n    else object[key] = value;\n}\nmodule.exports = $cea1e7b8d97071dd$var$baseAssignValue;\n\n});\nparcelRegister(\"u8Dni\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\nvar $05a980011bfd032f$var$defineProperty = function() {\n    try {\n        var func = $4J8an(Object, 'defineProperty');\n        func({}, '', {});\n        return func;\n    } catch (e) {}\n}();\nmodule.exports = $05a980011bfd032f$var$defineProperty;\n\n});\n\n\n\nparcelRegister(\"sviK3\", function(module, exports) {\n\nvar $awXOT = parcelRequire(\"awXOT\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */ function $055ae56c498c1d55$var$baseAssign(object, source) {\n    return object && $awXOT(source, $j7Pgn(source), object);\n}\nmodule.exports = $055ae56c498c1d55$var$baseAssign;\n\n});\nparcelRegister(\"awXOT\", function(module, exports) {\n\nvar $9isRA = parcelRequire(\"9isRA\");\n\nvar $hJTMd = parcelRequire(\"hJTMd\");\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */ function $7aab4b7ef9b36080$var$copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n    var index = -1, length = props.length;\n    while(++index < length){\n        var key = props[index];\n        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;\n        if (newValue === undefined) newValue = source[key];\n        if (isNew) $hJTMd(object, key, newValue);\n        else $9isRA(object, key, newValue);\n    }\n    return object;\n}\nmodule.exports = $7aab4b7ef9b36080$var$copyObject;\n\n});\n\nparcelRegister(\"j7Pgn\", function(module, exports) {\n\nvar $5j16r = parcelRequire(\"5j16r\");\n\nvar $2FU6Q = parcelRequire(\"2FU6Q\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */ function $dec66f92d088a00d$var$keys(object) {\n    return $1AdOh(object) ? $5j16r(object) : $2FU6Q(object);\n}\nmodule.exports = $dec66f92d088a00d$var$keys;\n\n});\nparcelRegister(\"5j16r\", function(module, exports) {\n\nvar $gSPEM = parcelRequire(\"gSPEM\");\n\nvar $2bPgf = parcelRequire(\"2bPgf\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $lNCBD = parcelRequire(\"lNCBD\");\n\nvar $3562c = parcelRequire(\"3562c\");\n/** Used for built-in method references. */ var $3dcf951634f947a4$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $3dcf951634f947a4$var$hasOwnProperty = $3dcf951634f947a4$var$objectProto.hasOwnProperty;\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */ function $3dcf951634f947a4$var$arrayLikeKeys(value, inherited) {\n    var isArr = $6Lnro(value), isArg = !isArr && $2bPgf(value), isBuff = !isArr && !isArg && $8yjfX(value), isType = !isArr && !isArg && !isBuff && $3562c(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? $gSPEM(value.length, String) : [], length = result.length;\n    for(var key in value)if ((inherited || $3dcf951634f947a4$var$hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.\n    (key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.\n    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.\n    $lNCBD(key, length)))) result.push(key);\n    return result;\n}\nmodule.exports = $3dcf951634f947a4$var$arrayLikeKeys;\n\n});\nparcelRegister(\"gSPEM\", function(module, exports) {\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */ function $c4a9c275669d5746$var$baseTimes(n, iteratee) {\n    var index = -1, result = Array(n);\n    while(++index < n)result[index] = iteratee(index);\n    return result;\n}\nmodule.exports = $c4a9c275669d5746$var$baseTimes;\n\n});\n\nparcelRegister(\"2bPgf\", function(module, exports) {\n\nvar $l732U = parcelRequire(\"l732U\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** Used for built-in method references. */ var $19845f3b98b3f7f2$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $19845f3b98b3f7f2$var$hasOwnProperty = $19845f3b98b3f7f2$var$objectProto.hasOwnProperty;\n/** Built-in value references. */ var $19845f3b98b3f7f2$var$propertyIsEnumerable = $19845f3b98b3f7f2$var$objectProto.propertyIsEnumerable;\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */ var $19845f3b98b3f7f2$var$isArguments = $l732U(function() {\n    return arguments;\n}()) ? $l732U : function(value) {\n    return $ksPtD(value) && $19845f3b98b3f7f2$var$hasOwnProperty.call(value, 'callee') && !$19845f3b98b3f7f2$var$propertyIsEnumerable.call(value, 'callee');\n};\nmodule.exports = $19845f3b98b3f7f2$var$isArguments;\n\n});\nparcelRegister(\"l732U\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $f5ec9d4571892b27$var$argsTag = '[object Arguments]';\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */ function $f5ec9d4571892b27$var$baseIsArguments(value) {\n    return $ksPtD(value) && $fuLlh(value) == $f5ec9d4571892b27$var$argsTag;\n}\nmodule.exports = $f5ec9d4571892b27$var$baseIsArguments;\n\n});\nparcelRegister(\"ksPtD\", function(module, exports) {\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ function $ee5e5a7333f56288$var$isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\nmodule.exports = $ee5e5a7333f56288$var$isObjectLike;\n\n});\n\n\n\nparcelRegister(\"6Lnro\", function(module, exports) {\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */ var $4ec950be4909898e$var$isArray = Array.isArray;\nmodule.exports = $4ec950be4909898e$var$isArray;\n\n});\n\nparcelRegister(\"8yjfX\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n\nvar $b4Yjw = parcelRequire(\"b4Yjw\");\n/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Built-in value references. */ var Buffer = moduleExports ? $6c6tI.Buffer : undefined;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */ var isBuffer = nativeIsBuffer || $b4Yjw;\nmodule.exports = isBuffer;\n\n});\nparcelRegister(\"b4Yjw\", function(module, exports) {\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */ function $810eda83ffb43ef1$var$stubFalse() {\n    return false;\n}\nmodule.exports = $810eda83ffb43ef1$var$stubFalse;\n\n});\n\n\nparcelRegister(\"lNCBD\", function(module, exports) {\n/** Used as references for various `Number` constants. */ var $fdec1eef3a6e7c18$var$MAX_SAFE_INTEGER = 9007199254740991;\n/** Used to detect unsigned integer values. */ var $fdec1eef3a6e7c18$var$reIsUint = /^(?:0|[1-9]\\d*)$/;\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */ function $fdec1eef3a6e7c18$var$isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? $fdec1eef3a6e7c18$var$MAX_SAFE_INTEGER : length;\n    return !!length && (type == 'number' || type != 'symbol' && $fdec1eef3a6e7c18$var$reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n}\nmodule.exports = $fdec1eef3a6e7c18$var$isIndex;\n\n});\n\nparcelRegister(\"3562c\", function(module, exports) {\n\nvar $1juqX = parcelRequire(\"1juqX\");\n\nvar $f90Bo = parcelRequire(\"f90Bo\");\n\nvar $2t01p = parcelRequire(\"2t01p\");\n/* Node.js helper references. */ var $23e6850eb1f6811b$var$nodeIsTypedArray = $2t01p && $2t01p.isTypedArray;\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */ var $23e6850eb1f6811b$var$isTypedArray = $23e6850eb1f6811b$var$nodeIsTypedArray ? $f90Bo($23e6850eb1f6811b$var$nodeIsTypedArray) : $1juqX;\nmodule.exports = $23e6850eb1f6811b$var$isTypedArray;\n\n});\nparcelRegister(\"1juqX\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $4VGZv = parcelRequire(\"4VGZv\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $0f4f2c51759600f4$var$argsTag = '[object Arguments]', $0f4f2c51759600f4$var$arrayTag = '[object Array]', $0f4f2c51759600f4$var$boolTag = '[object Boolean]', $0f4f2c51759600f4$var$dateTag = '[object Date]', $0f4f2c51759600f4$var$errorTag = '[object Error]', $0f4f2c51759600f4$var$funcTag = '[object Function]', $0f4f2c51759600f4$var$mapTag = '[object Map]', $0f4f2c51759600f4$var$numberTag = '[object Number]', $0f4f2c51759600f4$var$objectTag = '[object Object]', $0f4f2c51759600f4$var$regexpTag = '[object RegExp]', $0f4f2c51759600f4$var$setTag = '[object Set]', $0f4f2c51759600f4$var$stringTag = '[object String]', $0f4f2c51759600f4$var$weakMapTag = '[object WeakMap]';\nvar $0f4f2c51759600f4$var$arrayBufferTag = '[object ArrayBuffer]', $0f4f2c51759600f4$var$dataViewTag = '[object DataView]', $0f4f2c51759600f4$var$float32Tag = '[object Float32Array]', $0f4f2c51759600f4$var$float64Tag = '[object Float64Array]', $0f4f2c51759600f4$var$int8Tag = '[object Int8Array]', $0f4f2c51759600f4$var$int16Tag = '[object Int16Array]', $0f4f2c51759600f4$var$int32Tag = '[object Int32Array]', $0f4f2c51759600f4$var$uint8Tag = '[object Uint8Array]', $0f4f2c51759600f4$var$uint8ClampedTag = '[object Uint8ClampedArray]', $0f4f2c51759600f4$var$uint16Tag = '[object Uint16Array]', $0f4f2c51759600f4$var$uint32Tag = '[object Uint32Array]';\n/** Used to identify `toStringTag` values of typed arrays. */ var $0f4f2c51759600f4$var$typedArrayTags = {};\n$0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$float32Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$float64Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$int8Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$int16Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$int32Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$uint8Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$uint8ClampedTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$uint16Tag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$uint32Tag] = true;\n$0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$argsTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$arrayTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$arrayBufferTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$boolTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$dataViewTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$dateTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$errorTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$funcTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$mapTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$numberTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$objectTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$regexpTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$setTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$stringTag] = $0f4f2c51759600f4$var$typedArrayTags[$0f4f2c51759600f4$var$weakMapTag] = false;\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */ function $0f4f2c51759600f4$var$baseIsTypedArray(value) {\n    return $ksPtD(value) && $4VGZv(value.length) && !!$0f4f2c51759600f4$var$typedArrayTags[$fuLlh(value)];\n}\nmodule.exports = $0f4f2c51759600f4$var$baseIsTypedArray;\n\n});\nparcelRegister(\"4VGZv\", function(module, exports) {\n/** Used as references for various `Number` constants. */ var $396dd56f0a4dea14$var$MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */ function $396dd56f0a4dea14$var$isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= $396dd56f0a4dea14$var$MAX_SAFE_INTEGER;\n}\nmodule.exports = $396dd56f0a4dea14$var$isLength;\n\n});\n\n\nparcelRegister(\"f90Bo\", function(module, exports) {\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */ function $b06829d72be68940$var$baseUnary(func) {\n    return function(value) {\n        return func(value);\n    };\n}\nmodule.exports = $b06829d72be68940$var$baseUnary;\n\n});\n\nparcelRegister(\"2t01p\", function(module, exports) {\n\nvar $kXUyy = parcelRequire(\"kXUyy\");\n/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && $kXUyy.process;\n/** Used to access faster Node.js helpers. */ var nodeUtil = function() {\n    try {\n        // Use `util.types` for Node.js 10+.\n        var types = freeModule && freeModule.require && freeModule.require('util').types;\n        if (types) return types;\n        // Legacy `process.binding('util')` for Node.js < 10.\n        return freeProcess && freeProcess.binding && freeProcess.binding('util');\n    } catch (e) {}\n}();\nmodule.exports = nodeUtil;\n\n});\n\n\n\nparcelRegister(\"2FU6Q\", function(module, exports) {\n\nvar $5D2Yf = parcelRequire(\"5D2Yf\");\n\nvar $3SSWJ = parcelRequire(\"3SSWJ\");\n/** Used for built-in method references. */ var $1f2aef476e79e052$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $1f2aef476e79e052$var$hasOwnProperty = $1f2aef476e79e052$var$objectProto.hasOwnProperty;\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function $1f2aef476e79e052$var$baseKeys(object) {\n    if (!$5D2Yf(object)) return $3SSWJ(object);\n    var result = [];\n    for(var key in Object(object))if ($1f2aef476e79e052$var$hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);\n    return result;\n}\nmodule.exports = $1f2aef476e79e052$var$baseKeys;\n\n});\nparcelRegister(\"5D2Yf\", function(module, exports) {\n/** Used for built-in method references. */ var $010ec1a60c2212c5$var$objectProto = Object.prototype;\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */ function $010ec1a60c2212c5$var$isPrototype(value) {\n    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || $010ec1a60c2212c5$var$objectProto;\n    return value === proto;\n}\nmodule.exports = $010ec1a60c2212c5$var$isPrototype;\n\n});\n\nparcelRegister(\"3SSWJ\", function(module, exports) {\n\nvar $02bSW = parcelRequire(\"02bSW\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $2d4109681b9673ed$var$nativeKeys = $02bSW(Object.keys, Object);\nmodule.exports = $2d4109681b9673ed$var$nativeKeys;\n\n});\nparcelRegister(\"02bSW\", function(module, exports) {\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */ function $0069682e85ec9457$var$overArg(func, transform) {\n    return function(arg) {\n        return func(transform(arg));\n    };\n}\nmodule.exports = $0069682e85ec9457$var$overArg;\n\n});\n\n\n\nparcelRegister(\"1AdOh\", function(module, exports) {\n\nvar $jszNw = parcelRequire(\"jszNw\");\n\nvar $4VGZv = parcelRequire(\"4VGZv\");\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */ function $1273dd99fe3c9282$var$isArrayLike(value) {\n    return value != null && $4VGZv(value.length) && !$jszNw(value);\n}\nmodule.exports = $1273dd99fe3c9282$var$isArrayLike;\n\n});\n\n\n\nparcelRegister(\"lwZY6\", function(module, exports) {\n\nvar $awXOT = parcelRequire(\"awXOT\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */ function $facca7c861450764$var$baseAssignIn(object, source) {\n    return object && $awXOT(source, $6ngQz(source), object);\n}\nmodule.exports = $facca7c861450764$var$baseAssignIn;\n\n});\nparcelRegister(\"6ngQz\", function(module, exports) {\n\nvar $5j16r = parcelRequire(\"5j16r\");\n\nvar $eWK3r = parcelRequire(\"eWK3r\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */ function $4a41f5853cd016ad$var$keysIn(object) {\n    return $1AdOh(object) ? $5j16r(object, true) : $eWK3r(object);\n}\nmodule.exports = $4a41f5853cd016ad$var$keysIn;\n\n});\nparcelRegister(\"eWK3r\", function(module, exports) {\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $5D2Yf = parcelRequire(\"5D2Yf\");\n\nvar $dlhgd = parcelRequire(\"dlhgd\");\n/** Used for built-in method references. */ var $ae1a34ee63820b25$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $ae1a34ee63820b25$var$hasOwnProperty = $ae1a34ee63820b25$var$objectProto.hasOwnProperty;\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function $ae1a34ee63820b25$var$baseKeysIn(object) {\n    if (!$5M7nH(object)) return $dlhgd(object);\n    var isProto = $5D2Yf(object), result = [];\n    for(var key in object)if (!(key == 'constructor' && (isProto || !$ae1a34ee63820b25$var$hasOwnProperty.call(object, key)))) result.push(key);\n    return result;\n}\nmodule.exports = $ae1a34ee63820b25$var$baseKeysIn;\n\n});\nparcelRegister(\"dlhgd\", function(module, exports) {\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */ function $9b6aa0172b3d1218$var$nativeKeysIn(object) {\n    var result = [];\n    if (object != null) for(var key in Object(object))result.push(key);\n    return result;\n}\nmodule.exports = $9b6aa0172b3d1218$var$nativeKeysIn;\n\n});\n\n\n\n\nparcelRegister(\"l0BR0\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;\n/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;\n/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;\n/** Built-in value references. */ var Buffer = moduleExports ? $6c6tI.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */ function cloneBuffer(buffer, isDeep) {\n    if (isDeep) return buffer.slice();\n    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n    buffer.copy(result);\n    return result;\n}\nmodule.exports = cloneBuffer;\n\n});\n\nparcelRegister(\"4qSSq\", function(module, exports) {\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */ function $33a42886b8e22e70$var$copyArray(source, array) {\n    var index = -1, length = source.length;\n    array || (array = Array(length));\n    while(++index < length)array[index] = source[index];\n    return array;\n}\nmodule.exports = $33a42886b8e22e70$var$copyArray;\n\n});\n\nparcelRegister(\"fCZ0B\", function(module, exports) {\n\nvar $awXOT = parcelRequire(\"awXOT\");\n\nvar $75aoi = parcelRequire(\"75aoi\");\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */ function $b609baaf64ddfd71$var$copySymbols(source, object) {\n    return $awXOT(source, $75aoi(source), object);\n}\nmodule.exports = $b609baaf64ddfd71$var$copySymbols;\n\n});\nparcelRegister(\"75aoi\", function(module, exports) {\n\nvar $DZS2r = parcelRequire(\"DZS2r\");\n\nvar $gBmnO = parcelRequire(\"gBmnO\");\n/** Used for built-in method references. */ var $52810f6c45656625$var$objectProto = Object.prototype;\n/** Built-in value references. */ var $52810f6c45656625$var$propertyIsEnumerable = $52810f6c45656625$var$objectProto.propertyIsEnumerable;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $52810f6c45656625$var$nativeGetSymbols = Object.getOwnPropertySymbols;\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var $52810f6c45656625$var$getSymbols = !$52810f6c45656625$var$nativeGetSymbols ? $gBmnO : function(object) {\n    if (object == null) return [];\n    object = Object(object);\n    return $DZS2r($52810f6c45656625$var$nativeGetSymbols(object), function(symbol) {\n        return $52810f6c45656625$var$propertyIsEnumerable.call(object, symbol);\n    });\n};\nmodule.exports = $52810f6c45656625$var$getSymbols;\n\n});\nparcelRegister(\"DZS2r\", function(module, exports) {\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */ function $0783a2d7b4f24675$var$arrayFilter(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];\n    while(++index < length){\n        var value = array[index];\n        if (predicate(value, index, array)) result[resIndex++] = value;\n    }\n    return result;\n}\nmodule.exports = $0783a2d7b4f24675$var$arrayFilter;\n\n});\n\nparcelRegister(\"gBmnO\", function(module, exports) {\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */ function $c16176dff223626b$var$stubArray() {\n    return [];\n}\nmodule.exports = $c16176dff223626b$var$stubArray;\n\n});\n\n\n\nparcelRegister(\"ixbZL\", function(module, exports) {\n\nvar $awXOT = parcelRequire(\"awXOT\");\n\nvar $7WMrL = parcelRequire(\"7WMrL\");\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */ function $d7e49d12c55def15$var$copySymbolsIn(source, object) {\n    return $awXOT(source, $7WMrL(source), object);\n}\nmodule.exports = $d7e49d12c55def15$var$copySymbolsIn;\n\n});\nparcelRegister(\"7WMrL\", function(module, exports) {\n\nvar $1m8p8 = parcelRequire(\"1m8p8\");\n\nvar $ir9nt = parcelRequire(\"ir9nt\");\n\nvar $75aoi = parcelRequire(\"75aoi\");\n\nvar $gBmnO = parcelRequire(\"gBmnO\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $5c9387bbb7816aca$var$nativeGetSymbols = Object.getOwnPropertySymbols;\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */ var $5c9387bbb7816aca$var$getSymbolsIn = !$5c9387bbb7816aca$var$nativeGetSymbols ? $gBmnO : function(object) {\n    var result = [];\n    while(object){\n        $1m8p8(result, $75aoi(object));\n        object = $ir9nt(object);\n    }\n    return result;\n};\nmodule.exports = $5c9387bbb7816aca$var$getSymbolsIn;\n\n});\nparcelRegister(\"1m8p8\", function(module, exports) {\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */ function $0fce5d72fa0111d5$var$arrayPush(array, values) {\n    var index = -1, length = values.length, offset = array.length;\n    while(++index < length)array[offset + index] = values[index];\n    return array;\n}\nmodule.exports = $0fce5d72fa0111d5$var$arrayPush;\n\n});\n\nparcelRegister(\"ir9nt\", function(module, exports) {\n\nvar $02bSW = parcelRequire(\"02bSW\");\n/** Built-in value references. */ var $d6c205cf4a55ab3f$var$getPrototype = $02bSW(Object.getPrototypeOf, Object);\nmodule.exports = $d6c205cf4a55ab3f$var$getPrototype;\n\n});\n\n\n\nparcelRegister(\"2viWo\", function(module, exports) {\n\nvar $ln55n = parcelRequire(\"ln55n\");\n\nvar $75aoi = parcelRequire(\"75aoi\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function $1d2d2b42fe3d14be$var$getAllKeys(object) {\n    return $ln55n(object, $j7Pgn, $75aoi);\n}\nmodule.exports = $1d2d2b42fe3d14be$var$getAllKeys;\n\n});\nparcelRegister(\"ln55n\", function(module, exports) {\n\nvar $1m8p8 = parcelRequire(\"1m8p8\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */ function $f8efb0e4b822c78f$var$baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return $6Lnro(object) ? result : $1m8p8(result, symbolsFunc(object));\n}\nmodule.exports = $f8efb0e4b822c78f$var$baseGetAllKeys;\n\n});\n\n\nparcelRegister(\"63iG1\", function(module, exports) {\n\nvar $ln55n = parcelRequire(\"ln55n\");\n\nvar $7WMrL = parcelRequire(\"7WMrL\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */ function $468182b17d94f222$var$getAllKeysIn(object) {\n    return $ln55n(object, $6ngQz, $7WMrL);\n}\nmodule.exports = $468182b17d94f222$var$getAllKeysIn;\n\n});\n\nparcelRegister(\"fMYcx\", function(module, exports) {\n\nvar $7SUY3 = parcelRequire(\"7SUY3\");\n\nvar $krNFA = parcelRequire(\"krNFA\");\n\nvar $7WNGP = parcelRequire(\"7WNGP\");\n\nvar $c4Q9m = parcelRequire(\"c4Q9m\");\n\nvar $fMtOL = parcelRequire(\"fMtOL\");\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $oJAWi = parcelRequire(\"oJAWi\");\n/** `Object#toString` result references. */ var $b7ea0968e821dbcb$var$mapTag = '[object Map]', $b7ea0968e821dbcb$var$objectTag = '[object Object]', $b7ea0968e821dbcb$var$promiseTag = '[object Promise]', $b7ea0968e821dbcb$var$setTag = '[object Set]', $b7ea0968e821dbcb$var$weakMapTag = '[object WeakMap]';\nvar $b7ea0968e821dbcb$var$dataViewTag = '[object DataView]';\n/** Used to detect maps, sets, and weakmaps. */ var $b7ea0968e821dbcb$var$dataViewCtorString = $oJAWi($7SUY3), $b7ea0968e821dbcb$var$mapCtorString = $oJAWi($krNFA), $b7ea0968e821dbcb$var$promiseCtorString = $oJAWi($7WNGP), $b7ea0968e821dbcb$var$setCtorString = $oJAWi($c4Q9m), $b7ea0968e821dbcb$var$weakMapCtorString = $oJAWi($fMtOL);\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ var $b7ea0968e821dbcb$var$getTag = $fuLlh;\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ($7SUY3 && $b7ea0968e821dbcb$var$getTag(new $7SUY3(new ArrayBuffer(1))) != $b7ea0968e821dbcb$var$dataViewTag || $krNFA && $b7ea0968e821dbcb$var$getTag(new $krNFA) != $b7ea0968e821dbcb$var$mapTag || $7WNGP && $b7ea0968e821dbcb$var$getTag($7WNGP.resolve()) != $b7ea0968e821dbcb$var$promiseTag || $c4Q9m && $b7ea0968e821dbcb$var$getTag(new $c4Q9m) != $b7ea0968e821dbcb$var$setTag || $fMtOL && $b7ea0968e821dbcb$var$getTag(new $fMtOL) != $b7ea0968e821dbcb$var$weakMapTag) $b7ea0968e821dbcb$var$getTag = function(value) {\n    var result = $fuLlh(value), Ctor = result == $b7ea0968e821dbcb$var$objectTag ? value.constructor : undefined, ctorString = Ctor ? $oJAWi(Ctor) : '';\n    if (ctorString) switch(ctorString){\n        case $b7ea0968e821dbcb$var$dataViewCtorString:\n            return $b7ea0968e821dbcb$var$dataViewTag;\n        case $b7ea0968e821dbcb$var$mapCtorString:\n            return $b7ea0968e821dbcb$var$mapTag;\n        case $b7ea0968e821dbcb$var$promiseCtorString:\n            return $b7ea0968e821dbcb$var$promiseTag;\n        case $b7ea0968e821dbcb$var$setCtorString:\n            return $b7ea0968e821dbcb$var$setTag;\n        case $b7ea0968e821dbcb$var$weakMapCtorString:\n            return $b7ea0968e821dbcb$var$weakMapTag;\n    }\n    return result;\n};\nmodule.exports = $b7ea0968e821dbcb$var$getTag;\n\n});\nparcelRegister(\"7SUY3\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/* Built-in method references that are verified to be native. */ var $5bd9c41d747d7a41$var$DataView = $4J8an($6c6tI, 'DataView');\nmodule.exports = $5bd9c41d747d7a41$var$DataView;\n\n});\n\nparcelRegister(\"7WNGP\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/* Built-in method references that are verified to be native. */ var $5c947e88ddf097e0$var$Promise = $4J8an($6c6tI, 'Promise');\nmodule.exports = $5c947e88ddf097e0$var$Promise;\n\n});\n\nparcelRegister(\"c4Q9m\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/* Built-in method references that are verified to be native. */ var $8cae4fa6500b3c0d$var$Set = $4J8an($6c6tI, 'Set');\nmodule.exports = $8cae4fa6500b3c0d$var$Set;\n\n});\n\nparcelRegister(\"fMtOL\", function(module, exports) {\n\nvar $4J8an = parcelRequire(\"4J8an\");\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/* Built-in method references that are verified to be native. */ var $b7d277e2cca75970$var$WeakMap = $4J8an($6c6tI, 'WeakMap');\nmodule.exports = $b7d277e2cca75970$var$WeakMap;\n\n});\n\n\nparcelRegister(\"kWuVO\", function(module, exports) {\n/** Used for built-in method references. */ var $f3f137c902216681$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $f3f137c902216681$var$hasOwnProperty = $f3f137c902216681$var$objectProto.hasOwnProperty;\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */ function $f3f137c902216681$var$initCloneArray(array) {\n    var length = array.length, result = new array.constructor(length);\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && $f3f137c902216681$var$hasOwnProperty.call(array, 'index')) {\n        result.index = array.index;\n        result.input = array.input;\n    }\n    return result;\n}\nmodule.exports = $f3f137c902216681$var$initCloneArray;\n\n});\n\nparcelRegister(\"hcU9w\", function(module, exports) {\n\nvar $fcG3q = parcelRequire(\"fcG3q\");\n\nvar $6HB4o = parcelRequire(\"6HB4o\");\n\nvar $9m6Ai = parcelRequire(\"9m6Ai\");\n\nvar $8uhQw = parcelRequire(\"8uhQw\");\n\nvar $3NUbh = parcelRequire(\"3NUbh\");\n/** `Object#toString` result references. */ var $c86f1d64dbcb88c8$var$boolTag = '[object Boolean]', $c86f1d64dbcb88c8$var$dateTag = '[object Date]', $c86f1d64dbcb88c8$var$mapTag = '[object Map]', $c86f1d64dbcb88c8$var$numberTag = '[object Number]', $c86f1d64dbcb88c8$var$regexpTag = '[object RegExp]', $c86f1d64dbcb88c8$var$setTag = '[object Set]', $c86f1d64dbcb88c8$var$stringTag = '[object String]', $c86f1d64dbcb88c8$var$symbolTag = '[object Symbol]';\nvar $c86f1d64dbcb88c8$var$arrayBufferTag = '[object ArrayBuffer]', $c86f1d64dbcb88c8$var$dataViewTag = '[object DataView]', $c86f1d64dbcb88c8$var$float32Tag = '[object Float32Array]', $c86f1d64dbcb88c8$var$float64Tag = '[object Float64Array]', $c86f1d64dbcb88c8$var$int8Tag = '[object Int8Array]', $c86f1d64dbcb88c8$var$int16Tag = '[object Int16Array]', $c86f1d64dbcb88c8$var$int32Tag = '[object Int32Array]', $c86f1d64dbcb88c8$var$uint8Tag = '[object Uint8Array]', $c86f1d64dbcb88c8$var$uint8ClampedTag = '[object Uint8ClampedArray]', $c86f1d64dbcb88c8$var$uint16Tag = '[object Uint16Array]', $c86f1d64dbcb88c8$var$uint32Tag = '[object Uint32Array]';\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */ function $c86f1d64dbcb88c8$var$initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor;\n    switch(tag){\n        case $c86f1d64dbcb88c8$var$arrayBufferTag:\n            return $fcG3q(object);\n        case $c86f1d64dbcb88c8$var$boolTag:\n        case $c86f1d64dbcb88c8$var$dateTag:\n            return new Ctor(+object);\n        case $c86f1d64dbcb88c8$var$dataViewTag:\n            return $6HB4o(object, isDeep);\n        case $c86f1d64dbcb88c8$var$float32Tag:\n        case $c86f1d64dbcb88c8$var$float64Tag:\n        case $c86f1d64dbcb88c8$var$int8Tag:\n        case $c86f1d64dbcb88c8$var$int16Tag:\n        case $c86f1d64dbcb88c8$var$int32Tag:\n        case $c86f1d64dbcb88c8$var$uint8Tag:\n        case $c86f1d64dbcb88c8$var$uint8ClampedTag:\n        case $c86f1d64dbcb88c8$var$uint16Tag:\n        case $c86f1d64dbcb88c8$var$uint32Tag:\n            return $3NUbh(object, isDeep);\n        case $c86f1d64dbcb88c8$var$mapTag:\n            return new Ctor;\n        case $c86f1d64dbcb88c8$var$numberTag:\n        case $c86f1d64dbcb88c8$var$stringTag:\n            return new Ctor(object);\n        case $c86f1d64dbcb88c8$var$regexpTag:\n            return $9m6Ai(object);\n        case $c86f1d64dbcb88c8$var$setTag:\n            return new Ctor;\n        case $c86f1d64dbcb88c8$var$symbolTag:\n            return $8uhQw(object);\n    }\n}\nmodule.exports = $c86f1d64dbcb88c8$var$initCloneByTag;\n\n});\nparcelRegister(\"fcG3q\", function(module, exports) {\n\nvar $gP712 = parcelRequire(\"gP712\");\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */ function $b118991dcc9506c9$var$cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new $gP712(result).set(new $gP712(arrayBuffer));\n    return result;\n}\nmodule.exports = $b118991dcc9506c9$var$cloneArrayBuffer;\n\n});\nparcelRegister(\"gP712\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/** Built-in value references. */ var $c3f6d9f6ae281964$var$Uint8Array = $6c6tI.Uint8Array;\nmodule.exports = $c3f6d9f6ae281964$var$Uint8Array;\n\n});\n\n\nparcelRegister(\"6HB4o\", function(module, exports) {\n\nvar $fcG3q = parcelRequire(\"fcG3q\");\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */ function $4e138389db63a31d$var$cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? $fcG3q(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\nmodule.exports = $4e138389db63a31d$var$cloneDataView;\n\n});\n\nparcelRegister(\"9m6Ai\", function(module, exports) {\n/** Used to match `RegExp` flags from their coerced string values. */ var $6cfb46a6de05aaa1$var$reFlags = /\\w*$/;\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */ function $6cfb46a6de05aaa1$var$cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, $6cfb46a6de05aaa1$var$reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n}\nmodule.exports = $6cfb46a6de05aaa1$var$cloneRegExp;\n\n});\n\nparcelRegister(\"8uhQw\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n/** Used to convert symbols to primitives and strings. */ var $62def7ee15ea9bf6$var$symbolProto = $bx7XH ? $bx7XH.prototype : undefined, $62def7ee15ea9bf6$var$symbolValueOf = $62def7ee15ea9bf6$var$symbolProto ? $62def7ee15ea9bf6$var$symbolProto.valueOf : undefined;\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */ function $62def7ee15ea9bf6$var$cloneSymbol(symbol) {\n    return $62def7ee15ea9bf6$var$symbolValueOf ? Object($62def7ee15ea9bf6$var$symbolValueOf.call(symbol)) : {};\n}\nmodule.exports = $62def7ee15ea9bf6$var$cloneSymbol;\n\n});\n\nparcelRegister(\"3NUbh\", function(module, exports) {\n\nvar $fcG3q = parcelRequire(\"fcG3q\");\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */ function $2c518715283c0d8e$var$cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? $fcG3q(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\nmodule.exports = $2c518715283c0d8e$var$cloneTypedArray;\n\n});\n\n\nparcelRegister(\"fb83i\", function(module, exports) {\n\nvar $hV6rv = parcelRequire(\"hV6rv\");\n\nvar $ir9nt = parcelRequire(\"ir9nt\");\n\nvar $5D2Yf = parcelRequire(\"5D2Yf\");\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */ function $b0ce21190b42c682$var$initCloneObject(object) {\n    return typeof object.constructor == 'function' && !$5D2Yf(object) ? $hV6rv($ir9nt(object)) : {};\n}\nmodule.exports = $b0ce21190b42c682$var$initCloneObject;\n\n});\nparcelRegister(\"hV6rv\", function(module, exports) {\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n/** Built-in value references. */ var $d0bcc1eb6d508c59$var$objectCreate = Object.create;\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */ var $d0bcc1eb6d508c59$var$baseCreate = function() {\n    function object() {}\n    return function(proto) {\n        if (!$5M7nH(proto)) return {};\n        if ($d0bcc1eb6d508c59$var$objectCreate) return $d0bcc1eb6d508c59$var$objectCreate(proto);\n        object.prototype = proto;\n        var result = new object;\n        object.prototype = undefined;\n        return result;\n    };\n}();\nmodule.exports = $d0bcc1eb6d508c59$var$baseCreate;\n\n});\n\n\nparcelRegister(\"kBTZK\", function(module, exports) {\n\nvar $37t2C = parcelRequire(\"37t2C\");\n\nvar $f90Bo = parcelRequire(\"f90Bo\");\n\nvar $2t01p = parcelRequire(\"2t01p\");\n/* Node.js helper references. */ var $f012b2c72deb1244$var$nodeIsMap = $2t01p && $2t01p.isMap;\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */ var $f012b2c72deb1244$var$isMap = $f012b2c72deb1244$var$nodeIsMap ? $f90Bo($f012b2c72deb1244$var$nodeIsMap) : $37t2C;\nmodule.exports = $f012b2c72deb1244$var$isMap;\n\n});\nparcelRegister(\"37t2C\", function(module, exports) {\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $24588d8a1563dc03$var$mapTag = '[object Map]';\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */ function $24588d8a1563dc03$var$baseIsMap(value) {\n    return $ksPtD(value) && $fMYcx(value) == $24588d8a1563dc03$var$mapTag;\n}\nmodule.exports = $24588d8a1563dc03$var$baseIsMap;\n\n});\n\n\nparcelRegister(\"fNGSJ\", function(module, exports) {\n\nvar $6YXMP = parcelRequire(\"6YXMP\");\n\nvar $f90Bo = parcelRequire(\"f90Bo\");\n\nvar $2t01p = parcelRequire(\"2t01p\");\n/* Node.js helper references. */ var $b80cb20dfe61b605$var$nodeIsSet = $2t01p && $2t01p.isSet;\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */ var $b80cb20dfe61b605$var$isSet = $b80cb20dfe61b605$var$nodeIsSet ? $f90Bo($b80cb20dfe61b605$var$nodeIsSet) : $6YXMP;\nmodule.exports = $b80cb20dfe61b605$var$isSet;\n\n});\nparcelRegister(\"6YXMP\", function(module, exports) {\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $5156b906ecb458bf$var$setTag = '[object Set]';\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */ function $5156b906ecb458bf$var$baseIsSet(value) {\n    return $ksPtD(value) && $fMYcx(value) == $5156b906ecb458bf$var$setTag;\n}\nmodule.exports = $5156b906ecb458bf$var$baseIsSet;\n\n});\n\n\n\n\nparcelRegister(\"b9IkD\", function(module, exports) {\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */ function $81f2ec573816e9ef$var$constant(value) {\n    return function() {\n        return value;\n    };\n}\nmodule.exports = $81f2ec573816e9ef$var$constant;\n\n});\n\nparcelRegister(\"l9hnn\", function(module, exports) {\n\nmodule.exports = (parcelRequire(\"8Kqj3\"));\n\n});\nparcelRegister(\"8Kqj3\", function(module, exports) {\n\nvar $jqArt = parcelRequire(\"jqArt\");\n\nvar $2wHzT = parcelRequire(\"2wHzT\");\n\nvar $dgzF1 = parcelRequire(\"dgzF1\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */ function $65e7067c689913fd$var$forEach(collection, iteratee) {\n    var func = $6Lnro(collection) ? $jqArt : $2wHzT;\n    return func(collection, $dgzF1(iteratee));\n}\nmodule.exports = $65e7067c689913fd$var$forEach;\n\n});\nparcelRegister(\"2wHzT\", function(module, exports) {\n\nvar $bOxbJ = parcelRequire(\"bOxbJ\");\n\nvar $agmzx = parcelRequire(\"agmzx\");\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */ var $1d705f9446c9ea79$var$baseEach = $agmzx($bOxbJ);\nmodule.exports = $1d705f9446c9ea79$var$baseEach;\n\n});\nparcelRegister(\"bOxbJ\", function(module, exports) {\n\nvar $lWo9e = parcelRequire(\"lWo9e\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */ function $899e1bb3896ddbd3$var$baseForOwn(object, iteratee) {\n    return object && $lWo9e(object, iteratee, $j7Pgn);\n}\nmodule.exports = $899e1bb3896ddbd3$var$baseForOwn;\n\n});\nparcelRegister(\"lWo9e\", function(module, exports) {\n\nvar $9kvL4 = parcelRequire(\"9kvL4\");\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */ var $ff91bf0b44aabb6d$var$baseFor = $9kvL4();\nmodule.exports = $ff91bf0b44aabb6d$var$baseFor;\n\n});\nparcelRegister(\"9kvL4\", function(module, exports) {\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */ function $6cae9dceee518f1f$var$createBaseFor(fromRight) {\n    return function(object, iteratee, keysFunc) {\n        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;\n        while(length--){\n            var key = props[fromRight ? length : ++index];\n            if (iteratee(iterable[key], key, iterable) === false) break;\n        }\n        return object;\n    };\n}\nmodule.exports = $6cae9dceee518f1f$var$createBaseFor;\n\n});\n\n\n\nparcelRegister(\"agmzx\", function(module, exports) {\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */ function $778ce85f545302a4$var$createBaseEach(eachFunc, fromRight) {\n    return function(collection, iteratee) {\n        if (collection == null) return collection;\n        if (!$1AdOh(collection)) return eachFunc(collection, iteratee);\n        var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);\n        while(fromRight ? index-- : ++index < length){\n            if (iteratee(iterable[index], index, iterable) === false) break;\n        }\n        return collection;\n    };\n}\nmodule.exports = $778ce85f545302a4$var$createBaseEach;\n\n});\n\n\nparcelRegister(\"dgzF1\", function(module, exports) {\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */ function $9a886e7377daf15f$var$castFunction(value) {\n    return typeof value == 'function' ? value : $1OIBO;\n}\nmodule.exports = $9a886e7377daf15f$var$castFunction;\n\n});\nparcelRegister(\"1OIBO\", function(module, exports) {\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */ function $152d105374ab3429$var$identity(value) {\n    return value;\n}\nmodule.exports = $152d105374ab3429$var$identity;\n\n});\n\n\n\n\nparcelRegister(\"31LU8\", function(module, exports) {\n\nvar $DZS2r = parcelRequire(\"DZS2r\");\n\nvar $auydN = parcelRequire(\"auydN\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */ function $23469febeea05765$var$filter(collection, predicate) {\n    var func = $6Lnro(collection) ? $DZS2r : $auydN;\n    return func(collection, $91VgU(predicate, 3));\n}\nmodule.exports = $23469febeea05765$var$filter;\n\n});\nparcelRegister(\"auydN\", function(module, exports) {\n\nvar $2wHzT = parcelRequire(\"2wHzT\");\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */ function $7a37406d0157bd93$var$baseFilter(collection, predicate) {\n    var result = [];\n    $2wHzT(collection, function(value, index, collection) {\n        if (predicate(value, index, collection)) result.push(value);\n    });\n    return result;\n}\nmodule.exports = $7a37406d0157bd93$var$baseFilter;\n\n});\n\nparcelRegister(\"91VgU\", function(module, exports) {\n\nvar $hIvDM = parcelRequire(\"hIvDM\");\n\nvar $kQ1gz = parcelRequire(\"kQ1gz\");\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $3J2jz = parcelRequire(\"3J2jz\");\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */ function $6930a200b360c355$var$baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') return value;\n    if (value == null) return $1OIBO;\n    if (typeof value == 'object') return $6Lnro(value) ? $kQ1gz(value[0], value[1]) : $hIvDM(value);\n    return $3J2jz(value);\n}\nmodule.exports = $6930a200b360c355$var$baseIteratee;\n\n});\nparcelRegister(\"hIvDM\", function(module, exports) {\n\nvar $xhuH3 = parcelRequire(\"xhuH3\");\n\nvar $2eBWT = parcelRequire(\"2eBWT\");\n\nvar $8gtlO = parcelRequire(\"8gtlO\");\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */ function $ce5f16e3a903d2c8$var$baseMatches(source) {\n    var matchData = $2eBWT(source);\n    if (matchData.length == 1 && matchData[0][2]) return $8gtlO(matchData[0][0], matchData[0][1]);\n    return function(object) {\n        return object === source || $xhuH3(object, source, matchData);\n    };\n}\nmodule.exports = $ce5f16e3a903d2c8$var$baseMatches;\n\n});\nparcelRegister(\"xhuH3\", function(module, exports) {\n\nvar $abWak = parcelRequire(\"abWak\");\n\nvar $1AEGU = parcelRequire(\"1AEGU\");\n/** Used to compose bitmasks for value comparisons. */ var $0640a722fe1a5ae6$var$COMPARE_PARTIAL_FLAG = 1, $0640a722fe1a5ae6$var$COMPARE_UNORDERED_FLAG = 2;\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */ function $0640a722fe1a5ae6$var$baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length, length = index, noCustomizer = !customizer;\n    if (object == null) return !length;\n    object = Object(object);\n    while(index--){\n        var data = matchData[index];\n        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;\n    }\n    while(++index < length){\n        data = matchData[index];\n        var key = data[0], objValue = object[key], srcValue = data[1];\n        if (noCustomizer && data[2]) {\n            if (objValue === undefined && !(key in object)) return false;\n        } else {\n            var stack = new $abWak;\n            if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);\n            if (!(result === undefined ? $1AEGU(srcValue, objValue, $0640a722fe1a5ae6$var$COMPARE_PARTIAL_FLAG | $0640a722fe1a5ae6$var$COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;\n        }\n    }\n    return true;\n}\nmodule.exports = $0640a722fe1a5ae6$var$baseIsMatch;\n\n});\nparcelRegister(\"1AEGU\", function(module, exports) {\n\nvar $chAvj = parcelRequire(\"chAvj\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */ function $1288b79dd1362898$var$baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) return true;\n    if (value == null || other == null || !$ksPtD(value) && !$ksPtD(other)) return value !== value && other !== other;\n    return $chAvj(value, other, bitmask, customizer, $1288b79dd1362898$var$baseIsEqual, stack);\n}\nmodule.exports = $1288b79dd1362898$var$baseIsEqual;\n\n});\nparcelRegister(\"chAvj\", function(module, exports) {\n\nvar $abWak = parcelRequire(\"abWak\");\n\nvar $6ZeD2 = parcelRequire(\"6ZeD2\");\n\nvar $3EDcd = parcelRequire(\"3EDcd\");\n\nvar $4a2PS = parcelRequire(\"4a2PS\");\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $3562c = parcelRequire(\"3562c\");\n/** Used to compose bitmasks for value comparisons. */ var $8f13638673771e84$var$COMPARE_PARTIAL_FLAG = 1;\n/** `Object#toString` result references. */ var $8f13638673771e84$var$argsTag = '[object Arguments]', $8f13638673771e84$var$arrayTag = '[object Array]', $8f13638673771e84$var$objectTag = '[object Object]';\n/** Used for built-in method references. */ var $8f13638673771e84$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $8f13638673771e84$var$hasOwnProperty = $8f13638673771e84$var$objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function $8f13638673771e84$var$baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = $6Lnro(object), othIsArr = $6Lnro(other), objTag = objIsArr ? $8f13638673771e84$var$arrayTag : $fMYcx(object), othTag = othIsArr ? $8f13638673771e84$var$arrayTag : $fMYcx(other);\n    objTag = objTag == $8f13638673771e84$var$argsTag ? $8f13638673771e84$var$objectTag : objTag;\n    othTag = othTag == $8f13638673771e84$var$argsTag ? $8f13638673771e84$var$objectTag : othTag;\n    var objIsObj = objTag == $8f13638673771e84$var$objectTag, othIsObj = othTag == $8f13638673771e84$var$objectTag, isSameTag = objTag == othTag;\n    if (isSameTag && $8yjfX(object)) {\n        if (!$8yjfX(other)) return false;\n        objIsArr = true;\n        objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n        stack || (stack = new $abWak);\n        return objIsArr || $3562c(object) ? $6ZeD2(object, other, bitmask, customizer, equalFunc, stack) : $3EDcd(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & $8f13638673771e84$var$COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && $8f13638673771e84$var$hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && $8f13638673771e84$var$hasOwnProperty.call(other, '__wrapped__');\n        if (objIsWrapped || othIsWrapped) {\n            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n            stack || (stack = new $abWak);\n            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n    }\n    if (!isSameTag) return false;\n    stack || (stack = new $abWak);\n    return $4a2PS(object, other, bitmask, customizer, equalFunc, stack);\n}\nmodule.exports = $8f13638673771e84$var$baseIsEqualDeep;\n\n});\nparcelRegister(\"6ZeD2\", function(module, exports) {\n\nvar $7UV5f = parcelRequire(\"7UV5f\");\n\nvar $28204 = parcelRequire(\"28204\");\n\nvar $6thNy = parcelRequire(\"6thNy\");\n/** Used to compose bitmasks for value comparisons. */ var $5163c98a9f5f9358$var$COMPARE_PARTIAL_FLAG = 1, $5163c98a9f5f9358$var$COMPARE_UNORDERED_FLAG = 2;\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */ function $5163c98a9f5f9358$var$equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & $5163c98a9f5f9358$var$COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;\n    var index = -1, result = true, seen = bitmask & $5163c98a9f5f9358$var$COMPARE_UNORDERED_FLAG ? new $7UV5f : undefined;\n    stack.set(array, other);\n    stack.set(other, array);\n    // Ignore non-index properties.\n    while(++index < arrLength){\n        var arrValue = array[index], othValue = other[index];\n        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n        if (compared !== undefined) {\n            if (compared) continue;\n            result = false;\n            break;\n        }\n        // Recursively compare arrays (susceptible to call stack limits).\n        if (seen) {\n            if (!$28204(other, function(othValue, othIndex) {\n                if (!$6thNy(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);\n            })) {\n                result = false;\n                break;\n            }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n            result = false;\n            break;\n        }\n    }\n    stack['delete'](array);\n    stack['delete'](other);\n    return result;\n}\nmodule.exports = $5163c98a9f5f9358$var$equalArrays;\n\n});\nparcelRegister(\"7UV5f\", function(module, exports) {\n\nvar $hmXFj = parcelRequire(\"hmXFj\");\n\nvar $kcw1D = parcelRequire(\"kcw1D\");\n\nvar $5VfkT = parcelRequire(\"5VfkT\");\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */ function $5c3a0af69952bf03$var$SetCache(values) {\n    var index = -1, length = values == null ? 0 : values.length;\n    this.__data__ = new $hmXFj;\n    while(++index < length)this.add(values[index]);\n}\n// Add methods to `SetCache`.\n$5c3a0af69952bf03$var$SetCache.prototype.add = $5c3a0af69952bf03$var$SetCache.prototype.push = $kcw1D;\n$5c3a0af69952bf03$var$SetCache.prototype.has = $5VfkT;\nmodule.exports = $5c3a0af69952bf03$var$SetCache;\n\n});\nparcelRegister(\"kcw1D\", function(module, exports) {\n/** Used to stand-in for `undefined` hash values. */ var $eb4dc538ecc7151a$var$HASH_UNDEFINED = '__lodash_hash_undefined__';\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */ function $eb4dc538ecc7151a$var$setCacheAdd(value) {\n    this.__data__.set(value, $eb4dc538ecc7151a$var$HASH_UNDEFINED);\n    return this;\n}\nmodule.exports = $eb4dc538ecc7151a$var$setCacheAdd;\n\n});\n\nparcelRegister(\"5VfkT\", function(module, exports) {\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */ function $44fe2c036bc5bdd5$var$setCacheHas(value) {\n    return this.__data__.has(value);\n}\nmodule.exports = $44fe2c036bc5bdd5$var$setCacheHas;\n\n});\n\n\nparcelRegister(\"28204\", function(module, exports) {\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */ function $18cde150bb0256e0$var$arraySome(array, predicate) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (predicate(array[index], index, array)) return true;\n    }\n    return false;\n}\nmodule.exports = $18cde150bb0256e0$var$arraySome;\n\n});\n\nparcelRegister(\"6thNy\", function(module, exports) {\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */ function $4b6341e0e94cda22$var$cacheHas(cache, key) {\n    return cache.has(key);\n}\nmodule.exports = $4b6341e0e94cda22$var$cacheHas;\n\n});\n\n\nparcelRegister(\"3EDcd\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n\nvar $gP712 = parcelRequire(\"gP712\");\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n\nvar $6ZeD2 = parcelRequire(\"6ZeD2\");\n\nvar $cLJxa = parcelRequire(\"cLJxa\");\n\nvar $acQM1 = parcelRequire(\"acQM1\");\n/** Used to compose bitmasks for value comparisons. */ var $2a93830eab61f571$var$COMPARE_PARTIAL_FLAG = 1, $2a93830eab61f571$var$COMPARE_UNORDERED_FLAG = 2;\n/** `Object#toString` result references. */ var $2a93830eab61f571$var$boolTag = '[object Boolean]', $2a93830eab61f571$var$dateTag = '[object Date]', $2a93830eab61f571$var$errorTag = '[object Error]', $2a93830eab61f571$var$mapTag = '[object Map]', $2a93830eab61f571$var$numberTag = '[object Number]', $2a93830eab61f571$var$regexpTag = '[object RegExp]', $2a93830eab61f571$var$setTag = '[object Set]', $2a93830eab61f571$var$stringTag = '[object String]', $2a93830eab61f571$var$symbolTag = '[object Symbol]';\nvar $2a93830eab61f571$var$arrayBufferTag = '[object ArrayBuffer]', $2a93830eab61f571$var$dataViewTag = '[object DataView]';\n/** Used to convert symbols to primitives and strings. */ var $2a93830eab61f571$var$symbolProto = $bx7XH ? $bx7XH.prototype : undefined, $2a93830eab61f571$var$symbolValueOf = $2a93830eab61f571$var$symbolProto ? $2a93830eab61f571$var$symbolProto.valueOf : undefined;\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function $2a93830eab61f571$var$equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch(tag){\n        case $2a93830eab61f571$var$dataViewTag:\n            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;\n            object = object.buffer;\n            other = other.buffer;\n        case $2a93830eab61f571$var$arrayBufferTag:\n            if (object.byteLength != other.byteLength || !equalFunc(new $gP712(object), new $gP712(other))) return false;\n            return true;\n        case $2a93830eab61f571$var$boolTag:\n        case $2a93830eab61f571$var$dateTag:\n        case $2a93830eab61f571$var$numberTag:\n            // Coerce booleans to `1` or `0` and dates to milliseconds.\n            // Invalid dates are coerced to `NaN`.\n            return $gJ8Nu(+object, +other);\n        case $2a93830eab61f571$var$errorTag:\n            return object.name == other.name && object.message == other.message;\n        case $2a93830eab61f571$var$regexpTag:\n        case $2a93830eab61f571$var$stringTag:\n            // Coerce regexes to strings and treat strings, primitives and objects,\n            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n            // for more details.\n            return object == other + '';\n        case $2a93830eab61f571$var$mapTag:\n            var convert = $cLJxa;\n        case $2a93830eab61f571$var$setTag:\n            var isPartial = bitmask & $2a93830eab61f571$var$COMPARE_PARTIAL_FLAG;\n            convert || (convert = $acQM1);\n            if (object.size != other.size && !isPartial) return false;\n            // Assume cyclic values are equal.\n            var stacked = stack.get(object);\n            if (stacked) return stacked == other;\n            bitmask |= $2a93830eab61f571$var$COMPARE_UNORDERED_FLAG;\n            // Recursively compare objects (susceptible to call stack limits).\n            stack.set(object, other);\n            var result = $6ZeD2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n            stack['delete'](object);\n            return result;\n        case $2a93830eab61f571$var$symbolTag:\n            if ($2a93830eab61f571$var$symbolValueOf) return $2a93830eab61f571$var$symbolValueOf.call(object) == $2a93830eab61f571$var$symbolValueOf.call(other);\n    }\n    return false;\n}\nmodule.exports = $2a93830eab61f571$var$equalByTag;\n\n});\nparcelRegister(\"cLJxa\", function(module, exports) {\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */ function $94bd31ef27aa2b65$var$mapToArray(map) {\n    var index = -1, result = Array(map.size);\n    map.forEach(function(value, key) {\n        result[++index] = [\n            key,\n            value\n        ];\n    });\n    return result;\n}\nmodule.exports = $94bd31ef27aa2b65$var$mapToArray;\n\n});\n\nparcelRegister(\"acQM1\", function(module, exports) {\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */ function $76e3f61cc967d45f$var$setToArray(set) {\n    var index = -1, result = Array(set.size);\n    set.forEach(function(value) {\n        result[++index] = value;\n    });\n    return result;\n}\nmodule.exports = $76e3f61cc967d45f$var$setToArray;\n\n});\n\n\nparcelRegister(\"4a2PS\", function(module, exports) {\n\nvar $2viWo = parcelRequire(\"2viWo\");\n/** Used to compose bitmasks for value comparisons. */ var $307a4bb5e2cbc81f$var$COMPARE_PARTIAL_FLAG = 1;\n/** Used for built-in method references. */ var $307a4bb5e2cbc81f$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $307a4bb5e2cbc81f$var$hasOwnProperty = $307a4bb5e2cbc81f$var$objectProto.hasOwnProperty;\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */ function $307a4bb5e2cbc81f$var$equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & $307a4bb5e2cbc81f$var$COMPARE_PARTIAL_FLAG, objProps = $2viWo(object), objLength = objProps.length, othProps = $2viWo(other), othLength = othProps.length;\n    if (objLength != othLength && !isPartial) return false;\n    var index = objLength;\n    while(index--){\n        var key = objProps[index];\n        if (!(isPartial ? key in other : $307a4bb5e2cbc81f$var$hasOwnProperty.call(other, key))) return false;\n    }\n    // Check that cyclic values are equal.\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n    if (objStacked && othStacked) return objStacked == other && othStacked == object;\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while(++index < objLength){\n        key = objProps[index];\n        var objValue = object[key], othValue = other[key];\n        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n        // Recursively compare objects (susceptible to call stack limits).\n        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n            result = false;\n            break;\n        }\n        skipCtor || (skipCtor = key == 'constructor');\n    }\n    if (result && !skipCtor) {\n        var objCtor = object.constructor, othCtor = other.constructor;\n        // Non `Object` object instances with different constructors are not equal.\n        if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;\n    }\n    stack['delete'](object);\n    stack['delete'](other);\n    return result;\n}\nmodule.exports = $307a4bb5e2cbc81f$var$equalObjects;\n\n});\n\n\n\n\nparcelRegister(\"2eBWT\", function(module, exports) {\n\nvar $3OiOJ = parcelRequire(\"3OiOJ\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */ function $1a0a536d282ef684$var$getMatchData(object) {\n    var result = $j7Pgn(object), length = result.length;\n    while(length--){\n        var key = result[length], value = object[key];\n        result[length] = [\n            key,\n            value,\n            $3OiOJ(value)\n        ];\n    }\n    return result;\n}\nmodule.exports = $1a0a536d282ef684$var$getMatchData;\n\n});\nparcelRegister(\"3OiOJ\", function(module, exports) {\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */ function $2c64a34fe4eb6413$var$isStrictComparable(value) {\n    return value === value && !$5M7nH(value);\n}\nmodule.exports = $2c64a34fe4eb6413$var$isStrictComparable;\n\n});\n\n\nparcelRegister(\"8gtlO\", function(module, exports) {\n/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */ function $604695d2d1781aa6$var$matchesStrictComparable(key, srcValue) {\n    return function(object) {\n        if (object == null) return false;\n        return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n    };\n}\nmodule.exports = $604695d2d1781aa6$var$matchesStrictComparable;\n\n});\n\n\nparcelRegister(\"kQ1gz\", function(module, exports) {\n\nvar $1AEGU = parcelRequire(\"1AEGU\");\n\nvar $hu792 = parcelRequire(\"hu792\");\n\nvar $byOzL = parcelRequire(\"byOzL\");\n\nvar $dE0Np = parcelRequire(\"dE0Np\");\n\nvar $3OiOJ = parcelRequire(\"3OiOJ\");\n\nvar $8gtlO = parcelRequire(\"8gtlO\");\n\nvar $bILU9 = parcelRequire(\"bILU9\");\n/** Used to compose bitmasks for value comparisons. */ var $f2b9a57087e1d365$var$COMPARE_PARTIAL_FLAG = 1, $f2b9a57087e1d365$var$COMPARE_UNORDERED_FLAG = 2;\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */ function $f2b9a57087e1d365$var$baseMatchesProperty(path, srcValue) {\n    if ($dE0Np(path) && $3OiOJ(srcValue)) return $8gtlO($bILU9(path), srcValue);\n    return function(object) {\n        var objValue = $hu792(object, path);\n        return objValue === undefined && objValue === srcValue ? $byOzL(object, path) : $1AEGU(srcValue, objValue, $f2b9a57087e1d365$var$COMPARE_PARTIAL_FLAG | $f2b9a57087e1d365$var$COMPARE_UNORDERED_FLAG);\n    };\n}\nmodule.exports = $f2b9a57087e1d365$var$baseMatchesProperty;\n\n});\nparcelRegister(\"hu792\", function(module, exports) {\n\nvar $cKBte = parcelRequire(\"cKBte\");\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */ function $cbaac7ced20b4929$var$get(object, path, defaultValue) {\n    var result = object == null ? undefined : $cKBte(object, path);\n    return result === undefined ? defaultValue : result;\n}\nmodule.exports = $cbaac7ced20b4929$var$get;\n\n});\nparcelRegister(\"cKBte\", function(module, exports) {\n\nvar $jm9v1 = parcelRequire(\"jm9v1\");\n\nvar $bILU9 = parcelRequire(\"bILU9\");\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */ function $9486d8be961c4716$var$baseGet(object, path) {\n    path = $jm9v1(path, object);\n    var index = 0, length = path.length;\n    while(object != null && index < length)object = object[$bILU9(path[index++])];\n    return index && index == length ? object : undefined;\n}\nmodule.exports = $9486d8be961c4716$var$baseGet;\n\n});\nparcelRegister(\"jm9v1\", function(module, exports) {\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $dE0Np = parcelRequire(\"dE0Np\");\n\nvar $aNrd2 = parcelRequire(\"aNrd2\");\n\nvar $9W9zf = parcelRequire(\"9W9zf\");\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */ function $e17770c502a09ab5$var$castPath(value, object) {\n    if ($6Lnro(value)) return value;\n    return $dE0Np(value, object) ? [\n        value\n    ] : $aNrd2($9W9zf(value));\n}\nmodule.exports = $e17770c502a09ab5$var$castPath;\n\n});\nparcelRegister(\"dE0Np\", function(module, exports) {\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/** Used to match property names within property paths. */ var $9eefa0d78952b95f$var$reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, $9eefa0d78952b95f$var$reIsPlainProp = /^\\w*$/;\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */ function $9eefa0d78952b95f$var$isKey(value, object) {\n    if ($6Lnro(value)) return false;\n    var type = typeof value;\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || $j04ie(value)) return true;\n    return $9eefa0d78952b95f$var$reIsPlainProp.test(value) || !$9eefa0d78952b95f$var$reIsDeepProp.test(value) || object != null && value in Object(object);\n}\nmodule.exports = $9eefa0d78952b95f$var$isKey;\n\n});\nparcelRegister(\"j04ie\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $dd5158e51011fd34$var$symbolTag = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function $dd5158e51011fd34$var$isSymbol(value) {\n    return typeof value == 'symbol' || $ksPtD(value) && $fuLlh(value) == $dd5158e51011fd34$var$symbolTag;\n}\nmodule.exports = $dd5158e51011fd34$var$isSymbol;\n\n});\n\n\nparcelRegister(\"aNrd2\", function(module, exports) {\n\nvar $kHdHL = parcelRequire(\"kHdHL\");\n/** Used to match property names within property paths. */ var $7dc3962ae283ab12$var$rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n/** Used to match backslashes in property paths. */ var $7dc3962ae283ab12$var$reEscapeChar = /\\\\(\\\\)?/g;\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */ var $7dc3962ae283ab12$var$stringToPath = $kHdHL(function(string) {\n    var result = [];\n    if (string.charCodeAt(0) === 46 /* . */ ) result.push('');\n    string.replace($7dc3962ae283ab12$var$rePropName, function(match, number, quote, subString) {\n        result.push(quote ? subString.replace($7dc3962ae283ab12$var$reEscapeChar, '$1') : number || match);\n    });\n    return result;\n});\nmodule.exports = $7dc3962ae283ab12$var$stringToPath;\n\n});\nparcelRegister(\"kHdHL\", function(module, exports) {\n\nvar $c8Nnd = parcelRequire(\"c8Nnd\");\n/** Used as the maximum memoize cache size. */ var $f112744dbbfaec80$var$MAX_MEMOIZE_SIZE = 500;\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */ function $f112744dbbfaec80$var$memoizeCapped(func) {\n    var result = $c8Nnd(func, function(key) {\n        if (cache.size === $f112744dbbfaec80$var$MAX_MEMOIZE_SIZE) cache.clear();\n        return key;\n    });\n    var cache = result.cache;\n    return result;\n}\nmodule.exports = $f112744dbbfaec80$var$memoizeCapped;\n\n});\nparcelRegister(\"c8Nnd\", function(module, exports) {\n\nvar $hmXFj = parcelRequire(\"hmXFj\");\n/** Error message constants. */ var $8d6c87e8e7838861$var$FUNC_ERROR_TEXT = 'Expected a function';\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */ function $8d6c87e8e7838861$var$memoize(func, resolver) {\n    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError($8d6c87e8e7838861$var$FUNC_ERROR_TEXT);\n    var memoized = function() {\n        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;\n        if (cache.has(key)) return cache.get(key);\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n    };\n    memoized.cache = new ($8d6c87e8e7838861$var$memoize.Cache || $hmXFj);\n    return memoized;\n}\n// Expose `MapCache`.\n$8d6c87e8e7838861$var$memoize.Cache = $hmXFj;\nmodule.exports = $8d6c87e8e7838861$var$memoize;\n\n});\n\n\n\nparcelRegister(\"9W9zf\", function(module, exports) {\n\nvar $dM8DA = parcelRequire(\"dM8DA\");\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */ function $73c0f3b98d07fea8$var$toString(value) {\n    return value == null ? '' : $dM8DA(value);\n}\nmodule.exports = $73c0f3b98d07fea8$var$toString;\n\n});\nparcelRegister(\"dM8DA\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n\nvar $4l7sD = parcelRequire(\"4l7sD\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/** Used as references for various `Number` constants. */ var $a07675429b0ed87e$var$INFINITY = 1 / 0;\n/** Used to convert symbols to primitives and strings. */ var $a07675429b0ed87e$var$symbolProto = $bx7XH ? $bx7XH.prototype : undefined, $a07675429b0ed87e$var$symbolToString = $a07675429b0ed87e$var$symbolProto ? $a07675429b0ed87e$var$symbolProto.toString : undefined;\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */ function $a07675429b0ed87e$var$baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') return value;\n    if ($6Lnro(value)) // Recursively convert values (susceptible to call stack limits).\n    return $4l7sD(value, $a07675429b0ed87e$var$baseToString) + '';\n    if ($j04ie(value)) return $a07675429b0ed87e$var$symbolToString ? $a07675429b0ed87e$var$symbolToString.call(value) : '';\n    var result = value + '';\n    return result == '0' && 1 / value == -$a07675429b0ed87e$var$INFINITY ? '-0' : result;\n}\nmodule.exports = $a07675429b0ed87e$var$baseToString;\n\n});\nparcelRegister(\"4l7sD\", function(module, exports) {\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */ function $328ee92ef6b76401$var$arrayMap(array, iteratee) {\n    var index = -1, length = array == null ? 0 : array.length, result = Array(length);\n    while(++index < length)result[index] = iteratee(array[index], index, array);\n    return result;\n}\nmodule.exports = $328ee92ef6b76401$var$arrayMap;\n\n});\n\n\n\n\nparcelRegister(\"bILU9\", function(module, exports) {\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/** Used as references for various `Number` constants. */ var $8888f6a808eb0e14$var$INFINITY = 1 / 0;\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */ function $8888f6a808eb0e14$var$toKey(value) {\n    if (typeof value == 'string' || $j04ie(value)) return value;\n    var result = value + '';\n    return result == '0' && 1 / value == -$8888f6a808eb0e14$var$INFINITY ? '-0' : result;\n}\nmodule.exports = $8888f6a808eb0e14$var$toKey;\n\n});\n\n\n\nparcelRegister(\"byOzL\", function(module, exports) {\n\nvar $kQOKJ = parcelRequire(\"kQOKJ\");\n\nvar $jptYe = parcelRequire(\"jptYe\");\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */ function $86aa1a04cd1f282c$var$hasIn(object, path) {\n    return object != null && $jptYe(object, path, $kQOKJ);\n}\nmodule.exports = $86aa1a04cd1f282c$var$hasIn;\n\n});\nparcelRegister(\"kQOKJ\", function(module, exports) {\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */ function $03ead6d852f73d93$var$baseHasIn(object, key) {\n    return object != null && key in Object(object);\n}\nmodule.exports = $03ead6d852f73d93$var$baseHasIn;\n\n});\n\nparcelRegister(\"jptYe\", function(module, exports) {\n\nvar $jm9v1 = parcelRequire(\"jm9v1\");\n\nvar $2bPgf = parcelRequire(\"2bPgf\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $lNCBD = parcelRequire(\"lNCBD\");\n\nvar $4VGZv = parcelRequire(\"4VGZv\");\n\nvar $bILU9 = parcelRequire(\"bILU9\");\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */ function $e217999c1c137d57$var$hasPath(object, path, hasFunc) {\n    path = $jm9v1(path, object);\n    var index = -1, length = path.length, result = false;\n    while(++index < length){\n        var key = $bILU9(path[index]);\n        if (!(result = object != null && hasFunc(object, key))) break;\n        object = object[key];\n    }\n    if (result || ++index != length) return result;\n    length = object == null ? 0 : object.length;\n    return !!length && $4VGZv(length) && $lNCBD(key, length) && ($6Lnro(object) || $2bPgf(object));\n}\nmodule.exports = $e217999c1c137d57$var$hasPath;\n\n});\n\n\n\nparcelRegister(\"3J2jz\", function(module, exports) {\n\nvar $79aVJ = parcelRequire(\"79aVJ\");\n\nvar $hrnKg = parcelRequire(\"hrnKg\");\n\nvar $dE0Np = parcelRequire(\"dE0Np\");\n\nvar $bILU9 = parcelRequire(\"bILU9\");\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */ function $2b675eba3b733f6f$var$property(path) {\n    return $dE0Np(path) ? $79aVJ($bILU9(path)) : $hrnKg(path);\n}\nmodule.exports = $2b675eba3b733f6f$var$property;\n\n});\nparcelRegister(\"79aVJ\", function(module, exports) {\n/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */ function $5341da31a06fd6a7$var$baseProperty(key) {\n    return function(object) {\n        return object == null ? undefined : object[key];\n    };\n}\nmodule.exports = $5341da31a06fd6a7$var$baseProperty;\n\n});\n\nparcelRegister(\"hrnKg\", function(module, exports) {\n\nvar $cKBte = parcelRequire(\"cKBte\");\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */ function $cb2760921e04e35a$var$basePropertyDeep(path) {\n    return function(object) {\n        return $cKBte(object, path);\n    };\n}\nmodule.exports = $cb2760921e04e35a$var$basePropertyDeep;\n\n});\n\n\n\n\nparcelRegister(\"9GT8b\", function(module, exports) {\n\nvar $l4vpG = parcelRequire(\"l4vpG\");\n\nvar $jptYe = parcelRequire(\"jptYe\");\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */ function $70e2cd2c859c6ba6$var$has(object, path) {\n    return object != null && $jptYe(object, path, $l4vpG);\n}\nmodule.exports = $70e2cd2c859c6ba6$var$has;\n\n});\nparcelRegister(\"l4vpG\", function(module, exports) {\n/** Used for built-in method references. */ var $f57256bb11b5b2af$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $f57256bb11b5b2af$var$hasOwnProperty = $f57256bb11b5b2af$var$objectProto.hasOwnProperty;\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */ function $f57256bb11b5b2af$var$baseHas(object, key) {\n    return object != null && $f57256bb11b5b2af$var$hasOwnProperty.call(object, key);\n}\nmodule.exports = $f57256bb11b5b2af$var$baseHas;\n\n});\n\n\nparcelRegister(\"8ku2x\", function(module, exports) {\n\nvar $2FU6Q = parcelRequire(\"2FU6Q\");\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $2bPgf = parcelRequire(\"2bPgf\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $5D2Yf = parcelRequire(\"5D2Yf\");\n\nvar $3562c = parcelRequire(\"3562c\");\n/** `Object#toString` result references. */ var $61077e4affdce168$var$mapTag = '[object Map]', $61077e4affdce168$var$setTag = '[object Set]';\n/** Used for built-in method references. */ var $61077e4affdce168$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $61077e4affdce168$var$hasOwnProperty = $61077e4affdce168$var$objectProto.hasOwnProperty;\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */ function $61077e4affdce168$var$isEmpty(value) {\n    if (value == null) return true;\n    if ($1AdOh(value) && ($6Lnro(value) || typeof value == 'string' || typeof value.splice == 'function' || $8yjfX(value) || $3562c(value) || $2bPgf(value))) return !value.length;\n    var tag = $fMYcx(value);\n    if (tag == $61077e4affdce168$var$mapTag || tag == $61077e4affdce168$var$setTag) return !value.size;\n    if ($5D2Yf(value)) return !$2FU6Q(value).length;\n    for(var key in value){\n        if ($61077e4affdce168$var$hasOwnProperty.call(value, key)) return false;\n    }\n    return true;\n}\nmodule.exports = $61077e4affdce168$var$isEmpty;\n\n});\n\nparcelRegister(\"5VjJh\", function(module, exports) {\n/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */ function $4501947348bd7136$var$isUndefined(value) {\n    return value === undefined;\n}\nmodule.exports = $4501947348bd7136$var$isUndefined;\n\n});\n\nparcelRegister(\"2TKBM\", function(module, exports) {\n\nvar $4l7sD = parcelRequire(\"4l7sD\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $aElIh = parcelRequire(\"aElIh\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */ function $21c4df408205dd85$var$map(collection, iteratee) {\n    var func = $6Lnro(collection) ? $4l7sD : $aElIh;\n    return func(collection, $91VgU(iteratee, 3));\n}\nmodule.exports = $21c4df408205dd85$var$map;\n\n});\nparcelRegister(\"aElIh\", function(module, exports) {\n\nvar $2wHzT = parcelRequire(\"2wHzT\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */ function $7c0e7b9ce0954eeb$var$baseMap(collection, iteratee) {\n    var index = -1, result = $1AdOh(collection) ? Array(collection.length) : [];\n    $2wHzT(collection, function(value, key, collection) {\n        result[++index] = iteratee(value, key, collection);\n    });\n    return result;\n}\nmodule.exports = $7c0e7b9ce0954eeb$var$baseMap;\n\n});\n\n\nparcelRegister(\"9NasI\", function(module, exports) {\n\nvar $2eQb6 = parcelRequire(\"2eQb6\");\n\nvar $2wHzT = parcelRequire(\"2wHzT\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $9sSmW = parcelRequire(\"9sSmW\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see _.reduceRight\n * @example\n *\n * _.reduce([1, 2], function(sum, n) {\n *   return sum + n;\n * }, 0);\n * // => 3\n *\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n *   return result;\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n */ function $7210ce34a2c8a362$var$reduce(collection, iteratee, accumulator) {\n    var func = $6Lnro(collection) ? $2eQb6 : $9sSmW, initAccum = arguments.length < 3;\n    return func(collection, $91VgU(iteratee, 4), accumulator, initAccum, $2wHzT);\n}\nmodule.exports = $7210ce34a2c8a362$var$reduce;\n\n});\nparcelRegister(\"2eQb6\", function(module, exports) {\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */ function $1a155d0a2e57e0b0$var$arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1, length = array == null ? 0 : array.length;\n    if (initAccum && length) accumulator = array[++index];\n    while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);\n    return accumulator;\n}\nmodule.exports = $1a155d0a2e57e0b0$var$arrayReduce;\n\n});\n\nparcelRegister(\"9sSmW\", function(module, exports) {\n/**\n * The base implementation of `_.reduce` and `_.reduceRight`, without support\n * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} accumulator The initial value.\n * @param {boolean} initAccum Specify using the first or last element of\n *  `collection` as the initial value.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the accumulated value.\n */ function $6e40e71ff5881945$var$baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function(value, index, collection) {\n        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);\n    });\n    return accumulator;\n}\nmodule.exports = $6e40e71ff5881945$var$baseReduce;\n\n});\n\n\nparcelRegister(\"Wt5Gh\", function(module, exports) {\n\nvar $2FU6Q = parcelRequire(\"2FU6Q\");\n\nvar $fMYcx = parcelRequire(\"fMYcx\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n\nvar $7G2fC = parcelRequire(\"7G2fC\");\n\nvar $8etUN = parcelRequire(\"8etUN\");\n/** `Object#toString` result references. */ var $0afbfbafe6805018$var$mapTag = '[object Map]', $0afbfbafe6805018$var$setTag = '[object Set]';\n/**\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * _.size([1, 2, 3]);\n * // => 3\n *\n * _.size({ 'a': 1, 'b': 2 });\n * // => 2\n *\n * _.size('pebbles');\n * // => 7\n */ function $0afbfbafe6805018$var$size(collection) {\n    if (collection == null) return 0;\n    if ($1AdOh(collection)) return $7G2fC(collection) ? $8etUN(collection) : collection.length;\n    var tag = $fMYcx(collection);\n    if (tag == $0afbfbafe6805018$var$mapTag || tag == $0afbfbafe6805018$var$setTag) return collection.size;\n    return $2FU6Q(collection).length;\n}\nmodule.exports = $0afbfbafe6805018$var$size;\n\n});\nparcelRegister(\"7G2fC\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $596e33a00da874a7$var$stringTag = '[object String]';\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */ function $596e33a00da874a7$var$isString(value) {\n    return typeof value == 'string' || !$6Lnro(value) && $ksPtD(value) && $fuLlh(value) == $596e33a00da874a7$var$stringTag;\n}\nmodule.exports = $596e33a00da874a7$var$isString;\n\n});\n\nparcelRegister(\"8etUN\", function(module, exports) {\n\nvar $klJKL = parcelRequire(\"klJKL\");\n\nvar $iqzji = parcelRequire(\"iqzji\");\n\nvar $b5jGx = parcelRequire(\"b5jGx\");\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */ function $5fe6d60c1d99bf25$var$stringSize(string) {\n    return $iqzji(string) ? $b5jGx(string) : $klJKL(string);\n}\nmodule.exports = $5fe6d60c1d99bf25$var$stringSize;\n\n});\nparcelRegister(\"klJKL\", function(module, exports) {\n\nvar $79aVJ = parcelRequire(\"79aVJ\");\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */ var $ed09427566ef8743$var$asciiSize = $79aVJ('length');\nmodule.exports = $ed09427566ef8743$var$asciiSize;\n\n});\n\nparcelRegister(\"iqzji\", function(module, exports) {\n/** Used to compose unicode character classes. */ var $d6a60b8dc846a37e$var$rsAstralRange = '\\\\ud800-\\\\udfff', $d6a60b8dc846a37e$var$rsComboMarksRange = '\\\\u0300-\\\\u036f', $d6a60b8dc846a37e$var$reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f', $d6a60b8dc846a37e$var$rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff', $d6a60b8dc846a37e$var$rsComboRange = $d6a60b8dc846a37e$var$rsComboMarksRange + $d6a60b8dc846a37e$var$reComboHalfMarksRange + $d6a60b8dc846a37e$var$rsComboSymbolsRange, $d6a60b8dc846a37e$var$rsVarRange = '\\\\ufe0e\\\\ufe0f';\n/** Used to compose unicode capture groups. */ var $d6a60b8dc846a37e$var$rsZWJ = '\\\\u200d';\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var $d6a60b8dc846a37e$var$reHasUnicode = RegExp('[' + $d6a60b8dc846a37e$var$rsZWJ + $d6a60b8dc846a37e$var$rsAstralRange + $d6a60b8dc846a37e$var$rsComboRange + $d6a60b8dc846a37e$var$rsVarRange + ']');\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */ function $d6a60b8dc846a37e$var$hasUnicode(string) {\n    return $d6a60b8dc846a37e$var$reHasUnicode.test(string);\n}\nmodule.exports = $d6a60b8dc846a37e$var$hasUnicode;\n\n});\n\nparcelRegister(\"b5jGx\", function(module, exports) {\n/** Used to compose unicode character classes. */ var $811f6e6660e323d4$var$rsAstralRange = '\\\\ud800-\\\\udfff', $811f6e6660e323d4$var$rsComboMarksRange = '\\\\u0300-\\\\u036f', $811f6e6660e323d4$var$reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f', $811f6e6660e323d4$var$rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff', $811f6e6660e323d4$var$rsComboRange = $811f6e6660e323d4$var$rsComboMarksRange + $811f6e6660e323d4$var$reComboHalfMarksRange + $811f6e6660e323d4$var$rsComboSymbolsRange, $811f6e6660e323d4$var$rsVarRange = '\\\\ufe0e\\\\ufe0f';\n/** Used to compose unicode capture groups. */ var $811f6e6660e323d4$var$rsAstral = '[' + $811f6e6660e323d4$var$rsAstralRange + ']', $811f6e6660e323d4$var$rsCombo = '[' + $811f6e6660e323d4$var$rsComboRange + ']', $811f6e6660e323d4$var$rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]', $811f6e6660e323d4$var$rsModifier = '(?:' + $811f6e6660e323d4$var$rsCombo + '|' + $811f6e6660e323d4$var$rsFitz + ')', $811f6e6660e323d4$var$rsNonAstral = '[^' + $811f6e6660e323d4$var$rsAstralRange + ']', $811f6e6660e323d4$var$rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}', $811f6e6660e323d4$var$rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]', $811f6e6660e323d4$var$rsZWJ = '\\\\u200d';\n/** Used to compose unicode regexes. */ var $811f6e6660e323d4$var$reOptMod = $811f6e6660e323d4$var$rsModifier + '?', $811f6e6660e323d4$var$rsOptVar = '[' + $811f6e6660e323d4$var$rsVarRange + ']?', $811f6e6660e323d4$var$rsOptJoin = '(?:' + $811f6e6660e323d4$var$rsZWJ + '(?:' + [\n    $811f6e6660e323d4$var$rsNonAstral,\n    $811f6e6660e323d4$var$rsRegional,\n    $811f6e6660e323d4$var$rsSurrPair\n].join('|') + ')' + $811f6e6660e323d4$var$rsOptVar + $811f6e6660e323d4$var$reOptMod + ')*', $811f6e6660e323d4$var$rsSeq = $811f6e6660e323d4$var$rsOptVar + $811f6e6660e323d4$var$reOptMod + $811f6e6660e323d4$var$rsOptJoin, $811f6e6660e323d4$var$rsSymbol = '(?:' + [\n    $811f6e6660e323d4$var$rsNonAstral + $811f6e6660e323d4$var$rsCombo + '?',\n    $811f6e6660e323d4$var$rsCombo,\n    $811f6e6660e323d4$var$rsRegional,\n    $811f6e6660e323d4$var$rsSurrPair,\n    $811f6e6660e323d4$var$rsAstral\n].join('|') + ')';\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var $811f6e6660e323d4$var$reUnicode = RegExp($811f6e6660e323d4$var$rsFitz + '(?=' + $811f6e6660e323d4$var$rsFitz + ')|' + $811f6e6660e323d4$var$rsSymbol + $811f6e6660e323d4$var$rsSeq, 'g');\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */ function $811f6e6660e323d4$var$unicodeSize(string) {\n    var result = $811f6e6660e323d4$var$reUnicode.lastIndex = 0;\n    while($811f6e6660e323d4$var$reUnicode.test(string))++result;\n    return result;\n}\nmodule.exports = $811f6e6660e323d4$var$unicodeSize;\n\n});\n\n\n\nparcelRegister(\"h1I6F\", function(module, exports) {\n\nvar $jqArt = parcelRequire(\"jqArt\");\n\nvar $hV6rv = parcelRequire(\"hV6rv\");\n\nvar $bOxbJ = parcelRequire(\"bOxbJ\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $ir9nt = parcelRequire(\"ir9nt\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $jszNw = parcelRequire(\"jszNw\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $3562c = parcelRequire(\"3562c\");\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */ function $c654be52ecdd05dc$var$transform(object, iteratee, accumulator) {\n    var isArr = $6Lnro(object), isArrLike = isArr || $8yjfX(object) || $3562c(object);\n    iteratee = $91VgU(iteratee, 4);\n    if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) accumulator = isArr ? new Ctor : [];\n        else if ($5M7nH(object)) accumulator = $jszNw(Ctor) ? $hV6rv($ir9nt(object)) : {};\n        else accumulator = {};\n    }\n    (isArrLike ? $jqArt : $bOxbJ)(object, function(value, index, object) {\n        return iteratee(accumulator, value, index, object);\n    });\n    return accumulator;\n}\nmodule.exports = $c654be52ecdd05dc$var$transform;\n\n});\n\nparcelRegister(\"eWafo\", function(module, exports) {\n\nvar $5PH3S = parcelRequire(\"5PH3S\");\n\nvar $2WVBI = parcelRequire(\"2WVBI\");\n\nvar $2eV3d = parcelRequire(\"2eV3d\");\n\nvar $bK0EM = parcelRequire(\"bK0EM\");\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */ var $adfe6e5d8181f932$var$union = $2WVBI(function(arrays) {\n    return $2eV3d($5PH3S(arrays, 1, $bK0EM, true));\n});\nmodule.exports = $adfe6e5d8181f932$var$union;\n\n});\nparcelRegister(\"5PH3S\", function(module, exports) {\n\nvar $1m8p8 = parcelRequire(\"1m8p8\");\n\nvar $jfVlw = parcelRequire(\"jfVlw\");\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */ function $43f31e49104db88d$var$baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1, length = array.length;\n    predicate || (predicate = $jfVlw);\n    result || (result = []);\n    while(++index < length){\n        var value = array[index];\n        if (depth > 0 && predicate(value)) {\n            if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).\n            $43f31e49104db88d$var$baseFlatten(value, depth - 1, predicate, isStrict, result);\n            else $1m8p8(result, value);\n        } else if (!isStrict) result[result.length] = value;\n    }\n    return result;\n}\nmodule.exports = $43f31e49104db88d$var$baseFlatten;\n\n});\nparcelRegister(\"jfVlw\", function(module, exports) {\n\nvar $bx7XH = parcelRequire(\"bx7XH\");\n\nvar $2bPgf = parcelRequire(\"2bPgf\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/** Built-in value references. */ var $e04be6ca01730077$var$spreadableSymbol = $bx7XH ? $bx7XH.isConcatSpreadable : undefined;\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */ function $e04be6ca01730077$var$isFlattenable(value) {\n    return $6Lnro(value) || $2bPgf(value) || !!($e04be6ca01730077$var$spreadableSymbol && value && value[$e04be6ca01730077$var$spreadableSymbol]);\n}\nmodule.exports = $e04be6ca01730077$var$isFlattenable;\n\n});\n\n\nparcelRegister(\"2WVBI\", function(module, exports) {\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n\nvar $dqf3K = parcelRequire(\"dqf3K\");\n\nvar $37GKK = parcelRequire(\"37GKK\");\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */ function $225daf290fadaab8$var$baseRest(func, start) {\n    return $37GKK($dqf3K(func, start, $1OIBO), func + '');\n}\nmodule.exports = $225daf290fadaab8$var$baseRest;\n\n});\nparcelRegister(\"dqf3K\", function(module, exports) {\n\nvar $3W5k5 = parcelRequire(\"3W5k5\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $9c5962941f2b869d$var$nativeMax = Math.max;\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */ function $9c5962941f2b869d$var$overRest(func, start, transform) {\n    start = $9c5962941f2b869d$var$nativeMax(start === undefined ? func.length - 1 : start, 0);\n    return function() {\n        var args = arguments, index = -1, length = $9c5962941f2b869d$var$nativeMax(args.length - start, 0), array = Array(length);\n        while(++index < length)array[index] = args[start + index];\n        index = -1;\n        var otherArgs = Array(start + 1);\n        while(++index < start)otherArgs[index] = args[index];\n        otherArgs[start] = transform(array);\n        return $3W5k5(func, this, otherArgs);\n    };\n}\nmodule.exports = $9c5962941f2b869d$var$overRest;\n\n});\nparcelRegister(\"3W5k5\", function(module, exports) {\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */ function $2ddaeaec51bceb6d$var$apply(func, thisArg, args) {\n    switch(args.length){\n        case 0:\n            return func.call(thisArg);\n        case 1:\n            return func.call(thisArg, args[0]);\n        case 2:\n            return func.call(thisArg, args[0], args[1]);\n        case 3:\n            return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n}\nmodule.exports = $2ddaeaec51bceb6d$var$apply;\n\n});\n\n\nparcelRegister(\"37GKK\", function(module, exports) {\n\nvar $dLIsd = parcelRequire(\"dLIsd\");\n\nvar $9jbDA = parcelRequire(\"9jbDA\");\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var $2463306520d28a19$var$setToString = $9jbDA($dLIsd);\nmodule.exports = $2463306520d28a19$var$setToString;\n\n});\nparcelRegister(\"dLIsd\", function(module, exports) {\n\nvar $b9IkD = parcelRequire(\"b9IkD\");\n\nvar $u8Dni = parcelRequire(\"u8Dni\");\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */ var $a06225c996f4b897$var$baseSetToString = !$u8Dni ? $1OIBO : function(func, string) {\n    return $u8Dni(func, 'toString', {\n        'configurable': true,\n        'enumerable': false,\n        'value': $b9IkD(string),\n        'writable': true\n    });\n};\nmodule.exports = $a06225c996f4b897$var$baseSetToString;\n\n});\n\nparcelRegister(\"9jbDA\", function(module, exports) {\n/** Used to detect hot functions by number of calls within a span of milliseconds. */ var $6c6eea609b86201e$var$HOT_COUNT = 800, $6c6eea609b86201e$var$HOT_SPAN = 16;\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $6c6eea609b86201e$var$nativeNow = Date.now;\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */ function $6c6eea609b86201e$var$shortOut(func) {\n    var count = 0, lastCalled = 0;\n    return function() {\n        var stamp = $6c6eea609b86201e$var$nativeNow(), remaining = $6c6eea609b86201e$var$HOT_SPAN - (stamp - lastCalled);\n        lastCalled = stamp;\n        if (remaining > 0) {\n            if (++count >= $6c6eea609b86201e$var$HOT_COUNT) return arguments[0];\n        } else count = 0;\n        return func.apply(undefined, arguments);\n    };\n}\nmodule.exports = $6c6eea609b86201e$var$shortOut;\n\n});\n\n\n\nparcelRegister(\"2eV3d\", function(module, exports) {\n\nvar $7UV5f = parcelRequire(\"7UV5f\");\n\nvar $f277b = parcelRequire(\"f277b\");\n\nvar $8ZF7f = parcelRequire(\"8ZF7f\");\n\nvar $6thNy = parcelRequire(\"6thNy\");\n\nvar $7gjXW = parcelRequire(\"7gjXW\");\n\nvar $acQM1 = parcelRequire(\"acQM1\");\n/** Used as the size to enable large array optimizations. */ var $1a1924b52ff595d1$var$LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */ function $1a1924b52ff595d1$var$baseUniq(array, iteratee, comparator) {\n    var index = -1, includes = $f277b, length = array.length, isCommon = true, result = [], seen = result;\n    if (comparator) {\n        isCommon = false;\n        includes = $8ZF7f;\n    } else if (length >= $1a1924b52ff595d1$var$LARGE_ARRAY_SIZE) {\n        var set = iteratee ? null : $7gjXW(array);\n        if (set) return $acQM1(set);\n        isCommon = false;\n        includes = $6thNy;\n        seen = new $7UV5f;\n    } else seen = iteratee ? [] : result;\n    outer: while(++index < length){\n        var value = array[index], computed = iteratee ? iteratee(value) : value;\n        value = comparator || value !== 0 ? value : 0;\n        if (isCommon && computed === computed) {\n            var seenIndex = seen.length;\n            while(seenIndex--){\n                if (seen[seenIndex] === computed) continue outer;\n            }\n            if (iteratee) seen.push(computed);\n            result.push(value);\n        } else if (!includes(seen, computed, comparator)) {\n            if (seen !== result) seen.push(computed);\n            result.push(value);\n        }\n    }\n    return result;\n}\nmodule.exports = $1a1924b52ff595d1$var$baseUniq;\n\n});\nparcelRegister(\"f277b\", function(module, exports) {\n\nvar $030fg = parcelRequire(\"030fg\");\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */ function $af1c8fc29870f4ad$var$arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && $030fg(array, value, 0) > -1;\n}\nmodule.exports = $af1c8fc29870f4ad$var$arrayIncludes;\n\n});\nparcelRegister(\"030fg\", function(module, exports) {\n\nvar $f8TvI = parcelRequire(\"f8TvI\");\n\nvar $8er12 = parcelRequire(\"8er12\");\n\nvar $jHziP = parcelRequire(\"jHziP\");\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function $009078a01a835d6b$var$baseIndexOf(array, value, fromIndex) {\n    return value === value ? $jHziP(array, value, fromIndex) : $f8TvI(array, $8er12, fromIndex);\n}\nmodule.exports = $009078a01a835d6b$var$baseIndexOf;\n\n});\nparcelRegister(\"f8TvI\", function(module, exports) {\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function $b062a99baa58477c$var$baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);\n    while(fromRight ? index-- : ++index < length){\n        if (predicate(array[index], index, array)) return index;\n    }\n    return -1;\n}\nmodule.exports = $b062a99baa58477c$var$baseFindIndex;\n\n});\n\nparcelRegister(\"8er12\", function(module, exports) {\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */ function $5fe4964b4cef408c$var$baseIsNaN(value) {\n    return value !== value;\n}\nmodule.exports = $5fe4964b4cef408c$var$baseIsNaN;\n\n});\n\nparcelRegister(\"jHziP\", function(module, exports) {\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */ function $e57d6ad92e8fe4cb$var$strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1, length = array.length;\n    while(++index < length){\n        if (array[index] === value) return index;\n    }\n    return -1;\n}\nmodule.exports = $e57d6ad92e8fe4cb$var$strictIndexOf;\n\n});\n\n\n\nparcelRegister(\"8ZF7f\", function(module, exports) {\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */ function $68c3ea0352a66160$var$arrayIncludesWith(array, value, comparator) {\n    var index = -1, length = array == null ? 0 : array.length;\n    while(++index < length){\n        if (comparator(value, array[index])) return true;\n    }\n    return false;\n}\nmodule.exports = $68c3ea0352a66160$var$arrayIncludesWith;\n\n});\n\nparcelRegister(\"7gjXW\", function(module, exports) {\n\nvar $c4Q9m = parcelRequire(\"c4Q9m\");\n\nvar $hzUgc = parcelRequire(\"hzUgc\");\n\nvar $acQM1 = parcelRequire(\"acQM1\");\n/** Used as references for various `Number` constants. */ var $549983d1a56609b3$var$INFINITY = 1 / 0;\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */ var $549983d1a56609b3$var$createSet = !($c4Q9m && 1 / $acQM1(new $c4Q9m([\n    ,\n    -0\n]))[1] == $549983d1a56609b3$var$INFINITY) ? $hzUgc : function(values) {\n    return new $c4Q9m(values);\n};\nmodule.exports = $549983d1a56609b3$var$createSet;\n\n});\nparcelRegister(\"hzUgc\", function(module, exports) {\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */ function $ccc158a9eb848c4f$var$noop() {\n// No operation performed.\n}\nmodule.exports = $ccc158a9eb848c4f$var$noop;\n\n});\n\n\n\nparcelRegister(\"bK0EM\", function(module, exports) {\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */ function $88c4800079c59f91$var$isArrayLikeObject(value) {\n    return $ksPtD(value) && $1AdOh(value);\n}\nmodule.exports = $88c4800079c59f91$var$isArrayLikeObject;\n\n});\n\n\nparcelRegister(\"eolCs\", function(module, exports) {\n\nvar $jRbvr = parcelRequire(\"jRbvr\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */ function $a7a413b45357bdc3$var$values(object) {\n    return object == null ? [] : $jRbvr(object, $j7Pgn(object));\n}\nmodule.exports = $a7a413b45357bdc3$var$values;\n\n});\nparcelRegister(\"jRbvr\", function(module, exports) {\n\nvar $4l7sD = parcelRequire(\"4l7sD\");\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */ function $03bb07d03029c437$var$baseValues(object, props) {\n    return $4l7sD(props, function(key) {\n        return object[key];\n    });\n}\nmodule.exports = $03bb07d03029c437$var$baseValues;\n\n});\n\n\n\n\nparcelRegister(\"6G3oS\", function(module, exports) {\nmodule.exports = '2.1.8';\n\n});\n\n\nparcelRegister(\"9f8tS\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\n\nvar $eK8oE = parcelRequire(\"eK8oE\");\nmodule.exports = {\n    write: $6bac17ea3a86f1b0$var$write,\n    read: $6bac17ea3a86f1b0$var$read\n};\nfunction $6bac17ea3a86f1b0$var$write(g) {\n    var json = {\n        options: {\n            directed: g.isDirected(),\n            multigraph: g.isMultigraph(),\n            compound: g.isCompound()\n        },\n        nodes: $6bac17ea3a86f1b0$var$writeNodes(g),\n        edges: $6bac17ea3a86f1b0$var$writeEdges(g)\n    };\n    if (!$dE3aD.isUndefined(g.graph())) json.value = $dE3aD.clone(g.graph());\n    return json;\n}\nfunction $6bac17ea3a86f1b0$var$writeNodes(g) {\n    return $dE3aD.map(g.nodes(), function(v) {\n        var nodeValue = g.node(v);\n        var parent = g.parent(v);\n        var node = {\n            v: v\n        };\n        if (!$dE3aD.isUndefined(nodeValue)) node.value = nodeValue;\n        if (!$dE3aD.isUndefined(parent)) node.parent = parent;\n        return node;\n    });\n}\nfunction $6bac17ea3a86f1b0$var$writeEdges(g) {\n    return $dE3aD.map(g.edges(), function(e) {\n        var edgeValue = g.edge(e);\n        var edge = {\n            v: e.v,\n            w: e.w\n        };\n        if (!$dE3aD.isUndefined(e.name)) edge.name = e.name;\n        if (!$dE3aD.isUndefined(edgeValue)) edge.value = edgeValue;\n        return edge;\n    });\n}\nfunction $6bac17ea3a86f1b0$var$read(json) {\n    var g = new $eK8oE(json.options).setGraph(json.value);\n    $dE3aD.each(json.nodes, function(entry) {\n        g.setNode(entry.v, entry.value);\n        if (entry.parent) g.setParent(entry.v, entry.parent);\n    });\n    $dE3aD.each(json.edges, function(entry) {\n        g.setEdge({\n            v: entry.v,\n            w: entry.w,\n            name: entry.name\n        }, entry.value);\n    });\n    return g;\n}\n\n});\n\nparcelRegister(\"768Bj\", function(module, exports) {\n\n\n\n\n\n\n\n\n\n\n\nmodule.exports = {\n    components: (parcelRequire(\"gd6GX\")),\n    dijkstra: (parcelRequire(\"8icgS\")),\n    dijkstraAll: (parcelRequire(\"8bNME\")),\n    findCycles: (parcelRequire(\"adIh3\")),\n    floydWarshall: (parcelRequire(\"7QUkP\")),\n    isAcyclic: (parcelRequire(\"9GWhF\")),\n    postorder: (parcelRequire(\"gRywx\")),\n    preorder: (parcelRequire(\"bXHU9\")),\n    prim: (parcelRequire(\"lUPCj\")),\n    tarjan: (parcelRequire(\"2qJhE\")),\n    topsort: (parcelRequire(\"j1lry\"))\n};\n\n});\nparcelRegister(\"gd6GX\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $bcd30d1c7a8da7f2$var$components;\nfunction $bcd30d1c7a8da7f2$var$components(g) {\n    var visited = {};\n    var cmpts = [];\n    var cmpt;\n    function dfs(v) {\n        if ($dE3aD.has(visited, v)) return;\n        visited[v] = true;\n        cmpt.push(v);\n        $dE3aD.each(g.successors(v), dfs);\n        $dE3aD.each(g.predecessors(v), dfs);\n    }\n    $dE3aD.each(g.nodes(), function(v) {\n        cmpt = [];\n        dfs(v);\n        if (cmpt.length) cmpts.push(cmpt);\n    });\n    return cmpts;\n}\n\n});\n\nparcelRegister(\"8icgS\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\n\nvar $f2pjm = parcelRequire(\"f2pjm\");\nmodule.exports = $609985fa2aab41f8$var$dijkstra;\nvar $609985fa2aab41f8$var$DEFAULT_WEIGHT_FUNC = $dE3aD.constant(1);\nfunction $609985fa2aab41f8$var$dijkstra(g, source, weightFn, edgeFn) {\n    return $609985fa2aab41f8$var$runDijkstra(g, String(source), weightFn || $609985fa2aab41f8$var$DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {\n        return g.outEdges(v);\n    });\n}\nfunction $609985fa2aab41f8$var$runDijkstra(g, source, weightFn, edgeFn) {\n    var results = {};\n    var pq = new $f2pjm();\n    var v, vEntry;\n    var updateNeighbors = function(edge) {\n        var w = edge.v !== v ? edge.v : edge.w;\n        var wEntry = results[w];\n        var weight = weightFn(edge);\n        var distance = vEntry.distance + weight;\n        if (weight < 0) throw new Error(\"dijkstra does not allow negative edge weights. Bad edge: \" + edge + \" Weight: \" + weight);\n        if (distance < wEntry.distance) {\n            wEntry.distance = distance;\n            wEntry.predecessor = v;\n            pq.decrease(w, distance);\n        }\n    };\n    g.nodes().forEach(function(v) {\n        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n        results[v] = {\n            distance: distance\n        };\n        pq.add(v, distance);\n    });\n    while(pq.size() > 0){\n        v = pq.removeMin();\n        vEntry = results[v];\n        if (vEntry.distance === Number.POSITIVE_INFINITY) break;\n        edgeFn(v).forEach(updateNeighbors);\n    }\n    return results;\n}\n\n});\nparcelRegister(\"f2pjm\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $af2aad3c37a2d705$var$PriorityQueue;\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */ function $af2aad3c37a2d705$var$PriorityQueue() {\n    this._arr = [];\n    this._keyIndices = {};\n}\n/**\n * Returns the number of elements in the queue. Takes `O(1)` time.\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.size = function() {\n    return this._arr.length;\n};\n/**\n * Returns the keys that are in the queue. Takes `O(n)` time.\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.keys = function() {\n    return this._arr.map(function(x) {\n        return x.key;\n    });\n};\n/**\n * Returns `true` if **key** is in the queue and `false` if not.\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.has = function(key) {\n    return $dE3aD.has(this._keyIndices, key);\n};\n/**\n * Returns the priority for **key**. If **key** is not present in the queue\n * then this function returns `undefined`. Takes `O(1)` time.\n *\n * @param {Object} key\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.priority = function(key) {\n    var index = this._keyIndices[key];\n    if (index !== undefined) return this._arr[index].priority;\n};\n/**\n * Returns the key for the minimum element in this queue. If the queue is\n * empty this function throws an Error. Takes `O(1)` time.\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.min = function() {\n    if (this.size() === 0) throw new Error(\"Queue underflow\");\n    return this._arr[0].key;\n};\n/**\n * Inserts a new key into the priority queue. If the key already exists in\n * the queue this function returns `false`; otherwise it will return `true`.\n * Takes `O(n)` time.\n *\n * @param {Object} key the key to add\n * @param {Number} priority the initial priority for the key\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.add = function(key, priority) {\n    var keyIndices = this._keyIndices;\n    key = String(key);\n    if (!$dE3aD.has(keyIndices, key)) {\n        var arr = this._arr;\n        var index = arr.length;\n        keyIndices[key] = index;\n        arr.push({\n            key: key,\n            priority: priority\n        });\n        this._decrease(index);\n        return true;\n    }\n    return false;\n};\n/**\n * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.removeMin = function() {\n    this._swap(0, this._arr.length - 1);\n    var min = this._arr.pop();\n    delete this._keyIndices[min.key];\n    this._heapify(0);\n    return min.key;\n};\n/**\n * Decreases the priority for **key** to **priority**. If the new priority is\n * greater than the previous priority, this function will throw an Error.\n *\n * @param {Object} key the key for which to raise priority\n * @param {Number} priority the new priority for the key\n */ $af2aad3c37a2d705$var$PriorityQueue.prototype.decrease = function(key, priority) {\n    var index = this._keyIndices[key];\n    if (priority > this._arr[index].priority) throw new Error(\"New priority is greater than current priority. Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\n    this._arr[index].priority = priority;\n    this._decrease(index);\n};\n$af2aad3c37a2d705$var$PriorityQueue.prototype._heapify = function(i) {\n    var arr = this._arr;\n    var l = 2 * i;\n    var r = l + 1;\n    var largest = i;\n    if (l < arr.length) {\n        largest = arr[l].priority < arr[largest].priority ? l : largest;\n        if (r < arr.length) largest = arr[r].priority < arr[largest].priority ? r : largest;\n        if (largest !== i) {\n            this._swap(i, largest);\n            this._heapify(largest);\n        }\n    }\n};\n$af2aad3c37a2d705$var$PriorityQueue.prototype._decrease = function(index) {\n    var arr = this._arr;\n    var priority = arr[index].priority;\n    var parent;\n    while(index !== 0){\n        parent = index >> 1;\n        if (arr[parent].priority < priority) break;\n        this._swap(index, parent);\n        index = parent;\n    }\n};\n$af2aad3c37a2d705$var$PriorityQueue.prototype._swap = function(i, j) {\n    var arr = this._arr;\n    var keyIndices = this._keyIndices;\n    var origArrI = arr[i];\n    var origArrJ = arr[j];\n    arr[i] = origArrJ;\n    arr[j] = origArrI;\n    keyIndices[origArrJ.key] = i;\n    keyIndices[origArrI.key] = j;\n};\n\n});\n\n\nparcelRegister(\"8bNME\", function(module, exports) {\n\nvar $8icgS = parcelRequire(\"8icgS\");\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $5f65f7d61d68a9e5$var$dijkstraAll;\nfunction $5f65f7d61d68a9e5$var$dijkstraAll(g, weightFunc, edgeFunc) {\n    return $dE3aD.transform(g.nodes(), function(acc, v) {\n        acc[v] = $8icgS(g, v, weightFunc, edgeFunc);\n    }, {});\n}\n\n});\n\nparcelRegister(\"adIh3\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\n\nvar $2qJhE = parcelRequire(\"2qJhE\");\nmodule.exports = $770d762da1c36ef4$var$findCycles;\nfunction $770d762da1c36ef4$var$findCycles(g) {\n    return $dE3aD.filter($2qJhE(g), function(cmpt) {\n        return cmpt.length > 1 || cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]);\n    });\n}\n\n});\nparcelRegister(\"2qJhE\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $1c5122de3eff86e6$var$tarjan;\nfunction $1c5122de3eff86e6$var$tarjan(g) {\n    var index = 0;\n    var stack = [];\n    var visited = {}; // node id -> { onStack, lowlink, index }\n    var results = [];\n    function dfs(v) {\n        var entry = visited[v] = {\n            onStack: true,\n            lowlink: index,\n            index: index++\n        };\n        stack.push(v);\n        g.successors(v).forEach(function(w) {\n            if (!$dE3aD.has(visited, w)) {\n                dfs(w);\n                entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n            } else if (visited[w].onStack) entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n        });\n        if (entry.lowlink === entry.index) {\n            var cmpt = [];\n            var w;\n            do {\n                w = stack.pop();\n                visited[w].onStack = false;\n                cmpt.push(w);\n            }while (v !== w);\n            results.push(cmpt);\n        }\n    }\n    g.nodes().forEach(function(v) {\n        if (!$dE3aD.has(visited, v)) dfs(v);\n    });\n    return results;\n}\n\n});\n\n\nparcelRegister(\"7QUkP\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $5b7916b02e8f5e57$var$floydWarshall;\nvar $5b7916b02e8f5e57$var$DEFAULT_WEIGHT_FUNC = $dE3aD.constant(1);\nfunction $5b7916b02e8f5e57$var$floydWarshall(g, weightFn, edgeFn) {\n    return $5b7916b02e8f5e57$var$runFloydWarshall(g, weightFn || $5b7916b02e8f5e57$var$DEFAULT_WEIGHT_FUNC, edgeFn || function(v) {\n        return g.outEdges(v);\n    });\n}\nfunction $5b7916b02e8f5e57$var$runFloydWarshall(g, weightFn, edgeFn) {\n    var results = {};\n    var nodes = g.nodes();\n    nodes.forEach(function(v) {\n        results[v] = {};\n        results[v][v] = {\n            distance: 0\n        };\n        nodes.forEach(function(w) {\n            if (v !== w) results[v][w] = {\n                distance: Number.POSITIVE_INFINITY\n            };\n        });\n        edgeFn(v).forEach(function(edge) {\n            var w = edge.v === v ? edge.w : edge.v;\n            var d = weightFn(edge);\n            results[v][w] = {\n                distance: d,\n                predecessor: v\n            };\n        });\n    });\n    nodes.forEach(function(k) {\n        var rowK = results[k];\n        nodes.forEach(function(i) {\n            var rowI = results[i];\n            nodes.forEach(function(j) {\n                var ik = rowI[k];\n                var kj = rowK[j];\n                var ij = rowI[j];\n                var altDistance = ik.distance + kj.distance;\n                if (altDistance < ij.distance) {\n                    ij.distance = altDistance;\n                    ij.predecessor = kj.predecessor;\n                }\n            });\n        });\n    });\n    return results;\n}\n\n});\n\nparcelRegister(\"9GWhF\", function(module, exports) {\n\nvar $j1lry = parcelRequire(\"j1lry\");\nmodule.exports = $70e53f4518c7b2d4$var$isAcyclic;\nfunction $70e53f4518c7b2d4$var$isAcyclic(g) {\n    try {\n        $j1lry(g);\n    } catch (e) {\n        if (e instanceof $j1lry.CycleException) return false;\n        throw e;\n    }\n    return true;\n}\n\n});\nparcelRegister(\"j1lry\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $dd8ebe871a4caa75$var$topsort;\n$dd8ebe871a4caa75$var$topsort.CycleException = $dd8ebe871a4caa75$var$CycleException;\nfunction $dd8ebe871a4caa75$var$topsort(g) {\n    var visited = {};\n    var stack = {};\n    var results = [];\n    function visit(node) {\n        if ($dE3aD.has(stack, node)) throw new $dd8ebe871a4caa75$var$CycleException();\n        if (!$dE3aD.has(visited, node)) {\n            stack[node] = true;\n            visited[node] = true;\n            $dE3aD.each(g.predecessors(node), visit);\n            delete stack[node];\n            results.push(node);\n        }\n    }\n    $dE3aD.each(g.sinks(), visit);\n    if ($dE3aD.size(visited) !== g.nodeCount()) throw new $dd8ebe871a4caa75$var$CycleException();\n    return results;\n}\nfunction $dd8ebe871a4caa75$var$CycleException() {}\n$dd8ebe871a4caa75$var$CycleException.prototype = new Error(); // must be an instance of Error to pass testing\n\n});\n\n\nparcelRegister(\"gRywx\", function(module, exports) {\n\nvar $l5l9v = parcelRequire(\"l5l9v\");\nmodule.exports = $c46c6049ed94a9d4$var$postorder;\nfunction $c46c6049ed94a9d4$var$postorder(g, vs) {\n    return $l5l9v(g, vs, \"post\");\n}\n\n});\nparcelRegister(\"l5l9v\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\nmodule.exports = $f59a78ffcfedb05f$var$dfs;\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */ function $f59a78ffcfedb05f$var$dfs(g, vs, order) {\n    if (!$dE3aD.isArray(vs)) vs = [\n        vs\n    ];\n    var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n    var acc = [];\n    var visited = {};\n    $dE3aD.each(vs, function(v) {\n        if (!g.hasNode(v)) throw new Error(\"Graph does not have node: \" + v);\n        $f59a78ffcfedb05f$var$doDfs(g, v, order === \"post\", visited, navigation, acc);\n    });\n    return acc;\n}\nfunction $f59a78ffcfedb05f$var$doDfs(g, v, postorder, visited, navigation, acc) {\n    if (!$dE3aD.has(visited, v)) {\n        visited[v] = true;\n        if (!postorder) acc.push(v);\n        $dE3aD.each(navigation(v), function(w) {\n            $f59a78ffcfedb05f$var$doDfs(g, w, postorder, visited, navigation, acc);\n        });\n        if (postorder) acc.push(v);\n    }\n}\n\n});\n\n\nparcelRegister(\"bXHU9\", function(module, exports) {\n\nvar $l5l9v = parcelRequire(\"l5l9v\");\nmodule.exports = $8b5742f3761c7469$var$preorder;\nfunction $8b5742f3761c7469$var$preorder(g, vs) {\n    return $l5l9v(g, vs, \"pre\");\n}\n\n});\n\nparcelRegister(\"lUPCj\", function(module, exports) {\n\nvar $dE3aD = parcelRequire(\"dE3aD\");\n\nvar $eK8oE = parcelRequire(\"eK8oE\");\n\nvar $f2pjm = parcelRequire(\"f2pjm\");\nmodule.exports = $ff46ddf99ee425c6$var$prim;\nfunction $ff46ddf99ee425c6$var$prim(g, weightFunc) {\n    var result = new $eK8oE();\n    var parents = {};\n    var pq = new $f2pjm();\n    var v;\n    function updateNeighbors(edge) {\n        var w = edge.v === v ? edge.w : edge.v;\n        var pri = pq.priority(w);\n        if (pri !== undefined) {\n            var edgeWeight = weightFunc(edge);\n            if (edgeWeight < pri) {\n                parents[w] = v;\n                pq.decrease(w, edgeWeight);\n            }\n        }\n    }\n    if (g.nodeCount() === 0) return result;\n    $dE3aD.each(g.nodes(), function(v) {\n        pq.add(v, Number.POSITIVE_INFINITY);\n        result.setNode(v);\n    });\n    // Start from an arbitrary node\n    pq.decrease(g.nodes()[0], 0);\n    var init = false;\n    while(pq.size() > 0){\n        v = pq.removeMin();\n        if ($dE3aD.has(parents, v)) result.setEdge(v, parents[v]);\n        else if (init) throw new Error(\"Input graph is not connected: \" + g);\n        else init = true;\n        g.nodeEdges(v).forEach(updateNeighbors);\n    }\n    return result;\n}\n\n});\n\n\n\n\nparcelRegister(\"49gez\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $gALro = parcelRequire(\"gALro\");\n\nvar $cd7Ze = parcelRequire(\"cd7Ze\");\n\nvar $gMe1c = parcelRequire(\"gMe1c\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nvar $3054986badb7bc36$require$normalizeRanks = $2o807.normalizeRanks;\n\nvar $8tz2F = parcelRequire(\"8tz2F\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nvar $3054986badb7bc36$require$removeEmptyRanks = $2o807.removeEmptyRanks;\n\nvar $16kgn = parcelRequire(\"16kgn\");\n\nvar $jLtz5 = parcelRequire(\"jLtz5\");\n\nvar $6YXm4 = parcelRequire(\"6YXm4\");\n\nvar $jsxFr = parcelRequire(\"jsxFr\");\n\nvar $cYHD5 = parcelRequire(\"cYHD5\");\n\nvar $2o807 = parcelRequire(\"2o807\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $3054986badb7bc36$require$Graph = $3vj6M.Graph;\nmodule.exports = $3054986badb7bc36$var$layout;\nfunction $3054986badb7bc36$var$layout(g, opts) {\n    var time = opts && opts.debugTiming ? $2o807.time : $2o807.notime;\n    time(\"layout\", function() {\n        var layoutGraph = time(\"  buildLayoutGraph\", function() {\n            return $3054986badb7bc36$var$buildLayoutGraph(g);\n        });\n        time(\"  runLayout\", function() {\n            $3054986badb7bc36$var$runLayout(layoutGraph, time);\n        });\n        time(\"  updateInputGraph\", function() {\n            $3054986badb7bc36$var$updateInputGraph(g, layoutGraph);\n        });\n    });\n}\nfunction $3054986badb7bc36$var$runLayout(g, time) {\n    time(\"    makeSpaceForEdgeLabels\", function() {\n        $3054986badb7bc36$var$makeSpaceForEdgeLabels(g);\n    });\n    time(\"    removeSelfEdges\", function() {\n        $3054986badb7bc36$var$removeSelfEdges(g);\n    });\n    time(\"    acyclic\", function() {\n        $gALro.run(g);\n    });\n    time(\"    nestingGraph.run\", function() {\n        $16kgn.run(g);\n    });\n    time(\"    rank\", function() {\n        $gMe1c($2o807.asNonCompoundGraph(g));\n    });\n    time(\"    injectEdgeLabelProxies\", function() {\n        $3054986badb7bc36$var$injectEdgeLabelProxies(g);\n    });\n    time(\"    removeEmptyRanks\", function() {\n        $3054986badb7bc36$require$removeEmptyRanks(g);\n    });\n    time(\"    nestingGraph.cleanup\", function() {\n        $16kgn.cleanup(g);\n    });\n    time(\"    normalizeRanks\", function() {\n        $3054986badb7bc36$require$normalizeRanks(g);\n    });\n    time(\"    assignRankMinMax\", function() {\n        $3054986badb7bc36$var$assignRankMinMax(g);\n    });\n    time(\"    removeEdgeLabelProxies\", function() {\n        $3054986badb7bc36$var$removeEdgeLabelProxies(g);\n    });\n    time(\"    normalize.run\", function() {\n        $cd7Ze.run(g);\n    });\n    time(\"    parentDummyChains\", function() {\n        $8tz2F(g);\n    });\n    time(\"    addBorderSegments\", function() {\n        $jLtz5(g);\n    });\n    time(\"    order\", function() {\n        $jsxFr(g);\n    });\n    time(\"    insertSelfEdges\", function() {\n        $3054986badb7bc36$var$insertSelfEdges(g);\n    });\n    time(\"    adjustCoordinateSystem\", function() {\n        $6YXm4.adjust(g);\n    });\n    time(\"    position\", function() {\n        $cYHD5(g);\n    });\n    time(\"    positionSelfEdges\", function() {\n        $3054986badb7bc36$var$positionSelfEdges(g);\n    });\n    time(\"    removeBorderNodes\", function() {\n        $3054986badb7bc36$var$removeBorderNodes(g);\n    });\n    time(\"    normalize.undo\", function() {\n        $cd7Ze.undo(g);\n    });\n    time(\"    fixupEdgeLabelCoords\", function() {\n        $3054986badb7bc36$var$fixupEdgeLabelCoords(g);\n    });\n    time(\"    undoCoordinateSystem\", function() {\n        $6YXm4.undo(g);\n    });\n    time(\"    translateGraph\", function() {\n        $3054986badb7bc36$var$translateGraph(g);\n    });\n    time(\"    assignNodeIntersects\", function() {\n        $3054986badb7bc36$var$assignNodeIntersects(g);\n    });\n    time(\"    reversePoints\", function() {\n        $3054986badb7bc36$var$reversePointsForReversedEdges(g);\n    });\n    time(\"    acyclic.undo\", function() {\n        $gALro.undo(g);\n    });\n}\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */ function $3054986badb7bc36$var$updateInputGraph(inputGraph, layoutGraph) {\n    $Zsaag.forEach(inputGraph.nodes(), function(v) {\n        var inputLabel = inputGraph.node(v);\n        var layoutLabel = layoutGraph.node(v);\n        if (inputLabel) {\n            inputLabel.x = layoutLabel.x;\n            inputLabel.y = layoutLabel.y;\n            if (layoutGraph.children(v).length) {\n                inputLabel.width = layoutLabel.width;\n                inputLabel.height = layoutLabel.height;\n            }\n        }\n    });\n    $Zsaag.forEach(inputGraph.edges(), function(e) {\n        var inputLabel = inputGraph.edge(e);\n        var layoutLabel = layoutGraph.edge(e);\n        inputLabel.points = layoutLabel.points;\n        if ($Zsaag.has(layoutLabel, \"x\")) {\n            inputLabel.x = layoutLabel.x;\n            inputLabel.y = layoutLabel.y;\n        }\n    });\n    inputGraph.graph().width = layoutGraph.graph().width;\n    inputGraph.graph().height = layoutGraph.graph().height;\n}\nvar $3054986badb7bc36$var$graphNumAttrs = [\n    \"nodesep\",\n    \"edgesep\",\n    \"ranksep\",\n    \"marginx\",\n    \"marginy\"\n];\nvar $3054986badb7bc36$var$graphDefaults = {\n    ranksep: 50,\n    edgesep: 20,\n    nodesep: 50,\n    rankdir: \"tb\"\n};\nvar $3054986badb7bc36$var$graphAttrs = [\n    \"acyclicer\",\n    \"ranker\",\n    \"rankdir\",\n    \"align\"\n];\nvar $3054986badb7bc36$var$nodeNumAttrs = [\n    \"width\",\n    \"height\"\n];\nvar $3054986badb7bc36$var$nodeDefaults = {\n    width: 0,\n    height: 0\n};\nvar $3054986badb7bc36$var$edgeNumAttrs = [\n    \"minlen\",\n    \"weight\",\n    \"width\",\n    \"height\",\n    \"labeloffset\"\n];\nvar $3054986badb7bc36$var$edgeDefaults = {\n    minlen: 1,\n    weight: 1,\n    width: 0,\n    height: 0,\n    labeloffset: 10,\n    labelpos: \"r\"\n};\nvar $3054986badb7bc36$var$edgeAttrs = [\n    \"labelpos\"\n];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */ function $3054986badb7bc36$var$buildLayoutGraph(inputGraph) {\n    var g = new $3054986badb7bc36$require$Graph({\n        multigraph: true,\n        compound: true\n    });\n    var graph = $3054986badb7bc36$var$canonicalize(inputGraph.graph());\n    g.setGraph($Zsaag.merge({}, $3054986badb7bc36$var$graphDefaults, $3054986badb7bc36$var$selectNumberAttrs(graph, $3054986badb7bc36$var$graphNumAttrs), $Zsaag.pick(graph, $3054986badb7bc36$var$graphAttrs)));\n    $Zsaag.forEach(inputGraph.nodes(), function(v) {\n        var node = $3054986badb7bc36$var$canonicalize(inputGraph.node(v));\n        g.setNode(v, $Zsaag.defaults($3054986badb7bc36$var$selectNumberAttrs(node, $3054986badb7bc36$var$nodeNumAttrs), $3054986badb7bc36$var$nodeDefaults));\n        g.setParent(v, inputGraph.parent(v));\n    });\n    $Zsaag.forEach(inputGraph.edges(), function(e) {\n        var edge = $3054986badb7bc36$var$canonicalize(inputGraph.edge(e));\n        g.setEdge(e, $Zsaag.merge({}, $3054986badb7bc36$var$edgeDefaults, $3054986badb7bc36$var$selectNumberAttrs(edge, $3054986badb7bc36$var$edgeNumAttrs), $Zsaag.pick(edge, $3054986badb7bc36$var$edgeAttrs)));\n    });\n    return g;\n}\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */ function $3054986badb7bc36$var$makeSpaceForEdgeLabels(g) {\n    var graph = g.graph();\n    graph.ranksep /= 2;\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        edge.minlen *= 2;\n        if (edge.labelpos.toLowerCase() !== \"c\") {\n            if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") edge.width += edge.labeloffset;\n            else edge.height += edge.labeloffset;\n        }\n    });\n}\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */ function $3054986badb7bc36$var$injectEdgeLabelProxies(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.width && edge.height) {\n            var v = g.node(e.v);\n            var w = g.node(e.w);\n            var label = {\n                rank: (w.rank - v.rank) / 2 + v.rank,\n                e: e\n            };\n            $2o807.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n        }\n    });\n}\nfunction $3054986badb7bc36$var$assignRankMinMax(g) {\n    var maxRank = 0;\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.borderTop) {\n            node.minRank = g.node(node.borderTop).rank;\n            node.maxRank = g.node(node.borderBottom).rank;\n            maxRank = $Zsaag.max(maxRank, node.maxRank);\n        }\n    });\n    g.graph().maxRank = maxRank;\n}\nfunction $3054986badb7bc36$var$removeEdgeLabelProxies(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.dummy === \"edge-proxy\") {\n            g.edge(node.e).labelRank = node.rank;\n            g.removeNode(v);\n        }\n    });\n}\nfunction $3054986badb7bc36$var$translateGraph(g) {\n    var minX = Number.POSITIVE_INFINITY;\n    var maxX = 0;\n    var minY = Number.POSITIVE_INFINITY;\n    var maxY = 0;\n    var graphLabel = g.graph();\n    var marginX = graphLabel.marginx || 0;\n    var marginY = graphLabel.marginy || 0;\n    function getExtremes(attrs) {\n        var x = attrs.x;\n        var y = attrs.y;\n        var w = attrs.width;\n        var h = attrs.height;\n        minX = Math.min(minX, x - w / 2);\n        maxX = Math.max(maxX, x + w / 2);\n        minY = Math.min(minY, y - h / 2);\n        maxY = Math.max(maxY, y + h / 2);\n    }\n    $Zsaag.forEach(g.nodes(), function(v) {\n        getExtremes(g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if ($Zsaag.has(edge, \"x\")) getExtremes(edge);\n    });\n    minX -= marginX;\n    minY -= marginY;\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        node.x -= minX;\n        node.y -= minY;\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        $Zsaag.forEach(edge.points, function(p) {\n            p.x -= minX;\n            p.y -= minY;\n        });\n        if ($Zsaag.has(edge, \"x\")) edge.x -= minX;\n        if ($Zsaag.has(edge, \"y\")) edge.y -= minY;\n    });\n    graphLabel.width = maxX - minX + marginX;\n    graphLabel.height = maxY - minY + marginY;\n}\nfunction $3054986badb7bc36$var$assignNodeIntersects(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        var nodeV = g.node(e.v);\n        var nodeW = g.node(e.w);\n        var p1, p2;\n        if (!edge.points) {\n            edge.points = [];\n            p1 = nodeW;\n            p2 = nodeV;\n        } else {\n            p1 = edge.points[0];\n            p2 = edge.points[edge.points.length - 1];\n        }\n        edge.points.unshift($2o807.intersectRect(nodeV, p1));\n        edge.points.push($2o807.intersectRect(nodeW, p2));\n    });\n}\nfunction $3054986badb7bc36$var$fixupEdgeLabelCoords(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if ($Zsaag.has(edge, \"x\")) {\n            if (edge.labelpos === \"l\" || edge.labelpos === \"r\") edge.width -= edge.labeloffset;\n            switch(edge.labelpos){\n                case \"l\":\n                    edge.x -= edge.width / 2 + edge.labeloffset;\n                    break;\n                case \"r\":\n                    edge.x += edge.width / 2 + edge.labeloffset;\n                    break;\n            }\n        }\n    });\n}\nfunction $3054986badb7bc36$var$reversePointsForReversedEdges(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.reversed) edge.points.reverse();\n    });\n}\nfunction $3054986badb7bc36$var$removeBorderNodes(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        if (g.children(v).length) {\n            var node = g.node(v);\n            var t = g.node(node.borderTop);\n            var b = g.node(node.borderBottom);\n            var l = g.node($Zsaag.last(node.borderLeft));\n            var r = g.node($Zsaag.last(node.borderRight));\n            node.width = Math.abs(r.x - l.x);\n            node.height = Math.abs(b.y - t.y);\n            node.x = l.x + node.width / 2;\n            node.y = t.y + node.height / 2;\n        }\n    });\n    $Zsaag.forEach(g.nodes(), function(v) {\n        if (g.node(v).dummy === \"border\") g.removeNode(v);\n    });\n}\nfunction $3054986badb7bc36$var$removeSelfEdges(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        if (e.v === e.w) {\n            var node = g.node(e.v);\n            if (!node.selfEdges) node.selfEdges = [];\n            node.selfEdges.push({\n                e: e,\n                label: g.edge(e)\n            });\n            g.removeEdge(e);\n        }\n    });\n}\nfunction $3054986badb7bc36$var$insertSelfEdges(g) {\n    var layers = $2o807.buildLayerMatrix(g);\n    $Zsaag.forEach(layers, function(layer) {\n        var orderShift = 0;\n        $Zsaag.forEach(layer, function(v, i) {\n            var node = g.node(v);\n            node.order = i + orderShift;\n            $Zsaag.forEach(node.selfEdges, function(selfEdge) {\n                $2o807.addDummyNode(g, \"selfedge\", {\n                    width: selfEdge.label.width,\n                    height: selfEdge.label.height,\n                    rank: node.rank,\n                    order: i + ++orderShift,\n                    e: selfEdge.e,\n                    label: selfEdge.label\n                }, \"_se\");\n            });\n            delete node.selfEdges;\n        });\n    });\n}\nfunction $3054986badb7bc36$var$positionSelfEdges(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if (node.dummy === \"selfedge\") {\n            var selfNode = g.node(node.e.v);\n            var x = selfNode.x + selfNode.width / 2;\n            var y = selfNode.y;\n            var dx = node.x - x;\n            var dy = selfNode.height / 2;\n            g.setEdge(node.e, node.label);\n            g.removeNode(v);\n            node.label.points = [\n                {\n                    x: x + 2 * dx / 3,\n                    y: y - dy\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y - dy\n                },\n                {\n                    x: x + dx,\n                    y: y\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y + dy\n                },\n                {\n                    x: x + 2 * dx / 3,\n                    y: y + dy\n                }\n            ];\n            node.label.x = node.x;\n            node.label.y = node.y;\n        }\n    });\n}\nfunction $3054986badb7bc36$var$selectNumberAttrs(obj, attrs) {\n    return $Zsaag.mapValues($Zsaag.pick(obj, attrs), Number);\n}\nfunction $3054986badb7bc36$var$canonicalize(attrs) {\n    var newAttrs = {};\n    $Zsaag.forEach(attrs, function(v, k) {\n        newAttrs[k.toLowerCase()] = v;\n    });\n    return newAttrs;\n}\n\n});\nparcelRegister(\"Zsaag\", function(module, exports) {\n/* global window */ var $0b8b8b31932dc1d4$var$lodash;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntry {\n    $0b8b8b31932dc1d4$var$lodash = {\n        cloneDeep: (parcelRequire(\"gppYT\")),\n        constant: (parcelRequire(\"b9IkD\")),\n        defaults: (parcelRequire(\"inXhc\")),\n        each: (parcelRequire(\"l9hnn\")),\n        filter: (parcelRequire(\"31LU8\")),\n        find: (parcelRequire(\"bnQtQ\")),\n        flatten: (parcelRequire(\"dLuFW\")),\n        forEach: (parcelRequire(\"8Kqj3\")),\n        forIn: (parcelRequire(\"cwu3B\")),\n        has: (parcelRequire(\"9GT8b\")),\n        isUndefined: (parcelRequire(\"5VjJh\")),\n        last: (parcelRequire(\"dVuY3\")),\n        map: (parcelRequire(\"2TKBM\")),\n        mapValues: (parcelRequire(\"hcOJM\")),\n        max: (parcelRequire(\"i8Ptf\")),\n        merge: (parcelRequire(\"aTjVP\")),\n        min: (parcelRequire(\"181Ac\")),\n        minBy: (parcelRequire(\"ceFm1\")),\n        now: (parcelRequire(\"9KBfX\")),\n        pick: (parcelRequire(\"fZ78u\")),\n        range: (parcelRequire(\"7hxWL\")),\n        reduce: (parcelRequire(\"9NasI\")),\n        sortBy: (parcelRequire(\"704Bk\")),\n        uniqueId: (parcelRequire(\"aMEwS\")),\n        values: (parcelRequire(\"eolCs\")),\n        zipObject: (parcelRequire(\"knUZO\"))\n    };\n} catch (e) {\n// continue regardless of error\n}\nif (!$0b8b8b31932dc1d4$var$lodash) $0b8b8b31932dc1d4$var$lodash = window._;\nmodule.exports = $0b8b8b31932dc1d4$var$lodash;\n\n});\nparcelRegister(\"gppYT\", function(module, exports) {\n\nvar $kzaQ8 = parcelRequire(\"kzaQ8\");\n/** Used to compose bitmasks for cloning. */ var $bf232277dc3e8e51$var$CLONE_DEEP_FLAG = 1, $bf232277dc3e8e51$var$CLONE_SYMBOLS_FLAG = 4;\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */ function $bf232277dc3e8e51$var$cloneDeep(value) {\n    return $kzaQ8(value, $bf232277dc3e8e51$var$CLONE_DEEP_FLAG | $bf232277dc3e8e51$var$CLONE_SYMBOLS_FLAG);\n}\nmodule.exports = $bf232277dc3e8e51$var$cloneDeep;\n\n});\n\nparcelRegister(\"inXhc\", function(module, exports) {\n\nvar $2WVBI = parcelRequire(\"2WVBI\");\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n\nvar $6DXVX = parcelRequire(\"6DXVX\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/** Used for built-in method references. */ var $d6285b031a2ca3df$var$objectProto = Object.prototype;\n/** Used to check objects for own properties. */ var $d6285b031a2ca3df$var$hasOwnProperty = $d6285b031a2ca3df$var$objectProto.hasOwnProperty;\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */ var $d6285b031a2ca3df$var$defaults = $2WVBI(function(object, sources) {\n    object = Object(object);\n    var index = -1;\n    var length = sources.length;\n    var guard = length > 2 ? sources[2] : undefined;\n    if (guard && $6DXVX(sources[0], sources[1], guard)) length = 1;\n    while(++index < length){\n        var source = sources[index];\n        var props = $6ngQz(source);\n        var propsIndex = -1;\n        var propsLength = props.length;\n        while(++propsIndex < propsLength){\n            var key = props[propsIndex];\n            var value = object[key];\n            if (value === undefined || $gJ8Nu(value, $d6285b031a2ca3df$var$objectProto[key]) && !$d6285b031a2ca3df$var$hasOwnProperty.call(object, key)) object[key] = source[key];\n        }\n    }\n    return object;\n});\nmodule.exports = $d6285b031a2ca3df$var$defaults;\n\n});\nparcelRegister(\"6DXVX\", function(module, exports) {\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n\nvar $lNCBD = parcelRequire(\"lNCBD\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */ function $4d64e0343b547ef8$var$isIterateeCall(value, index, object) {\n    if (!$5M7nH(object)) return false;\n    var type = typeof index;\n    if (type == 'number' ? $1AdOh(object) && $lNCBD(index, object.length) : type == 'string' && index in object) return $gJ8Nu(object[index], value);\n    return false;\n}\nmodule.exports = $4d64e0343b547ef8$var$isIterateeCall;\n\n});\n\n\nparcelRegister(\"bnQtQ\", function(module, exports) {\n\nvar $6wHaX = parcelRequire(\"6wHaX\");\n\nvar $4kdUg = parcelRequire(\"4kdUg\");\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */ var $849a8d2cbef2fc9b$var$find = $6wHaX($4kdUg);\nmodule.exports = $849a8d2cbef2fc9b$var$find;\n\n});\nparcelRegister(\"6wHaX\", function(module, exports) {\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $1AdOh = parcelRequire(\"1AdOh\");\n\nvar $j7Pgn = parcelRequire(\"j7Pgn\");\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */ function $4c07390687e36a0c$var$createFind(findIndexFunc) {\n    return function(collection, predicate, fromIndex) {\n        var iterable = Object(collection);\n        if (!$1AdOh(collection)) {\n            var iteratee = $91VgU(predicate, 3);\n            collection = $j7Pgn(collection);\n            predicate = function(key) {\n                return iteratee(iterable[key], key, iterable);\n            };\n        }\n        var index = findIndexFunc(collection, predicate, fromIndex);\n        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n    };\n}\nmodule.exports = $4c07390687e36a0c$var$createFind;\n\n});\n\nparcelRegister(\"4kdUg\", function(module, exports) {\n\nvar $f8TvI = parcelRequire(\"f8TvI\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $fBxK8 = parcelRequire(\"fBxK8\");\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $3263d136fa2742b0$var$nativeMax = Math.max;\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */ function $3263d136fa2742b0$var$findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length;\n    if (!length) return -1;\n    var index = fromIndex == null ? 0 : $fBxK8(fromIndex);\n    if (index < 0) index = $3263d136fa2742b0$var$nativeMax(length + index, 0);\n    return $f8TvI(array, $91VgU(predicate, 3), index);\n}\nmodule.exports = $3263d136fa2742b0$var$findIndex;\n\n});\nparcelRegister(\"fBxK8\", function(module, exports) {\n\nvar $dbLah = parcelRequire(\"dbLah\");\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */ function $b5c47c631624493e$var$toInteger(value) {\n    var result = $dbLah(value), remainder = result % 1;\n    return result === result ? remainder ? result - remainder : result : 0;\n}\nmodule.exports = $b5c47c631624493e$var$toInteger;\n\n});\nparcelRegister(\"dbLah\", function(module, exports) {\n\nvar $1cUEk = parcelRequire(\"1cUEk\");\n/** Used as references for various `Number` constants. */ var $99a0e366acb3761e$var$INFINITY = 1 / 0, $99a0e366acb3761e$var$MAX_INTEGER = 1.7976931348623157e+308;\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */ function $99a0e366acb3761e$var$toFinite(value) {\n    if (!value) return value === 0 ? value : 0;\n    value = $1cUEk(value);\n    if (value === $99a0e366acb3761e$var$INFINITY || value === -$99a0e366acb3761e$var$INFINITY) {\n        var sign = value < 0 ? -1 : 1;\n        return sign * $99a0e366acb3761e$var$MAX_INTEGER;\n    }\n    return value === value ? value : 0;\n}\nmodule.exports = $99a0e366acb3761e$var$toFinite;\n\n});\nparcelRegister(\"1cUEk\", function(module, exports) {\n\nvar $1PiJ0 = parcelRequire(\"1PiJ0\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/** Used as references for various `Number` constants. */ var $0e12dad8b501fcab$var$NAN = 0 / 0;\n/** Used to detect bad signed hexadecimal string values. */ var $0e12dad8b501fcab$var$reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */ var $0e12dad8b501fcab$var$reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */ var $0e12dad8b501fcab$var$reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */ var $0e12dad8b501fcab$var$freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */ function $0e12dad8b501fcab$var$toNumber(value) {\n    if (typeof value == 'number') return value;\n    if ($j04ie(value)) return $0e12dad8b501fcab$var$NAN;\n    if ($5M7nH(value)) {\n        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n        value = $5M7nH(other) ? other + '' : other;\n    }\n    if (typeof value != 'string') return value === 0 ? value : +value;\n    value = $1PiJ0(value);\n    var isBinary = $0e12dad8b501fcab$var$reIsBinary.test(value);\n    return isBinary || $0e12dad8b501fcab$var$reIsOctal.test(value) ? $0e12dad8b501fcab$var$freeParseInt(value.slice(2), isBinary ? 2 : 8) : $0e12dad8b501fcab$var$reIsBadHex.test(value) ? $0e12dad8b501fcab$var$NAN : +value;\n}\nmodule.exports = $0e12dad8b501fcab$var$toNumber;\n\n});\nparcelRegister(\"1PiJ0\", function(module, exports) {\n\nvar $abCj9 = parcelRequire(\"abCj9\");\n/** Used to match leading whitespace. */ var $15491443b586dd5d$var$reTrimStart = /^\\s+/;\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */ function $15491443b586dd5d$var$baseTrim(string) {\n    return string ? string.slice(0, $abCj9(string) + 1).replace($15491443b586dd5d$var$reTrimStart, '') : string;\n}\nmodule.exports = $15491443b586dd5d$var$baseTrim;\n\n});\nparcelRegister(\"abCj9\", function(module, exports) {\n/** Used to match a single whitespace character. */ var $76a8a59d44c96da0$var$reWhitespace = /\\s/;\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */ function $76a8a59d44c96da0$var$trimmedEndIndex(string) {\n    var index = string.length;\n    while(index-- && $76a8a59d44c96da0$var$reWhitespace.test(string.charAt(index)));\n    return index;\n}\nmodule.exports = $76a8a59d44c96da0$var$trimmedEndIndex;\n\n});\n\n\n\n\n\n\n\nparcelRegister(\"dLuFW\", function(module, exports) {\n\nvar $5PH3S = parcelRequire(\"5PH3S\");\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */ function $a05775a284fe1a85$var$flatten(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? $5PH3S(array, 1) : [];\n}\nmodule.exports = $a05775a284fe1a85$var$flatten;\n\n});\n\nparcelRegister(\"cwu3B\", function(module, exports) {\n\nvar $lWo9e = parcelRequire(\"lWo9e\");\n\nvar $dgzF1 = parcelRequire(\"dgzF1\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */ function $91dfc9e8e6d02254$var$forIn(object, iteratee) {\n    return object == null ? object : $lWo9e(object, $dgzF1(iteratee), $6ngQz);\n}\nmodule.exports = $91dfc9e8e6d02254$var$forIn;\n\n});\n\nparcelRegister(\"dVuY3\", function(module, exports) {\n/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */ function $a2389ebfe52dc41e$var$last(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : undefined;\n}\nmodule.exports = $a2389ebfe52dc41e$var$last;\n\n});\n\nparcelRegister(\"hcOJM\", function(module, exports) {\n\nvar $hJTMd = parcelRequire(\"hJTMd\");\n\nvar $bOxbJ = parcelRequire(\"bOxbJ\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */ function $c86aea07399a2e8d$var$mapValues(object, iteratee) {\n    var result = {};\n    iteratee = $91VgU(iteratee, 3);\n    $bOxbJ(object, function(value, key, object) {\n        $hJTMd(result, key, iteratee(value, key, object));\n    });\n    return result;\n}\nmodule.exports = $c86aea07399a2e8d$var$mapValues;\n\n});\n\nparcelRegister(\"i8Ptf\", function(module, exports) {\n\nvar $hoJOA = parcelRequire(\"hoJOA\");\n\nvar $eQm2o = parcelRequire(\"eQm2o\");\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */ function $d350e6592233a6e6$var$max(array) {\n    return array && array.length ? $hoJOA(array, $1OIBO, $eQm2o) : undefined;\n}\nmodule.exports = $d350e6592233a6e6$var$max;\n\n});\nparcelRegister(\"hoJOA\", function(module, exports) {\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */ function $caa83774489f7405$var$baseExtremum(array, iteratee, comparator) {\n    var index = -1, length = array.length;\n    while(++index < length){\n        var value = array[index], current = iteratee(value);\n        if (current != null && (computed === undefined ? current === current && !$j04ie(current) : comparator(current, computed))) var computed = current, result = value;\n    }\n    return result;\n}\nmodule.exports = $caa83774489f7405$var$baseExtremum;\n\n});\n\nparcelRegister(\"eQm2o\", function(module, exports) {\n/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */ function $ace7043711eb245e$var$baseGt(value, other) {\n    return value > other;\n}\nmodule.exports = $ace7043711eb245e$var$baseGt;\n\n});\n\n\nparcelRegister(\"aTjVP\", function(module, exports) {\n\nvar $dHpxK = parcelRequire(\"dHpxK\");\n\nvar $e9ipw = parcelRequire(\"e9ipw\");\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */ var $7ede807763a90f63$var$merge = $e9ipw(function(object, source, srcIndex) {\n    $dHpxK(object, source, srcIndex);\n});\nmodule.exports = $7ede807763a90f63$var$merge;\n\n});\nparcelRegister(\"dHpxK\", function(module, exports) {\n\nvar $abWak = parcelRequire(\"abWak\");\n\nvar $7MZGu = parcelRequire(\"7MZGu\");\n\nvar $lWo9e = parcelRequire(\"lWo9e\");\n\nvar $2gsyT = parcelRequire(\"2gsyT\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n\nvar $lBht1 = parcelRequire(\"lBht1\");\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function $9f931ae1acbd9a64$var$baseMerge(object, source, srcIndex, customizer, stack) {\n    if (object === source) return;\n    $lWo9e(source, function(srcValue, key) {\n        stack || (stack = new $abWak);\n        if ($5M7nH(srcValue)) $2gsyT(object, source, key, srcIndex, $9f931ae1acbd9a64$var$baseMerge, customizer, stack);\n        else {\n            var newValue = customizer ? customizer($lBht1(object, key), srcValue, key + '', object, source, stack) : undefined;\n            if (newValue === undefined) newValue = srcValue;\n            $7MZGu(object, key, newValue);\n        }\n    }, $6ngQz);\n}\nmodule.exports = $9f931ae1acbd9a64$var$baseMerge;\n\n});\nparcelRegister(\"7MZGu\", function(module, exports) {\n\nvar $hJTMd = parcelRequire(\"hJTMd\");\n\nvar $gJ8Nu = parcelRequire(\"gJ8Nu\");\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */ function $5abcdd540bb697ff$var$assignMergeValue(object, key, value) {\n    if (value !== undefined && !$gJ8Nu(object[key], value) || value === undefined && !(key in object)) $hJTMd(object, key, value);\n}\nmodule.exports = $5abcdd540bb697ff$var$assignMergeValue;\n\n});\n\nparcelRegister(\"2gsyT\", function(module, exports) {\n\nvar $7MZGu = parcelRequire(\"7MZGu\");\n\nvar $l0BR0 = parcelRequire(\"l0BR0\");\n\nvar $3NUbh = parcelRequire(\"3NUbh\");\n\nvar $4qSSq = parcelRequire(\"4qSSq\");\n\nvar $fb83i = parcelRequire(\"fb83i\");\n\nvar $2bPgf = parcelRequire(\"2bPgf\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n\nvar $bK0EM = parcelRequire(\"bK0EM\");\n\nvar $8yjfX = parcelRequire(\"8yjfX\");\n\nvar $jszNw = parcelRequire(\"jszNw\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $gXcQ0 = parcelRequire(\"gXcQ0\");\n\nvar $3562c = parcelRequire(\"3562c\");\n\nvar $lBht1 = parcelRequire(\"lBht1\");\n\nvar $c0GdO = parcelRequire(\"c0GdO\");\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */ function $1a633b26fd8b6436$var$baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n    var objValue = $lBht1(object, key), srcValue = $lBht1(source, key), stacked = stack.get(srcValue);\n    if (stacked) {\n        $7MZGu(object, key, stacked);\n        return;\n    }\n    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n    var isCommon = newValue === undefined;\n    if (isCommon) {\n        var isArr = $6Lnro(srcValue), isBuff = !isArr && $8yjfX(srcValue), isTyped = !isArr && !isBuff && $3562c(srcValue);\n        newValue = srcValue;\n        if (isArr || isBuff || isTyped) {\n            if ($6Lnro(objValue)) newValue = objValue;\n            else if ($bK0EM(objValue)) newValue = $4qSSq(objValue);\n            else if (isBuff) {\n                isCommon = false;\n                newValue = $l0BR0(srcValue, true);\n            } else if (isTyped) {\n                isCommon = false;\n                newValue = $3NUbh(srcValue, true);\n            } else newValue = [];\n        } else if ($gXcQ0(srcValue) || $2bPgf(srcValue)) {\n            newValue = objValue;\n            if ($2bPgf(objValue)) newValue = $c0GdO(objValue);\n            else if (!$5M7nH(objValue) || $jszNw(objValue)) newValue = $fb83i(srcValue);\n        } else isCommon = false;\n    }\n    if (isCommon) {\n        // Recursively merge objects and arrays (susceptible to call stack limits).\n        stack.set(srcValue, newValue);\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n        stack['delete'](srcValue);\n    }\n    $7MZGu(object, key, newValue);\n}\nmodule.exports = $1a633b26fd8b6436$var$baseMergeDeep;\n\n});\nparcelRegister(\"gXcQ0\", function(module, exports) {\n\nvar $fuLlh = parcelRequire(\"fuLlh\");\n\nvar $ir9nt = parcelRequire(\"ir9nt\");\n\nvar $ksPtD = parcelRequire(\"ksPtD\");\n/** `Object#toString` result references. */ var $c57c1d5e12709d80$var$objectTag = '[object Object]';\n/** Used for built-in method references. */ var $c57c1d5e12709d80$var$funcProto = Function.prototype, $c57c1d5e12709d80$var$objectProto = Object.prototype;\n/** Used to resolve the decompiled source of functions. */ var $c57c1d5e12709d80$var$funcToString = $c57c1d5e12709d80$var$funcProto.toString;\n/** Used to check objects for own properties. */ var $c57c1d5e12709d80$var$hasOwnProperty = $c57c1d5e12709d80$var$objectProto.hasOwnProperty;\n/** Used to infer the `Object` constructor. */ var $c57c1d5e12709d80$var$objectCtorString = $c57c1d5e12709d80$var$funcToString.call(Object);\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */ function $c57c1d5e12709d80$var$isPlainObject(value) {\n    if (!$ksPtD(value) || $fuLlh(value) != $c57c1d5e12709d80$var$objectTag) return false;\n    var proto = $ir9nt(value);\n    if (proto === null) return true;\n    var Ctor = $c57c1d5e12709d80$var$hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return typeof Ctor == 'function' && Ctor instanceof Ctor && $c57c1d5e12709d80$var$funcToString.call(Ctor) == $c57c1d5e12709d80$var$objectCtorString;\n}\nmodule.exports = $c57c1d5e12709d80$var$isPlainObject;\n\n});\n\nparcelRegister(\"lBht1\", function(module, exports) {\n/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */ function $fb9a9a4c357fc0b0$var$safeGet(object, key) {\n    if (key === 'constructor' && typeof object[key] === 'function') return;\n    if (key == '__proto__') return;\n    return object[key];\n}\nmodule.exports = $fb9a9a4c357fc0b0$var$safeGet;\n\n});\n\nparcelRegister(\"c0GdO\", function(module, exports) {\n\nvar $awXOT = parcelRequire(\"awXOT\");\n\nvar $6ngQz = parcelRequire(\"6ngQz\");\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */ function $8be63c7716887f57$var$toPlainObject(value) {\n    return $awXOT(value, $6ngQz(value));\n}\nmodule.exports = $8be63c7716887f57$var$toPlainObject;\n\n});\n\n\n\nparcelRegister(\"e9ipw\", function(module, exports) {\n\nvar $2WVBI = parcelRequire(\"2WVBI\");\n\nvar $6DXVX = parcelRequire(\"6DXVX\");\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */ function $a4d02ff0190ab6a3$var$createAssigner(assigner) {\n    return $2WVBI(function(object, sources) {\n        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;\n        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;\n        if (guard && $6DXVX(sources[0], sources[1], guard)) {\n            customizer = length < 3 ? undefined : customizer;\n            length = 1;\n        }\n        object = Object(object);\n        while(++index < length){\n            var source = sources[index];\n            if (source) assigner(object, source, index, customizer);\n        }\n        return object;\n    });\n}\nmodule.exports = $a4d02ff0190ab6a3$var$createAssigner;\n\n});\n\n\nparcelRegister(\"181Ac\", function(module, exports) {\n\nvar $hoJOA = parcelRequire(\"hoJOA\");\n\nvar $l8ksv = parcelRequire(\"l8ksv\");\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */ function $0d27c41966a7af2e$var$min(array) {\n    return array && array.length ? $hoJOA(array, $1OIBO, $l8ksv) : undefined;\n}\nmodule.exports = $0d27c41966a7af2e$var$min;\n\n});\nparcelRegister(\"l8ksv\", function(module, exports) {\n/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */ function $f62a370256916ab5$var$baseLt(value, other) {\n    return value < other;\n}\nmodule.exports = $f62a370256916ab5$var$baseLt;\n\n});\n\n\nparcelRegister(\"ceFm1\", function(module, exports) {\n\nvar $hoJOA = parcelRequire(\"hoJOA\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $l8ksv = parcelRequire(\"l8ksv\");\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */ function $8e86deec5fd7693e$var$minBy(array, iteratee) {\n    return array && array.length ? $hoJOA(array, $91VgU(iteratee, 2), $l8ksv) : undefined;\n}\nmodule.exports = $8e86deec5fd7693e$var$minBy;\n\n});\n\nparcelRegister(\"9KBfX\", function(module, exports) {\n\nvar $6c6tI = parcelRequire(\"6c6tI\");\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */ var $71954f4932f14938$var$now = function() {\n    return $6c6tI.Date.now();\n};\nmodule.exports = $71954f4932f14938$var$now;\n\n});\n\nparcelRegister(\"fZ78u\", function(module, exports) {\n\nvar $iK3qQ = parcelRequire(\"iK3qQ\");\n\nvar $fPgAj = parcelRequire(\"fPgAj\");\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */ var $ba32168b89409542$var$pick = $fPgAj(function(object, paths) {\n    return object == null ? {} : $iK3qQ(object, paths);\n});\nmodule.exports = $ba32168b89409542$var$pick;\n\n});\nparcelRegister(\"iK3qQ\", function(module, exports) {\n\nvar $29t2n = parcelRequire(\"29t2n\");\n\nvar $byOzL = parcelRequire(\"byOzL\");\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */ function $da4f2f645d9e0833$var$basePick(object, paths) {\n    return $29t2n(object, paths, function(value, path) {\n        return $byOzL(object, path);\n    });\n}\nmodule.exports = $da4f2f645d9e0833$var$basePick;\n\n});\nparcelRegister(\"29t2n\", function(module, exports) {\n\nvar $cKBte = parcelRequire(\"cKBte\");\n\nvar $8SrgH = parcelRequire(\"8SrgH\");\n\nvar $jm9v1 = parcelRequire(\"jm9v1\");\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */ function $1912f2435bb1d542$var$basePickBy(object, paths, predicate) {\n    var index = -1, length = paths.length, result = {};\n    while(++index < length){\n        var path = paths[index], value = $cKBte(object, path);\n        if (predicate(value, path)) $8SrgH(result, $jm9v1(path, object), value);\n    }\n    return result;\n}\nmodule.exports = $1912f2435bb1d542$var$basePickBy;\n\n});\nparcelRegister(\"8SrgH\", function(module, exports) {\n\nvar $9isRA = parcelRequire(\"9isRA\");\n\nvar $jm9v1 = parcelRequire(\"jm9v1\");\n\nvar $lNCBD = parcelRequire(\"lNCBD\");\n\nvar $5M7nH = parcelRequire(\"5M7nH\");\n\nvar $bILU9 = parcelRequire(\"bILU9\");\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */ function $676884d15d65933b$var$baseSet(object, path, value, customizer) {\n    if (!$5M7nH(object)) return object;\n    path = $jm9v1(path, object);\n    var index = -1, length = path.length, lastIndex = length - 1, nested = object;\n    while(nested != null && ++index < length){\n        var key = $bILU9(path[index]), newValue = value;\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') return object;\n        if (index != lastIndex) {\n            var objValue = nested[key];\n            newValue = customizer ? customizer(objValue, key, nested) : undefined;\n            if (newValue === undefined) newValue = $5M7nH(objValue) ? objValue : $lNCBD(path[index + 1]) ? [] : {};\n        }\n        $9isRA(nested, key, newValue);\n        nested = nested[key];\n    }\n    return object;\n}\nmodule.exports = $676884d15d65933b$var$baseSet;\n\n});\n\n\n\nparcelRegister(\"fPgAj\", function(module, exports) {\n\nvar $dLuFW = parcelRequire(\"dLuFW\");\n\nvar $dqf3K = parcelRequire(\"dqf3K\");\n\nvar $37GKK = parcelRequire(\"37GKK\");\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */ function $b8587bcaa8354523$var$flatRest(func) {\n    return $37GKK($dqf3K(func, undefined, $dLuFW), func + '');\n}\nmodule.exports = $b8587bcaa8354523$var$flatRest;\n\n});\n\n\nparcelRegister(\"7hxWL\", function(module, exports) {\n\nvar $8iDWn = parcelRequire(\"8iDWn\");\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */ var $54d4740bf8af0c83$var$range = $8iDWn();\nmodule.exports = $54d4740bf8af0c83$var$range;\n\n});\nparcelRegister(\"8iDWn\", function(module, exports) {\n\nvar $bbHDs = parcelRequire(\"bbHDs\");\n\nvar $6DXVX = parcelRequire(\"6DXVX\");\n\nvar $dbLah = parcelRequire(\"dbLah\");\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */ function $60aefc8b0a66490d$var$createRange(fromRight) {\n    return function(start, end, step) {\n        if (step && typeof step != 'number' && $6DXVX(start, end, step)) end = step = undefined;\n        // Ensure the sign of `-0` is preserved.\n        start = $dbLah(start);\n        if (end === undefined) {\n            end = start;\n            start = 0;\n        } else end = $dbLah(end);\n        step = step === undefined ? start < end ? 1 : -1 : $dbLah(step);\n        return $bbHDs(start, end, step, fromRight);\n    };\n}\nmodule.exports = $60aefc8b0a66490d$var$createRange;\n\n});\nparcelRegister(\"bbHDs\", function(module, exports) {\n/* Built-in method references for those with the same name as other `lodash` methods. */ var $825291daed3e053c$var$nativeCeil = Math.ceil, $825291daed3e053c$var$nativeMax = Math.max;\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */ function $825291daed3e053c$var$baseRange(start, end, step, fromRight) {\n    var index = -1, length = $825291daed3e053c$var$nativeMax($825291daed3e053c$var$nativeCeil((end - start) / (step || 1)), 0), result = Array(length);\n    while(length--){\n        result[fromRight ? length : ++index] = start;\n        start += step;\n    }\n    return result;\n}\nmodule.exports = $825291daed3e053c$var$baseRange;\n\n});\n\n\n\nparcelRegister(\"704Bk\", function(module, exports) {\n\nvar $5PH3S = parcelRequire(\"5PH3S\");\n\nvar $c2mLX = parcelRequire(\"c2mLX\");\n\nvar $2WVBI = parcelRequire(\"2WVBI\");\n\nvar $6DXVX = parcelRequire(\"6DXVX\");\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */ var $518c1a310f432661$var$sortBy = $2WVBI(function(collection, iteratees) {\n    if (collection == null) return [];\n    var length = iteratees.length;\n    if (length > 1 && $6DXVX(collection, iteratees[0], iteratees[1])) iteratees = [];\n    else if (length > 2 && $6DXVX(iteratees[0], iteratees[1], iteratees[2])) iteratees = [\n        iteratees[0]\n    ];\n    return $c2mLX(collection, $5PH3S(iteratees, 1), []);\n});\nmodule.exports = $518c1a310f432661$var$sortBy;\n\n});\nparcelRegister(\"c2mLX\", function(module, exports) {\n\nvar $4l7sD = parcelRequire(\"4l7sD\");\n\nvar $cKBte = parcelRequire(\"cKBte\");\n\nvar $91VgU = parcelRequire(\"91VgU\");\n\nvar $aElIh = parcelRequire(\"aElIh\");\n\nvar $e8gxq = parcelRequire(\"e8gxq\");\n\nvar $f90Bo = parcelRequire(\"f90Bo\");\n\nvar $icOnV = parcelRequire(\"icOnV\");\n\nvar $1OIBO = parcelRequire(\"1OIBO\");\n\nvar $6Lnro = parcelRequire(\"6Lnro\");\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */ function $8c375619e0a69483$var$baseOrderBy(collection, iteratees, orders) {\n    if (iteratees.length) iteratees = $4l7sD(iteratees, function(iteratee) {\n        if ($6Lnro(iteratee)) return function(value) {\n            return $cKBte(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        };\n        return iteratee;\n    });\n    else iteratees = [\n        $1OIBO\n    ];\n    var index = -1;\n    iteratees = $4l7sD(iteratees, $f90Bo($91VgU));\n    var result = $aElIh(collection, function(value, key, collection) {\n        var criteria = $4l7sD(iteratees, function(iteratee) {\n            return iteratee(value);\n        });\n        return {\n            'criteria': criteria,\n            'index': ++index,\n            'value': value\n        };\n    });\n    return $e8gxq(result, function(object, other) {\n        return $icOnV(object, other, orders);\n    });\n}\nmodule.exports = $8c375619e0a69483$var$baseOrderBy;\n\n});\nparcelRegister(\"e8gxq\", function(module, exports) {\n/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */ function $a49ea42ba553bbb2$var$baseSortBy(array, comparer) {\n    var length = array.length;\n    array.sort(comparer);\n    while(length--)array[length] = array[length].value;\n    return array;\n}\nmodule.exports = $a49ea42ba553bbb2$var$baseSortBy;\n\n});\n\nparcelRegister(\"icOnV\", function(module, exports) {\n\nvar $8Zp98 = parcelRequire(\"8Zp98\");\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */ function $d4106e59da413f19$var$compareMultiple(object, other, orders) {\n    var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;\n    while(++index < length){\n        var result = $8Zp98(objCriteria[index], othCriteria[index]);\n        if (result) {\n            if (index >= ordersLength) return result;\n            var order = orders[index];\n            return result * (order == 'desc' ? -1 : 1);\n        }\n    }\n    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n    // that causes it, under certain circumstances, to provide the same value for\n    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n    // for more details.\n    //\n    // This also ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n}\nmodule.exports = $d4106e59da413f19$var$compareMultiple;\n\n});\nparcelRegister(\"8Zp98\", function(module, exports) {\n\nvar $j04ie = parcelRequire(\"j04ie\");\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */ function $68b786cbee7aa895$var$compareAscending(value, other) {\n    if (value !== other) {\n        var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = $j04ie(value);\n        var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = $j04ie(other);\n        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;\n        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;\n    }\n    return 0;\n}\nmodule.exports = $68b786cbee7aa895$var$compareAscending;\n\n});\n\n\n\n\nparcelRegister(\"aMEwS\", function(module, exports) {\n\nvar $9W9zf = parcelRequire(\"9W9zf\");\n/** Used to generate unique IDs. */ var $7d9dd3587c2b1799$var$idCounter = 0;\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */ function $7d9dd3587c2b1799$var$uniqueId(prefix) {\n    var id = ++$7d9dd3587c2b1799$var$idCounter;\n    return $9W9zf(prefix) + id;\n}\nmodule.exports = $7d9dd3587c2b1799$var$uniqueId;\n\n});\n\nparcelRegister(\"knUZO\", function(module, exports) {\n\nvar $9isRA = parcelRequire(\"9isRA\");\n\nvar $jsOea = parcelRequire(\"jsOea\");\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */ function $ed722ad3d71486f2$var$zipObject(props, values) {\n    return $jsOea(props || [], values || [], $9isRA);\n}\nmodule.exports = $ed722ad3d71486f2$var$zipObject;\n\n});\nparcelRegister(\"jsOea\", function(module, exports) {\n/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */ function $e2b797ffcf9f9373$var$baseZipObject(props, values, assignFunc) {\n    var index = -1, length = props.length, valsLength = values.length, result = {};\n    while(++index < length){\n        var value = index < valsLength ? values[index] : undefined;\n        assignFunc(result, props[index], value);\n    }\n    return result;\n}\nmodule.exports = $e2b797ffcf9f9373$var$baseZipObject;\n\n});\n\n\n\nparcelRegister(\"gALro\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $5GMPT = parcelRequire(\"5GMPT\");\nmodule.exports = {\n    run: $c144cee7b667b3e4$var$run,\n    undo: $c144cee7b667b3e4$var$undo\n};\nfunction $c144cee7b667b3e4$var$run(g) {\n    var fas = g.graph().acyclicer === \"greedy\" ? $5GMPT(g, weightFn(g)) : $c144cee7b667b3e4$var$dfsFAS(g);\n    $Zsaag.forEach(fas, function(e) {\n        var label = g.edge(e);\n        g.removeEdge(e);\n        label.forwardName = e.name;\n        label.reversed = true;\n        g.setEdge(e.w, e.v, label, $Zsaag.uniqueId(\"rev\"));\n    });\n    function weightFn(g) {\n        return function(e) {\n            return g.edge(e).weight;\n        };\n    }\n}\nfunction $c144cee7b667b3e4$var$dfsFAS(g) {\n    var fas = [];\n    var stack = {};\n    var visited = {};\n    function dfs(v) {\n        if ($Zsaag.has(visited, v)) return;\n        visited[v] = true;\n        stack[v] = true;\n        $Zsaag.forEach(g.outEdges(v), function(e) {\n            if ($Zsaag.has(stack, e.w)) fas.push(e);\n            else dfs(e.w);\n        });\n        delete stack[v];\n    }\n    $Zsaag.forEach(g.nodes(), dfs);\n    return fas;\n}\nfunction $c144cee7b667b3e4$var$undo(g) {\n    $Zsaag.forEach(g.edges(), function(e) {\n        var label = g.edge(e);\n        if (label.reversed) {\n            g.removeEdge(e);\n            var forwardName = label.forwardName;\n            delete label.reversed;\n            delete label.forwardName;\n            g.setEdge(e.w, e.v, label, forwardName);\n        }\n    });\n}\n\n});\nparcelRegister(\"5GMPT\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $4246c1c9eca47a09$require$Graph = $3vj6M.Graph;\n\nvar $g08PX = parcelRequire(\"g08PX\");\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */ module.exports = $4246c1c9eca47a09$var$greedyFAS;\nvar $4246c1c9eca47a09$var$DEFAULT_WEIGHT_FN = $Zsaag.constant(1);\nfunction $4246c1c9eca47a09$var$greedyFAS(g, weightFn) {\n    if (g.nodeCount() <= 1) return [];\n    var state = $4246c1c9eca47a09$var$buildState(g, weightFn || $4246c1c9eca47a09$var$DEFAULT_WEIGHT_FN);\n    var results = $4246c1c9eca47a09$var$doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n    // Expand multi-edges\n    return $Zsaag.flatten($Zsaag.map(results, function(e) {\n        return g.outEdges(e.v, e.w);\n    }), true);\n}\nfunction $4246c1c9eca47a09$var$doGreedyFAS(g, buckets, zeroIdx) {\n    var results = [];\n    var sources = buckets[buckets.length - 1];\n    var sinks = buckets[0];\n    var entry;\n    while(g.nodeCount()){\n        while(entry = sinks.dequeue())$4246c1c9eca47a09$var$removeNode(g, buckets, zeroIdx, entry);\n        while(entry = sources.dequeue())$4246c1c9eca47a09$var$removeNode(g, buckets, zeroIdx, entry);\n        if (g.nodeCount()) for(var i = buckets.length - 2; i > 0; --i){\n            entry = buckets[i].dequeue();\n            if (entry) {\n                results = results.concat($4246c1c9eca47a09$var$removeNode(g, buckets, zeroIdx, entry, true));\n                break;\n            }\n        }\n    }\n    return results;\n}\nfunction $4246c1c9eca47a09$var$removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n    var results = collectPredecessors ? [] : undefined;\n    $Zsaag.forEach(g.inEdges(entry.v), function(edge) {\n        var weight = g.edge(edge);\n        var uEntry = g.node(edge.v);\n        if (collectPredecessors) results.push({\n            v: edge.v,\n            w: edge.w\n        });\n        uEntry.out -= weight;\n        $4246c1c9eca47a09$var$assignBucket(buckets, zeroIdx, uEntry);\n    });\n    $Zsaag.forEach(g.outEdges(entry.v), function(edge) {\n        var weight = g.edge(edge);\n        var w = edge.w;\n        var wEntry = g.node(w);\n        wEntry[\"in\"] -= weight;\n        $4246c1c9eca47a09$var$assignBucket(buckets, zeroIdx, wEntry);\n    });\n    g.removeNode(entry.v);\n    return results;\n}\nfunction $4246c1c9eca47a09$var$buildState(g, weightFn) {\n    var fasGraph = new $4246c1c9eca47a09$require$Graph();\n    var maxIn = 0;\n    var maxOut = 0;\n    $Zsaag.forEach(g.nodes(), function(v) {\n        fasGraph.setNode(v, {\n            v: v,\n            \"in\": 0,\n            out: 0\n        });\n    });\n    // Aggregate weights on nodes, but also sum the weights across multi-edges\n    // into a single edge for the fasGraph.\n    $Zsaag.forEach(g.edges(), function(e) {\n        var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n        var weight = weightFn(e);\n        var edgeWeight = prevWeight + weight;\n        fasGraph.setEdge(e.v, e.w, edgeWeight);\n        maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n        maxIn = Math.max(maxIn, fasGraph.node(e.w)[\"in\"] += weight);\n    });\n    var buckets = $Zsaag.range(maxOut + maxIn + 3).map(function() {\n        return new $g08PX();\n    });\n    var zeroIdx = maxIn + 1;\n    $Zsaag.forEach(fasGraph.nodes(), function(v) {\n        $4246c1c9eca47a09$var$assignBucket(buckets, zeroIdx, fasGraph.node(v));\n    });\n    return {\n        graph: fasGraph,\n        buckets: buckets,\n        zeroIdx: zeroIdx\n    };\n}\nfunction $4246c1c9eca47a09$var$assignBucket(buckets, zeroIdx, entry) {\n    if (!entry.out) buckets[0].enqueue(entry);\n    else if (!entry[\"in\"]) buckets[buckets.length - 1].enqueue(entry);\n    else buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n}\n\n});\nparcelRegister(\"g08PX\", function(module, exports) {\n/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */ module.exports = $ba63804a530e65f3$var$List;\nfunction $ba63804a530e65f3$var$List() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n}\n$ba63804a530e65f3$var$List.prototype.dequeue = function() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n        $ba63804a530e65f3$var$unlink(entry);\n        return entry;\n    }\n};\n$ba63804a530e65f3$var$List.prototype.enqueue = function(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) $ba63804a530e65f3$var$unlink(entry);\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n};\n$ba63804a530e65f3$var$List.prototype.toString = function() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while(curr !== sentinel){\n        strs.push(JSON.stringify(curr, $ba63804a530e65f3$var$filterOutLinks));\n        curr = curr._prev;\n    }\n    return \"[\" + strs.join(\", \") + \"]\";\n};\nfunction $ba63804a530e65f3$var$unlink(entry) {\n    entry._prev._next = entry._next;\n    entry._next._prev = entry._prev;\n    delete entry._next;\n    delete entry._prev;\n}\nfunction $ba63804a530e65f3$var$filterOutLinks(k, v) {\n    if (k !== \"_next\" && k !== \"_prev\") return v;\n}\n\n});\n\n\n\nparcelRegister(\"cd7Ze\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nmodule.exports = {\n    run: $8e3ce4e91573bffc$var$run,\n    undo: $8e3ce4e91573bffc$var$undo\n};\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */ function $8e3ce4e91573bffc$var$run(g) {\n    g.graph().dummyChains = [];\n    $Zsaag.forEach(g.edges(), function(edge) {\n        $8e3ce4e91573bffc$var$normalizeEdge(g, edge);\n    });\n}\nfunction $8e3ce4e91573bffc$var$normalizeEdge(g, e) {\n    var v = e.v;\n    var vRank = g.node(v).rank;\n    var w = e.w;\n    var wRank = g.node(w).rank;\n    var name = e.name;\n    var edgeLabel = g.edge(e);\n    var labelRank = edgeLabel.labelRank;\n    if (wRank === vRank + 1) return;\n    g.removeEdge(e);\n    var dummy, attrs, i;\n    for(i = 0, ++vRank; vRank < wRank; ++i, ++vRank){\n        edgeLabel.points = [];\n        attrs = {\n            width: 0,\n            height: 0,\n            edgeLabel: edgeLabel,\n            edgeObj: e,\n            rank: vRank\n        };\n        dummy = $2o807.addDummyNode(g, \"edge\", attrs, \"_d\");\n        if (vRank === labelRank) {\n            attrs.width = edgeLabel.width;\n            attrs.height = edgeLabel.height;\n            attrs.dummy = \"edge-label\";\n            attrs.labelpos = edgeLabel.labelpos;\n        }\n        g.setEdge(v, dummy, {\n            weight: edgeLabel.weight\n        }, name);\n        if (i === 0) g.graph().dummyChains.push(dummy);\n        v = dummy;\n    }\n    g.setEdge(v, w, {\n        weight: edgeLabel.weight\n    }, name);\n}\nfunction $8e3ce4e91573bffc$var$undo(g) {\n    $Zsaag.forEach(g.graph().dummyChains, function(v) {\n        var node = g.node(v);\n        var origLabel = node.edgeLabel;\n        var w;\n        g.setEdge(node.edgeObj, origLabel);\n        while(node.dummy){\n            w = g.successors(v)[0];\n            g.removeNode(v);\n            origLabel.points.push({\n                x: node.x,\n                y: node.y\n            });\n            if (node.dummy === \"edge-label\") {\n                origLabel.x = node.x;\n                origLabel.y = node.y;\n                origLabel.width = node.width;\n                origLabel.height = node.height;\n            }\n            v = w;\n            node = g.node(v);\n        }\n    });\n}\n\n});\nparcelRegister(\"2o807\", function(module, exports) {\n/* eslint \"no-console\": off */ \"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $1bd4077d40ad527f$require$Graph = $3vj6M.Graph;\nmodule.exports = {\n    addDummyNode: $1bd4077d40ad527f$var$addDummyNode,\n    simplify: $1bd4077d40ad527f$var$simplify,\n    asNonCompoundGraph: $1bd4077d40ad527f$var$asNonCompoundGraph,\n    successorWeights: $1bd4077d40ad527f$var$successorWeights,\n    predecessorWeights: $1bd4077d40ad527f$var$predecessorWeights,\n    intersectRect: $1bd4077d40ad527f$var$intersectRect,\n    buildLayerMatrix: $1bd4077d40ad527f$var$buildLayerMatrix,\n    normalizeRanks: $1bd4077d40ad527f$var$normalizeRanks,\n    removeEmptyRanks: $1bd4077d40ad527f$var$removeEmptyRanks,\n    addBorderNode: $1bd4077d40ad527f$var$addBorderNode,\n    maxRank: $1bd4077d40ad527f$var$maxRank,\n    partition: $1bd4077d40ad527f$var$partition,\n    time: $1bd4077d40ad527f$var$time,\n    notime: $1bd4077d40ad527f$var$notime\n};\n/*\n * Adds a dummy node to the graph and return v.\n */ function $1bd4077d40ad527f$var$addDummyNode(g, type, attrs, name) {\n    var v;\n    do v = $Zsaag.uniqueId(name);\n    while (g.hasNode(v));\n    attrs.dummy = type;\n    g.setNode(v, attrs);\n    return v;\n}\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */ function $1bd4077d40ad527f$var$simplify(g) {\n    var simplified = new $1bd4077d40ad527f$require$Graph().setGraph(g.graph());\n    $Zsaag.forEach(g.nodes(), function(v) {\n        simplified.setNode(v, g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        var simpleLabel = simplified.edge(e.v, e.w) || {\n            weight: 0,\n            minlen: 1\n        };\n        var label = g.edge(e);\n        simplified.setEdge(e.v, e.w, {\n            weight: simpleLabel.weight + label.weight,\n            minlen: Math.max(simpleLabel.minlen, label.minlen)\n        });\n    });\n    return simplified;\n}\nfunction $1bd4077d40ad527f$var$asNonCompoundGraph(g) {\n    var simplified = new $1bd4077d40ad527f$require$Graph({\n        multigraph: g.isMultigraph()\n    }).setGraph(g.graph());\n    $Zsaag.forEach(g.nodes(), function(v) {\n        if (!g.children(v).length) simplified.setNode(v, g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        simplified.setEdge(e, g.edge(e));\n    });\n    return simplified;\n}\nfunction $1bd4077d40ad527f$var$successorWeights(g) {\n    var weightMap = $Zsaag.map(g.nodes(), function(v) {\n        var sucs = {};\n        $Zsaag.forEach(g.outEdges(v), function(e) {\n            sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n        });\n        return sucs;\n    });\n    return $Zsaag.zipObject(g.nodes(), weightMap);\n}\nfunction $1bd4077d40ad527f$var$predecessorWeights(g) {\n    var weightMap = $Zsaag.map(g.nodes(), function(v) {\n        var preds = {};\n        $Zsaag.forEach(g.inEdges(v), function(e) {\n            preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n        });\n        return preds;\n    });\n    return $Zsaag.zipObject(g.nodes(), weightMap);\n}\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */ function $1bd4077d40ad527f$var$intersectRect(rect, point) {\n    var x = rect.x;\n    var y = rect.y;\n    // Rectangle intersection algorithm from:\n    // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n    var dx = point.x - x;\n    var dy = point.y - y;\n    var w = rect.width / 2;\n    var h = rect.height / 2;\n    if (!dx && !dy) throw new Error(\"Not possible to find intersection inside of the rectangle\");\n    var sx, sy;\n    if (Math.abs(dy) * w > Math.abs(dx) * h) {\n        // Intersection is top or bottom of rect.\n        if (dy < 0) h = -h;\n        sx = h * dx / dy;\n        sy = h;\n    } else {\n        // Intersection is left or right of rect.\n        if (dx < 0) w = -w;\n        sx = w;\n        sy = w * dy / dx;\n    }\n    return {\n        x: x + sx,\n        y: y + sy\n    };\n}\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */ function $1bd4077d40ad527f$var$buildLayerMatrix(g) {\n    var layering = $Zsaag.map($Zsaag.range($1bd4077d40ad527f$var$maxRank(g) + 1), function() {\n        return [];\n    });\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        var rank = node.rank;\n        if (!$Zsaag.isUndefined(rank)) layering[rank][node.order] = v;\n    });\n    return layering;\n}\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */ function $1bd4077d40ad527f$var$normalizeRanks(g) {\n    var min = $Zsaag.min($Zsaag.map(g.nodes(), function(v) {\n        return g.node(v).rank;\n    }));\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v);\n        if ($Zsaag.has(node, \"rank\")) node.rank -= min;\n    });\n}\nfunction $1bd4077d40ad527f$var$removeEmptyRanks(g) {\n    // Ranks may not start at 0, so we need to offset them\n    var offset = $Zsaag.min($Zsaag.map(g.nodes(), function(v) {\n        return g.node(v).rank;\n    }));\n    var layers = [];\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var rank = g.node(v).rank - offset;\n        if (!layers[rank]) layers[rank] = [];\n        layers[rank].push(v);\n    });\n    var delta = 0;\n    var nodeRankFactor = g.graph().nodeRankFactor;\n    $Zsaag.forEach(layers, function(vs, i) {\n        if ($Zsaag.isUndefined(vs) && i % nodeRankFactor !== 0) --delta;\n        else if (delta) $Zsaag.forEach(vs, function(v) {\n            g.node(v).rank += delta;\n        });\n    });\n}\nfunction $1bd4077d40ad527f$var$addBorderNode(g, prefix, rank, order) {\n    var node = {\n        width: 0,\n        height: 0\n    };\n    if (arguments.length >= 4) {\n        node.rank = rank;\n        node.order = order;\n    }\n    return $1bd4077d40ad527f$var$addDummyNode(g, \"border\", node, prefix);\n}\nfunction $1bd4077d40ad527f$var$maxRank(g) {\n    return $Zsaag.max($Zsaag.map(g.nodes(), function(v) {\n        var rank = g.node(v).rank;\n        if (!$Zsaag.isUndefined(rank)) return rank;\n    }));\n}\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */ function $1bd4077d40ad527f$var$partition(collection, fn) {\n    var result = {\n        lhs: [],\n        rhs: []\n    };\n    $Zsaag.forEach(collection, function(value) {\n        if (fn(value)) result.lhs.push(value);\n        else result.rhs.push(value);\n    });\n    return result;\n}\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */ function $1bd4077d40ad527f$var$time(name, fn) {\n    var start = $Zsaag.now();\n    try {\n        return fn();\n    } finally{\n        console.log(name + \" time: \" + ($Zsaag.now() - start) + \"ms\");\n    }\n}\nfunction $1bd4077d40ad527f$var$notime(name, fn) {\n    return fn();\n}\n\n});\n\n\nparcelRegister(\"gMe1c\", function(module, exports) {\n\"use strict\";\n\nvar $dih8c = parcelRequire(\"dih8c\");\nvar $c36c00c99f5855c1$var$longestPath = $dih8c.longestPath;\n\nvar $2gZew = parcelRequire(\"2gZew\");\n\nvar $j10J1 = parcelRequire(\"j10J1\");\nmodule.exports = $c36c00c99f5855c1$var$rank;\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */ function $c36c00c99f5855c1$var$rank(g) {\n    switch(g.graph().ranker){\n        case \"network-simplex\":\n            $c36c00c99f5855c1$var$networkSimplexRanker(g);\n            break;\n        case \"tight-tree\":\n            $c36c00c99f5855c1$var$tightTreeRanker(g);\n            break;\n        case \"longest-path\":\n            $c36c00c99f5855c1$var$longestPathRanker(g);\n            break;\n        default:\n            $c36c00c99f5855c1$var$networkSimplexRanker(g);\n    }\n}\n// A fast and simple ranker, but results are far from optimal.\nvar $c36c00c99f5855c1$var$longestPathRanker = $c36c00c99f5855c1$var$longestPath;\nfunction $c36c00c99f5855c1$var$tightTreeRanker(g) {\n    $c36c00c99f5855c1$var$longestPath(g);\n    $2gZew(g);\n}\nfunction $c36c00c99f5855c1$var$networkSimplexRanker(g) {\n    $j10J1(g);\n}\n\n});\nparcelRegister(\"dih8c\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = {\n    longestPath: $9ada3eb473288b5b$var$longestPath,\n    slack: $9ada3eb473288b5b$var$slack\n};\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */ function $9ada3eb473288b5b$var$longestPath(g) {\n    var visited = {};\n    function dfs(v) {\n        var label = g.node(v);\n        if ($Zsaag.has(visited, v)) return label.rank;\n        visited[v] = true;\n        var rank = $Zsaag.min($Zsaag.map(g.outEdges(v), function(e) {\n            return dfs(e.w) - g.edge(e).minlen;\n        }));\n        if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) rank = 0;\n        return label.rank = rank;\n    }\n    $Zsaag.forEach(g.sources(), dfs);\n}\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */ function $9ada3eb473288b5b$var$slack(g, e) {\n    return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n\n});\n\nparcelRegister(\"2gZew\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $1a7c930c31aa3210$require$Graph = $3vj6M.Graph;\n\nvar $dih8c = parcelRequire(\"dih8c\");\nvar $1a7c930c31aa3210$require$slack = $dih8c.slack;\nmodule.exports = $1a7c930c31aa3210$var$feasibleTree;\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */ function $1a7c930c31aa3210$var$feasibleTree(g) {\n    var t = new $1a7c930c31aa3210$require$Graph({\n        directed: false\n    });\n    // Choose arbitrary node from which to start our tree\n    var start = g.nodes()[0];\n    var size = g.nodeCount();\n    t.setNode(start, {});\n    var edge, delta;\n    while($1a7c930c31aa3210$var$tightTree(t, g) < size){\n        edge = $1a7c930c31aa3210$var$findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.v) ? $1a7c930c31aa3210$require$slack(g, edge) : -$1a7c930c31aa3210$require$slack(g, edge);\n        $1a7c930c31aa3210$var$shiftRanks(t, g, delta);\n    }\n    return t;\n}\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */ function $1a7c930c31aa3210$var$tightTree(t, g) {\n    function dfs(v) {\n        $Zsaag.forEach(g.nodeEdges(v), function(e) {\n            var edgeV = e.v, w = v === edgeV ? e.w : edgeV;\n            if (!t.hasNode(w) && !$1a7c930c31aa3210$require$slack(g, e)) {\n                t.setNode(w, {});\n                t.setEdge(v, w, {});\n                dfs(w);\n            }\n        });\n    }\n    $Zsaag.forEach(t.nodes(), dfs);\n    return t.nodeCount();\n}\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */ function $1a7c930c31aa3210$var$findMinSlackEdge(t, g) {\n    return $Zsaag.minBy(g.edges(), function(e) {\n        if (t.hasNode(e.v) !== t.hasNode(e.w)) return $1a7c930c31aa3210$require$slack(g, e);\n    });\n}\nfunction $1a7c930c31aa3210$var$shiftRanks(t, g, delta) {\n    $Zsaag.forEach(t.nodes(), function(v) {\n        g.node(v).rank += delta;\n    });\n}\n\n});\n\nparcelRegister(\"j10J1\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2gZew = parcelRequire(\"2gZew\");\n\nvar $dih8c = parcelRequire(\"dih8c\");\nvar $dd7eac5002e584a9$require$slack = $dih8c.slack;\n\nvar $dih8c = parcelRequire(\"dih8c\");\nvar $dd7eac5002e584a9$require$initRank = $dih8c.longestPath;\n\nvar $dd7eac5002e584a9$var$preorder = (parcelRequire(\"3vj6M\")).alg.preorder;\n\nvar $dd7eac5002e584a9$var$postorder = (parcelRequire(\"3vj6M\")).alg.postorder;\n\nvar $2o807 = parcelRequire(\"2o807\");\nvar $dd7eac5002e584a9$require$simplify = $2o807.simplify;\nmodule.exports = $dd7eac5002e584a9$var$networkSimplex;\n// Expose some internals for testing purposes\n$dd7eac5002e584a9$var$networkSimplex.initLowLimValues = $dd7eac5002e584a9$var$initLowLimValues;\n$dd7eac5002e584a9$var$networkSimplex.initCutValues = $dd7eac5002e584a9$var$initCutValues;\n$dd7eac5002e584a9$var$networkSimplex.calcCutValue = $dd7eac5002e584a9$var$calcCutValue;\n$dd7eac5002e584a9$var$networkSimplex.leaveEdge = $dd7eac5002e584a9$var$leaveEdge;\n$dd7eac5002e584a9$var$networkSimplex.enterEdge = $dd7eac5002e584a9$var$enterEdge;\n$dd7eac5002e584a9$var$networkSimplex.exchangeEdges = $dd7eac5002e584a9$var$exchangeEdges;\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */ function $dd7eac5002e584a9$var$networkSimplex(g) {\n    g = $dd7eac5002e584a9$require$simplify(g);\n    $dd7eac5002e584a9$require$initRank(g);\n    var t = $2gZew(g);\n    $dd7eac5002e584a9$var$initLowLimValues(t);\n    $dd7eac5002e584a9$var$initCutValues(t, g);\n    var e, f;\n    while(e = $dd7eac5002e584a9$var$leaveEdge(t)){\n        f = $dd7eac5002e584a9$var$enterEdge(t, g, e);\n        $dd7eac5002e584a9$var$exchangeEdges(t, g, e, f);\n    }\n}\n/*\n * Initializes cut values for all edges in the tree.\n */ function $dd7eac5002e584a9$var$initCutValues(t, g) {\n    var vs = $dd7eac5002e584a9$var$postorder(t, t.nodes());\n    vs = vs.slice(0, vs.length - 1);\n    $Zsaag.forEach(vs, function(v) {\n        $dd7eac5002e584a9$var$assignCutValue(t, g, v);\n    });\n}\nfunction $dd7eac5002e584a9$var$assignCutValue(t, g, child) {\n    var childLab = t.node(child);\n    var parent = childLab.parent;\n    t.edge(child, parent).cutvalue = $dd7eac5002e584a9$var$calcCutValue(t, g, child);\n}\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */ function $dd7eac5002e584a9$var$calcCutValue(t, g, child) {\n    var childLab = t.node(child);\n    var parent = childLab.parent;\n    // True if the child is on the tail end of the edge in the directed graph\n    var childIsTail = true;\n    // The graph's view of the tree edge we're inspecting\n    var graphEdge = g.edge(child, parent);\n    // The accumulated cut value for the edge between this node and its parent\n    var cutValue = 0;\n    if (!graphEdge) {\n        childIsTail = false;\n        graphEdge = g.edge(parent, child);\n    }\n    cutValue = graphEdge.weight;\n    $Zsaag.forEach(g.nodeEdges(child), function(e) {\n        var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;\n        if (other !== parent) {\n            var pointsToHead = isOutEdge === childIsTail, otherWeight = g.edge(e).weight;\n            cutValue += pointsToHead ? otherWeight : -otherWeight;\n            if ($dd7eac5002e584a9$var$isTreeEdge(t, child, other)) {\n                var otherCutValue = t.edge(child, other).cutvalue;\n                cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n            }\n        }\n    });\n    return cutValue;\n}\nfunction $dd7eac5002e584a9$var$initLowLimValues(tree, root) {\n    if (arguments.length < 2) root = tree.nodes()[0];\n    $dd7eac5002e584a9$var$dfsAssignLowLim(tree, {}, 1, root);\n}\nfunction $dd7eac5002e584a9$var$dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n    var low = nextLim;\n    var label = tree.node(v);\n    visited[v] = true;\n    $Zsaag.forEach(tree.neighbors(v), function(w) {\n        if (!$Zsaag.has(visited, w)) nextLim = $dd7eac5002e584a9$var$dfsAssignLowLim(tree, visited, nextLim, w, v);\n    });\n    label.low = low;\n    label.lim = nextLim++;\n    if (parent) label.parent = parent;\n    else // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n    return nextLim;\n}\nfunction $dd7eac5002e584a9$var$leaveEdge(tree) {\n    return $Zsaag.find(tree.edges(), function(e) {\n        return tree.edge(e).cutvalue < 0;\n    });\n}\nfunction $dd7eac5002e584a9$var$enterEdge(t, g, edge) {\n    var v = edge.v;\n    var w = edge.w;\n    // For the rest of this function we assume that v is the tail and w is the\n    // head, so if we don't have this edge in the graph we should flip it to\n    // match the correct orientation.\n    if (!g.hasEdge(v, w)) {\n        v = edge.w;\n        w = edge.v;\n    }\n    var vLabel = t.node(v);\n    var wLabel = t.node(w);\n    var tailLabel = vLabel;\n    var flip = false;\n    // If the root is in the tail of the edge then we need to flip the logic that\n    // checks for the head and tail nodes in the candidates function below.\n    if (vLabel.lim > wLabel.lim) {\n        tailLabel = wLabel;\n        flip = true;\n    }\n    var candidates = $Zsaag.filter(g.edges(), function(edge) {\n        return flip === $dd7eac5002e584a9$var$isDescendant(t, t.node(edge.v), tailLabel) && flip !== $dd7eac5002e584a9$var$isDescendant(t, t.node(edge.w), tailLabel);\n    });\n    return $Zsaag.minBy(candidates, function(edge) {\n        return $dd7eac5002e584a9$require$slack(g, edge);\n    });\n}\nfunction $dd7eac5002e584a9$var$exchangeEdges(t, g, e, f) {\n    var v = e.v;\n    var w = e.w;\n    t.removeEdge(v, w);\n    t.setEdge(f.v, f.w, {});\n    $dd7eac5002e584a9$var$initLowLimValues(t);\n    $dd7eac5002e584a9$var$initCutValues(t, g);\n    $dd7eac5002e584a9$var$updateRanks(t, g);\n}\nfunction $dd7eac5002e584a9$var$updateRanks(t, g) {\n    var root = $Zsaag.find(t.nodes(), function(v) {\n        return !g.node(v).parent;\n    });\n    var vs = $dd7eac5002e584a9$var$preorder(t, root);\n    vs = vs.slice(1);\n    $Zsaag.forEach(vs, function(v) {\n        var parent = t.node(v).parent, edge = g.edge(v, parent), flipped = false;\n        if (!edge) {\n            edge = g.edge(parent, v);\n            flipped = true;\n        }\n        g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n    });\n}\n/*\n * Returns true if the edge is in the tree.\n */ function $dd7eac5002e584a9$var$isTreeEdge(tree, u, v) {\n    return tree.hasEdge(u, v);\n}\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */ function $dd7eac5002e584a9$var$isDescendant(tree, vLabel, rootLabel) {\n    return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n\n});\n\n\nparcelRegister(\"8tz2F\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $62bc36c345cb8b1f$var$parentDummyChains;\nfunction $62bc36c345cb8b1f$var$parentDummyChains(g) {\n    var postorderNums = $62bc36c345cb8b1f$var$postorder(g);\n    $Zsaag.forEach(g.graph().dummyChains, function(v) {\n        var node = g.node(v);\n        var edgeObj = node.edgeObj;\n        var pathData = $62bc36c345cb8b1f$var$findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n        var path = pathData.path;\n        var lca = pathData.lca;\n        var pathIdx = 0;\n        var pathV = path[pathIdx];\n        var ascending = true;\n        while(v !== edgeObj.w){\n            node = g.node(v);\n            if (ascending) {\n                while((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank)pathIdx++;\n                if (pathV === lca) ascending = false;\n            }\n            if (!ascending) {\n                while(pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank)pathIdx++;\n                pathV = path[pathIdx];\n            }\n            g.setParent(v, pathV);\n            v = g.successors(v)[0];\n        }\n    });\n}\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction $62bc36c345cb8b1f$var$findPath(g, postorderNums, v, w) {\n    var vPath = [];\n    var wPath = [];\n    var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n    var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n    var parent;\n    var lca;\n    // Traverse up from v to find the LCA\n    parent = v;\n    do {\n        parent = g.parent(parent);\n        vPath.push(parent);\n    }while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n    lca = parent;\n    // Traverse from w to LCA\n    parent = w;\n    while((parent = g.parent(parent)) !== lca)wPath.push(parent);\n    return {\n        path: vPath.concat(wPath.reverse()),\n        lca: lca\n    };\n}\nfunction $62bc36c345cb8b1f$var$postorder(g) {\n    var result = {};\n    var lim = 0;\n    function dfs(v) {\n        var low = lim;\n        $Zsaag.forEach(g.children(v), dfs);\n        result[v] = {\n            low: low,\n            lim: lim++\n        };\n    }\n    $Zsaag.forEach(g.children(), dfs);\n    return result;\n}\n\n});\n\nparcelRegister(\"16kgn\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nmodule.exports = {\n    run: $0cd611cc81de3f62$var$run,\n    cleanup: $0cd611cc81de3f62$var$cleanup\n};\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */ function $0cd611cc81de3f62$var$run(g) {\n    var root = $2o807.addDummyNode(g, \"root\", {}, \"_root\");\n    var depths = $0cd611cc81de3f62$var$treeDepths(g);\n    var height = $Zsaag.max($Zsaag.values(depths)) - 1; // Note: depths is an Object not an array\n    var nodeSep = 2 * height + 1;\n    g.graph().nestingRoot = root;\n    // Multiply minlen by nodeSep to align nodes on non-border ranks.\n    $Zsaag.forEach(g.edges(), function(e) {\n        g.edge(e).minlen *= nodeSep;\n    });\n    // Calculate a weight that is sufficient to keep subgraphs vertically compact\n    var weight = $0cd611cc81de3f62$var$sumWeights(g) + 1;\n    // Create border nodes and link them up\n    $Zsaag.forEach(g.children(), function(child) {\n        $0cd611cc81de3f62$var$dfs(g, root, nodeSep, weight, height, depths, child);\n    });\n    // Save the multiplier for node layers for later removal of empty border\n    // layers.\n    g.graph().nodeRankFactor = nodeSep;\n}\nfunction $0cd611cc81de3f62$var$dfs(g, root, nodeSep, weight, height, depths, v) {\n    var children = g.children(v);\n    if (!children.length) {\n        if (v !== root) g.setEdge(root, v, {\n            weight: 0,\n            minlen: nodeSep\n        });\n        return;\n    }\n    var top = $2o807.addBorderNode(g, \"_bt\");\n    var bottom = $2o807.addBorderNode(g, \"_bb\");\n    var label = g.node(v);\n    g.setParent(top, v);\n    label.borderTop = top;\n    g.setParent(bottom, v);\n    label.borderBottom = bottom;\n    $Zsaag.forEach(children, function(child) {\n        $0cd611cc81de3f62$var$dfs(g, root, nodeSep, weight, height, depths, child);\n        var childNode = g.node(child);\n        var childTop = childNode.borderTop ? childNode.borderTop : child;\n        var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n        var thisWeight = childNode.borderTop ? weight : 2 * weight;\n        var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n        g.setEdge(top, childTop, {\n            weight: thisWeight,\n            minlen: minlen,\n            nestingEdge: true\n        });\n        g.setEdge(childBottom, bottom, {\n            weight: thisWeight,\n            minlen: minlen,\n            nestingEdge: true\n        });\n    });\n    if (!g.parent(v)) g.setEdge(root, top, {\n        weight: 0,\n        minlen: height + depths[v]\n    });\n}\nfunction $0cd611cc81de3f62$var$treeDepths(g) {\n    var depths = {};\n    function dfs(v, depth) {\n        var children = g.children(v);\n        if (children && children.length) $Zsaag.forEach(children, function(child) {\n            dfs(child, depth + 1);\n        });\n        depths[v] = depth;\n    }\n    $Zsaag.forEach(g.children(), function(v) {\n        dfs(v, 1);\n    });\n    return depths;\n}\nfunction $0cd611cc81de3f62$var$sumWeights(g) {\n    return $Zsaag.reduce(g.edges(), function(acc, e) {\n        return acc + g.edge(e).weight;\n    }, 0);\n}\nfunction $0cd611cc81de3f62$var$cleanup(g) {\n    var graphLabel = g.graph();\n    g.removeNode(graphLabel.nestingRoot);\n    delete graphLabel.nestingRoot;\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        if (edge.nestingEdge) g.removeEdge(e);\n    });\n}\n\n});\n\nparcelRegister(\"jLtz5\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nmodule.exports = $e6395714f4c7ebbf$var$addBorderSegments;\nfunction $e6395714f4c7ebbf$var$addBorderSegments(g) {\n    function dfs(v) {\n        var children = g.children(v);\n        var node = g.node(v);\n        if (children.length) $Zsaag.forEach(children, dfs);\n        if ($Zsaag.has(node, \"minRank\")) {\n            node.borderLeft = [];\n            node.borderRight = [];\n            for(var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank){\n                $e6395714f4c7ebbf$var$addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n                $e6395714f4c7ebbf$var$addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n            }\n        }\n    }\n    $Zsaag.forEach(g.children(), dfs);\n}\nfunction $e6395714f4c7ebbf$var$addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n    var label = {\n        width: 0,\n        height: 0,\n        rank: rank,\n        borderType: prop\n    };\n    var prev = sgNode[prop][rank - 1];\n    var curr = $2o807.addDummyNode(g, \"border\", label, prefix);\n    sgNode[prop][rank] = curr;\n    g.setParent(curr, sg);\n    if (prev) g.setEdge(prev, curr, {\n        weight: 1\n    });\n}\n\n});\n\nparcelRegister(\"6YXm4\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = {\n    adjust: $5156635b098a1f64$var$adjust,\n    undo: $5156635b098a1f64$var$undo\n};\nfunction $5156635b098a1f64$var$adjust(g) {\n    var rankDir = g.graph().rankdir.toLowerCase();\n    if (rankDir === \"lr\" || rankDir === \"rl\") $5156635b098a1f64$var$swapWidthHeight(g);\n}\nfunction $5156635b098a1f64$var$undo(g) {\n    var rankDir = g.graph().rankdir.toLowerCase();\n    if (rankDir === \"bt\" || rankDir === \"rl\") $5156635b098a1f64$var$reverseY(g);\n    if (rankDir === \"lr\" || rankDir === \"rl\") {\n        $5156635b098a1f64$var$swapXY(g);\n        $5156635b098a1f64$var$swapWidthHeight(g);\n    }\n}\nfunction $5156635b098a1f64$var$swapWidthHeight(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        $5156635b098a1f64$var$swapWidthHeightOne(g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        $5156635b098a1f64$var$swapWidthHeightOne(g.edge(e));\n    });\n}\nfunction $5156635b098a1f64$var$swapWidthHeightOne(attrs) {\n    var w = attrs.width;\n    attrs.width = attrs.height;\n    attrs.height = w;\n}\nfunction $5156635b098a1f64$var$reverseY(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        $5156635b098a1f64$var$reverseYOne(g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        $Zsaag.forEach(edge.points, $5156635b098a1f64$var$reverseYOne);\n        if ($Zsaag.has(edge, \"y\")) $5156635b098a1f64$var$reverseYOne(edge);\n    });\n}\nfunction $5156635b098a1f64$var$reverseYOne(attrs) {\n    attrs.y = -attrs.y;\n}\nfunction $5156635b098a1f64$var$swapXY(g) {\n    $Zsaag.forEach(g.nodes(), function(v) {\n        $5156635b098a1f64$var$swapXYOne(g.node(v));\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        var edge = g.edge(e);\n        $Zsaag.forEach(edge.points, $5156635b098a1f64$var$swapXYOne);\n        if ($Zsaag.has(edge, \"x\")) $5156635b098a1f64$var$swapXYOne(edge);\n    });\n}\nfunction $5156635b098a1f64$var$swapXYOne(attrs) {\n    var x = attrs.x;\n    attrs.x = attrs.y;\n    attrs.y = x;\n}\n\n});\n\nparcelRegister(\"jsxFr\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $g2Xww = parcelRequire(\"g2Xww\");\n\nvar $fMlSg = parcelRequire(\"fMlSg\");\n\nvar $gGdHX = parcelRequire(\"gGdHX\");\n\nvar $k9Bjy = parcelRequire(\"k9Bjy\");\n\nvar $5tdo0 = parcelRequire(\"5tdo0\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $e2aabf7e75035512$require$Graph = $3vj6M.Graph;\n\nvar $2o807 = parcelRequire(\"2o807\");\nmodule.exports = $e2aabf7e75035512$var$order;\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */ function $e2aabf7e75035512$var$order(g) {\n    var maxRank = $2o807.maxRank(g), downLayerGraphs = $e2aabf7e75035512$var$buildLayerGraphs(g, $Zsaag.range(1, maxRank + 1), \"inEdges\"), upLayerGraphs = $e2aabf7e75035512$var$buildLayerGraphs(g, $Zsaag.range(maxRank - 1, -1, -1), \"outEdges\");\n    var layering = $g2Xww(g);\n    $e2aabf7e75035512$var$assignOrder(g, layering);\n    var bestCC = Number.POSITIVE_INFINITY, best;\n    for(var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest){\n        $e2aabf7e75035512$var$sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n        layering = $2o807.buildLayerMatrix(g);\n        var cc = $fMlSg(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = $Zsaag.cloneDeep(layering);\n            bestCC = cc;\n        }\n    }\n    $e2aabf7e75035512$var$assignOrder(g, best);\n}\nfunction $e2aabf7e75035512$var$buildLayerGraphs(g, ranks, relationship) {\n    return $Zsaag.map(ranks, function(rank) {\n        return $k9Bjy(g, rank, relationship);\n    });\n}\nfunction $e2aabf7e75035512$var$sweepLayerGraphs(layerGraphs, biasRight) {\n    var cg = new $e2aabf7e75035512$require$Graph();\n    $Zsaag.forEach(layerGraphs, function(lg) {\n        var root = lg.graph().root;\n        var sorted = $gGdHX(lg, root, cg, biasRight);\n        $Zsaag.forEach(sorted.vs, function(v, i) {\n            lg.node(v).order = i;\n        });\n        $5tdo0(lg, cg, sorted.vs);\n    });\n}\nfunction $e2aabf7e75035512$var$assignOrder(g, layering) {\n    $Zsaag.forEach(layering, function(layer) {\n        $Zsaag.forEach(layer, function(v, i) {\n            g.node(v).order = i;\n        });\n    });\n}\n\n});\nparcelRegister(\"g2Xww\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $baeb0161f6898240$var$initOrder;\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */ function $baeb0161f6898240$var$initOrder(g) {\n    var visited = {};\n    var simpleNodes = $Zsaag.filter(g.nodes(), function(v) {\n        return !g.children(v).length;\n    });\n    var maxRank = $Zsaag.max($Zsaag.map(simpleNodes, function(v) {\n        return g.node(v).rank;\n    }));\n    var layers = $Zsaag.map($Zsaag.range(maxRank + 1), function() {\n        return [];\n    });\n    function dfs(v) {\n        if ($Zsaag.has(visited, v)) return;\n        visited[v] = true;\n        var node = g.node(v);\n        layers[node.rank].push(v);\n        $Zsaag.forEach(g.successors(v), dfs);\n    }\n    var orderedVs = $Zsaag.sortBy(simpleNodes, function(v) {\n        return g.node(v).rank;\n    });\n    $Zsaag.forEach(orderedVs, dfs);\n    return layers;\n}\n\n});\n\nparcelRegister(\"fMlSg\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $b7cc4e7b70f93383$var$crossCount;\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */ function $b7cc4e7b70f93383$var$crossCount(g, layering) {\n    var cc = 0;\n    for(var i = 1; i < layering.length; ++i)cc += $b7cc4e7b70f93383$var$twoLayerCrossCount(g, layering[i - 1], layering[i]);\n    return cc;\n}\nfunction $b7cc4e7b70f93383$var$twoLayerCrossCount(g, northLayer, southLayer) {\n    // Sort all of the edges between the north and south layers by their position\n    // in the north layer and then the south. Map these edges to the position of\n    // their head in the south layer.\n    var southPos = $Zsaag.zipObject(southLayer, $Zsaag.map(southLayer, function(v, i) {\n        return i;\n    }));\n    var southEntries = $Zsaag.flatten($Zsaag.map(northLayer, function(v) {\n        return $Zsaag.sortBy($Zsaag.map(g.outEdges(v), function(e) {\n            return {\n                pos: southPos[e.w],\n                weight: g.edge(e).weight\n            };\n        }), \"pos\");\n    }), true);\n    // Build the accumulator tree\n    var firstIndex = 1;\n    while(firstIndex < southLayer.length)firstIndex <<= 1;\n    var treeSize = 2 * firstIndex - 1;\n    firstIndex -= 1;\n    var tree = $Zsaag.map(new Array(treeSize), function() {\n        return 0;\n    });\n    // Calculate the weighted crossings\n    var cc = 0;\n    $Zsaag.forEach(southEntries.forEach(function(entry) {\n        var index = entry.pos + firstIndex;\n        tree[index] += entry.weight;\n        var weightSum = 0;\n        while(index > 0){\n            if (index % 2) weightSum += tree[index + 1];\n            index = index - 1 >> 1;\n            tree[index] += entry.weight;\n        }\n        cc += entry.weight * weightSum;\n    }));\n    return cc;\n}\n\n});\n\nparcelRegister(\"gGdHX\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $ikoBy = parcelRequire(\"ikoBy\");\n\nvar $iemhI = parcelRequire(\"iemhI\");\n\nvar $gn4d4 = parcelRequire(\"gn4d4\");\nmodule.exports = $c24b33af254cd91a$var$sortSubgraph;\nfunction $c24b33af254cd91a$var$sortSubgraph(g, v, cg, biasRight) {\n    var movable = g.children(v);\n    var node = g.node(v);\n    var bl = node ? node.borderLeft : undefined;\n    var br = node ? node.borderRight : undefined;\n    var subgraphs = {};\n    if (bl) movable = $Zsaag.filter(movable, function(w) {\n        return w !== bl && w !== br;\n    });\n    var barycenters = $ikoBy(g, movable);\n    $Zsaag.forEach(barycenters, function(entry) {\n        if (g.children(entry.v).length) {\n            var subgraphResult = $c24b33af254cd91a$var$sortSubgraph(g, entry.v, cg, biasRight);\n            subgraphs[entry.v] = subgraphResult;\n            if ($Zsaag.has(subgraphResult, \"barycenter\")) $c24b33af254cd91a$var$mergeBarycenters(entry, subgraphResult);\n        }\n    });\n    var entries = $iemhI(barycenters, cg);\n    $c24b33af254cd91a$var$expandSubgraphs(entries, subgraphs);\n    var result = $gn4d4(entries, biasRight);\n    if (bl) {\n        result.vs = $Zsaag.flatten([\n            bl,\n            result.vs,\n            br\n        ], true);\n        if (g.predecessors(bl).length) {\n            var blPred = g.node(g.predecessors(bl)[0]), brPred = g.node(g.predecessors(br)[0]);\n            if (!$Zsaag.has(result, \"barycenter\")) {\n                result.barycenter = 0;\n                result.weight = 0;\n            }\n            result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n            result.weight += 2;\n        }\n    }\n    return result;\n}\nfunction $c24b33af254cd91a$var$expandSubgraphs(entries, subgraphs) {\n    $Zsaag.forEach(entries, function(entry) {\n        entry.vs = $Zsaag.flatten(entry.vs.map(function(v) {\n            if (subgraphs[v]) return subgraphs[v].vs;\n            return v;\n        }), true);\n    });\n}\nfunction $c24b33af254cd91a$var$mergeBarycenters(target, other) {\n    if (!$Zsaag.isUndefined(target.barycenter)) {\n        target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);\n        target.weight += other.weight;\n    } else {\n        target.barycenter = other.barycenter;\n        target.weight = other.weight;\n    }\n}\n\n});\nparcelRegister(\"ikoBy\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $d57d2e3fd5a0fb8a$var$barycenter;\nfunction $d57d2e3fd5a0fb8a$var$barycenter(g, movable) {\n    return $Zsaag.map(movable, function(v) {\n        var inV = g.inEdges(v);\n        if (!inV.length) return {\n            v: v\n        };\n        else {\n            var result = $Zsaag.reduce(inV, function(acc, e) {\n                var edge = g.edge(e), nodeU = g.node(e.v);\n                return {\n                    sum: acc.sum + edge.weight * nodeU.order,\n                    weight: acc.weight + edge.weight\n                };\n            }, {\n                sum: 0,\n                weight: 0\n            });\n            return {\n                v: v,\n                barycenter: result.sum / result.weight,\n                weight: result.weight\n            };\n        }\n    });\n}\n\n});\n\nparcelRegister(\"iemhI\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $d45ad2112b8384a4$var$resolveConflicts;\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */ function $d45ad2112b8384a4$var$resolveConflicts(entries, cg) {\n    var mappedEntries = {};\n    $Zsaag.forEach(entries, function(entry, i) {\n        var tmp = mappedEntries[entry.v] = {\n            indegree: 0,\n            \"in\": [],\n            out: [],\n            vs: [\n                entry.v\n            ],\n            i: i\n        };\n        if (!$Zsaag.isUndefined(entry.barycenter)) {\n            tmp.barycenter = entry.barycenter;\n            tmp.weight = entry.weight;\n        }\n    });\n    $Zsaag.forEach(cg.edges(), function(e) {\n        var entryV = mappedEntries[e.v];\n        var entryW = mappedEntries[e.w];\n        if (!$Zsaag.isUndefined(entryV) && !$Zsaag.isUndefined(entryW)) {\n            entryW.indegree++;\n            entryV.out.push(mappedEntries[e.w]);\n        }\n    });\n    var sourceSet = $Zsaag.filter(mappedEntries, function(entry) {\n        return !entry.indegree;\n    });\n    return $d45ad2112b8384a4$var$doResolveConflicts(sourceSet);\n}\nfunction $d45ad2112b8384a4$var$doResolveConflicts(sourceSet) {\n    var entries = [];\n    function handleIn(vEntry) {\n        return function(uEntry) {\n            if (uEntry.merged) return;\n            if ($Zsaag.isUndefined(uEntry.barycenter) || $Zsaag.isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) $d45ad2112b8384a4$var$mergeEntries(vEntry, uEntry);\n        };\n    }\n    function handleOut(vEntry) {\n        return function(wEntry) {\n            wEntry[\"in\"].push(vEntry);\n            if (--wEntry.indegree === 0) sourceSet.push(wEntry);\n        };\n    }\n    while(sourceSet.length){\n        var entry = sourceSet.pop();\n        entries.push(entry);\n        $Zsaag.forEach(entry[\"in\"].reverse(), handleIn(entry));\n        $Zsaag.forEach(entry.out, handleOut(entry));\n    }\n    return $Zsaag.map($Zsaag.filter(entries, function(entry) {\n        return !entry.merged;\n    }), function(entry) {\n        return $Zsaag.pick(entry, [\n            \"vs\",\n            \"i\",\n            \"barycenter\",\n            \"weight\"\n        ]);\n    });\n}\nfunction $d45ad2112b8384a4$var$mergeEntries(target, source) {\n    var sum = 0;\n    var weight = 0;\n    if (target.weight) {\n        sum += target.barycenter * target.weight;\n        weight += target.weight;\n    }\n    if (source.weight) {\n        sum += source.barycenter * source.weight;\n        weight += source.weight;\n    }\n    target.vs = source.vs.concat(target.vs);\n    target.barycenter = sum / weight;\n    target.weight = weight;\n    target.i = Math.min(source.i, target.i);\n    source.merged = true;\n}\n\n});\n\nparcelRegister(\"gn4d4\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\nmodule.exports = $beb20f4d12854d48$var$sort;\nfunction $beb20f4d12854d48$var$sort(entries, biasRight) {\n    var parts = $2o807.partition(entries, function(entry) {\n        return $Zsaag.has(entry, \"barycenter\");\n    });\n    var sortable = parts.lhs, unsortable = $Zsaag.sortBy(parts.rhs, function(entry) {\n        return -entry.i;\n    }), vs = [], sum = 0, weight = 0, vsIndex = 0;\n    sortable.sort($beb20f4d12854d48$var$compareWithBias(!!biasRight));\n    vsIndex = $beb20f4d12854d48$var$consumeUnsortable(vs, unsortable, vsIndex);\n    $Zsaag.forEach(sortable, function(entry) {\n        vsIndex += entry.vs.length;\n        vs.push(entry.vs);\n        sum += entry.barycenter * entry.weight;\n        weight += entry.weight;\n        vsIndex = $beb20f4d12854d48$var$consumeUnsortable(vs, unsortable, vsIndex);\n    });\n    var result = {\n        vs: $Zsaag.flatten(vs, true)\n    };\n    if (weight) {\n        result.barycenter = sum / weight;\n        result.weight = weight;\n    }\n    return result;\n}\nfunction $beb20f4d12854d48$var$consumeUnsortable(vs, unsortable, index) {\n    var last;\n    while(unsortable.length && (last = $Zsaag.last(unsortable)).i <= index){\n        unsortable.pop();\n        vs.push(last.vs);\n        index++;\n    }\n    return index;\n}\nfunction $beb20f4d12854d48$var$compareWithBias(bias) {\n    return function(entryV, entryW) {\n        if (entryV.barycenter < entryW.barycenter) return -1;\n        else if (entryV.barycenter > entryW.barycenter) return 1;\n        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n    };\n}\n\n});\n\n\nparcelRegister(\"k9Bjy\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $eac197c20b35ba6d$require$Graph = $3vj6M.Graph;\nmodule.exports = $eac197c20b35ba6d$var$buildLayerGraph;\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */ function $eac197c20b35ba6d$var$buildLayerGraph(g, rank, relationship) {\n    var root = $eac197c20b35ba6d$var$createRootNode(g), result = new $eac197c20b35ba6d$require$Graph({\n        compound: true\n    }).setGraph({\n        root: root\n    }).setDefaultNodeLabel(function(v) {\n        return g.node(v);\n    });\n    $Zsaag.forEach(g.nodes(), function(v) {\n        var node = g.node(v), parent = g.parent(v);\n        if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n            result.setNode(v);\n            result.setParent(v, parent || root);\n            // This assumes we have only short edges!\n            $Zsaag.forEach(g[relationship](v), function(e) {\n                var u = e.v === v ? e.w : e.v, edge = result.edge(u, v), weight = !$Zsaag.isUndefined(edge) ? edge.weight : 0;\n                result.setEdge(u, v, {\n                    weight: g.edge(e).weight + weight\n                });\n            });\n            if ($Zsaag.has(node, \"minRank\")) result.setNode(v, {\n                borderLeft: node.borderLeft[rank],\n                borderRight: node.borderRight[rank]\n            });\n        }\n    });\n    return result;\n}\nfunction $eac197c20b35ba6d$var$createRootNode(g) {\n    var v;\n    while(g.hasNode(v = $Zsaag.uniqueId(\"_root\")));\n    return v;\n}\n\n});\n\nparcelRegister(\"5tdo0\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\nmodule.exports = $3fba0b631813c862$var$addSubgraphConstraints;\nfunction $3fba0b631813c862$var$addSubgraphConstraints(g, cg, vs) {\n    var prev = {}, rootPrev;\n    $Zsaag.forEach(vs, function(v) {\n        var child = g.parent(v), parent, prevChild;\n        while(child){\n            parent = g.parent(child);\n            if (parent) {\n                prevChild = prev[parent];\n                prev[parent] = child;\n            } else {\n                prevChild = rootPrev;\n                rootPrev = child;\n            }\n            if (prevChild && prevChild !== child) {\n                cg.setEdge(prevChild, child);\n                return;\n            }\n            child = parent;\n        }\n    });\n/*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */ }\n\n});\n\n\nparcelRegister(\"cYHD5\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\n\nvar $8Ibf3 = parcelRequire(\"8Ibf3\");\nvar $972cee824597e309$require$positionX = $8Ibf3.positionX;\nmodule.exports = $972cee824597e309$var$position;\nfunction $972cee824597e309$var$position(g) {\n    g = $2o807.asNonCompoundGraph(g);\n    $972cee824597e309$var$positionY(g);\n    $Zsaag.forEach($972cee824597e309$require$positionX(g), function(x, v) {\n        g.node(v).x = x;\n    });\n}\nfunction $972cee824597e309$var$positionY(g) {\n    var layering = $2o807.buildLayerMatrix(g);\n    var rankSep = g.graph().ranksep;\n    var prevY = 0;\n    $Zsaag.forEach(layering, function(layer) {\n        var maxHeight = $Zsaag.max($Zsaag.map(layer, function(v) {\n            return g.node(v).height;\n        }));\n        $Zsaag.forEach(layer, function(v) {\n            g.node(v).y = prevY + maxHeight / 2;\n        });\n        prevY += maxHeight + rankSep;\n    });\n}\n\n});\nparcelRegister(\"8Ibf3\", function(module, exports) {\n\"use strict\";\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $657b273346bf5b18$require$Graph = $3vj6M.Graph;\n\nvar $2o807 = parcelRequire(\"2o807\");\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */ module.exports = {\n    positionX: $657b273346bf5b18$var$positionX,\n    findType1Conflicts: $657b273346bf5b18$var$findType1Conflicts,\n    findType2Conflicts: $657b273346bf5b18$var$findType2Conflicts,\n    addConflict: $657b273346bf5b18$var$addConflict,\n    hasConflict: $657b273346bf5b18$var$hasConflict,\n    verticalAlignment: $657b273346bf5b18$var$verticalAlignment,\n    horizontalCompaction: $657b273346bf5b18$var$horizontalCompaction,\n    alignCoordinates: $657b273346bf5b18$var$alignCoordinates,\n    findSmallestWidthAlignment: $657b273346bf5b18$var$findSmallestWidthAlignment,\n    balance: $657b273346bf5b18$var$balance\n};\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */ function $657b273346bf5b18$var$findType1Conflicts(g, layering) {\n    var conflicts = {};\n    function visitLayer(prevLayer, layer) {\n        var // last visited node in the previous layer that is incident on an inner\n        // segment.\n        k0 = 0, // Tracks the last node in this layer scanned for crossings with a type-1\n        // segment.\n        scanPos = 0, prevLayerLength = prevLayer.length, lastNode = $Zsaag.last(layer);\n        $Zsaag.forEach(layer, function(v, i) {\n            var w = $657b273346bf5b18$var$findOtherInnerSegmentNode(g, v), k1 = w ? g.node(w).order : prevLayerLength;\n            if (w || v === lastNode) {\n                $Zsaag.forEach(layer.slice(scanPos, i + 1), function(scanNode) {\n                    $Zsaag.forEach(g.predecessors(scanNode), function(u) {\n                        var uLabel = g.node(u), uPos = uLabel.order;\n                        if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) $657b273346bf5b18$var$addConflict(conflicts, u, scanNode);\n                    });\n                });\n                scanPos = i + 1;\n                k0 = k1;\n            }\n        });\n        return layer;\n    }\n    $Zsaag.reduce(layering, visitLayer);\n    return conflicts;\n}\nfunction $657b273346bf5b18$var$findType2Conflicts(g, layering) {\n    var conflicts = {};\n    function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n        var v;\n        $Zsaag.forEach($Zsaag.range(southPos, southEnd), function(i) {\n            v = south[i];\n            if (g.node(v).dummy) $Zsaag.forEach(g.predecessors(v), function(u) {\n                var uNode = g.node(u);\n                if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) $657b273346bf5b18$var$addConflict(conflicts, u, v);\n            });\n        });\n    }\n    function visitLayer(north, south) {\n        var prevNorthPos = -1, nextNorthPos, southPos = 0;\n        $Zsaag.forEach(south, function(v, southLookahead) {\n            if (g.node(v).dummy === \"border\") {\n                var predecessors = g.predecessors(v);\n                if (predecessors.length) {\n                    nextNorthPos = g.node(predecessors[0]).order;\n                    scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n                    southPos = southLookahead;\n                    prevNorthPos = nextNorthPos;\n                }\n            }\n            scan(south, southPos, south.length, nextNorthPos, north.length);\n        });\n        return south;\n    }\n    $Zsaag.reduce(layering, visitLayer);\n    return conflicts;\n}\nfunction $657b273346bf5b18$var$findOtherInnerSegmentNode(g, v) {\n    if (g.node(v).dummy) return $Zsaag.find(g.predecessors(v), function(u) {\n        return g.node(u).dummy;\n    });\n}\nfunction $657b273346bf5b18$var$addConflict(conflicts, v, w) {\n    if (v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    var conflictsV = conflicts[v];\n    if (!conflictsV) conflicts[v] = conflictsV = {};\n    conflictsV[w] = true;\n}\nfunction $657b273346bf5b18$var$hasConflict(conflicts, v, w) {\n    if (v > w) {\n        var tmp = v;\n        v = w;\n        w = tmp;\n    }\n    return $Zsaag.has(conflicts[v], w);\n}\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */ function $657b273346bf5b18$var$verticalAlignment(g, layering, conflicts, neighborFn) {\n    var root = {}, align = {}, pos = {};\n    // We cache the position here based on the layering because the graph and\n    // layering may be out of sync. The layering matrix is manipulated to\n    // generate different extreme alignments.\n    $Zsaag.forEach(layering, function(layer) {\n        $Zsaag.forEach(layer, function(v, order) {\n            root[v] = v;\n            align[v] = v;\n            pos[v] = order;\n        });\n    });\n    $Zsaag.forEach(layering, function(layer) {\n        var prevIdx = -1;\n        $Zsaag.forEach(layer, function(v) {\n            var ws = neighborFn(v);\n            if (ws.length) {\n                ws = $Zsaag.sortBy(ws, function(w) {\n                    return pos[w];\n                });\n                var mp = (ws.length - 1) / 2;\n                for(var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i){\n                    var w = ws[i];\n                    if (align[v] === v && prevIdx < pos[w] && !$657b273346bf5b18$var$hasConflict(conflicts, v, w)) {\n                        align[w] = v;\n                        align[v] = root[v] = root[w];\n                        prevIdx = pos[w];\n                    }\n                }\n            }\n        });\n    });\n    return {\n        root: root,\n        align: align\n    };\n}\nfunction $657b273346bf5b18$var$horizontalCompaction(g, layering, root, align, reverseSep) {\n    // This portion of the algorithm differs from BK due to a number of problems.\n    // Instead of their algorithm we construct a new block graph and do two\n    // sweeps. The first sweep places blocks with the smallest possible\n    // coordinates. The second sweep removes unused space by moving blocks to the\n    // greatest coordinates without violating separation.\n    var xs = {}, blockG = $657b273346bf5b18$var$buildBlockGraph(g, layering, root, reverseSep), borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n    function iterate(setXsFunc, nextNodesFunc) {\n        var stack = blockG.nodes();\n        var elem = stack.pop();\n        var visited = {};\n        while(elem){\n            if (visited[elem]) setXsFunc(elem);\n            else {\n                visited[elem] = true;\n                stack.push(elem);\n                stack = stack.concat(nextNodesFunc(elem));\n            }\n            elem = stack.pop();\n        }\n    }\n    // First pass, assign smallest coordinates\n    function pass1(elem) {\n        xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n            return Math.max(acc, xs[e.v] + blockG.edge(e));\n        }, 0);\n    }\n    // Second pass, assign greatest coordinates\n    function pass2(elem) {\n        var min = blockG.outEdges(elem).reduce(function(acc, e) {\n            return Math.min(acc, xs[e.w] - blockG.edge(e));\n        }, Number.POSITIVE_INFINITY);\n        var node = g.node(elem);\n        if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) xs[elem] = Math.max(xs[elem], min);\n    }\n    iterate(pass1, blockG.predecessors.bind(blockG));\n    iterate(pass2, blockG.successors.bind(blockG));\n    // Assign x coordinates to all nodes\n    $Zsaag.forEach(align, function(v) {\n        xs[v] = xs[root[v]];\n    });\n    return xs;\n}\nfunction $657b273346bf5b18$var$buildBlockGraph(g, layering, root, reverseSep) {\n    var blockGraph = new $657b273346bf5b18$require$Graph(), graphLabel = g.graph(), sepFn = $657b273346bf5b18$var$sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n    $Zsaag.forEach(layering, function(layer) {\n        var u;\n        $Zsaag.forEach(layer, function(v) {\n            var vRoot = root[v];\n            blockGraph.setNode(vRoot);\n            if (u) {\n                var uRoot = root[u], prevMax = blockGraph.edge(uRoot, vRoot);\n                blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n            }\n            u = v;\n        });\n    });\n    return blockGraph;\n}\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */ function $657b273346bf5b18$var$findSmallestWidthAlignment(g, xss) {\n    return $Zsaag.minBy($Zsaag.values(xss), function(xs) {\n        var max = Number.NEGATIVE_INFINITY;\n        var min = Number.POSITIVE_INFINITY;\n        $Zsaag.forIn(xs, function(x, v) {\n            var halfWidth = $657b273346bf5b18$var$width(g, v) / 2;\n            max = Math.max(x + halfWidth, max);\n            min = Math.min(x - halfWidth, min);\n        });\n        return max - min;\n    });\n}\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */ function $657b273346bf5b18$var$alignCoordinates(xss, alignTo) {\n    var alignToVals = $Zsaag.values(alignTo), alignToMin = $Zsaag.min(alignToVals), alignToMax = $Zsaag.max(alignToVals);\n    $Zsaag.forEach([\n        \"u\",\n        \"d\"\n    ], function(vert) {\n        $Zsaag.forEach([\n            \"l\",\n            \"r\"\n        ], function(horiz) {\n            var alignment = vert + horiz, xs = xss[alignment], delta;\n            if (xs === alignTo) return;\n            var xsVals = $Zsaag.values(xs);\n            delta = horiz === \"l\" ? alignToMin - $Zsaag.min(xsVals) : alignToMax - $Zsaag.max(xsVals);\n            if (delta) xss[alignment] = $Zsaag.mapValues(xs, function(x) {\n                return x + delta;\n            });\n        });\n    });\n}\nfunction $657b273346bf5b18$var$balance(xss, align) {\n    return $Zsaag.mapValues(xss.ul, function(ignore, v) {\n        if (align) return xss[align.toLowerCase()][v];\n        else {\n            var xs = $Zsaag.sortBy($Zsaag.map(xss, v));\n            return (xs[1] + xs[2]) / 2;\n        }\n    });\n}\nfunction $657b273346bf5b18$var$positionX(g) {\n    var layering = $2o807.buildLayerMatrix(g);\n    var conflicts = $Zsaag.merge($657b273346bf5b18$var$findType1Conflicts(g, layering), $657b273346bf5b18$var$findType2Conflicts(g, layering));\n    var xss = {};\n    var adjustedLayering;\n    $Zsaag.forEach([\n        \"u\",\n        \"d\"\n    ], function(vert) {\n        adjustedLayering = vert === \"u\" ? layering : $Zsaag.values(layering).reverse();\n        $Zsaag.forEach([\n            \"l\",\n            \"r\"\n        ], function(horiz) {\n            if (horiz === \"r\") adjustedLayering = $Zsaag.map(adjustedLayering, function(inner) {\n                return $Zsaag.values(inner).reverse();\n            });\n            var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n            var align = $657b273346bf5b18$var$verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n            var xs = $657b273346bf5b18$var$horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === \"r\");\n            if (horiz === \"r\") xs = $Zsaag.mapValues(xs, function(x) {\n                return -x;\n            });\n            xss[vert + horiz] = xs;\n        });\n    });\n    var smallestWidth = $657b273346bf5b18$var$findSmallestWidthAlignment(g, xss);\n    $657b273346bf5b18$var$alignCoordinates(xss, smallestWidth);\n    return $657b273346bf5b18$var$balance(xss, g.graph().align);\n}\nfunction $657b273346bf5b18$var$sep(nodeSep, edgeSep, reverseSep) {\n    return function(g, v, w) {\n        var vLabel = g.node(v);\n        var wLabel = g.node(w);\n        var sum = 0;\n        var delta;\n        sum += vLabel.width / 2;\n        if ($Zsaag.has(vLabel, \"labelpos\")) switch(vLabel.labelpos.toLowerCase()){\n            case \"l\":\n                delta = -vLabel.width / 2;\n                break;\n            case \"r\":\n                delta = vLabel.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n        sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n        sum += wLabel.width / 2;\n        if ($Zsaag.has(wLabel, \"labelpos\")) switch(wLabel.labelpos.toLowerCase()){\n            case \"l\":\n                delta = wLabel.width / 2;\n                break;\n            case \"r\":\n                delta = -wLabel.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        return sum;\n    };\n}\nfunction $657b273346bf5b18$var$width(g, v) {\n    return g.node(v).width;\n}\n\n});\n\n\n\nparcelRegister(\"21fNM\", function(module, exports) {\n\nvar $Zsaag = parcelRequire(\"Zsaag\");\n\nvar $2o807 = parcelRequire(\"2o807\");\n\nvar $3vj6M = parcelRequire(\"3vj6M\");\nvar $1787eeb151b11b97$require$Graph = $3vj6M.Graph;\nmodule.exports = {\n    debugOrdering: $1787eeb151b11b97$var$debugOrdering\n};\n/* istanbul ignore next */ function $1787eeb151b11b97$var$debugOrdering(g) {\n    var layerMatrix = $2o807.buildLayerMatrix(g);\n    var h = new $1787eeb151b11b97$require$Graph({\n        compound: true,\n        multigraph: true\n    }).setGraph({});\n    $Zsaag.forEach(g.nodes(), function(v) {\n        h.setNode(v, {\n            label: v\n        });\n        h.setParent(v, \"layer\" + g.node(v).rank);\n    });\n    $Zsaag.forEach(g.edges(), function(e) {\n        h.setEdge(e.v, e.w, {}, e.name);\n    });\n    $Zsaag.forEach(layerMatrix, function(layer, i) {\n        var layerV = \"layer\" + i;\n        h.setNode(layerV, {\n            rank: \"same\"\n        });\n        $Zsaag.reduce(layer, function(u, v) {\n            h.setEdge(u, v, {\n                style: \"invis\"\n            });\n            return v;\n        });\n    });\n    return h;\n}\n\n});\n\nparcelRegister(\"8PPkN\", function(module, exports) {\nmodule.exports = \"0.8.5\";\n\n});\n\nvar $7041f28448bd7176$exports = {};\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var $4ce669c46e60ac46$var$extendStatics = function(d, b) {\n    $4ce669c46e60ac46$var$extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return $4ce669c46e60ac46$var$extendStatics(d, b);\n};\nfunction $4ce669c46e60ac46$export$a8ba968b8961cb8a(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    $4ce669c46e60ac46$var$extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar $4ce669c46e60ac46$export$18ce0697a983be9b = function() {\n    $4ce669c46e60ac46$export$18ce0697a983be9b = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return $4ce669c46e60ac46$export$18ce0697a983be9b.apply(this, arguments);\n};\nfunction $4ce669c46e60ac46$export$3c9a16f847548506(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") {\n        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction $4ce669c46e60ac46$export$29e00dfd3077644b(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction $4ce669c46e60ac46$export$d5ad3fd78186038f(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction $4ce669c46e60ac46$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n    function accept(f) {\n        if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n        return f;\n    }\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n    var _, done = false;\n    for(var i = decorators.length - 1; i >= 0; i--){\n        var context = {};\n        for(var p in contextIn)context[p] = p === \"access\" ? {} : contextIn[p];\n        for(var p in contextIn.access)context.access[p] = contextIn.access[p];\n        context.addInitializer = function(f) {\n            if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n            extraInitializers.push(accept(f || null));\n        };\n        var result = (0, decorators[i])(kind === \"accessor\" ? {\n            get: descriptor.get,\n            set: descriptor.set\n        } : descriptor[key], context);\n        if (kind === \"accessor\") {\n            if (result === void 0) continue;\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n            if (_ = accept(result.get)) descriptor.get = _;\n            if (_ = accept(result.set)) descriptor.set = _;\n            if (_ = accept(result.init)) initializers.unshift(_);\n        } else if (_ = accept(result)) {\n            if (kind === \"field\") initializers.unshift(_);\n            else descriptor[key] = _;\n        }\n    }\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\n    done = true;\n}\nfunction $4ce669c46e60ac46$export$d831c04e792af3d(thisArg, initializers, value) {\n    var useValue = arguments.length > 2;\n    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n    return useValue ? value : void 0;\n}\nfunction $4ce669c46e60ac46$export$6a2a36740a146cb8(x) {\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\n}\nfunction $4ce669c46e60ac46$export$d1a06452d3489bc7(f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", {\n        configurable: true,\n        value: prefix ? \"\".concat(prefix, \" \", name) : name\n    });\n}\nfunction $4ce669c46e60ac46$export$f1db080c865becb9(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction $4ce669c46e60ac46$export$1050f835b63b671e(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction $4ce669c46e60ac46$export$67ebef60e6f28a6(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(g && (g = 0, op[0] && (_ = 0)), _)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar $4ce669c46e60ac46$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    };\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n};\nfunction $4ce669c46e60ac46$export$f33643c0debef087(m, o) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) $4ce669c46e60ac46$export$45d3717a4c69092e(o, m, p);\n}\nfunction $4ce669c46e60ac46$export$19a8beecd37a4c45(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction $4ce669c46e60ac46$export$8d051b38c9118094(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction $4ce669c46e60ac46$export$afc72e2116322959() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($4ce669c46e60ac46$export$8d051b38c9118094(arguments[i]));\n    return ar;\n}\nfunction $4ce669c46e60ac46$export$6388937ca91ccae8() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\nfunction $4ce669c46e60ac46$export$1216008129fb82ed(to, from, pack) {\n    if (pack || arguments.length === 2) {\n        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\nfunction $4ce669c46e60ac46$export$10c90e4f7922046c(v) {\n    return this instanceof $4ce669c46e60ac46$export$10c90e4f7922046c ? (this.v = v, this) : new $4ce669c46e60ac46$export$10c90e4f7922046c(v);\n}\nfunction $4ce669c46e60ac46$export$e427f37a30a4de9b(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function awaitReturn(f) {\n        return function(v) {\n            return Promise.resolve(v).then(f, reject);\n        };\n    }\n    function verb(n, f) {\n        if (g[n]) {\n            i[n] = function(v) {\n                return new Promise(function(a, b) {\n                    q.push([\n                        n,\n                        v,\n                        a,\n                        b\n                    ]) > 1 || resume(n, v);\n                });\n            };\n            if (f) i[n] = f(i[n]);\n        }\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof $4ce669c46e60ac46$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction $4ce669c46e60ac46$export$bbd80228419bb833(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: $4ce669c46e60ac46$export$10c90e4f7922046c(o[n](v)),\n                done: false\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction $4ce669c46e60ac46$export$e3b29a3d6162315f(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof $4ce669c46e60ac46$export$19a8beecd37a4c45 === \"function\" ? $4ce669c46e60ac46$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction $4ce669c46e60ac46$export$4fb47efe1390b86f(cooked, raw) {\n    if (Object.defineProperty) Object.defineProperty(cooked, \"raw\", {\n        value: raw\n    });\n    else cooked.raw = raw;\n    return cooked;\n}\nvar $4ce669c46e60ac46$var$__setModuleDefault = Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n};\nvar $4ce669c46e60ac46$var$ownKeys = function(o) {\n    $4ce669c46e60ac46$var$ownKeys = Object.getOwnPropertyNames || function(o) {\n        var ar = [];\n        for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n    };\n    return $4ce669c46e60ac46$var$ownKeys(o);\n};\nfunction $4ce669c46e60ac46$export$c21735bcef00d192(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k = $4ce669c46e60ac46$var$ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== \"default\") $4ce669c46e60ac46$export$45d3717a4c69092e(result, mod, k[i]);\n    }\n    $4ce669c46e60ac46$var$__setModuleDefault(result, mod);\n    return result;\n}\nfunction $4ce669c46e60ac46$export$da59b14a69baef04(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction $4ce669c46e60ac46$export$d5dcaf168c640c35(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\nfunction $4ce669c46e60ac46$export$d40a35129aaff81f(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n}\nfunction $4ce669c46e60ac46$export$81fdc39f203e4e04(state, receiver) {\n    if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\nfunction $4ce669c46e60ac46$export$88ac25d8e944e405(env, value, async) {\n    if (value !== null && value !== void 0) {\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n        var dispose, inner;\n        if (async) {\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n            dispose = value[Symbol.asyncDispose];\n        }\n        if (dispose === void 0) {\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n            dispose = value[Symbol.dispose];\n            if (async) inner = dispose;\n        }\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n        if (inner) dispose = function() {\n            try {\n                inner.call(this);\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        };\n        env.stack.push({\n            value: value,\n            dispose: dispose,\n            async: async\n        });\n    } else if (async) env.stack.push({\n        async: true\n    });\n    return value;\n}\nvar $4ce669c46e60ac46$var$_SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction $4ce669c46e60ac46$export$8f076105dc360e92(env) {\n    function fail(e) {\n        env.error = env.hasError ? new $4ce669c46e60ac46$var$_SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n        env.hasError = true;\n    }\n    var r, s = 0;\n    function next() {\n        while(r = env.stack.pop())try {\n            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n            if (r.dispose) {\n                var result = r.dispose.call(r.value);\n                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {\n                    fail(e);\n                    return next();\n                });\n            } else s |= 1;\n        } catch (e) {\n            fail(e);\n        }\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n        if (env.hasError) throw env.error;\n    }\n    return next();\n}\nfunction $4ce669c46e60ac46$export$889dfb5d17574b0b(path, preserveJsx) {\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {\n        return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : d + ext + \".\" + cm.toLowerCase() + \"js\";\n    });\n    return path;\n}\nvar $4ce669c46e60ac46$export$2e2bcd8739ae039 = {\n    __extends: $4ce669c46e60ac46$export$a8ba968b8961cb8a,\n    __assign: $4ce669c46e60ac46$export$18ce0697a983be9b,\n    __rest: $4ce669c46e60ac46$export$3c9a16f847548506,\n    __decorate: $4ce669c46e60ac46$export$29e00dfd3077644b,\n    __param: $4ce669c46e60ac46$export$d5ad3fd78186038f,\n    __esDecorate: $4ce669c46e60ac46$export$3a84e1ae4e97e9b0,\n    __runInitializers: $4ce669c46e60ac46$export$d831c04e792af3d,\n    __propKey: $4ce669c46e60ac46$export$6a2a36740a146cb8,\n    __setFunctionName: $4ce669c46e60ac46$export$d1a06452d3489bc7,\n    __metadata: $4ce669c46e60ac46$export$f1db080c865becb9,\n    __awaiter: $4ce669c46e60ac46$export$1050f835b63b671e,\n    __generator: $4ce669c46e60ac46$export$67ebef60e6f28a6,\n    __createBinding: $4ce669c46e60ac46$export$45d3717a4c69092e,\n    __exportStar: $4ce669c46e60ac46$export$f33643c0debef087,\n    __values: $4ce669c46e60ac46$export$19a8beecd37a4c45,\n    __read: $4ce669c46e60ac46$export$8d051b38c9118094,\n    __spread: $4ce669c46e60ac46$export$afc72e2116322959,\n    __spreadArrays: $4ce669c46e60ac46$export$6388937ca91ccae8,\n    __spreadArray: $4ce669c46e60ac46$export$1216008129fb82ed,\n    __await: $4ce669c46e60ac46$export$10c90e4f7922046c,\n    __asyncGenerator: $4ce669c46e60ac46$export$e427f37a30a4de9b,\n    __asyncDelegator: $4ce669c46e60ac46$export$bbd80228419bb833,\n    __asyncValues: $4ce669c46e60ac46$export$e3b29a3d6162315f,\n    __makeTemplateObject: $4ce669c46e60ac46$export$4fb47efe1390b86f,\n    __importStar: $4ce669c46e60ac46$export$c21735bcef00d192,\n    __importDefault: $4ce669c46e60ac46$export$da59b14a69baef04,\n    __classPrivateFieldGet: $4ce669c46e60ac46$export$d5dcaf168c640c35,\n    __classPrivateFieldSet: $4ce669c46e60ac46$export$d40a35129aaff81f,\n    __classPrivateFieldIn: $4ce669c46e60ac46$export$81fdc39f203e4e04,\n    __addDisposableResource: $4ce669c46e60ac46$export$88ac25d8e944e405,\n    __disposeResources: $4ce669c46e60ac46$export$8f076105dc360e92,\n    __rewriteRelativeImportExtension: $4ce669c46e60ac46$export$889dfb5d17574b0b\n};\n\n\nvar $aaeeac4e1ce28945$var$WILDCARD = '*';\n/* event-emitter */ var $aaeeac4e1ce28945$var$EventEmitter = /** @class */ function() {\n    function EventEmitter() {\n        this._events = {};\n    }\n    /**\n     * 监听一个事件\n     * @param evt\n     * @param callback\n     * @param once\n     */ EventEmitter.prototype.on = function(evt, callback, once) {\n        if (!this._events[evt]) this._events[evt] = [];\n        this._events[evt].push({\n            callback: callback,\n            once: !!once\n        });\n        return this;\n    };\n    /**\n     * 监听一个事件一次\n     * @param evt\n     * @param callback\n     */ EventEmitter.prototype.once = function(evt, callback) {\n        return this.on(evt, callback, true);\n    };\n    /**\n     * 触发一个事件\n     * @param evt\n     * @param args\n     */ EventEmitter.prototype.emit = function(evt) {\n        var _this = this;\n        var args = [];\n        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];\n        var events = this._events[evt] || [];\n        var wildcardEvents = this._events[$aaeeac4e1ce28945$var$WILDCARD] || [];\n        // 实际的处理 emit 方法\n        var doEmit = function(es) {\n            var length = es.length;\n            for(var i = 0; i < length; i++){\n                if (!es[i]) continue;\n                var _a = es[i], callback = _a.callback, once = _a.once;\n                if (once) {\n                    es.splice(i, 1);\n                    if (es.length === 0) delete _this._events[evt];\n                    length--;\n                    i--;\n                }\n                callback.apply(_this, args);\n            }\n        };\n        doEmit(events);\n        doEmit(wildcardEvents);\n    };\n    /**\n     * 取消监听一个事件，或者一个channel\n     * @param evt\n     * @param callback\n     */ EventEmitter.prototype.off = function(evt, callback) {\n        if (!evt) // evt 为空全部清除\n        this._events = {};\n        else if (!callback) // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n        else {\n            // evt 存在，callback 存在，清除匹配的\n            var events = this._events[evt] || [];\n            var length_1 = events.length;\n            for(var i = 0; i < length_1; i++)if (events[i].callback === callback) {\n                events.splice(i, 1);\n                length_1--;\n                i--;\n            }\n            if (events.length === 0) delete this._events[evt];\n        }\n        return this;\n    };\n    /* 当前所有的事件 */ EventEmitter.prototype.getEvents = function() {\n        return this._events;\n    };\n    return EventEmitter;\n}();\nvar $aaeeac4e1ce28945$export$2e2bcd8739ae039 = $aaeeac4e1ce28945$var$EventEmitter;\n\n\nfunction $6b3d8ad76db0a5af$export$35f2fded3a66c010(queue, visited, fn, navigator) {\n    while(queue.length){\n        const node = queue.shift();\n        const abort = fn(node);\n        if (abort) return true;\n        visited.add(node.id);\n        navigator(node.id).forEach((n)=>{\n            if (!visited.has(n.id)) {\n                visited.add(n.id);\n                queue.push(n);\n            }\n        });\n    }\n    return false;\n}\nfunction $6b3d8ad76db0a5af$export$c02af4b0c096197c(node, visited, fn, navigator) {\n    const abort = fn(node);\n    if (abort) return true;\n    visited.add(node.id);\n    for (const n of navigator(node.id))if (!visited.has(n.id)) {\n        if ($6b3d8ad76db0a5af$export$c02af4b0c096197c(n, visited, fn, navigator)) return true;\n    }\n    return false;\n}\n\n\nconst $960c856159ad6b26$var$defaultFilter = ()=>true;\nclass $960c856159ad6b26$export$6a7fe3ef90e8d566 {\n    graph;\n    nodeFilter;\n    edgeFilter;\n    // caches\n    cacheEnabled;\n    inEdgesMap = new Map();\n    outEdgesMap = new Map();\n    bothEdgesMap = new Map();\n    allNodesMap = new Map();\n    allEdgesMap = new Map();\n    constructor(options){\n        this.graph = options.graph;\n        const nodeFilter = options.nodeFilter || $960c856159ad6b26$var$defaultFilter;\n        const edgeFilter = options.edgeFilter || $960c856159ad6b26$var$defaultFilter;\n        this.nodeFilter = nodeFilter;\n        this.edgeFilter = (edge)=>{\n            const { source: source, target: target } = this.graph.getEdgeDetail(edge.id);\n            if (!nodeFilter(source) || !nodeFilter(target)) return false;\n            return edgeFilter(edge, source, target);\n        };\n        if (options.cache === 'auto') {\n            this.cacheEnabled = true;\n            this.startAutoCache();\n        } else if (options.cache === 'manual') this.cacheEnabled = true;\n        else this.cacheEnabled = false;\n    }\n    /**\n     * Clear all cache data. Therefore `getAllNodes()` will return `[]`.\n     * If you want to disable caching, use `graphView.cacheEnabled = false` instead.\n     */ clearCache = ()=>{\n        this.inEdgesMap.clear();\n        this.outEdgesMap.clear();\n        this.bothEdgesMap.clear();\n        this.allNodesMap.clear();\n        this.allEdgesMap.clear();\n    };\n    /**\n     * Fully refresh all cache data to the current graph state.\n     */ refreshCache = ()=>{\n        this.clearCache();\n        this.updateCache(this.graph.getAllNodes().map((node)=>node.id));\n    };\n    /**\n     * Instead of a fully refreshment, this method partially update the cache data by specifying\n     * involved(added, removed, updated) nodes. It's more efficient when handling small changes\n     * on a large graph.\n     */ updateCache = (involvedNodeIds)=>{\n        const involvedEdgeIds = new Set();\n        involvedNodeIds.forEach((id)=>{\n            // Collect all involved old edges.\n            const oldEdgesSet = this.bothEdgesMap.get(id);\n            if (oldEdgesSet) oldEdgesSet.forEach((edge)=>involvedEdgeIds.add(edge.id));\n            if (!this.hasNode(id)) {\n                // When an involved node becomes unvisitable:\n                // 1. Delete its related edges cache.\n                this.inEdgesMap.delete(id);\n                this.outEdgesMap.delete(id);\n                this.bothEdgesMap.delete(id);\n                // 2. Delete it from the allNodesMap.\n                this.allNodesMap.delete(id);\n            } else {\n                // When an involved node becomes or stays visitable:\n                // 1. Collect its new edges.\n                const inEdges = this.graph.getRelatedEdges(id, 'in').filter(this.edgeFilter);\n                const outEdges = this.graph.getRelatedEdges(id, 'out').filter(this.edgeFilter);\n                const bothEdges = Array.from(new Set([\n                    ...inEdges,\n                    ...outEdges\n                ]));\n                bothEdges.forEach((edge)=>involvedEdgeIds.add(edge.id));\n                // 2. Update its related edges cache.\n                this.inEdgesMap.set(id, inEdges);\n                this.outEdgesMap.set(id, outEdges);\n                this.bothEdgesMap.set(id, bothEdges);\n                // 3. Add to allNodesMap.\n                this.allNodesMap.set(id, this.graph.getNode(id));\n            }\n        });\n        // Update allEdgesMap.\n        involvedEdgeIds.forEach((id)=>{\n            if (this.hasEdge(id)) this.allEdgesMap.set(id, this.graph.getEdge(id));\n            else this.allEdgesMap.delete(id);\n        });\n    };\n    startAutoCache() {\n        this.refreshCache();\n        this.graph.on('changed', this.handleGraphChanged);\n    }\n    stopAutoCache() {\n        this.graph.off('changed', this.handleGraphChanged);\n    }\n    handleGraphChanged = (event)=>{\n        // Collect all involved nodes.\n        const involvedNodeIds = new Set();\n        event.changes.forEach((change)=>{\n            switch(change.type){\n                case 'NodeAdded':\n                    involvedNodeIds.add(change.value.id);\n                    break;\n                case 'NodeDataUpdated':\n                    involvedNodeIds.add(change.id);\n                    break;\n                case 'EdgeAdded':\n                    involvedNodeIds.add(change.value.source);\n                    involvedNodeIds.add(change.value.target);\n                    break;\n                case 'EdgeUpdated':\n                    if (change.propertyName === 'source' || change.propertyName === 'target') {\n                        involvedNodeIds.add(change.oldValue);\n                        involvedNodeIds.add(change.newValue);\n                    }\n                    break;\n                case 'EdgeDataUpdated':\n                    if (event.graph.hasEdge(change.id)) {\n                        const edge = event.graph.getEdge(change.id);\n                        involvedNodeIds.add(edge.source);\n                        involvedNodeIds.add(edge.target);\n                    }\n                    break;\n                case 'EdgeRemoved':\n                    involvedNodeIds.add(change.value.source);\n                    involvedNodeIds.add(change.value.target);\n                    break;\n                case 'NodeRemoved':\n                    involvedNodeIds.add(change.value.id);\n                    break;\n                default:\n                    break;\n            }\n        });\n        // Update their caches.\n        this.updateCache(involvedNodeIds);\n    };\n    // ================= Node =================\n    checkNodeExistence(id) {\n        this.getNode(id);\n    }\n    hasNode(id) {\n        if (!this.graph.hasNode(id)) return false;\n        const node = this.graph.getNode(id);\n        return this.nodeFilter(node);\n    }\n    areNeighbors(firstNodeId, secondNodeId) {\n        this.checkNodeExistence(firstNodeId);\n        return this.getNeighbors(secondNodeId).some((neighbor)=>neighbor.id === firstNodeId);\n    }\n    getNode(id) {\n        const node = this.graph.getNode(id);\n        if (!this.nodeFilter(node)) throw new Error('Node not found for id: ' + id);\n        return node;\n    }\n    getRelatedEdges(id, direction) {\n        this.checkNodeExistence(id);\n        if (this.cacheEnabled) {\n            if (direction === 'in') return this.inEdgesMap.get(id);\n            else if (direction === 'out') return this.outEdgesMap.get(id);\n            else return this.bothEdgesMap.get(id);\n        }\n        const edges = this.graph.getRelatedEdges(id, direction);\n        return edges.filter(this.edgeFilter);\n    }\n    getDegree(id, direction) {\n        return this.getRelatedEdges(id, direction).length;\n    }\n    getSuccessors(id) {\n        const outEdges = this.getRelatedEdges(id, 'out');\n        const targets = outEdges.map((edge)=>this.getNode(edge.target));\n        return Array.from(new Set(targets));\n    }\n    getPredecessors(id) {\n        const inEdges = this.getRelatedEdges(id, 'in');\n        const sources = inEdges.map((edge)=>this.getNode(edge.source));\n        return Array.from(new Set(sources));\n    }\n    getNeighbors(id) {\n        const predecessors = this.getPredecessors(id);\n        const successors = this.getSuccessors(id);\n        return Array.from(new Set([\n            ...predecessors,\n            ...successors\n        ]));\n    }\n    // ================= Edge =================\n    hasEdge(id) {\n        if (!this.graph.hasEdge(id)) return false;\n        const edge = this.graph.getEdge(id);\n        return this.edgeFilter(edge);\n    }\n    getEdge(id) {\n        const edge = this.graph.getEdge(id);\n        if (!this.edgeFilter(edge)) throw new Error('Edge not found for id: ' + id);\n        return edge;\n    }\n    getEdgeDetail(id) {\n        const edge = this.getEdge(id);\n        return {\n            edge: edge,\n            source: this.getNode(edge.source),\n            target: this.getNode(edge.target)\n        };\n    }\n    // ================= Tree =================\n    hasTreeStructure(treeKey) {\n        return this.graph.hasTreeStructure(treeKey);\n    }\n    getRoots(treeKey) {\n        return this.graph.getRoots(treeKey).filter(this.nodeFilter);\n    }\n    getChildren(id, treeKey) {\n        this.checkNodeExistence(id);\n        return this.graph.getChildren(id, treeKey).filter(this.nodeFilter);\n    }\n    getParent(id, treeKey) {\n        this.checkNodeExistence(id);\n        const parent = this.graph.getParent(id, treeKey);\n        if (!parent || !this.nodeFilter(parent)) return null;\n        return parent;\n    }\n    // ================= Graph =================\n    getAllNodes() {\n        if (this.cacheEnabled) return Array.from(this.allNodesMap.values());\n        return this.graph.getAllNodes().filter(this.nodeFilter);\n    }\n    getAllEdges() {\n        if (this.cacheEnabled) return Array.from(this.allEdgesMap.values());\n        return this.graph.getAllEdges().filter(this.edgeFilter);\n    }\n    bfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this)\n        }[direction];\n        (0, $6b3d8ad76db0a5af$export$35f2fded3a66c010)([\n            this.getNode(id)\n        ], new Set(), fn, navigator);\n    }\n    dfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this)\n        }[direction];\n        (0, $6b3d8ad76db0a5af$export$c02af4b0c096197c)(this.getNode(id), new Set(), fn, navigator);\n    }\n}\n\n\n\nclass $49867c5a46937b53$export$614db49f3febe941 extends (0, $aaeeac4e1ce28945$export$2e2bcd8739ae039) {\n    nodeMap = new Map();\n    edgeMap = new Map();\n    inEdgesMap = new Map();\n    outEdgesMap = new Map();\n    bothEdgesMap = new Map();\n    treeIndices = new Map();\n    changes = [];\n    batchCount = 0;\n    /**\n     * This function is called with a {@link GraphChangedEvent} each time a graph change happened.\n     *\n     * `event.changes` contains all the graph changes in order since last `onChanged`.\n     */ onChanged = ()=>{\n    // Do nothing.\n    };\n    /**\n     * Create a new Graph instance.\n     * @param options - The options to initialize a graph. See {@link GraphOptions}.\n     *\n     * ```ts\n     * const graph = new Graph({\n     *   // Optional, initial nodes.\n     *   nodes: [\n     *     // Each node has a unique ID.\n     *     { id: 'A', foo: 1 },\n     *     { id: 'B', foo: 1 },\n     *   ],\n     *   // Optional, initial edges.\n     *   edges: [\n     *     { id: 'C', source: 'B', target: 'B', weight: 1 },\n     *   ],\n     *   // Optional, called with a GraphChangedEvent.\n     *   onChanged: (event) => {\n     *     console.log(event);\n     *   }\n     * });\n     * ```\n     */ constructor(options){\n        super();\n        if (!options) return;\n        if (options.nodes) this.addNodes(options.nodes);\n        if (options.edges) this.addEdges(options.edges);\n        if (options.tree) this.addTree(options.tree);\n        if (options.onChanged) this.onChanged = options.onChanged;\n    }\n    /**\n     * Batch several graph changes into one.\n     *\n     * Make several changes, but dispatch only one ChangedEvent at the end of batch:\n     * ```ts\n     * graph.batch(() => {\n     *   graph.addNodes([]);\n     *   graph.addEdges([]);\n     * });\n     * ```\n     *\n     * Batches can be nested. Only the outermost batch will dispatch a ChangedEvent:\n     * ```ts\n     * graph.batch(() => {\n     *   graph.addNodes([]);\n     *   graph.batch(() => {\n     *     graph.addEdges([]);\n     *   });\n     * });\n     * ```\n     */ batch = (fn)=>{\n        this.batchCount += 1;\n        fn();\n        this.batchCount -= 1;\n        if (!this.batchCount) this.commit();\n    };\n    /**\n     * Reset changes and dispatch a ChangedEvent.\n     */ commit() {\n        const changes = this.changes;\n        this.changes = [];\n        const event = {\n            graph: this,\n            changes: changes\n        };\n        this.emit('changed', event);\n        this.onChanged(event);\n    }\n    /**\n     * Reduce the number of ordered graph changes by dropping or merging unnecessary changes.\n     *\n     * For example, if we update a node and remove it in a batch:\n     *\n     * ```ts\n     * graph.batch(() => {\n     *   graph.updateNodeData('A', 'foo', 2);\n     *   graph.removeNode('A');\n     * });\n     * ```\n     *\n     * We get 2 atomic graph changes like\n     *\n     * ```ts\n     * [\n     *   { type: 'NodeDataUpdated', id: 'A', propertyName: 'foo', oldValue: 1, newValue: 2 },\n     *   { type: 'NodeRemoved', value: { id: 'A', data: { foo: 2 } },\n     * ]\n     * ```\n     *\n     * Since node 'A' has been removed, we actually have no need to handle with NodeDataUpdated change.\n     *\n     * `reduceChanges()` here helps us remove such changes.\n     */ reduceChanges(changes) {\n        let mergedChanges = [];\n        changes.forEach((change)=>{\n            switch(change.type){\n                case 'NodeRemoved':\n                    {\n                        // NodeAdded: A added.\n                        // NodeDataUpdated: A changed.\n                        // TreeStructureChanged: A's parent changed.\n                        // NodeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n                        let isNewlyAdded = false;\n                        mergedChanges = mergedChanges.filter((pastChange)=>{\n                            if (pastChange.type === 'NodeAdded') {\n                                const sameId = pastChange.value.id === change.value.id;\n                                if (sameId) isNewlyAdded = true;\n                                return !sameId;\n                            } else if (pastChange.type === 'NodeDataUpdated') return pastChange.id !== change.value.id;\n                            else if (pastChange.type === 'TreeStructureChanged') return pastChange.nodeId !== change.value.id;\n                            return true;\n                        });\n                        if (!isNewlyAdded) mergedChanges.push(change);\n                        break;\n                    }\n                case 'EdgeRemoved':\n                    {\n                        // EdgeAdded: A added.\n                        // EdgeDataUpdated: A changed.\n                        // EdgeDataUpdated: A's source/target changed.\n                        // EdgeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n                        let isNewlyAdded = false;\n                        mergedChanges = mergedChanges.filter((pastChange)=>{\n                            if (pastChange.type === 'EdgeAdded') {\n                                const sameId = pastChange.value.id === change.value.id;\n                                if (sameId) isNewlyAdded = true;\n                                return !sameId;\n                            } else if (pastChange.type === 'EdgeDataUpdated' || pastChange.type === 'EdgeUpdated') return pastChange.id !== change.value.id;\n                            return true;\n                        });\n                        if (!isNewlyAdded) mergedChanges.push(change);\n                        break;\n                    }\n                case 'NodeDataUpdated':\n                case 'EdgeDataUpdated':\n                case 'EdgeUpdated':\n                    {\n                        // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 1, newValue: 2 }.\n                        // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 2, newValue: 3 }.\n                        // 👆 Could be merged as { id: A, propertyName: 'foo', oldValue: 1, newValue: 3 }.\n                        const index = mergedChanges.findIndex((pastChange)=>{\n                            return pastChange.type === change.type && pastChange.id === change.id && (change.propertyName === undefined || pastChange.propertyName === change.propertyName);\n                        });\n                        const existingChange = mergedChanges[index];\n                        if (existingChange) {\n                            if (change.propertyName !== undefined) // The incoming change is of the same property of existing change.\n                            existingChange.newValue = change.newValue;\n                            else {\n                                // The incoming change is a whole data override.\n                                mergedChanges.splice(index, 1);\n                                mergedChanges.push(change);\n                            }\n                        } else mergedChanges.push(change);\n                        break;\n                    }\n                case 'TreeStructureDetached':\n                    // TreeStructureAttached\n                    // TreeStructureChanged\n                    // TreeStructureDetached 👈🏻 Since the tree struct was detached, above 2 changes may be ignored.\n                    mergedChanges = mergedChanges.filter((pastChange)=>{\n                        if (pastChange.type === 'TreeStructureAttached') return pastChange.treeKey !== change.treeKey;\n                        else if (pastChange.type === 'TreeStructureChanged') return pastChange.treeKey !== change.treeKey;\n                        return true;\n                    });\n                    mergedChanges.push(change);\n                    break;\n                case 'TreeStructureChanged':\n                    {\n                        const existingChange = mergedChanges.find((pastChange)=>{\n                            return pastChange.type === 'TreeStructureChanged' && pastChange.treeKey === change.treeKey && pastChange.nodeId === change.nodeId;\n                        });\n                        if (existingChange) existingChange.newParentId = change.newParentId;\n                        else mergedChanges.push(change);\n                        break;\n                    }\n                default:\n                    mergedChanges.push(change);\n                    break;\n            }\n        });\n        return mergedChanges;\n    }\n    // ================= Node =================\n    checkNodeExistence(id) {\n        this.getNode(id);\n    }\n    /**\n     * Check if a node exists in the graph.\n     * @group NodeMethods\n     */ hasNode(id) {\n        return this.nodeMap.has(id);\n    }\n    /**\n     * Tell if two nodes are neighbors.\n     * @group NodeMethods\n     */ areNeighbors(firstNodeId, secondNodeId) {\n        return this.getNeighbors(secondNodeId).some((neighbor)=>neighbor.id === firstNodeId);\n    }\n    /**\n     * Get the node data with given ID.\n     * @group NodeMethods\n     */ getNode(id) {\n        const node = this.nodeMap.get(id);\n        if (!node) throw new Error('Node not found for id: ' + id);\n        return node;\n    }\n    /**\n     * Given a node ID, find all edges of the node.\n     * @param id - ID of the node\n     * @param direction - Edge direction, defaults to 'both'.\n     * @group NodeMethods\n     */ getRelatedEdges(id, direction) {\n        this.checkNodeExistence(id);\n        if (direction === 'in') {\n            const inEdges = this.inEdgesMap.get(id);\n            return Array.from(inEdges);\n        } else if (direction === 'out') {\n            const outEdges = this.outEdgesMap.get(id);\n            return Array.from(outEdges);\n        } else {\n            const bothEdges = this.bothEdgesMap.get(id);\n            return Array.from(bothEdges);\n        }\n    }\n    /**\n     * Get the degree of the given node.\n     * @group NodeMethods\n     */ getDegree(id, direction) {\n        return this.getRelatedEdges(id, direction).length;\n    }\n    /**\n     * Get all successors of the given node.\n     */ getSuccessors(id) {\n        const outEdges = this.getRelatedEdges(id, 'out');\n        const targets = outEdges.map((edge)=>this.getNode(edge.target));\n        return Array.from(new Set(targets));\n    }\n    /**\n     * Get all predecessors of the given node.\n     */ getPredecessors(id) {\n        const inEdges = this.getRelatedEdges(id, 'in');\n        const sources = inEdges.map((edge)=>this.getNode(edge.source));\n        return Array.from(new Set(sources));\n    }\n    /**\n     * Given a node ID, find its neighbors.\n     * @param id - ID of the node\n     * @group NodeMethods\n     */ getNeighbors(id) {\n        const predecessors = this.getPredecessors(id);\n        const successors = this.getSuccessors(id);\n        return Array.from(new Set([\n            ...predecessors,\n            ...successors\n        ]));\n    }\n    doAddNode(node) {\n        if (this.hasNode(node.id)) throw new Error('Node already exists: ' + node.id);\n        this.nodeMap.set(node.id, node);\n        this.inEdgesMap.set(node.id, new Set());\n        this.outEdgesMap.set(node.id, new Set());\n        this.bothEdgesMap.set(node.id, new Set());\n        this.treeIndices.forEach((tree)=>{\n            tree.childrenMap.set(node.id, new Set());\n        });\n        this.changes.push({\n            type: 'NodeAdded',\n            value: node\n        });\n    }\n    /**\n     * Add all nodes of the given array, or iterable, into the graph.\n     * @group NodeMethods\n     */ addNodes(nodes) {\n        this.batch(()=>{\n            for (const node of nodes)this.doAddNode(node);\n        });\n    }\n    /**\n     * Add a single node into the graph.\n     * @group NodeMethods\n     */ addNode(node) {\n        this.addNodes([\n            node\n        ]);\n    }\n    doRemoveNode(id) {\n        const node = this.getNode(id);\n        const bothEdges = this.bothEdgesMap.get(id);\n        bothEdges?.forEach((edge)=>this.doRemoveEdge(edge.id));\n        this.nodeMap.delete(id);\n        this.treeIndices.forEach((tree)=>{\n            tree.childrenMap.get(id)?.forEach((child)=>{\n                tree.parentMap.delete(child.id);\n            });\n            const parent = tree.parentMap.get(id);\n            if (parent) tree.childrenMap.get(parent.id)?.delete(node);\n            tree.parentMap.delete(id);\n            tree.childrenMap.delete(id);\n        });\n        this.bothEdgesMap.delete(id);\n        this.inEdgesMap.delete(id);\n        this.outEdgesMap.delete(id);\n        this.changes.push({\n            type: 'NodeRemoved',\n            value: node\n        });\n    }\n    /**\n     * Remove nodes and their attached edges from the graph.\n     * @group NodeMethods\n     */ removeNodes(idList) {\n        this.batch(()=>{\n            idList.forEach((id)=>this.doRemoveNode(id));\n        });\n    }\n    /**\n     * Remove a single node and its attached edges from the graph.\n     * @group NodeMethods\n     */ removeNode(id) {\n        this.removeNodes([\n            id\n        ]);\n    }\n    updateNodeDataProperty(id, propertyName, value) {\n        const node = this.getNode(id);\n        this.batch(()=>{\n            const oldValue = node.data[propertyName];\n            const newValue = value;\n            node.data[propertyName] = newValue;\n            this.changes.push({\n                type: 'NodeDataUpdated',\n                id: id,\n                propertyName: propertyName,\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        });\n    }\n    /**\n     * Like Object.assign, merge all properties of `path` to the node data.\n     * @param id Node ID.\n     * @param patch A data object to merge.\n     */ mergeNodeData(id, patch) {\n        this.batch(()=>{\n            Object.entries(patch).forEach(([propertyName, value])=>{\n                this.updateNodeDataProperty(id, propertyName, value);\n            });\n        });\n    }\n    updateNodeData(...args) {\n        const id = args[0];\n        const node = this.getNode(id);\n        if (typeof args[1] === 'string') {\n            // id, propertyName, value\n            this.updateNodeDataProperty(id, args[1], args[2]);\n            return;\n        }\n        let data;\n        if (typeof args[1] === 'function') {\n            // id, update\n            const update = args[1];\n            data = update(node.data);\n        } else if (typeof args[1] === 'object') // id, data\n        data = args[1];\n        this.batch(()=>{\n            const oldValue = node.data;\n            const newValue = data;\n            node.data = data;\n            this.changes.push({\n                type: 'NodeDataUpdated',\n                id: id,\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        });\n    }\n    // ================= Edge =================\n    checkEdgeExistence(id) {\n        if (!this.hasEdge(id)) throw new Error('Edge not found for id: ' + id);\n    }\n    /**\n     * Check if an edge exists in the graph.\n     * @group NodeMethods\n     */ hasEdge(id) {\n        return this.edgeMap.has(id);\n    }\n    /**\n     * Get the edge data with given ID.\n     * @group EdgeMethods\n     */ getEdge(id) {\n        this.checkEdgeExistence(id);\n        return this.edgeMap.get(id);\n    }\n    /**\n     * Get the edge, the source node, and the target node by an edge ID.\n     * @group EdgeMethods\n     */ getEdgeDetail(id) {\n        const edge = this.getEdge(id);\n        return {\n            edge: edge,\n            source: this.getNode(edge.source),\n            target: this.getNode(edge.target)\n        };\n    }\n    doAddEdge(edge) {\n        if (this.hasEdge(edge.id)) throw new Error('Edge already exists: ' + edge.id);\n        this.checkNodeExistence(edge.source);\n        this.checkNodeExistence(edge.target);\n        this.edgeMap.set(edge.id, edge);\n        const inEdges = this.inEdgesMap.get(edge.target);\n        const outEdges = this.outEdgesMap.get(edge.source);\n        const bothEdgesOfSource = this.bothEdgesMap.get(edge.source);\n        const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target);\n        inEdges.add(edge);\n        outEdges.add(edge);\n        bothEdgesOfSource.add(edge);\n        bothEdgesOfTarget.add(edge);\n        this.changes.push({\n            type: 'EdgeAdded',\n            value: edge\n        });\n    }\n    /**\n     * Add all edges of the given iterable(an array, a set, etc.) into the graph.\n     * @group EdgeMethods\n     */ addEdges(edges) {\n        this.batch(()=>{\n            for (const edge of edges)this.doAddEdge(edge);\n        });\n    }\n    /**\n     * Add a single edge pointing from `source` to `target` into the graph.\n     *\n     * ```ts\n     * graph.addNode({ id: 'NodeA' });\n     * graph.addNode({ id: 'NodeB' });\n     * graph.addEdge({ id: 'EdgeA', source: 'NodeA', target: 'NodeB' });\n     * ```\n     *\n     * If `source` or `target` were not found in the current graph, it throws an Error.\n     * @group EdgeMethods\n     */ addEdge(edge) {\n        this.addEdges([\n            edge\n        ]);\n    }\n    doRemoveEdge(id) {\n        const edge = this.getEdge(id);\n        const outEdges = this.outEdgesMap.get(edge.source);\n        const inEdges = this.inEdgesMap.get(edge.target);\n        const bothEdgesOfSource = this.bothEdgesMap.get(edge.source);\n        const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target);\n        outEdges.delete(edge);\n        inEdges.delete(edge);\n        bothEdgesOfSource.delete(edge);\n        bothEdgesOfTarget.delete(edge);\n        this.edgeMap.delete(id);\n        this.changes.push({\n            type: 'EdgeRemoved',\n            value: edge\n        });\n    }\n    /**\n     * Remove edges whose id was included in the given id list.\n     * @group EdgeMethods\n     */ removeEdges(idList) {\n        this.batch(()=>{\n            idList.forEach((id)=>this.doRemoveEdge(id));\n        });\n    }\n    /**\n     * Remove a single edge of the given id.\n     * @group EdgeMethods\n     */ removeEdge(id) {\n        this.removeEdges([\n            id\n        ]);\n    }\n    /**\n     * Change the source of an edge. The source must be found in current graph.\n     * @group EdgeMethods\n     */ updateEdgeSource(id, source) {\n        const edge = this.getEdge(id);\n        this.checkNodeExistence(source);\n        const oldSource = edge.source;\n        const newSource = source;\n        this.outEdgesMap.get(oldSource).delete(edge);\n        this.bothEdgesMap.get(oldSource).delete(edge);\n        this.outEdgesMap.get(newSource).add(edge);\n        this.bothEdgesMap.get(newSource).add(edge);\n        edge.source = source;\n        this.batch(()=>{\n            this.changes.push({\n                type: 'EdgeUpdated',\n                id: id,\n                propertyName: 'source',\n                oldValue: oldSource,\n                newValue: newSource\n            });\n        });\n    }\n    /**\n     * Change the target of an edge. The target must be found in current graph.\n     * @group EdgeMethods\n     */ updateEdgeTarget(id, target) {\n        const edge = this.getEdge(id);\n        this.checkNodeExistence(target);\n        const oldTarget = edge.target;\n        const newTarget = target;\n        this.inEdgesMap.get(oldTarget).delete(edge);\n        this.bothEdgesMap.get(oldTarget).delete(edge);\n        this.inEdgesMap.get(newTarget).add(edge);\n        this.bothEdgesMap.get(newTarget).add(edge);\n        edge.target = target;\n        this.batch(()=>{\n            this.changes.push({\n                type: 'EdgeUpdated',\n                id: id,\n                propertyName: 'target',\n                oldValue: oldTarget,\n                newValue: newTarget\n            });\n        });\n    }\n    updateEdgeDataProperty(id, propertyName, value) {\n        const edge = this.getEdge(id);\n        this.batch(()=>{\n            const oldValue = edge.data[propertyName];\n            const newValue = value;\n            edge.data[propertyName] = newValue;\n            this.changes.push({\n                type: 'EdgeDataUpdated',\n                id: id,\n                propertyName: propertyName,\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        });\n    }\n    updateEdgeData(...args) {\n        const id = args[0];\n        const edge = this.getEdge(id);\n        if (typeof args[1] === 'string') {\n            // id, propertyName, value\n            this.updateEdgeDataProperty(id, args[1], args[2]);\n            return;\n        }\n        let data;\n        if (typeof args[1] === 'function') {\n            // id, update\n            const update = args[1];\n            data = update(edge.data);\n        } else if (typeof args[1] === 'object') // id, data\n        data = args[1];\n        this.batch(()=>{\n            const oldValue = edge.data;\n            const newValue = data;\n            edge.data = data;\n            this.changes.push({\n                type: 'EdgeDataUpdated',\n                id: id,\n                oldValue: oldValue,\n                newValue: newValue\n            });\n        });\n    }\n    /**\n     * @group EdgeMethods\n     */ mergeEdgeData(id, patch) {\n        this.batch(()=>{\n            Object.entries(patch).forEach(([propertyName, value])=>{\n                this.updateEdgeDataProperty(id, propertyName, value);\n            });\n        });\n    }\n    // ================= Tree =================\n    checkTreeExistence(treeKey) {\n        if (!this.hasTreeStructure(treeKey)) throw new Error('Tree structure not found for treeKey: ' + treeKey);\n    }\n    hasTreeStructure(treeKey) {\n        return this.treeIndices.has(treeKey);\n    }\n    /**\n     * Attach a new tree structure representing the hierarchy of all nodes in the graph.\n     * @param treeKey A unique key of the tree structure. You can attach multiple tree structures with different keys.\n     *\n     * ```ts\n     * const graph = new Graph({\n     *   nodes: [{ id: 1 }, { id: 2 }, { id: 3 }],\n     * });\n     * graph.attachTreeStructure('Inheritance');\n     * graph.setParent(2, 1, 'Inheritance');\n     * graph.setParent(3, 1, 'Inheritance');\n     * graph.getRoots('Inheritance'); // [1]\n     * graph.getChildren(1, 'Inheritance'); // [2,3]\n     * ```\n     * @group TreeMethods\n     */ attachTreeStructure(treeKey) {\n        if (this.treeIndices.has(treeKey)) // Already attached.\n        return;\n        this.treeIndices.set(treeKey, {\n            parentMap: new Map(),\n            childrenMap: new Map()\n        });\n        this.batch(()=>{\n            this.changes.push({\n                type: 'TreeStructureAttached',\n                treeKey: treeKey\n            });\n        });\n    }\n    /**\n     * Detach the tree structure of the given tree key from the graph.\n     *\n     * ```ts\n     * graph.detachTreeStructure('Inheritance');\n     * graph.getRoots('Inheritance'); // Error!\n     * ```\n     * @group TreeMethods\n     */ detachTreeStructure(treeKey) {\n        this.checkTreeExistence(treeKey);\n        this.treeIndices.delete(treeKey);\n        this.batch(()=>{\n            this.changes.push({\n                type: 'TreeStructureDetached',\n                treeKey: treeKey\n            });\n        });\n    }\n    /**\n     * Traverse the given tree data, add each node into the graph, then attach the tree structure.\n     *\n     * ```ts\n     * graph.addTree({\n     *   id: 1,\n     *   children: [\n     *     { id: 2 },\n     *     { id: 3 },\n     *   ],\n     * }, 'Inheritance');\n     * graph.getRoots('Inheritance'); // [1]\n     * graph.getChildren(1, 'Inheritance'); // [2, 3]\n     * graph.getAllNodes(); // [1, 2, 3]\n     * graph.getAllEdges(); // []\n     * ```\n     * @group TreeMethods\n     */ addTree(tree, treeKey) {\n        this.batch(()=>{\n            this.attachTreeStructure(treeKey);\n            // Add Nodes\n            const nodes = [];\n            const stack = Array.isArray(tree) ? tree : [\n                tree\n            ];\n            while(stack.length){\n                const node = stack.shift();\n                nodes.push(node);\n                if (node.children) stack.push(...node.children);\n            }\n            this.addNodes(nodes);\n            // Set parent for each child node.\n            nodes.forEach((parent)=>{\n                parent.children?.forEach((child)=>{\n                    this.setParent(child.id, parent.id, treeKey);\n                });\n            });\n        });\n    }\n    /**\n     * Get the root nodes of an attached tree structure.\n     *\n     * Consider a graph with the following tree structure attached:\n     * ```\n     * Tree structure:\n     *    O     3\n     *   / \\    |\n     *  1   2   4\n     * ```\n     * `graph.getRoots()` takes all nodes without a parent, therefore [0, 3] was returned.\n     *\n     * Newly added nodes are also unparented. So they are counted as roots.\n     * ```ts\n     * graph.addNode({ id: 5 });\n     * graph.getRoots(); // [0, 3, 5]\n     * ```\n     *\n     * Here is how the tree structure looks like:\n     * ```\n     * Tree structure:\n     *    O     3  5\n     *   / \\    |\n     *  1   2   4\n     * ```\n     *\n     * By setting a parent, a root node no more be a root.\n     * ```ts\n     * graph.setParent(5, 2);\n     * graph.getRoots(); // [0, 3]\n     * ```\n     *\n     * The tree structure now becomes:\n     * ```\n     * Tree structure:\n     *    O     3\n     *   / \\    |\n     *  1   2   4\n     *      |\n     *      5\n     * ```\n     *\n     * Removing a node forces its children to be unparented, or roots.\n     * ```ts\n     * graph.removeNode(0);\n     * graph.getRoots(); // [1, 2, 3]\n     * ```\n     *\n     * You might draw the the structure as follow:\n     * ```\n     * Tree structure:\n     *  1   2  3\n     *      |  |\n     *      5  4\n     * ```\n     * @group TreeMethods\n     */ getRoots(treeKey) {\n        this.checkTreeExistence(treeKey);\n        return this.getAllNodes().filter((node)=>!this.getParent(node.id, treeKey));\n    }\n    /**\n     * Given a node ID and an optional tree key, get the children of the node in the specified tree structure.\n     * @group TreeMethods\n     */ getChildren(id, treeKey) {\n        this.checkNodeExistence(id);\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        const children = tree.childrenMap.get(id);\n        return Array.from(children || []);\n    }\n    /**\n     * Given a node ID and an optional tree key, get the parent of the node in the specified tree structure.\n     * If the given node is one of the tree roots, this returns null.\n     * @group TreeMethods\n     */ getParent(id, treeKey) {\n        this.checkNodeExistence(id);\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        return tree.parentMap.get(id) || null;\n    }\n    /**\n     * Returns an array of all the ancestor nodes, staring from the parent to the root.\n     */ getAncestors(id, treeKey) {\n        const ancestors = [];\n        let current = this.getNode(id);\n        let parent;\n        // eslint-disable-next-line no-cond-assign\n        while(parent = this.getParent(current.id, treeKey)){\n            ancestors.push(parent);\n            current = parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Set node parent. If this operation causes a circle, it fails with an error.\n     * @param id - ID of the child node.\n     * @param parent - ID of the parent node. If it is undefined, means unset parent for node with id.\n     * @param treeKey - Which tree structure the relation is applied to.\n     * @group TreeMethods\n     */ setParent(id, parent, treeKey) {\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        const node = this.getNode(id);\n        const oldParent = tree.parentMap.get(id);\n        // Same parent id as old one, skip\n        if (oldParent?.id === parent) return;\n        // New parent is undefined, unset parent for the node\n        if (parent === undefined) {\n            if (oldParent) tree.childrenMap.get(oldParent.id)?.delete(node);\n            tree.parentMap.delete(id);\n            return;\n        }\n        const newParent = this.getNode(parent);\n        // Set parent\n        tree.parentMap.set(id, newParent);\n        // Set children\n        if (oldParent) tree.childrenMap.get(oldParent.id)?.delete(node);\n        let children = tree.childrenMap.get(newParent.id);\n        if (!children) {\n            children = new Set();\n            tree.childrenMap.set(newParent.id, children);\n        }\n        children.add(node);\n        this.batch(()=>{\n            this.changes.push({\n                type: 'TreeStructureChanged',\n                treeKey: treeKey,\n                nodeId: id,\n                oldParentId: oldParent?.id,\n                newParentId: newParent.id\n            });\n        });\n    }\n    dfsTree(id, fn, treeKey) {\n        const navigator = (nodeId)=>this.getChildren(nodeId, treeKey);\n        return (0, $6b3d8ad76db0a5af$export$c02af4b0c096197c)(this.getNode(id), new Set(), fn, navigator);\n    }\n    bfsTree(id, fn, treeKey) {\n        const navigator = (nodeId)=>this.getChildren(nodeId, treeKey);\n        return (0, $6b3d8ad76db0a5af$export$35f2fded3a66c010)([\n            this.getNode(id)\n        ], new Set(), fn, navigator);\n    }\n    // ================= Graph =================\n    /**\n     * Get all nodes in the graph as an array.\n     */ getAllNodes() {\n        return Array.from(this.nodeMap.values());\n    }\n    /**\n     * Get all edges in the graph as an array.\n     */ getAllEdges() {\n        return Array.from(this.edgeMap.values());\n    }\n    bfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this)\n        }[direction];\n        return (0, $6b3d8ad76db0a5af$export$35f2fded3a66c010)([\n            this.getNode(id)\n        ], new Set(), fn, navigator);\n    }\n    dfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this)\n        }[direction];\n        return (0, $6b3d8ad76db0a5af$export$c02af4b0c096197c)(this.getNode(id), new Set(), fn, navigator);\n    }\n    clone() {\n        // Make a shallow copy of nodes and edges.\n        const newNodes = this.getAllNodes().map((oldNode)=>{\n            return {\n                ...oldNode,\n                data: {\n                    ...oldNode.data\n                }\n            };\n        });\n        const newEdges = this.getAllEdges().map((oldEdge)=>{\n            return {\n                ...oldEdge,\n                data: {\n                    ...oldEdge.data\n                }\n            };\n        });\n        // Create a new graph with shallow copied nodes and edges.\n        const newGraph = new $49867c5a46937b53$export$614db49f3febe941({\n            nodes: newNodes,\n            edges: newEdges\n        });\n        // Add tree indices.\n        this.treeIndices.forEach(({ parentMap: oldParentMap, childrenMap: oldChildrenMap }, treeKey)=>{\n            const parentMap = new Map();\n            oldParentMap.forEach((parent, key)=>{\n                parentMap.set(key, newGraph.getNode(parent.id));\n            });\n            const childrenMap = new Map();\n            oldChildrenMap.forEach((children, key)=>{\n                childrenMap.set(key, new Set(Array.from(children).map((n)=>newGraph.getNode(n.id))));\n            });\n            newGraph.treeIndices.set(treeKey, {\n                parentMap: parentMap,\n                childrenMap: childrenMap\n            });\n        });\n        return newGraph;\n    }\n    toJSON() {\n        return JSON.stringify({\n            nodes: this.getAllNodes(),\n            edges: this.getAllEdges()\n        });\n    }\n    createView(options) {\n        return new (0, $960c856159ad6b26$export$6a7fe3ef90e8d566)({\n            graph: this,\n            ...options\n        });\n    }\n}\n\n\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */ const $9d65ffd50b68f22a$export$be5234c0b764b6e0 = Symbol(\"Comlink.proxy\");\nconst $9d65ffd50b68f22a$export$39fb953702b7fcd7 = Symbol(\"Comlink.endpoint\");\nconst $9d65ffd50b68f22a$export$89981d4b8d9f48aa = Symbol(\"Comlink.releaseProxy\");\nconst $9d65ffd50b68f22a$export$ddc31dfe7c269837 = Symbol(\"Comlink.finalizer\");\nconst $9d65ffd50b68f22a$var$throwMarker = Symbol(\"Comlink.thrown\");\nconst $9d65ffd50b68f22a$var$isObject = (val)=>typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */ const $9d65ffd50b68f22a$var$proxyTransferHandler = {\n    canHandle: (val)=>$9d65ffd50b68f22a$var$isObject(val) && val[$9d65ffd50b68f22a$export$be5234c0b764b6e0],\n    serialize (obj) {\n        const { port1: port1, port2: port2 } = new MessageChannel();\n        $9d65ffd50b68f22a$export$9b7f6e342a8cbd38(obj, port1);\n        return [\n            port2,\n            [\n                port2\n            ]\n        ];\n    },\n    deserialize (port) {\n        port.start();\n        return $9d65ffd50b68f22a$export$4997ffc0176396a6(port);\n    }\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */ const $9d65ffd50b68f22a$var$throwTransferHandler = {\n    canHandle: (value)=>$9d65ffd50b68f22a$var$isObject(value) && $9d65ffd50b68f22a$var$throwMarker in value,\n    serialize ({ value: value }) {\n        let serialized;\n        if (value instanceof Error) serialized = {\n            isError: true,\n            value: {\n                message: value.message,\n                name: value.name,\n                stack: value.stack\n            }\n        };\n        else serialized = {\n            isError: false,\n            value: value\n        };\n        return [\n            serialized,\n            []\n        ];\n    },\n    deserialize (serialized) {\n        if (serialized.isError) throw Object.assign(new Error(serialized.value.message), serialized.value);\n        throw serialized.value;\n    }\n};\n/**\n * Allows customizing the serialization of certain values.\n */ const $9d65ffd50b68f22a$export$ab8f1c00731ee83e = new Map([\n    [\n        \"proxy\",\n        $9d65ffd50b68f22a$var$proxyTransferHandler\n    ],\n    [\n        \"throw\",\n        $9d65ffd50b68f22a$var$throwTransferHandler\n    ]\n]);\nfunction $9d65ffd50b68f22a$var$isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins){\n        if (origin === allowedOrigin || allowedOrigin === \"*\") return true;\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) return true;\n    }\n    return false;\n}\nfunction $9d65ffd50b68f22a$export$9b7f6e342a8cbd38(obj, ep = globalThis, allowedOrigins = [\n    \"*\"\n]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) return;\n        if (!$9d65ffd50b68f22a$var$isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id: id, type: type, path: path } = Object.assign({\n            path: []\n        }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map($9d65ffd50b68f22a$var$fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop)=>obj[prop], obj);\n            const rawValue = path.reduce((obj, prop)=>obj[prop], obj);\n            switch(type){\n                case \"GET\" /* MessageType.GET */ :\n                    returnValue = rawValue;\n                    break;\n                case \"SET\" /* MessageType.SET */ :\n                    parent[path.slice(-1)[0]] = $9d65ffd50b68f22a$var$fromWireValue(ev.data.value);\n                    returnValue = true;\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */ :\n                    returnValue = rawValue.apply(parent, argumentList);\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */ :\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = $9d65ffd50b68f22a$export$923f96dd5afa9ce6(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */ :\n                    {\n                        const { port1: port1, port2: port2 } = new MessageChannel();\n                        $9d65ffd50b68f22a$export$9b7f6e342a8cbd38(obj, port2);\n                        returnValue = $9d65ffd50b68f22a$export$c9b234447cf4ef7c(port1, [\n                            port1\n                        ]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */ :\n                    returnValue = undefined;\n                    break;\n                default:\n                    return;\n            }\n        } catch (value) {\n            returnValue = {\n                value: value,\n                [$9d65ffd50b68f22a$var$throwMarker]: 0\n            };\n        }\n        Promise.resolve(returnValue).catch((value)=>{\n            return {\n                value: value,\n                [$9d65ffd50b68f22a$var$throwMarker]: 0\n            };\n        }).then((returnValue)=>{\n            const [wireValue, transferables] = $9d65ffd50b68f22a$var$toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n                id: id\n            }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */ ) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                $9d65ffd50b68f22a$var$closeEndPoint(ep);\n                if ($9d65ffd50b68f22a$export$ddc31dfe7c269837 in obj && typeof obj[$9d65ffd50b68f22a$export$ddc31dfe7c269837] === \"function\") obj[$9d65ffd50b68f22a$export$ddc31dfe7c269837]();\n            }\n        }).catch((error)=>{\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = $9d65ffd50b68f22a$var$toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [$9d65ffd50b68f22a$var$throwMarker]: 0\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n                id: id\n            }), transferables);\n        });\n    });\n    if (ep.start) ep.start();\n}\nfunction $9d65ffd50b68f22a$var$isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction $9d65ffd50b68f22a$var$closeEndPoint(endpoint) {\n    if ($9d65ffd50b68f22a$var$isMessagePort(endpoint)) endpoint.close();\n}\nfunction $9d65ffd50b68f22a$export$4997ffc0176396a6(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data: data } = ev;\n        if (!data || !data.id) return;\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) return;\n        try {\n            resolver(data);\n        } finally{\n            pendingListeners.delete(data.id);\n        }\n    });\n    return $9d65ffd50b68f22a$var$createProxy(ep, pendingListeners, [], target);\n}\nfunction $9d65ffd50b68f22a$var$throwIfProxyReleased(isReleased) {\n    if (isReleased) throw new Error(\"Proxy has been released and is not useable\");\n}\nfunction $9d65ffd50b68f22a$var$releaseEndpoint(ep) {\n    return $9d65ffd50b68f22a$var$requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */ \n    }).then(()=>{\n        $9d65ffd50b68f22a$var$closeEndPoint(ep);\n    });\n}\nconst $9d65ffd50b68f22a$var$proxyCounter = new WeakMap();\nconst $9d65ffd50b68f22a$var$proxyFinalizers = \"FinalizationRegistry\" in globalThis && new FinalizationRegistry((ep)=>{\n    const newCount = ($9d65ffd50b68f22a$var$proxyCounter.get(ep) || 0) - 1;\n    $9d65ffd50b68f22a$var$proxyCounter.set(ep, newCount);\n    if (newCount === 0) $9d65ffd50b68f22a$var$releaseEndpoint(ep);\n});\nfunction $9d65ffd50b68f22a$var$registerProxy(proxy, ep) {\n    const newCount = ($9d65ffd50b68f22a$var$proxyCounter.get(ep) || 0) + 1;\n    $9d65ffd50b68f22a$var$proxyCounter.set(ep, newCount);\n    if ($9d65ffd50b68f22a$var$proxyFinalizers) $9d65ffd50b68f22a$var$proxyFinalizers.register(proxy, ep, proxy);\n}\nfunction $9d65ffd50b68f22a$var$unregisterProxy(proxy) {\n    if ($9d65ffd50b68f22a$var$proxyFinalizers) $9d65ffd50b68f22a$var$proxyFinalizers.unregister(proxy);\n}\nfunction $9d65ffd50b68f22a$var$createProxy(ep, pendingListeners, path = [], target = function() {}) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get (_target, prop) {\n            $9d65ffd50b68f22a$var$throwIfProxyReleased(isProxyReleased);\n            if (prop === $9d65ffd50b68f22a$export$89981d4b8d9f48aa) return ()=>{\n                $9d65ffd50b68f22a$var$unregisterProxy(proxy);\n                $9d65ffd50b68f22a$var$releaseEndpoint(ep);\n                pendingListeners.clear();\n                isProxyReleased = true;\n            };\n            if (prop === \"then\") {\n                if (path.length === 0) return {\n                    then: ()=>proxy\n                };\n                const r = $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */ ,\n                    path: path.map((p)=>p.toString())\n                }).then($9d65ffd50b68f22a$var$fromWireValue);\n                return r.then.bind(r);\n            }\n            return $9d65ffd50b68f22a$var$createProxy(ep, pendingListeners, [\n                ...path,\n                prop\n            ]);\n        },\n        set (_target, prop, rawValue) {\n            $9d65ffd50b68f22a$var$throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = $9d65ffd50b68f22a$var$toWireValue(rawValue);\n            return $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */ ,\n                path: [\n                    ...path,\n                    prop\n                ].map((p)=>p.toString()),\n                value: value\n            }, transferables).then($9d65ffd50b68f22a$var$fromWireValue);\n        },\n        apply (_target, _thisArg, rawArgumentList) {\n            $9d65ffd50b68f22a$var$throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === $9d65ffd50b68f22a$export$39fb953702b7fcd7) return $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, {\n                type: \"ENDPOINT\" /* MessageType.ENDPOINT */ \n            }).then($9d65ffd50b68f22a$var$fromWireValue);\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") return $9d65ffd50b68f22a$var$createProxy(ep, pendingListeners, path.slice(0, -1));\n            const [argumentList, transferables] = $9d65ffd50b68f22a$var$processArguments(rawArgumentList);\n            return $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */ ,\n                path: path.map((p)=>p.toString()),\n                argumentList: argumentList\n            }, transferables).then($9d65ffd50b68f22a$var$fromWireValue);\n        },\n        construct (_target, rawArgumentList) {\n            $9d65ffd50b68f22a$var$throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = $9d65ffd50b68f22a$var$processArguments(rawArgumentList);\n            return $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */ ,\n                path: path.map((p)=>p.toString()),\n                argumentList: argumentList\n            }, transferables).then($9d65ffd50b68f22a$var$fromWireValue);\n        }\n    });\n    $9d65ffd50b68f22a$var$registerProxy(proxy, ep);\n    return proxy;\n}\nfunction $9d65ffd50b68f22a$var$myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction $9d65ffd50b68f22a$var$processArguments(argumentList) {\n    const processed = argumentList.map($9d65ffd50b68f22a$var$toWireValue);\n    return [\n        processed.map((v)=>v[0]),\n        $9d65ffd50b68f22a$var$myFlat(processed.map((v)=>v[1]))\n    ];\n}\nconst $9d65ffd50b68f22a$var$transferCache = new WeakMap();\nfunction $9d65ffd50b68f22a$export$c9b234447cf4ef7c(obj, transfers) {\n    $9d65ffd50b68f22a$var$transferCache.set(obj, transfers);\n    return obj;\n}\nfunction $9d65ffd50b68f22a$export$923f96dd5afa9ce6(obj) {\n    return Object.assign(obj, {\n        [$9d65ffd50b68f22a$export$be5234c0b764b6e0]: true\n    });\n}\nfunction $9d65ffd50b68f22a$export$f2c03fb5a6c19546(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables)=>w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context)\n    };\n}\nfunction $9d65ffd50b68f22a$var$toWireValue(value) {\n    for (const [name, handler] of $9d65ffd50b68f22a$export$ab8f1c00731ee83e)if (handler.canHandle(value)) {\n        const [serializedValue, transferables] = handler.serialize(value);\n        return [\n            {\n                type: \"HANDLER\" /* WireValueType.HANDLER */ ,\n                name: name,\n                value: serializedValue\n            },\n            transferables\n        ];\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */ ,\n            value: value\n        },\n        $9d65ffd50b68f22a$var$transferCache.get(value) || []\n    ];\n}\nfunction $9d65ffd50b68f22a$var$fromWireValue(value) {\n    switch(value.type){\n        case \"HANDLER\" /* WireValueType.HANDLER */ :\n            return $9d65ffd50b68f22a$export$ab8f1c00731ee83e.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */ :\n            return value.value;\n    }\n}\nfunction $9d65ffd50b68f22a$var$requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve)=>{\n        const id = $9d65ffd50b68f22a$var$generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) ep.start();\n        ep.postMessage(Object.assign({\n            id: id\n        }, msg), transfers);\n    });\n}\nfunction $9d65ffd50b68f22a$var$generateUUID() {\n    return new Array(4).fill(0).map(()=>Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\n\n\n\n\n/**\n * 判断值是否为数字\n * @return 是否为数字\n */ function $9cadcb45972fb445$export$2e2bcd8739ae039(value) {\n    return typeof value === 'number';\n}\n\n\n\n/**\n * 判断值是否为 null 或 undefined\n * @return 是否为 null 或 undefined\n */ function $49c7da261e9a80be$export$2e2bcd8739ae039(value) {\n    return value === null || value === undefined;\n}\n\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n *\n * @see https://github.com/dagrejs/dagre/blob/master/lib/greedy-fas.js\n */ \nconst $a56a813b584c158d$var$filterOutLinks = (k, v)=>{\n    if (k !== 'next' && k !== 'prev') return v;\n};\nconst $a56a813b584c158d$var$unlink = (entry)=>{\n    entry.prev.next = entry.next;\n    entry.next.prev = entry.prev;\n    delete entry.next;\n    delete entry.prev;\n};\nclass $a56a813b584c158d$export$2e2bcd8739ae039 {\n    constructor(){\n        const shortcut = {};\n        shortcut.prev = shortcut;\n        shortcut.next = shortcut.prev;\n        this.shortcut = shortcut;\n    }\n    dequeue() {\n        const shortcut = this.shortcut;\n        const entry = shortcut.prev;\n        if (entry && entry !== shortcut) {\n            $a56a813b584c158d$var$unlink(entry);\n            return entry;\n        }\n    }\n    enqueue(entry) {\n        const shortcut = this.shortcut;\n        if (entry.prev && entry.next) $a56a813b584c158d$var$unlink(entry);\n        entry.next = shortcut.next;\n        shortcut.next.prev = entry;\n        shortcut.next = entry;\n        entry.prev = shortcut;\n    }\n    toString() {\n        const strs = [];\n        const sentinel = this.shortcut;\n        let curr = sentinel.prev;\n        while(curr !== sentinel){\n            strs.push(JSON.stringify(curr, $a56a813b584c158d$var$filterOutLinks));\n            curr = curr === null || curr === void 0 ? void 0 : curr.prev;\n        }\n        return `[${strs.join(', ')}]`;\n    }\n}\n\n\nclass $50166dbcebed5312$var$List extends (0, $a56a813b584c158d$export$2e2bcd8739ae039) {\n}\nconst $50166dbcebed5312$var$DEFAULT_WEIGHT_FN = ()=>1;\nconst $50166dbcebed5312$export$b96a088aeac42554 = (g, weightFn)=>{\n    var _a;\n    if (g.getAllNodes().length <= 1) return [];\n    const state = $50166dbcebed5312$var$buildState(g, weightFn || $50166dbcebed5312$var$DEFAULT_WEIGHT_FN);\n    const results = $50166dbcebed5312$var$doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n    return (_a = results.map((e)=>g.getRelatedEdges(e.v, 'out').filter(({ target: target })=>target === e.w))) === null || _a === void 0 ? void 0 : _a.flat();\n};\nconst $50166dbcebed5312$var$doGreedyFAS = (g, buckets, zeroIdx)=>{\n    let results = [];\n    const sources = buckets[buckets.length - 1];\n    const sinks = buckets[0];\n    let entry;\n    while(g.getAllNodes().length){\n        while(entry = sinks.dequeue())$50166dbcebed5312$var$removeNode(g, buckets, zeroIdx, entry);\n        while(entry = sources.dequeue())$50166dbcebed5312$var$removeNode(g, buckets, zeroIdx, entry);\n        if (g.getAllNodes().length) for(let i = buckets.length - 2; i > 0; --i){\n            entry = buckets[i].dequeue();\n            if (entry) {\n                results = results.concat($50166dbcebed5312$var$removeNode(g, buckets, zeroIdx, entry, true));\n                break;\n            }\n        }\n    }\n    return results;\n};\nconst $50166dbcebed5312$var$removeNode = (g, buckets, zeroIdx, entry, collectPredecessors)=>{\n    var _a, _b;\n    const results = [];\n    if (g.hasNode(entry.v)) {\n        (_a = g.getRelatedEdges(entry.v, 'in')) === null || _a === void 0 || _a.forEach((edge)=>{\n            const weight = edge.data.weight;\n            const uEntry = g.getNode(edge.source);\n            if (collectPredecessors) // this result not really care about in or out\n            results.push({\n                v: edge.source,\n                w: edge.target,\n                in: 0,\n                out: 0\n            });\n            if (uEntry.data.out === undefined) uEntry.data.out = 0;\n            // @ts-ignore\n            uEntry.data.out -= weight;\n            $50166dbcebed5312$var$assignBucket(buckets, zeroIdx, Object.assign({\n                v: uEntry.id\n            }, uEntry.data));\n        });\n        (_b = g.getRelatedEdges(entry.v, 'out')) === null || _b === void 0 || _b.forEach((edge)=>{\n            const weight = edge.data.weight;\n            const w = edge.target;\n            const wEntry = g.getNode(w);\n            if (wEntry.data.in === undefined) wEntry.data.in = 0;\n            // @ts-ignore\n            wEntry.data.in -= weight;\n            $50166dbcebed5312$var$assignBucket(buckets, zeroIdx, Object.assign({\n                v: wEntry.id\n            }, wEntry.data));\n        });\n        g.removeNode(entry.v);\n    }\n    return collectPredecessors ? results : undefined;\n};\nconst $50166dbcebed5312$var$buildState = (g, weightFn)=>{\n    const fasGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)();\n    let maxIn = 0;\n    let maxOut = 0;\n    g.getAllNodes().forEach((v)=>{\n        fasGraph.addNode({\n            id: v.id,\n            data: {\n                v: v.id,\n                in: 0,\n                out: 0\n            }\n        });\n    });\n    // Aggregate weights on nodes, but also sum the weights across multi-edges\n    // into a single edge for the fasGraph.\n    g.getAllEdges().forEach((e)=>{\n        const edge = fasGraph.getRelatedEdges(e.source, 'out').find((edge)=>edge.target === e.target);\n        const weight = (weightFn === null || weightFn === void 0 ? void 0 : weightFn(e)) || 1;\n        if (!edge) fasGraph.addEdge({\n            id: e.id,\n            source: e.source,\n            target: e.target,\n            data: {\n                weight: weight\n            }\n        });\n        else fasGraph.updateEdgeData(edge === null || edge === void 0 ? void 0 : edge.id, Object.assign(Object.assign({}, edge.data), {\n            weight: edge.data.weight + weight\n        }));\n        // @ts-ignore\n        maxOut = Math.max(maxOut, fasGraph.getNode(e.source).data.out += weight);\n        // @ts-ignore\n        maxIn = Math.max(maxIn, fasGraph.getNode(e.target).data.in += weight);\n    });\n    const buckets = [];\n    const rangeMax = maxOut + maxIn + 3;\n    for(let i = 0; i < rangeMax; i++)buckets.push(new $50166dbcebed5312$var$List());\n    const zeroIdx = maxIn + 1;\n    fasGraph.getAllNodes().forEach((v)=>{\n        $50166dbcebed5312$var$assignBucket(buckets, zeroIdx, Object.assign({\n            v: v.id\n        }, fasGraph.getNode(v.id).data));\n    });\n    return {\n        buckets: buckets,\n        zeroIdx: zeroIdx,\n        graph: fasGraph\n    };\n};\nconst $50166dbcebed5312$var$assignBucket = (buckets, zeroIdx, entry)=>{\n    if (!entry.out) buckets[0].enqueue(entry);\n    else if (!entry['in']) buckets[buckets.length - 1].enqueue(entry);\n    else buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n};\n\n\nconst $a9f4156122401558$export$889ea624f2cb2c57 = (g, acyclicer)=>{\n    const weightFn = (g)=>{\n        return (e)=>e.data.weight || 1;\n    };\n    const fas = acyclicer === 'greedy' ? (0, $50166dbcebed5312$export$b96a088aeac42554)(g, weightFn(g)) : $a9f4156122401558$var$dfsFAS(g);\n    fas === null || fas === void 0 || fas.forEach((e)=>{\n        const label = e.data;\n        g.removeEdge(e.id);\n        label.forwardName = e.data.name;\n        label.reversed = true;\n        g.addEdge({\n            id: e.id,\n            source: e.target,\n            target: e.source,\n            data: Object.assign({}, label)\n        });\n    });\n};\nconst $a9f4156122401558$var$dfsFAS = (g)=>{\n    const fas = [];\n    const stack = {};\n    const visited = {};\n    const dfs = (v)=>{\n        if (visited[v]) return;\n        visited[v] = true;\n        stack[v] = true;\n        g.getRelatedEdges(v, 'out').forEach((e)=>{\n            if (stack[e.target]) fas.push(e);\n            else dfs(e.target);\n        });\n        delete stack[v];\n    };\n    g.getAllNodes().forEach((n)=>dfs(n.id));\n    return fas;\n};\nconst $a9f4156122401558$export$21f930c44940fd98 = (g)=>{\n    g.getAllEdges().forEach((e)=>{\n        const label = e.data;\n        if (label.reversed) {\n            g.removeEdge(e.id);\n            const forwardName = label.forwardName;\n            delete label.reversed;\n            delete label.forwardName;\n            g.addEdge({\n                id: e.id,\n                source: e.target,\n                target: e.source,\n                data: Object.assign(Object.assign({}, label), {\n                    forwardName: forwardName\n                })\n            });\n        }\n    });\n};\n\n\n\n\nconst $10a62036c6f8d4c5$var$safeSort = (valueA, valueB)=>{\n    return Number(valueA) - Number(valueB);\n};\nconst $10a62036c6f8d4c5$export$ecf34c2268abf7a0 = (g, type, data, name)=>{\n    let v;\n    do v = `${name}${Math.random()}`;\n    while (g.hasNode(v));\n    data.dummy = type;\n    g.addNode({\n        id: v,\n        data: data\n    });\n    return v;\n};\nconst $10a62036c6f8d4c5$export$798b53621063651 = (g)=>{\n    const simplified = new (0, $49867c5a46937b53$export$614db49f3febe941)();\n    g.getAllNodes().forEach((v)=>{\n        simplified.addNode(Object.assign({}, v));\n    });\n    g.getAllEdges().forEach((e)=>{\n        const edge = simplified.getRelatedEdges(e.source, 'out').find((edge)=>edge.target === e.target);\n        if (!edge) simplified.addEdge({\n            id: e.id,\n            source: e.source,\n            target: e.target,\n            data: {\n                weight: e.data.weight || 0,\n                minlen: e.data.minlen || 1\n            }\n        });\n        else simplified.updateEdgeData(edge === null || edge === void 0 ? void 0 : edge.id, Object.assign(Object.assign({}, edge.data), {\n            weight: edge.data.weight + e.data.weight || 0,\n            minlen: Math.max(edge.data.minlen, e.data.minlen || 1)\n        }));\n    });\n    return simplified;\n};\nconst $10a62036c6f8d4c5$export$556dc3686e4a2bd5 = (g)=>{\n    const simplified = new (0, $49867c5a46937b53$export$614db49f3febe941)();\n    g.getAllNodes().forEach((node)=>{\n        if (!g.getChildren(node.id).length) simplified.addNode(Object.assign({}, node));\n    });\n    g.getAllEdges().forEach((edge)=>{\n        simplified.addEdge(edge);\n    });\n    return simplified;\n};\nconst $10a62036c6f8d4c5$export$918056458ccab0 = (keys, values)=>{\n    return keys === null || keys === void 0 ? void 0 : keys.reduce((obj, key, i)=>{\n        obj[key] = values[i];\n        return obj;\n    }, {});\n};\nconst $10a62036c6f8d4c5$export$c5a5d928abe0f9b5 = (g)=>{\n    const weightsMap = {};\n    g.getAllNodes().forEach((node)=>{\n        const sucs = {};\n        g.getRelatedEdges(node.id, 'out').forEach((e)=>{\n            sucs[e.target] = (sucs[e.target] || 0) + (e.data.weight || 0);\n        });\n        weightsMap[node.id] = sucs;\n    });\n    return weightsMap;\n};\nconst $10a62036c6f8d4c5$export$26130937b5f6ca22 = (g)=>{\n    const nodes = g.getAllNodes();\n    const weightMap = nodes.map((v)=>{\n        const preds = {};\n        g.getRelatedEdges(v.id, 'in').forEach((e)=>{\n            preds[e.source] = (preds[e.source] || 0) + e.data.weight;\n        });\n        return preds;\n    });\n    return $10a62036c6f8d4c5$export$918056458ccab0(nodes.map((n)=>n.id), weightMap);\n};\nconst $10a62036c6f8d4c5$export$4a227323f5de0b79 = (rect, point)=>{\n    const x = Number(rect.x);\n    const y = Number(rect.y);\n    // Rectangle intersection algorithm from:\n    // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n    const dx = Number(point.x) - x;\n    const dy = Number(point.y) - y;\n    let w = Number(rect.width) / 2;\n    let h = Number(rect.height) / 2;\n    if (!dx && !dy) // completely overlapped directly, then return points its self\n    return {\n        x: 0,\n        y: 0\n    };\n    let sx;\n    let sy;\n    if (Math.abs(dy) * w > Math.abs(dx) * h) {\n        // Intersection is top or bottom of rect.\n        if (dy < 0) h = -h;\n        sx = h * dx / dy;\n        sy = h;\n    } else {\n        // Intersection is left or right of rect.\n        if (dx < 0) w = -w;\n        sx = w;\n        sy = w * dy / dx;\n    }\n    return {\n        x: x + sx,\n        y: y + sy\n    };\n};\nconst $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae = (g)=>{\n    const layeringNodes = [];\n    const rankMax = $10a62036c6f8d4c5$export$978bfc7f0ad7d28e(g) + 1;\n    for(let i = 0; i < rankMax; i++)layeringNodes.push([]);\n    // const layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n    g.getAllNodes().forEach((node)=>{\n        const rank = node.data.rank;\n        if (rank !== undefined && layeringNodes[rank]) layeringNodes[rank].push(node.id);\n    });\n    for(let i = 0; i < rankMax; i++)layeringNodes[i] = layeringNodes[i].sort((va, vb)=>$10a62036c6f8d4c5$var$safeSort(g.getNode(va).data.order, g.getNode(vb).data.order));\n    return layeringNodes;\n};\nconst $10a62036c6f8d4c5$export$5747adf39cbd8007 = (g)=>{\n    const nodeRanks = g.getAllNodes().filter((v)=>v.data.rank !== undefined).map((v)=>v.data.rank);\n    const min = Math.min(...nodeRanks);\n    g.getAllNodes().forEach((v)=>{\n        if (v.data.hasOwnProperty('rank') && min !== Infinity) v.data.rank -= min;\n    });\n};\nconst $10a62036c6f8d4c5$export$45a0c732a9a44b01 = (g, nodeRankFactor = 0)=>{\n    // Ranks may not start at 0, so we need to offset them\n    const nodes = g.getAllNodes();\n    const nodeRanks = nodes.filter((v)=>v.data.rank !== undefined).map((v)=>v.data.rank);\n    const offset = Math.min(...nodeRanks);\n    const layers = [];\n    nodes.forEach((v)=>{\n        const rank = (v.data.rank || 0) - offset;\n        if (!layers[rank]) layers[rank] = [];\n        layers[rank].push(v.id);\n    });\n    let delta = 0;\n    for(let i = 0; i < layers.length; i++){\n        const vs = layers[i];\n        if (vs === undefined) {\n            if (i % nodeRankFactor !== 0) delta -= 1;\n        } else if (delta) vs === null || vs === void 0 || vs.forEach((v)=>{\n            const node = g.getNode(v);\n            if (node) {\n                node.data.rank = node.data.rank || 0;\n                node.data.rank += delta;\n            }\n        });\n    }\n};\nconst $10a62036c6f8d4c5$export$6589834e22e3d497 = (g, prefix, rank, order)=>{\n    const node = {\n        width: 0,\n        height: 0\n    };\n    if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(rank) && (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(order)) {\n        node.rank = rank;\n        node.order = order;\n    }\n    return $10a62036c6f8d4c5$export$ecf34c2268abf7a0(g, 'border', node, prefix);\n};\nconst $10a62036c6f8d4c5$export$978bfc7f0ad7d28e = (g)=>{\n    let maxRank;\n    g.getAllNodes().forEach((v)=>{\n        const rank = v.data.rank;\n        if (rank !== undefined) {\n            if (maxRank === undefined || rank > maxRank) maxRank = rank;\n        }\n    });\n    if (!maxRank) maxRank = 0;\n    return maxRank;\n};\nconst $10a62036c6f8d4c5$export$b29f828819edca8d = (collection, fn)=>{\n    const result = {\n        lhs: [],\n        rhs: []\n    };\n    collection === null || collection === void 0 || collection.forEach((value)=>{\n        if (fn(value)) result.lhs.push(value);\n        else result.rhs.push(value);\n    });\n    return result;\n};\nconst $10a62036c6f8d4c5$export$8c826aa0fa59ac68 = (array, func)=>{\n    return array.reduce((a, b)=>{\n        const valA = func(a);\n        const valB = func(b);\n        return valA > valB ? b : a;\n    });\n};\nconst $10a62036c6f8d4c5$var$doDFS = (graph, node, postorder, visited, navigator, result)=>{\n    if (!visited.includes(node.id)) {\n        visited.push(node.id);\n        if (!postorder) result.push(node.id);\n        navigator(node.id).forEach((n)=>$10a62036c6f8d4c5$var$doDFS(graph, n, postorder, visited, navigator, result));\n        if (postorder) result.push(node.id);\n    }\n};\nconst $10a62036c6f8d4c5$export$51b654aff22fc5a6 = (graph, node, order, isDirected)=>{\n    const nodes = Array.isArray(node) ? node : [\n        node\n    ];\n    const navigator = (n)=>isDirected ? graph.getSuccessors(n) : graph.getNeighbors(n);\n    const results = [];\n    const visited = [];\n    nodes.forEach((node)=>{\n        if (!graph.hasNode(node.id)) throw new Error(`Graph does not have node: ${node}`);\n        else $10a62036c6f8d4c5$var$doDFS(graph, node, order === 'post', visited, navigator, results);\n    });\n    return results;\n};\n\n\nconst $7f8e6bb2288f5f8b$export$9a52541ba49edb51 = (g)=>{\n    const dfs = (v)=>{\n        const children = g.getChildren(v);\n        const node = g.getNode(v);\n        if (children === null || children === void 0 ? void 0 : children.length) children.forEach((child)=>dfs(child.id));\n        if (node.data.hasOwnProperty('minRank')) {\n            node.data.borderLeft = [];\n            node.data.borderRight = [];\n            for(let rank = node.data.minRank, maxRank = node.data.maxRank + 1; rank < maxRank; rank += 1){\n                $7f8e6bb2288f5f8b$var$addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n                $7f8e6bb2288f5f8b$var$addBorderNode(g, 'borderRight', '_br', v, node, rank);\n            }\n        }\n    };\n    g.getRoots().forEach((child)=>dfs(child.id));\n};\nconst $7f8e6bb2288f5f8b$var$addBorderNode = (g, prop, prefix, sg, sgNode, rank)=>{\n    const label = {\n        rank: rank,\n        borderType: prop,\n        width: 0,\n        height: 0\n    };\n    // @ts-ignore\n    const prev = sgNode.data[prop][rank - 1];\n    const curr = (0, $10a62036c6f8d4c5$export$ecf34c2268abf7a0)(g, 'border', label, prefix);\n    // @ts-ignore\n    sgNode.data[prop][rank] = curr;\n    g.setParent(curr, sg);\n    if (prev) g.addEdge({\n        id: `e${Math.random()}`,\n        source: prev,\n        target: curr,\n        data: {\n            weight: 1\n        }\n    });\n};\n\n\nconst $0335f3b7cf097843$export$2c0e788bcc82013 = (g, rankdir)=>{\n    const rd = rankdir.toLowerCase();\n    if (rd === 'lr' || rd === 'rl') $0335f3b7cf097843$var$swapWidthHeight(g);\n};\nconst $0335f3b7cf097843$export$21f930c44940fd98 = (g, rankdir)=>{\n    const rd = rankdir.toLowerCase();\n    if (rd === 'bt' || rd === 'rl') $0335f3b7cf097843$var$reverseY(g);\n    if (rd === 'lr' || rd === 'rl') {\n        $0335f3b7cf097843$var$swapXY(g);\n        $0335f3b7cf097843$var$swapWidthHeight(g);\n    }\n};\nconst $0335f3b7cf097843$var$swapWidthHeight = (g)=>{\n    g.getAllNodes().forEach((v)=>{\n        $0335f3b7cf097843$var$swapWidthHeightOne(v);\n    });\n    g.getAllEdges().forEach((e)=>{\n        $0335f3b7cf097843$var$swapWidthHeightOne(e);\n    });\n};\nconst $0335f3b7cf097843$var$swapWidthHeightOne = (node)=>{\n    const w = node.data.width;\n    node.data.width = node.data.height;\n    node.data.height = w;\n};\nconst $0335f3b7cf097843$var$reverseY = (g)=>{\n    g.getAllNodes().forEach((v)=>{\n        $0335f3b7cf097843$var$reverseYOne(v.data);\n    });\n    g.getAllEdges().forEach((edge)=>{\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 || _a.forEach((point)=>$0335f3b7cf097843$var$reverseYOne(point));\n        if (edge.data.hasOwnProperty('y')) $0335f3b7cf097843$var$reverseYOne(edge.data);\n    });\n};\nconst $0335f3b7cf097843$var$reverseYOne = (node)=>{\n    if (node === null || node === void 0 ? void 0 : node.y) node.y = -node.y;\n};\nconst $0335f3b7cf097843$var$swapXY = (g)=>{\n    g.getAllNodes().forEach((v)=>{\n        $0335f3b7cf097843$var$swapXYOne(v.data);\n    });\n    g.getAllEdges().forEach((edge)=>{\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 || _a.forEach((point)=>$0335f3b7cf097843$var$swapXYOne(point));\n        if (edge.data.hasOwnProperty('x')) $0335f3b7cf097843$var$swapXYOne(edge.data);\n    });\n};\nconst $0335f3b7cf097843$var$swapXYOne = (node)=>{\n    const x = node.x;\n    node.x = node.y;\n    node.y = x;\n};\n\n\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */ const $b171da702b6df92a$export$889ea624f2cb2c57 = (g)=>{\n    const root = (0, $10a62036c6f8d4c5$export$ecf34c2268abf7a0)(g, 'root', {}, '_root');\n    const depths = $b171da702b6df92a$var$treeDepths(g);\n    let maxDepth = Math.max(...Object.values(depths));\n    if (Math.abs(maxDepth) === Infinity) maxDepth = 1;\n    const height = maxDepth - 1; // Note: depths is an Object not an array\n    const nodeSep = 2 * height + 1;\n    // g.graph().nestingRoot = root;\n    // Multiply minlen by nodeSep to align nodes on non-border ranks.\n    g.getAllEdges().forEach((e)=>{\n        e.data.minlen *= nodeSep;\n    });\n    // Calculate a weight that is sufficient to keep subgraphs vertically compact\n    const weight = $b171da702b6df92a$var$sumWeights(g) + 1;\n    // Create border nodes and link them up\n    // g.children()?.forEach((child) => {\n    //   dfs(g, root, nodeSep, weight, height, depths, child);\n    // });\n    g.getRoots().forEach((child)=>{\n        $b171da702b6df92a$var$dfs(g, root, nodeSep, weight, height, depths, child.id);\n    });\n    // Save the multiplier for node layers for later removal of empty border\n    // layers.\n    // g.graph().nodeRankFactor = nodeSep;\n    return {\n        nestingRoot: root,\n        nodeRankFactor: nodeSep\n    };\n};\nconst $b171da702b6df92a$var$dfs = (g, root, nodeSep, weight, height, depths, v)=>{\n    const children = g.getChildren(v);\n    if (!(children === null || children === void 0 ? void 0 : children.length)) {\n        if (v !== root) // g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: root,\n            target: v,\n            data: {\n                weight: 0,\n                minlen: nodeSep\n            }\n        });\n        return;\n    }\n    const top = (0, $10a62036c6f8d4c5$export$6589834e22e3d497)(g, '_bt');\n    const bottom = (0, $10a62036c6f8d4c5$export$6589834e22e3d497)(g, '_bb');\n    const label = g.getNode(v);\n    g.setParent(top, v);\n    label.data.borderTop = top;\n    g.setParent(bottom, v);\n    label.data.borderBottom = bottom;\n    children === null || children === void 0 || children.forEach((childNode)=>{\n        $b171da702b6df92a$var$dfs(g, root, nodeSep, weight, height, depths, childNode.id);\n        const childTop = childNode.data.borderTop ? childNode.data.borderTop : childNode.id;\n        const childBottom = childNode.data.borderBottom ? childNode.data.borderBottom : childNode.id;\n        const thisWeight = childNode.data.borderTop ? weight : 2 * weight;\n        const minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: top,\n            target: childTop,\n            data: {\n                minlen: minlen,\n                weight: thisWeight,\n                nestingEdge: true\n            }\n        });\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: childBottom,\n            target: bottom,\n            data: {\n                minlen: minlen,\n                weight: thisWeight,\n                nestingEdge: true\n            }\n        });\n    });\n    if (!g.getParent(v)) g.addEdge({\n        id: `e${Math.random()}`,\n        source: root,\n        target: top,\n        data: {\n            weight: 0,\n            minlen: height + depths[v]\n        }\n    });\n};\nconst $b171da702b6df92a$var$treeDepths = (g)=>{\n    const depths = {};\n    const dfs = (v, depth)=>{\n        const children = g.getChildren(v);\n        children === null || children === void 0 || children.forEach((child)=>dfs(child.id, depth + 1));\n        depths[v] = depth;\n    };\n    // g.children()?.forEach((v) => dfs(v, 1));\n    g.getRoots().forEach((v)=>dfs(v.id, 1));\n    return depths;\n};\nconst $b171da702b6df92a$var$sumWeights = (g)=>{\n    let result = 0;\n    g.getAllEdges().forEach((e)=>{\n        result += e.data.weight;\n    });\n    return result;\n};\nconst $b171da702b6df92a$export$de863c629cb9919d = (g, nestingRoot)=>{\n    // const graphLabel = g.graph();\n    // graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n    // delete graphLabel.nestingRoot;\n    if (nestingRoot) g.removeNode(nestingRoot);\n    g.getAllEdges().forEach((e)=>{\n        if (e.data.nestingEdge) g.removeEdge(e.id);\n    });\n};\n\n\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */ const $f9e327107fa56550$var$DUMMY_NODE_EDGE = 'edge';\nconst $f9e327107fa56550$var$DUMMY_NODE_EDGE_LABEL = 'edge-label';\nconst $f9e327107fa56550$export$889ea624f2cb2c57 = (g, dummyChains)=>{\n    g.getAllEdges().forEach((edge)=>$f9e327107fa56550$var$normalizeEdge(g, edge, dummyChains));\n};\nconst $f9e327107fa56550$var$normalizeEdge = (g, e, dummyChains)=>{\n    let v = e.source;\n    let vRank = g.getNode(v).data.rank;\n    const w = e.target;\n    const wRank = g.getNode(w).data.rank;\n    const labelRank = e.data.labelRank;\n    if (wRank === vRank + 1) return;\n    g.removeEdge(e.id);\n    let dummy;\n    let nodeData;\n    let i;\n    for(i = 0, ++vRank; vRank < wRank; ++i, ++vRank){\n        e.data.points = [];\n        nodeData = {\n            originalEdge: e,\n            width: 0,\n            height: 0,\n            rank: vRank\n        };\n        dummy = (0, $10a62036c6f8d4c5$export$ecf34c2268abf7a0)(g, $f9e327107fa56550$var$DUMMY_NODE_EDGE, nodeData, '_d');\n        if (vRank === labelRank) {\n            nodeData.width = e.data.width;\n            nodeData.height = e.data.height;\n            nodeData.dummy = $f9e327107fa56550$var$DUMMY_NODE_EDGE_LABEL;\n            nodeData.labelpos = e.data.labelpos;\n        }\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: v,\n            target: dummy,\n            data: {\n                weight: e.data.weight\n            }\n        });\n        if (i === 0) dummyChains.push(dummy);\n        v = dummy;\n    }\n    g.addEdge({\n        id: `e${Math.random()}`,\n        source: v,\n        target: w,\n        data: {\n            weight: e.data.weight\n        }\n    });\n};\nconst $f9e327107fa56550$export$21f930c44940fd98 = (g, dummyChains)=>{\n    dummyChains.forEach((v)=>{\n        let node = g.getNode(v);\n        const { data: data } = node;\n        const originalEdge = data.originalEdge;\n        let w;\n        // Restore original edge.\n        if (originalEdge) g.addEdge(originalEdge);\n        let currentV = v;\n        while(node.data.dummy){\n            w = g.getSuccessors(currentV)[0];\n            g.removeNode(currentV);\n            originalEdge.data.points.push({\n                x: node.data.x,\n                y: node.data.y\n            });\n            if (node.data.dummy === $f9e327107fa56550$var$DUMMY_NODE_EDGE_LABEL) {\n                originalEdge.data.x = node.data.x;\n                originalEdge.data.y = node.data.y;\n                originalEdge.data.width = node.data.width;\n                originalEdge.data.height = node.data.height;\n            }\n            currentV = w.id;\n            node = g.getNode(currentV);\n        }\n    });\n};\n\n\n\n/**\n * 判断值是否为数组\n * @return 是否为数组\n */ function $fca728a03c30d69f$export$2e2bcd8739ae039(value) {\n    return Array.isArray(value);\n}\n\n\nvar $e6fbce6f7b4fd252$var$clone = function(obj) {\n    if (typeof obj !== 'object' || obj === null) return obj;\n    var rst;\n    if ((0, $fca728a03c30d69f$export$2e2bcd8739ae039)(obj)) {\n        rst = [];\n        for(var i = 0, l = obj.length; i < l; i++)if (typeof obj[i] === 'object' && obj[i] != null) rst[i] = $e6fbce6f7b4fd252$var$clone(obj[i]);\n        else rst[i] = obj[i];\n    } else {\n        rst = {};\n        for(var k in obj)if (typeof obj[k] === 'object' && obj[k] != null) rst[k] = $e6fbce6f7b4fd252$var$clone(obj[k]);\n        else rst[k] = obj[k];\n    }\n    return rst;\n};\nvar $e6fbce6f7b4fd252$export$2e2bcd8739ae039 = $e6fbce6f7b4fd252$var$clone;\n\n\n\nconst $0b54d47d35faf7ff$export$def0b5ae5036962c = (g, cg, vs)=>{\n    const prev = {};\n    let rootPrev;\n    vs === null || vs === void 0 || vs.forEach((v)=>{\n        let child = g.getParent(v);\n        let parent;\n        let prevChild;\n        while(child){\n            parent = g.getParent(child.id);\n            if (parent) {\n                prevChild = prev[parent.id];\n                prev[parent.id] = child.id;\n            } else {\n                prevChild = rootPrev;\n                rootPrev = child.id;\n            }\n            if (prevChild && prevChild !== child.id) {\n                if (!cg.hasNode(prevChild)) cg.addNode({\n                    id: prevChild,\n                    data: {}\n                });\n                if (!cg.hasNode(child.id)) cg.addNode({\n                    id: child.id,\n                    data: {}\n                });\n                if (!cg.hasEdge(`e${prevChild}-${child.id}`)) cg.addEdge({\n                    id: `e${prevChild}-${child.id}`,\n                    source: prevChild,\n                    target: child.id,\n                    data: {}\n                });\n                return;\n            }\n            child = parent;\n        }\n    });\n};\n\n\n\nconst $a1babae24a587fa7$export$eeb2d75ed1ad428 = (g, rank, direction)=>{\n    const root = $a1babae24a587fa7$var$createRootNode(g);\n    const result = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n        tree: [\n            {\n                id: root,\n                children: [],\n                data: {}\n            }\n        ]\n    });\n    g.getAllNodes().forEach((v)=>{\n        const parent = g.getParent(v.id);\n        if (v.data.rank === rank || v.data.minRank <= rank && rank <= v.data.maxRank) {\n            if (!result.hasNode(v.id)) result.addNode(Object.assign({}, v));\n            if ((parent === null || parent === void 0 ? void 0 : parent.id) && !result.hasNode(parent === null || parent === void 0 ? void 0 : parent.id)) result.addNode(Object.assign({}, parent));\n            result.setParent(v.id, (parent === null || parent === void 0 ? void 0 : parent.id) || root);\n            // This assumes we have only short edges!\n            g.getRelatedEdges(v.id, direction).forEach((e)=>{\n                const u = e.source === v.id ? e.target : e.source;\n                if (!result.hasNode(u)) result.addNode(Object.assign({}, g.getNode(u)));\n                const edge = result.getRelatedEdges(u, 'out').find(({ target: target })=>target === v.id);\n                const weight = edge !== undefined ? edge.data.weight : 0;\n                if (!edge) result.addEdge({\n                    id: e.id,\n                    source: u,\n                    target: v.id,\n                    data: {\n                        weight: e.data.weight + weight\n                    }\n                });\n                else result.updateEdgeData(edge.id, Object.assign(Object.assign({}, edge.data), {\n                    weight: e.data.weight + weight\n                }));\n            });\n            // console.log(v);\n            if (v.data.hasOwnProperty('minRank')) result.updateNodeData(v.id, Object.assign(Object.assign({}, v.data), {\n                borderLeft: v.data.borderLeft[rank],\n                borderRight: v.data.borderRight[rank]\n            }));\n        }\n    });\n    return result;\n};\nconst $a1babae24a587fa7$var$createRootNode = (g)=>{\n    let v;\n    while(g.hasNode(v = `_root${Math.random()}`));\n    return v;\n};\n\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */ \nconst $9f2c76ba88d20d06$var$twoLayerCrossCount = (g, northLayer, southLayer)=>{\n    // Sort all of the edges between the north and south layers by their position\n    // in the north layer and then the south. Map these edges to the position of\n    // their head in the south layer.\n    const southPos = (0, $10a62036c6f8d4c5$export$918056458ccab0)(southLayer, southLayer.map((v, i)=>i));\n    const unflat = northLayer.map((v)=>{\n        const unsort = g.getRelatedEdges(v, 'out').map((e)=>{\n            return {\n                pos: southPos[e.target] || 0,\n                weight: e.data.weight\n            };\n        });\n        return unsort === null || unsort === void 0 ? void 0 : unsort.sort((a, b)=>a.pos - b.pos);\n    });\n    const southEntries = unflat.flat().filter((entry)=>entry !== undefined);\n    // Build the accumulator tree\n    let firstIndex = 1;\n    while(firstIndex < southLayer.length)firstIndex <<= 1;\n    const treeSize = 2 * firstIndex - 1;\n    firstIndex -= 1;\n    const tree = Array(treeSize).fill(0, 0, treeSize);\n    // Calculate the weighted crossings\n    let cc = 0;\n    southEntries === null || southEntries === void 0 || southEntries.forEach((entry)=>{\n        if (entry) {\n            let index = entry.pos + firstIndex;\n            tree[index] += entry.weight;\n            let weightSum = 0;\n            while(index > 0){\n                if (index % 2) weightSum += tree[index + 1];\n                index = index - 1 >> 1;\n                tree[index] += entry.weight;\n            }\n            cc += entry.weight * weightSum;\n        }\n    });\n    return cc;\n};\nconst $9f2c76ba88d20d06$export$4487b4ec3754a783 = (g, layering)=>{\n    let cc = 0;\n    for(let i = 1; i < (layering === null || layering === void 0 ? void 0 : layering.length); i += 1)cc += $9f2c76ba88d20d06$var$twoLayerCrossCount(g, layering[i - 1], layering[i]);\n    return cc;\n};\n\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */ const $43e929ed0789eb2b$export$a68885affb54ae0d = (g)=>{\n    const visited = {};\n    // const simpleNodes = g.getAllNodes().filter((v) => {\n    //   return !g.getChildren(v.id)?.length;\n    // });\n    const simpleNodes = g.getAllNodes();\n    const nodeRanks = simpleNodes.map((v)=>{\n        var _a;\n        return (_a = v.data.rank) !== null && _a !== void 0 ? _a : -Infinity;\n    });\n    const maxRank = Math.max(...nodeRanks);\n    const layers = [];\n    for(let i = 0; i < maxRank + 1; i++)layers.push([]);\n    const orderedVs = simpleNodes.sort((a, b)=>g.getNode(a.id).data.rank - g.getNode(b.id).data.rank);\n    // const orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v)!.rank; });\n    // 有fixOrder的，直接排序好放进去\n    const beforeSort = orderedVs.filter((n)=>{\n        return g.getNode(n.id).data.fixorder !== undefined;\n    });\n    const fixOrderNodes = beforeSort.sort((a, b)=>g.getNode(a.id).data.fixorder - g.getNode(b.id).data.fixorder);\n    fixOrderNodes === null || fixOrderNodes === void 0 || fixOrderNodes.forEach((n)=>{\n        if (!isNaN(g.getNode(n.id).data.rank)) layers[g.getNode(n.id).data.rank].push(n.id);\n        visited[n.id] = true;\n    });\n    orderedVs === null || orderedVs === void 0 || orderedVs.forEach((n)=>g.dfsTree(n.id, (node)=>{\n            if (visited.hasOwnProperty(node.id)) return true;\n            visited[node.id] = true;\n            if (!isNaN(node.data.rank)) layers[node.data.rank].push(node.id);\n        }));\n    return layers;\n};\n\n\n/**\n * TODO: The median method consistently performs better than the barycenter method and has a slight theoretical advantage\n */ const $50afe3eed0704582$export$d54b347d68b9b5f6 = (g, movable)=>{\n    return movable.map((v)=>{\n        const inV = g.getRelatedEdges(v, 'in');\n        if (!(inV === null || inV === void 0 ? void 0 : inV.length)) return {\n            v: v\n        };\n        const result = {\n            sum: 0,\n            weight: 0\n        };\n        inV === null || inV === void 0 || inV.forEach((e)=>{\n            const nodeU = g.getNode(e.source);\n            result.sum += e.data.weight * nodeU.data.order;\n            result.weight += e.data.weight;\n        });\n        return {\n            v: v,\n            barycenter: result.sum / result.weight,\n            weight: result.weight\n        };\n    });\n};\n\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */ const $b5135247d7b926d4$var$resolveConflicts = (entries, cg)=>{\n    var _a, _b, _c;\n    const mappedEntries = {};\n    entries === null || entries === void 0 || entries.forEach((entry, i)=>{\n        mappedEntries[entry.v] = {\n            i: i,\n            indegree: 0,\n            in: [],\n            out: [],\n            vs: [\n                entry.v\n            ]\n        };\n        const tmp = mappedEntries[entry.v];\n        if (entry.barycenter !== undefined) {\n            tmp.barycenter = entry.barycenter;\n            tmp.weight = entry.weight;\n        }\n    });\n    (_a = cg.getAllEdges()) === null || _a === void 0 || _a.forEach((e)=>{\n        const entryV = mappedEntries[e.source];\n        const entryW = mappedEntries[e.target];\n        if (entryV !== undefined && entryW !== undefined) {\n            entryW.indegree++;\n            entryV.out.push(mappedEntries[e.target]);\n        }\n    });\n    const sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, (entry)=>!entry.indegree);\n    return $b5135247d7b926d4$var$doResolveConflicts(sourceSet);\n};\nconst $b5135247d7b926d4$var$doResolveConflicts = (sourceSet)=>{\n    var _a, _b;\n    const entries = [];\n    const handleIn = (vEntry)=>{\n        return (uEntry)=>{\n            if (uEntry.merged) return;\n            if (uEntry.barycenter === undefined || vEntry.barycenter === undefined || uEntry.barycenter >= vEntry.barycenter) $b5135247d7b926d4$var$mergeEntries(vEntry, uEntry);\n        };\n    };\n    const handleOut = (vEntry)=>{\n        return (wEntry)=>{\n            wEntry['in'].push(vEntry);\n            if (--wEntry.indegree === 0) sourceSet.push(wEntry);\n        };\n    };\n    while(sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length){\n        const entry = sourceSet.pop();\n        entries.push(entry);\n        (_a = entry['in'].reverse()) === null || _a === void 0 || _a.forEach((e)=>handleIn(entry)(e));\n        (_b = entry.out) === null || _b === void 0 || _b.forEach((e)=>handleOut(entry)(e));\n    }\n    const filtered = entries.filter((entry)=>!entry.merged);\n    const keys = [\n        'vs',\n        'i',\n        'barycenter',\n        'weight'\n    ];\n    return filtered.map((entry)=>{\n        const picked = {};\n        keys === null || keys === void 0 || keys.forEach((key)=>{\n            if (entry[key] === undefined) return;\n            picked[key] = entry[key];\n        });\n        return picked;\n    });\n};\nconst $b5135247d7b926d4$var$mergeEntries = (target, source)=>{\n    var _a;\n    let sum = 0;\n    let weight = 0;\n    if (target.weight) {\n        sum += target.barycenter * target.weight;\n        weight += target.weight;\n    }\n    if (source.weight) {\n        sum += source.barycenter * source.weight;\n        weight += source.weight;\n    }\n    target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n    target.barycenter = sum / weight;\n    target.weight = weight;\n    target.i = Math.min(source.i, target.i);\n    source.merged = true;\n};\nvar $b5135247d7b926d4$export$2e2bcd8739ae039 = $b5135247d7b926d4$var$resolveConflicts;\n\n\n\nconst $7513a7c087597837$export$97db5808d8f88186 = (entries, biasRight, usePrev, keepNodeOrder)=>{\n    const parts = (0, $10a62036c6f8d4c5$export$b29f828819edca8d)(entries, (entry)=>{\n        const hasFixOrder = entry.hasOwnProperty('fixorder') && !isNaN(entry.fixorder);\n        if (keepNodeOrder) return !hasFixOrder && entry.hasOwnProperty('barycenter');\n        // NOTE: 有fixorder的也可以排\n        return hasFixOrder || entry.hasOwnProperty('barycenter');\n    });\n    const sortable = parts.lhs;\n    const unsortable = parts.rhs.sort((a, b)=>-a.i - -b.i);\n    const vs = [];\n    let sum = 0;\n    let weight = 0;\n    let vsIndex = 0;\n    sortable === null || sortable === void 0 || sortable.sort($7513a7c087597837$var$compareWithBias(!!biasRight, !!usePrev));\n    vsIndex = $7513a7c087597837$var$consumeUnsortable(vs, unsortable, vsIndex);\n    sortable === null || sortable === void 0 || sortable.forEach((entry)=>{\n        var _a;\n        vsIndex += (_a = entry.vs) === null || _a === void 0 ? void 0 : _a.length;\n        vs.push(entry.vs);\n        sum += entry.barycenter * entry.weight;\n        weight += entry.weight;\n        vsIndex = $7513a7c087597837$var$consumeUnsortable(vs, unsortable, vsIndex);\n    });\n    const result = {\n        vs: vs.flat()\n    };\n    if (weight) {\n        result.barycenter = sum / weight;\n        result.weight = weight;\n    }\n    return result;\n};\nconst $7513a7c087597837$var$consumeUnsortable = (vs, unsortable, index)=>{\n    let iindex = index;\n    let last;\n    while(unsortable.length && (last = unsortable[unsortable.length - 1]).i <= iindex){\n        unsortable.pop();\n        vs === null || vs === void 0 || vs.push(last.vs);\n        iindex++;\n    }\n    return iindex;\n};\n/**\n * 配置是否考虑使用之前的布局结果\n */ const $7513a7c087597837$var$compareWithBias = (bias, usePrev)=>{\n    return (entryV, entryW)=>{\n        // 排序的时候先判断fixorder，不行再判断重心\n        if (entryV.fixorder !== undefined && entryW.fixorder !== undefined) return entryV.fixorder - entryW.fixorder;\n        if (entryV.barycenter < entryW.barycenter) return -1;\n        if (entryV.barycenter > entryW.barycenter) return 1;\n        // 重心相同，考虑之前排好的顺序\n        if (usePrev && entryV.order !== undefined && entryW.order !== undefined) {\n            if (entryV.order < entryW.order) return -1;\n            if (entryV.order > entryW.order) return 1;\n        }\n        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n    };\n};\n\n\nconst $7dfdf35c149298b9$export$734a84c77ae2f1e = (g, v, cg, biasRight, usePrev, keepNodeOrder)=>{\n    var _a, _b, _c, _d;\n    let movable = g.getChildren(v).map((n)=>n.id);\n    // fixorder的点不参与排序（这个方案不合适，只排了新增节点，和原来的分离）\n    const node = g.getNode(v);\n    const bl = node ? node.data.borderLeft : undefined;\n    const br = node ? node.data.borderRight : undefined;\n    const subgraphs = {};\n    if (bl) movable = movable === null || movable === void 0 ? void 0 : movable.filter((w)=>{\n        return w !== bl && w !== br;\n    });\n    const barycenters = (0, $50afe3eed0704582$export$d54b347d68b9b5f6)(g, movable || []);\n    barycenters === null || barycenters === void 0 || barycenters.forEach((entry)=>{\n        var _a;\n        if ((_a = g.getChildren(entry.v)) === null || _a === void 0 ? void 0 : _a.length) {\n            const subgraphResult = $7dfdf35c149298b9$export$734a84c77ae2f1e(g, entry.v, cg, biasRight, keepNodeOrder);\n            subgraphs[entry.v] = subgraphResult;\n            if (subgraphResult.hasOwnProperty('barycenter')) $7dfdf35c149298b9$var$mergeBarycenters(entry, subgraphResult);\n        }\n    });\n    const entries = (0, $b5135247d7b926d4$export$2e2bcd8739ae039)(barycenters, cg);\n    $7dfdf35c149298b9$var$expandSubgraphs(entries, subgraphs);\n    // 添加fixorder信息到entries里边\n    // TODO: 不考虑复合情况，只用第一个点的fixorder信息，后续考虑更完备的实现\n    (_a = entries.filter((e)=>e.vs.length > 0)) === null || _a === void 0 || _a.forEach((e)=>{\n        const node = g.getNode(e.vs[0]);\n        if (node) {\n            e.fixorder = node.data.fixorder;\n            e.order = node.data.order;\n        }\n    });\n    const result = (0, $7513a7c087597837$export$97db5808d8f88186)(entries, biasRight, usePrev, keepNodeOrder);\n    if (bl) {\n        result.vs = [\n            bl,\n            result.vs,\n            br\n        ].flat();\n        if ((_b = g.getPredecessors(bl)) === null || _b === void 0 ? void 0 : _b.length) {\n            const blPred = g.getNode(((_c = g.getPredecessors(bl)) === null || _c === void 0 ? void 0 : _c[0].id) || '');\n            const brPred = g.getNode(((_d = g.getPredecessors(br)) === null || _d === void 0 ? void 0 : _d[0].id) || '');\n            if (!result.hasOwnProperty('barycenter')) {\n                result.barycenter = 0;\n                result.weight = 0;\n            }\n            result.barycenter = (result.barycenter * result.weight + blPred.data.order + brPred.data.order) / (result.weight + 2);\n            result.weight += 2;\n        }\n    }\n    return result;\n};\nconst $7dfdf35c149298b9$var$expandSubgraphs = (entries, subgraphs)=>{\n    entries === null || entries === void 0 || entries.forEach((entry)=>{\n        var _a;\n        const vss = (_a = entry.vs) === null || _a === void 0 ? void 0 : _a.map((v)=>{\n            if (subgraphs[v]) return subgraphs[v].vs;\n            return v;\n        });\n        entry.vs = vss.flat();\n    });\n};\nconst $7dfdf35c149298b9$var$mergeBarycenters = (target, other)=>{\n    if (target.barycenter !== undefined) {\n        target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);\n        target.weight += other.weight;\n    } else {\n        target.barycenter = other.barycenter;\n        target.weight = other.weight;\n    }\n};\n\n\nconst $a5dcf47086ff4819$export$aaaeab0fac9a3ccb = (g, keepNodeOrder)=>{\n    const mxRank = (0, $10a62036c6f8d4c5$export$978bfc7f0ad7d28e)(g);\n    const range1 = [];\n    const range2 = [];\n    for(let i = 1; i < mxRank + 1; i++)range1.push(i);\n    for(let i = mxRank - 1; i > -1; i--)range2.push(i);\n    const downLayerGraphs = $a5dcf47086ff4819$var$buildLayerGraphs(g, range1, 'in');\n    const upLayerGraphs = $a5dcf47086ff4819$var$buildLayerGraphs(g, range2, 'out');\n    let layering = (0, $43e929ed0789eb2b$export$a68885affb54ae0d)(g);\n    $a5dcf47086ff4819$var$assignOrder(g, layering);\n    let bestCC = Number.POSITIVE_INFINITY;\n    let best;\n    for(let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest){\n        $a5dcf47086ff4819$var$sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, false, keepNodeOrder);\n        layering = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n        const cc = (0, $9f2c76ba88d20d06$export$4487b4ec3754a783)(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = (0, $e6fbce6f7b4fd252$export$2e2bcd8739ae039)(layering);\n            bestCC = cc;\n        }\n    }\n    // consider use previous result, maybe somewhat reduendant\n    layering = (0, $43e929ed0789eb2b$export$a68885affb54ae0d)(g);\n    $a5dcf47086ff4819$var$assignOrder(g, layering);\n    for(let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest){\n        $a5dcf47086ff4819$var$sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true, keepNodeOrder);\n        layering = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n        const cc = (0, $9f2c76ba88d20d06$export$4487b4ec3754a783)(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = (0, $e6fbce6f7b4fd252$export$2e2bcd8739ae039)(layering);\n            bestCC = cc;\n        }\n    }\n    $a5dcf47086ff4819$var$assignOrder(g, best);\n};\nconst $a5dcf47086ff4819$var$buildLayerGraphs = (g, ranks, direction)=>{\n    return ranks.map((rank)=>{\n        return (0, $a1babae24a587fa7$export$eeb2d75ed1ad428)(g, rank, direction);\n    });\n};\nconst $a5dcf47086ff4819$var$sweepLayerGraphs = (layerGraphs, biasRight, usePrev, keepNodeOrder)=>{\n    const cg = new (0, $49867c5a46937b53$export$614db49f3febe941)();\n    layerGraphs === null || layerGraphs === void 0 || layerGraphs.forEach((lg)=>{\n        var _a;\n        // const root = lg.graph().root as string;\n        const root = lg.getRoots()[0].id;\n        const sorted = (0, $7dfdf35c149298b9$export$734a84c77ae2f1e)(lg, root, cg, biasRight, usePrev, keepNodeOrder);\n        for(let i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++){\n            const lnode = lg.getNode(sorted.vs[i]);\n            if (lnode) lnode.data.order = i;\n        }\n        (0, $0b54d47d35faf7ff$export$def0b5ae5036962c)(lg, cg, sorted.vs);\n    });\n};\nconst $a5dcf47086ff4819$var$assignOrder = (g, layering)=>{\n    layering === null || layering === void 0 || layering.forEach((layer)=>{\n        layer === null || layer === void 0 || layer.forEach((v, i)=>{\n            g.getNode(v).data.order = i;\n        });\n    });\n};\n\n\n/**\n * 按照数据中的结果设置fixorder\n */ const $579587ea8e36cbfa$export$5eded36975f147bd = (g, nodeOrder)=>{\n    const simpleNodes = g.getAllNodes().filter((v)=>{\n        var _a;\n        return !((_a = g.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length);\n    });\n    const ranks = simpleNodes.map((v)=>v.data.rank);\n    const maxRank = Math.max(...ranks);\n    const layers = [];\n    for(let i = 0; i < maxRank + 1; i++)layers[i] = [];\n    nodeOrder === null || nodeOrder === void 0 || nodeOrder.forEach((n)=>{\n        const node = g.getNode(n);\n        // 只考虑原有节点，dummy节点需要按照后续算法排出\n        if (!node || node.data.dummy) return;\n        if (!isNaN(node.data.rank)) {\n            node.data.fixorder = layers[node.data.rank].length; // 设置fixorder为当层的顺序\n            layers[node.data.rank].push(n);\n        }\n    });\n};\n\n\n// deep first search with both order low for pre, lim for post\nconst $9141d8e8c2a8fdc0$var$dfsBothOrder = (g)=>{\n    const result = {};\n    let lim = 0;\n    const dfs = (v)=>{\n        const low = lim;\n        g.getChildren(v).forEach((n)=>dfs(n.id));\n        result[v] = {\n            low: low,\n            lim: lim++\n        };\n    };\n    g.getRoots().forEach((n)=>dfs(n.id));\n    return result;\n};\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nconst $9141d8e8c2a8fdc0$var$findPath = (g, postorderNums, v, w)=>{\n    var _a, _b;\n    const vPath = [];\n    const wPath = [];\n    const low = Math.min(postorderNums[v].low, postorderNums[w].low);\n    const lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n    let parent;\n    let lca;\n    // Traverse up from v to find the LCA\n    parent = v;\n    do {\n        parent = (_a = g.getParent(parent)) === null || _a === void 0 ? void 0 : _a.id;\n        vPath.push(parent);\n    }while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n    lca = parent;\n    // Traverse from w to LCA\n    parent = w;\n    while(parent && parent !== lca){\n        wPath.push(parent);\n        parent = (_b = g.getParent(parent)) === null || _b === void 0 ? void 0 : _b.id;\n    }\n    return {\n        lca: lca,\n        path: vPath.concat(wPath.reverse())\n    };\n};\nconst $9141d8e8c2a8fdc0$export$f30289267ab03372 = (g, dummyChains)=>{\n    const postorderNums = $9141d8e8c2a8fdc0$var$dfsBothOrder(g);\n    dummyChains.forEach((startV)=>{\n        var _a, _b;\n        let v = startV;\n        let node = g.getNode(v);\n        const originalEdge = node.data.originalEdge;\n        if (!originalEdge) return;\n        const pathData = $9141d8e8c2a8fdc0$var$findPath(g, postorderNums, originalEdge.source, originalEdge.target);\n        const path = pathData.path;\n        const lca = pathData.lca;\n        let pathIdx = 0;\n        let pathV = path[pathIdx];\n        let ascending = true;\n        while(v !== originalEdge.target){\n            node = g.getNode(v);\n            if (ascending) {\n                while(pathV !== lca && ((_a = g.getNode(pathV)) === null || _a === void 0 ? void 0 : _a.data.maxRank) < node.data.rank){\n                    pathIdx++;\n                    pathV = path[pathIdx];\n                }\n                if (pathV === lca) ascending = false;\n            }\n            if (!ascending) {\n                while(pathIdx < path.length - 1 && ((_b = g.getNode(path[pathIdx + 1])) === null || _b === void 0 ? void 0 : _b.data.minRank) <= node.data.rank)pathIdx++;\n                pathV = path[pathIdx];\n            }\n            if (g.hasNode(pathV)) g.setParent(v, pathV);\n            v = g.getSuccessors(v)[0].id;\n        }\n    });\n};\n\n\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */ \n\nconst $a75ba29232d6f7f6$export$a2336058547dd16b = (g, layering)=>{\n    const conflicts = {};\n    const visitLayer = (prevLayer, layer)=>{\n        // last visited node in the previous layer that is incident on an inner\n        // segment.\n        let k0 = 0;\n        // Tracks the last node in this layer scanned for crossings with a type-1\n        // segment.\n        let scanPos = 0;\n        const prevLayerLength = prevLayer.length;\n        const lastNode = layer === null || layer === void 0 ? void 0 : layer[(layer === null || layer === void 0 ? void 0 : layer.length) - 1];\n        layer === null || layer === void 0 || layer.forEach((v, i)=>{\n            var _a;\n            const w = $a75ba29232d6f7f6$export$3c5c9b7b489ac6ee(g, v);\n            const k1 = w ? g.getNode(w.id).data.order : prevLayerLength;\n            if (w || v === lastNode) {\n                (_a = layer.slice(scanPos, i + 1)) === null || _a === void 0 || _a.forEach((scanNode)=>{\n                    var _a;\n                    (_a = g.getPredecessors(scanNode)) === null || _a === void 0 || _a.forEach((u)=>{\n                        var _a;\n                        const uLabel = g.getNode(u.id);\n                        const uPos = uLabel.data.order;\n                        if ((uPos < k0 || k1 < uPos) && !(uLabel.data.dummy && ((_a = g.getNode(scanNode)) === null || _a === void 0 ? void 0 : _a.data.dummy))) $a75ba29232d6f7f6$export$d6a30e6c78fac74(conflicts, u.id, scanNode);\n                    });\n                });\n                scanPos = i + 1;\n                k0 = k1;\n            }\n        });\n        return layer;\n    };\n    if (layering === null || layering === void 0 ? void 0 : layering.length) layering.reduce(visitLayer);\n    return conflicts;\n};\nconst $a75ba29232d6f7f6$export$f384d2f2a62cea4b = (g, layering)=>{\n    const conflicts = {};\n    function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n        var _a, _b;\n        let v;\n        for(let i = southPos; i < southEnd; i++){\n            v = south[i];\n            if ((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) (_b = g.getPredecessors(v)) === null || _b === void 0 || _b.forEach((u)=>{\n                const uNode = g.getNode(u.id);\n                if (uNode.data.dummy && (uNode.data.order < prevNorthBorder || uNode.data.order > nextNorthBorder)) $a75ba29232d6f7f6$export$d6a30e6c78fac74(conflicts, u.id, v);\n            });\n        }\n    }\n    function getScannedKey(params) {\n        // south数组可能很大，不适合做key\n        return JSON.stringify(params.slice(1));\n    }\n    function scanIfNeeded(params, scanCache) {\n        const cacheKey = getScannedKey(params);\n        if (scanCache.get(cacheKey)) return;\n        scan(...params);\n        scanCache.set(cacheKey, true);\n    }\n    const visitLayer = (north, south)=>{\n        let prevNorthPos = -1;\n        let nextNorthPos;\n        let southPos = 0;\n        const scanned = new Map();\n        south === null || south === void 0 || south.forEach((v, southLookahead)=>{\n            var _a;\n            if (((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) === 'border') {\n                const predecessors = g.getPredecessors(v) || [];\n                if (predecessors.length) {\n                    nextNorthPos = g.getNode(predecessors[0].id).data.order;\n                    scanIfNeeded([\n                        south,\n                        southPos,\n                        southLookahead,\n                        prevNorthPos,\n                        nextNorthPos\n                    ], scanned);\n                    southPos = southLookahead;\n                    prevNorthPos = nextNorthPos;\n                }\n            }\n            scanIfNeeded([\n                south,\n                southPos,\n                south.length,\n                nextNorthPos,\n                north.length\n            ], scanned);\n        });\n        return south;\n    };\n    if (layering === null || layering === void 0 ? void 0 : layering.length) layering.reduce(visitLayer);\n    return conflicts;\n};\nconst $a75ba29232d6f7f6$export$3c5c9b7b489ac6ee = (g, v)=>{\n    var _a, _b;\n    if ((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) return (_b = g.getPredecessors(v)) === null || _b === void 0 ? void 0 : _b.find((u)=>g.getNode(u.id).data.dummy);\n};\nconst $a75ba29232d6f7f6$export$d6a30e6c78fac74 = (conflicts, v, w)=>{\n    let vv = v;\n    let ww = w;\n    if (vv > ww) {\n        const tmp = vv;\n        vv = ww;\n        ww = tmp;\n    }\n    let conflictsV = conflicts[vv];\n    if (!conflictsV) conflicts[vv] = conflictsV = {};\n    conflictsV[ww] = true;\n};\nconst $a75ba29232d6f7f6$export$76734886d09d2999 = (conflicts, v, w)=>{\n    let vv = v;\n    let ww = w;\n    if (vv > ww) {\n        const tmp = v;\n        vv = ww;\n        ww = tmp;\n    }\n    return !!conflicts[vv];\n};\nconst $a75ba29232d6f7f6$export$983b95e2e3722091 = (g, layering, conflicts, neighborFn)=>{\n    const root = {};\n    const align = {};\n    const pos = {};\n    // We cache the position here based on the layering because the graph and\n    // layering may be out of sync. The layering matrix is manipulated to\n    // generate different extreme alignments.\n    layering === null || layering === void 0 || layering.forEach((layer)=>{\n        layer === null || layer === void 0 || layer.forEach((v, order)=>{\n            root[v] = v;\n            align[v] = v;\n            pos[v] = order;\n        });\n    });\n    layering === null || layering === void 0 || layering.forEach((layer)=>{\n        let prevIdx = -1;\n        layer === null || layer === void 0 || layer.forEach((v)=>{\n            let ws = neighborFn(v).map((n)=>n.id);\n            if (ws.length) {\n                ws = ws.sort((a, b)=>pos[a] - pos[b]);\n                const mp = (ws.length - 1) / 2;\n                for(let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i){\n                    const w = ws[i];\n                    if (align[v] === v && prevIdx < pos[w] && !$a75ba29232d6f7f6$export$76734886d09d2999(conflicts, v, w)) {\n                        align[w] = v;\n                        align[v] = root[v] = root[w];\n                        prevIdx = pos[w];\n                    }\n                }\n            }\n        });\n    });\n    return {\n        root: root,\n        align: align\n    };\n};\nconst $a75ba29232d6f7f6$export$40e1a979a22b42db = (g, layering, root, align, nodesep, edgesep, reverseSep)=>{\n    var _a;\n    // This portion of the algorithm differs from BK due to a number of problems.\n    // Instead of their algorithm we construct a new block graph and do two\n    // sweeps. The first sweep places blocks with the smallest possible\n    // coordinates. The second sweep removes unused space by moving blocks to the\n    // greatest coordinates without violating separation.\n    const xs = {};\n    const blockG = $a75ba29232d6f7f6$export$1c98a49158fa9de5(g, layering, root, nodesep, edgesep, reverseSep);\n    const borderType = reverseSep ? 'borderLeft' : 'borderRight';\n    const iterate = (setXsFunc, nextNodesFunc)=>{\n        let stack = blockG.getAllNodes();\n        let elem = stack.pop();\n        const visited = {};\n        while(elem){\n            if (visited[elem.id]) setXsFunc(elem.id);\n            else {\n                visited[elem.id] = true;\n                stack.push(elem);\n                stack = stack.concat(nextNodesFunc(elem.id));\n            }\n            elem = stack.pop();\n        }\n    };\n    // First pass, assign smallest coordinates\n    const pass1 = (elem)=>{\n        xs[elem] = (blockG.getRelatedEdges(elem, 'in') || []).reduce((acc, e)=>{\n            return Math.max(acc, (xs[e.source] || 0) + e.data.weight);\n        }, 0);\n    };\n    // Second pass, assign greatest coordinates\n    const pass2 = (elem)=>{\n        const min = (blockG.getRelatedEdges(elem, 'out') || []).reduce((acc, e)=>{\n            return Math.min(acc, (xs[e.target] || 0) - e.data.weight);\n        }, Number.POSITIVE_INFINITY);\n        const node = g.getNode(elem);\n        if (min !== Number.POSITIVE_INFINITY && node.data.borderType !== borderType) xs[elem] = Math.max(xs[elem], min);\n    };\n    iterate(pass1, blockG.getPredecessors.bind(blockG));\n    iterate(pass2, blockG.getSuccessors.bind(blockG));\n    // Assign x coordinates to all nodes\n    (_a = Object.values(align)) === null || _a === void 0 || _a.forEach((v)=>{\n        xs[v] = xs[root[v]];\n    });\n    return xs;\n};\nconst $a75ba29232d6f7f6$export$1c98a49158fa9de5 = (g, layering, root, nodesep, edgesep, reverseSep)=>{\n    const blockGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)();\n    const sepFn = $a75ba29232d6f7f6$export$5aee1a5bd9743d8f(nodesep, edgesep, reverseSep);\n    layering === null || layering === void 0 || layering.forEach((layer)=>{\n        let u;\n        layer === null || layer === void 0 || layer.forEach((v)=>{\n            const vRoot = root[v];\n            if (!blockGraph.hasNode(vRoot)) blockGraph.addNode({\n                id: vRoot,\n                data: {}\n            });\n            if (u) {\n                const uRoot = root[u];\n                const edge = blockGraph.getRelatedEdges(uRoot, 'out').find((edge)=>edge.target === vRoot);\n                if (!edge) blockGraph.addEdge({\n                    id: `e${Math.random()}`,\n                    source: uRoot,\n                    target: vRoot,\n                    data: {\n                        weight: Math.max(sepFn(g, v, u), 0)\n                    }\n                });\n                else blockGraph.updateEdgeData(edge.id, Object.assign(Object.assign({}, edge.data), {\n                    weight: Math.max(sepFn(g, v, u), edge.data.weight || 0)\n                }));\n            }\n            u = v;\n        });\n    });\n    return blockGraph;\n};\nconst $a75ba29232d6f7f6$export$870d8cbd39818c9 = (g, xss)=>{\n    return (0, $10a62036c6f8d4c5$export$8c826aa0fa59ac68)(Object.values(xss), (xs)=>{\n        var _a;\n        let max = Number.NEGATIVE_INFINITY;\n        let min = Number.POSITIVE_INFINITY;\n        (_a = Object.keys(xs)) === null || _a === void 0 || _a.forEach((v)=>{\n            const x = xs[v];\n            const halfWidth = $a75ba29232d6f7f6$export$7e3df82ee760448c(g, v) / 2;\n            max = Math.max(x + halfWidth, max);\n            min = Math.min(x - halfWidth, min);\n        });\n        return max - min;\n    });\n};\nfunction $a75ba29232d6f7f6$export$68444cc44dca9679(xss, alignTo) {\n    const alignToVals = Object.values(alignTo);\n    const alignToMin = Math.min(...alignToVals);\n    const alignToMax = Math.max(...alignToVals);\n    [\n        'u',\n        'd'\n    ].forEach((vert)=>{\n        [\n            'l',\n            'r'\n        ].forEach((horiz)=>{\n            const alignment = vert + horiz;\n            const xs = xss[alignment];\n            let delta;\n            if (xs === alignTo) return;\n            const xsVals = Object.values(xs);\n            delta = horiz === 'l' ? alignToMin - Math.min(...xsVals) : alignToMax - Math.max(...xsVals);\n            if (delta) {\n                xss[alignment] = {};\n                Object.keys(xs).forEach((key)=>{\n                    xss[alignment][key] = xs[key] + delta;\n                });\n            }\n        });\n    });\n}\nconst $a75ba29232d6f7f6$export$13efda6d80c8a88 = (xss, align)=>{\n    const result = {};\n    Object.keys(xss.ul).forEach((key)=>{\n        if (align) result[key] = xss[align.toLowerCase()][key];\n        else {\n            const values = Object.values(xss).map((x)=>x[key]);\n            result[key] = (values[0] + values[1]) / 2; // (ur + ul) / 2\n        }\n    });\n    return result;\n};\nconst $a75ba29232d6f7f6$export$ec3af212ec314f01 = (g, options)=>{\n    const { align: graphAlign, nodesep: nodesep = 0, edgesep: edgesep = 0 } = options || {};\n    const layering = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n    const conflicts = Object.assign($a75ba29232d6f7f6$export$a2336058547dd16b(g, layering), $a75ba29232d6f7f6$export$f384d2f2a62cea4b(g, layering));\n    const xss = {};\n    let adjustedLayering;\n    [\n        'u',\n        'd'\n    ].forEach((vert)=>{\n        adjustedLayering = vert === 'u' ? layering : Object.values(layering).reverse();\n        [\n            'l',\n            'r'\n        ].forEach((horiz)=>{\n            if (horiz === 'r') adjustedLayering = adjustedLayering.map((inner)=>Object.values(inner).reverse());\n            const neighborFn = (vert === 'u' ? g.getPredecessors : g.getSuccessors).bind(g);\n            const align = $a75ba29232d6f7f6$export$983b95e2e3722091(g, adjustedLayering, conflicts, neighborFn);\n            const xs = $a75ba29232d6f7f6$export$40e1a979a22b42db(g, adjustedLayering, align.root, align.align, nodesep, edgesep, horiz === 'r');\n            if (horiz === 'r') Object.keys(xs).forEach((key)=>{\n                xs[key] = -xs[key];\n            });\n            xss[vert + horiz] = xs;\n        });\n    });\n    const smallestWidth = $a75ba29232d6f7f6$export$870d8cbd39818c9(g, xss);\n    $a75ba29232d6f7f6$export$68444cc44dca9679(xss, smallestWidth);\n    return $a75ba29232d6f7f6$export$13efda6d80c8a88(xss, graphAlign);\n};\nconst $a75ba29232d6f7f6$export$5aee1a5bd9743d8f = (nodeSep, edgeSep, reverseSep)=>{\n    return (g, v, w)=>{\n        const vLabel = g.getNode(v);\n        const wLabel = g.getNode(w);\n        let sum = 0;\n        let delta = 0;\n        sum += vLabel.data.width / 2;\n        if (vLabel.data.hasOwnProperty('labelpos')) switch((vLabel.data.labelpos || '').toLowerCase()){\n            case 'l':\n                delta = -vLabel.data.width / 2;\n                break;\n            case 'r':\n                delta = vLabel.data.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        sum += (vLabel.data.dummy ? edgeSep : nodeSep) / 2;\n        sum += (wLabel.data.dummy ? edgeSep : nodeSep) / 2;\n        sum += wLabel.data.width / 2;\n        if (wLabel.data.labelpos) switch((wLabel.data.labelpos || '').toLowerCase()){\n            case 'l':\n                delta = wLabel.data.width / 2;\n                break;\n            case 'r':\n                delta = -wLabel.data.width / 2;\n                break;\n        }\n        if (delta) sum += reverseSep ? delta : -delta;\n        delta = 0;\n        return sum;\n    };\n};\nconst $a75ba29232d6f7f6$export$7e3df82ee760448c = (g, v)=>g.getNode(v).data.width || 0;\n\n\nconst $6e343856ddbefab2$var$positionY = (g, options)=>{\n    const { ranksep: ranksep = 0 } = options || {};\n    const layering = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n    let prevY = 0;\n    layering === null || layering === void 0 || layering.forEach((layer)=>{\n        const heights = layer.map((v)=>g.getNode(v).data.height);\n        const maxHeight = Math.max(...heights, 0);\n        layer === null || layer === void 0 || layer.forEach((v)=>{\n            g.getNode(v).data.y = prevY + maxHeight / 2;\n        });\n        prevY += maxHeight + ranksep;\n    });\n};\nconst $6e343856ddbefab2$var$positionX = (g, options)=>{\n    const { align: graphAlign, nodesep: nodesep = 0, edgesep: edgesep = 0 } = options || {};\n    const layering = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n    const conflicts = Object.assign((0, $a75ba29232d6f7f6$export$a2336058547dd16b)(g, layering), (0, $a75ba29232d6f7f6$export$f384d2f2a62cea4b)(g, layering));\n    const xss = {};\n    let adjustedLayering = [];\n    [\n        'u',\n        'd'\n    ].forEach((vert)=>{\n        adjustedLayering = vert === 'u' ? layering : Object.values(layering).reverse();\n        [\n            'l',\n            'r'\n        ].forEach((horiz)=>{\n            if (horiz === 'r') adjustedLayering = adjustedLayering.map((inner)=>Object.values(inner).reverse());\n            const neighborFn = (vert === 'u' ? g.getPredecessors : g.getSuccessors).bind(g);\n            const align = (0, $a75ba29232d6f7f6$export$983b95e2e3722091)(g, adjustedLayering, conflicts, neighborFn);\n            const xs = (0, $a75ba29232d6f7f6$export$40e1a979a22b42db)(g, adjustedLayering, align.root, align.align, nodesep, edgesep, horiz === 'r');\n            if (horiz === 'r') Object.keys(xs).forEach((xsKey)=>xs[xsKey] = -xs[xsKey]);\n            xss[vert + horiz] = xs;\n        });\n    });\n    const smallestWidth = (0, $a75ba29232d6f7f6$export$870d8cbd39818c9)(g, xss);\n    smallestWidth && (0, $a75ba29232d6f7f6$export$68444cc44dca9679)(xss, smallestWidth);\n    return (0, $a75ba29232d6f7f6$export$13efda6d80c8a88)(xss, graphAlign);\n};\nconst $6e343856ddbefab2$export$5880b8b5730aff45 = (g, options)=>{\n    var _a;\n    const ng = (0, $10a62036c6f8d4c5$export$556dc3686e4a2bd5)(g);\n    $6e343856ddbefab2$var$positionY(ng, options);\n    const xs = $6e343856ddbefab2$var$positionX(ng, options);\n    (_a = Object.keys(xs)) === null || _a === void 0 || _a.forEach((key)=>{\n        ng.getNode(key).data.x = xs[key];\n    });\n};\n\n\n\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */ const $3799158e00fecef4$export$cebe150c9dd2da2e = (g)=>{\n    const visited = {};\n    const dfs = (v)=>{\n        var _a;\n        const label = g.getNode(v);\n        if (!label) return 0;\n        if (visited[v]) return label.data.rank;\n        visited[v] = true;\n        let rank;\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 || _a.forEach((e)=>{\n            const wRank = dfs(e.target);\n            const minLen = e.data.minlen;\n            const r = wRank - minLen;\n            if (r) {\n                if (rank === undefined || r < rank) rank = r;\n            }\n        });\n        if (!rank) rank = 0;\n        label.data.rank = rank;\n        return rank;\n    };\n    g.getAllNodes().filter((n)=>g.getRelatedEdges(n.id, 'in').length === 0).forEach((source)=>dfs(source.id));\n};\nconst $3799158e00fecef4$export$837d78d6ca62db5a = (g)=>{\n    // 用longest path，找出最深的点\n    const visited = {};\n    let minRank;\n    const dfs = (v)=>{\n        var _a;\n        const label = g.getNode(v);\n        if (!label) return 0;\n        if (visited[v]) return label.data.rank;\n        visited[v] = true;\n        let rank;\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 || _a.forEach((e)=>{\n            const wRank = dfs(e.target);\n            const minLen = e.data.minlen;\n            const r = wRank - minLen;\n            if (r) {\n                if (rank === undefined || r < rank) rank = r;\n            }\n        });\n        if (!rank) rank = 0;\n        if (minRank === undefined || rank < minRank) minRank = rank;\n        label.data.rank = rank;\n        return rank;\n    };\n    g.getAllNodes().filter((n)=>g.getRelatedEdges(n.id, 'in').length === 0).forEach((source)=>{\n        if (source) dfs(source.id);\n    });\n    if (minRank === undefined) minRank = 0;\n    // minRank += 1; // NOTE: 最小的层级是dummy root，+1\n    // forward一遍，赋值层级\n    const forwardVisited = {};\n    const dfsForward = (v, nextRank)=>{\n        var _a;\n        const label = g.getNode(v);\n        const currRank = !isNaN(label.data.layer) ? label.data.layer : nextRank;\n        // 没有指定，取最大值\n        if (label.data.rank === undefined || label.data.rank < currRank) label.data.rank = currRank;\n        if (forwardVisited[v]) return;\n        forwardVisited[v] = true;\n        // DFS遍历子节点\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 || _a.forEach((e)=>{\n            dfsForward(e.target, currRank + e.data.minlen);\n        });\n    };\n    // 指定层级的，更新下游\n    g.getAllNodes().forEach((n)=>{\n        const label = n.data;\n        if (!label) return;\n        if (!isNaN(label.layer)) dfsForward(n.id, label.layer); // 默认的dummy root所在层的rank是-1\n        else label.rank -= minRank;\n    });\n};\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */ const $3799158e00fecef4$export$3748e8b0e9529e9c = (g, e)=>{\n    return g.getNode(e.target).data.rank - g.getNode(e.source).data.rank - e.data.minlen;\n};\n\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */ const $81492305c54c425a$export$1d03f990b5f20c77 = (g)=>{\n    const t = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n        tree: []\n    });\n    // Choose arbitrary node from which to start our tree\n    const start = g.getAllNodes()[0];\n    const size = g.getAllNodes().length;\n    t.addNode(start);\n    let edge;\n    let delta;\n    while($81492305c54c425a$var$tightTree(t, g) < size){\n        edge = $81492305c54c425a$var$findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.source) ? (0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, edge) : -(0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, edge);\n        $81492305c54c425a$var$shiftRanks(t, g, delta);\n    }\n    return t;\n};\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */ const $81492305c54c425a$var$tightTree = (t, g)=>{\n    const dfs = (v)=>{\n        g.getRelatedEdges(v, 'both').forEach((e)=>{\n            const edgeV = e.source;\n            const w = v === edgeV ? e.target : edgeV;\n            if (!t.hasNode(w) && !(0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, e)) {\n                t.addNode({\n                    id: w,\n                    data: {}\n                });\n                t.addEdge({\n                    id: e.id,\n                    source: v,\n                    target: w,\n                    data: {}\n                });\n                dfs(w);\n            }\n        });\n    };\n    t.getAllNodes().forEach((n)=>dfs(n.id));\n    return t.getAllNodes().length;\n};\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */ const $81492305c54c425a$export$1db489075cbdd4 = (g)=>{\n    const t = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n        tree: []\n    });\n    // Choose arbitrary node from which to start our tree\n    const start = g.getAllNodes()[0];\n    const size = g.getAllNodes().length;\n    t.addNode(start);\n    let edge;\n    let delta;\n    while($81492305c54c425a$var$tightTreeWithLayer(t, g) < size){\n        edge = $81492305c54c425a$var$findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.source) ? (0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, edge) : -(0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, edge);\n        $81492305c54c425a$var$shiftRanks(t, g, delta);\n    }\n    return t;\n};\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */ const $81492305c54c425a$var$tightTreeWithLayer = (t, g)=>{\n    const dfs = (v)=>{\n        var _a;\n        (_a = g.getRelatedEdges(v, 'both')) === null || _a === void 0 || _a.forEach((e)=>{\n            const edgeV = e.source;\n            const w = v === edgeV ? e.target : edgeV;\n            // 对于指定layer的，直接加入tight-tree，不参与调整\n            if (!t.hasNode(w) && (g.getNode(w).data.layer !== undefined || !(0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, e))) {\n                t.addNode({\n                    id: w,\n                    data: {}\n                });\n                t.addEdge({\n                    id: e.id,\n                    source: v,\n                    target: w,\n                    data: {}\n                });\n                dfs(w);\n            }\n        });\n    };\n    t.getAllNodes().forEach((n)=>dfs(n.id));\n    return t.getAllNodes().length;\n};\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */ const $81492305c54c425a$var$findMinSlackEdge = (t, g)=>{\n    return (0, $10a62036c6f8d4c5$export$8c826aa0fa59ac68)(g.getAllEdges(), (e)=>{\n        if (t.hasNode(e.source) !== t.hasNode(e.target)) return (0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, e);\n        return Infinity;\n    });\n};\nconst $81492305c54c425a$var$shiftRanks = (t, g, delta)=>{\n    t.getAllNodes().forEach((tn)=>{\n        const v = g.getNode(tn.id);\n        if (!v.data.rank) v.data.rank = 0;\n        v.data.rank += delta;\n    });\n};\n\n\n\n\n\nconst $63a436eb07084564$export$fb928ed1fa9faa94 = (og)=>{\n    const g = (0, $10a62036c6f8d4c5$export$798b53621063651)(og);\n    (0, $3799158e00fecef4$export$cebe150c9dd2da2e)(g);\n    const t = (0, $81492305c54c425a$export$1d03f990b5f20c77)(g);\n    $63a436eb07084564$export$cd95219fca51d6fa(t);\n    $63a436eb07084564$export$124e51299b9d9c89(t, g);\n    let e;\n    let f;\n    while(e = $63a436eb07084564$export$43036cc3e8211896(t)){\n        f = $63a436eb07084564$export$7df03ef35ad8e1f8(t, g, e);\n        $63a436eb07084564$export$f29e43b66b35aab7(t, g, e, f);\n    }\n};\nconst $63a436eb07084564$export$124e51299b9d9c89 = (t, g)=>{\n    let vs = (0, $10a62036c6f8d4c5$export$51b654aff22fc5a6)(t, t.getAllNodes(), 'post', false);\n    vs = vs.slice(0, (vs === null || vs === void 0 ? void 0 : vs.length) - 1);\n    vs.forEach((v)=>{\n        $63a436eb07084564$var$assignCutValue(t, g, v);\n    });\n};\nconst $63a436eb07084564$var$assignCutValue = (t, g, child)=>{\n    const childLab = t.getNode(child);\n    const parent = childLab.data.parent;\n    // FIXME: use undirected edge?\n    const edge = t.getRelatedEdges(child, 'both').find((e)=>e.target === parent || e.source === parent);\n    edge.data.cutvalue = $63a436eb07084564$export$36e827898034dd48(t, g, child);\n};\nconst $63a436eb07084564$export$36e827898034dd48 = (t, g, child)=>{\n    const childLab = t.getNode(child);\n    const parent = childLab.data.parent;\n    // True if the child is on the tail end of the edge in the directed graph\n    let childIsTail = true;\n    // The graph's view of the tree edge we're inspecting\n    let graphEdge = g.getRelatedEdges(child, 'out').find((e)=>e.target === parent);\n    // The accumulated cut value for the edge between this node and its parent\n    let cutValue = 0;\n    if (!graphEdge) {\n        childIsTail = false;\n        graphEdge = g.getRelatedEdges(parent, 'out').find((e)=>e.target === child);\n    }\n    cutValue = graphEdge.data.weight;\n    g.getRelatedEdges(child, 'both').forEach((e)=>{\n        const isOutEdge = e.source === child;\n        const other = isOutEdge ? e.target : e.source;\n        if (other !== parent) {\n            const pointsToHead = isOutEdge === childIsTail;\n            const otherWeight = e.data.weight;\n            cutValue += pointsToHead ? otherWeight : -otherWeight;\n            if ($63a436eb07084564$var$isTreeEdge(t, child, other)) {\n                // FIXME: use undirected edge?\n                const otherCutValue = t.getRelatedEdges(child, 'both').find((e)=>e.source === other || e.target === other).data.cutvalue;\n                cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n            }\n        }\n    });\n    return cutValue;\n};\nconst $63a436eb07084564$export$cd95219fca51d6fa = (tree, root = tree.getAllNodes()[0].id)=>{\n    $63a436eb07084564$var$dfsAssignLowLim(tree, {}, 1, root);\n};\nconst $63a436eb07084564$var$dfsAssignLowLim = (tree, visited, nextLim, v, parent)=>{\n    var _a;\n    const low = nextLim;\n    let useNextLim = nextLim;\n    const label = tree.getNode(v);\n    visited[v] = true;\n    (_a = tree.getNeighbors(v)) === null || _a === void 0 || _a.forEach((w)=>{\n        if (!visited[w.id]) useNextLim = $63a436eb07084564$var$dfsAssignLowLim(tree, visited, useNextLim, w.id, v);\n    });\n    label.data.low = low;\n    label.data.lim = useNextLim++;\n    if (parent) label.data.parent = parent;\n    else // TODO should be able to remove this when we incrementally update low lim\n    delete label.data.parent;\n    return useNextLim;\n};\nconst $63a436eb07084564$export$43036cc3e8211896 = (tree)=>{\n    return tree.getAllEdges().find((e)=>{\n        return e.data.cutvalue < 0;\n    });\n};\nconst $63a436eb07084564$export$7df03ef35ad8e1f8 = (t, g, edge)=>{\n    let v = edge.source;\n    let w = edge.target;\n    // For the rest of this function we assume that v is the tail and w is the\n    // head, so if we don't have this edge in the graph we should flip it to\n    // match the correct orientation.\n    if (!g.getRelatedEdges(v, 'out').find((e)=>e.target === w)) {\n        v = edge.target;\n        w = edge.source;\n    }\n    const vLabel = t.getNode(v);\n    const wLabel = t.getNode(w);\n    let tailLabel = vLabel;\n    let flip = false;\n    // If the root is in the tail of the edge then we need to flip the logic that\n    // checks for the head and tail nodes in the candidates function below.\n    if (vLabel.data.lim > wLabel.data.lim) {\n        tailLabel = wLabel;\n        flip = true;\n    }\n    const candidates = g.getAllEdges().filter((edge)=>{\n        return flip === $63a436eb07084564$var$isDescendant(t.getNode(edge.source), tailLabel) && flip !== $63a436eb07084564$var$isDescendant(t.getNode(edge.target), tailLabel);\n    });\n    return (0, $10a62036c6f8d4c5$export$8c826aa0fa59ac68)(candidates, (edge)=>{\n        return (0, $3799158e00fecef4$export$3748e8b0e9529e9c)(g, edge);\n    });\n};\nconst $63a436eb07084564$export$f29e43b66b35aab7 = (t, g, e, f)=>{\n    // FIXME: use undirected edge?\n    const existed = t.getRelatedEdges(e.source, 'both').find((edge)=>edge.source === e.target || edge.target === e.target);\n    if (existed) t.removeEdge(existed.id);\n    t.addEdge({\n        id: `e${Math.random()}`,\n        source: f.source,\n        target: f.target,\n        data: {}\n    });\n    $63a436eb07084564$export$cd95219fca51d6fa(t);\n    $63a436eb07084564$export$124e51299b9d9c89(t, g);\n    $63a436eb07084564$var$updateRanks(t, g);\n};\nconst $63a436eb07084564$var$updateRanks = (t, g)=>{\n    const root = t.getAllNodes().find((v)=>{\n        return !v.data.parent;\n    });\n    let vs = (0, $10a62036c6f8d4c5$export$51b654aff22fc5a6)(t, root, 'pre', false);\n    vs = vs.slice(1);\n    vs.forEach((v)=>{\n        const parent = t.getNode(v).data.parent;\n        let edge = g.getRelatedEdges(v, 'out').find((e)=>e.target === parent);\n        // let edge = g.edgeFromArgs(v, parent);\n        let flipped = false;\n        if (!edge && g.hasNode(parent)) {\n            // edge = g.edgeFromArgs(parent, v)!;\n            edge = g.getRelatedEdges(parent, 'out').find((e)=>e.target === v);\n            flipped = true;\n        }\n        g.getNode(v).data.rank = (g.hasNode(parent) && g.getNode(parent).data.rank || 0) + (flipped ? edge === null || edge === void 0 ? void 0 : edge.data.minlen : -(edge === null || edge === void 0 ? void 0 : edge.data.minlen));\n    });\n};\n/*\n * Returns true if the edge is in the tree.\n */ const $63a436eb07084564$var$isTreeEdge = (tree, u, v)=>{\n    // FIXME: use undirected edge?\n    return tree.getRelatedEdges(u, 'both').find((e)=>e.source === v || e.target === v);\n};\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */ const $63a436eb07084564$var$isDescendant = (vLabel, rootLabel)=>{\n    return rootLabel.data.low <= vLabel.data.lim && vLabel.data.lim <= rootLabel.data.lim;\n};\n\n\n\nconst $ada4a0ee058866d6$export$fbc8bcd33b574fbc = (g, ranker)=>{\n    switch(ranker){\n        case 'network-simplex':\n            $ada4a0ee058866d6$var$networkSimplexRanker(g);\n            break;\n        case 'tight-tree':\n            $ada4a0ee058866d6$var$tightTreeRanker(g);\n            break;\n        case 'longest-path':\n            $ada4a0ee058866d6$var$longestPathRanker(g);\n            break;\n        // default: networkSimplexRanker(g);\n        default:\n            $ada4a0ee058866d6$var$tightTreeRanker(g);\n    }\n};\n// A fast and simple ranker, but results are far from optimal.\nconst $ada4a0ee058866d6$var$longestPathRanker = (0, $3799158e00fecef4$export$cebe150c9dd2da2e);\nconst $ada4a0ee058866d6$var$tightTreeRanker = (g)=>{\n    (0, $3799158e00fecef4$export$837d78d6ca62db5a)(g);\n    (0, $81492305c54c425a$export$1db489075cbdd4)(g);\n};\nconst $ada4a0ee058866d6$var$networkSimplexRanker = (g)=>{\n    (0, $63a436eb07084564$export$fb928ed1fa9faa94)(g);\n};\n\n\n\nconst $605cbe9b1d3a694f$export$b3219800bda33a1f = (g, options)=>{\n    const { edgeLabelSpace: edgeLabelSpace, keepNodeOrder: keepNodeOrder, prevGraph: prevGraph, rankdir: rankdir, ranksep: ranksep } = options;\n    // 如果在原图基础上修改，继承原图的order结果\n    if (!keepNodeOrder && prevGraph) $605cbe9b1d3a694f$var$inheritOrder(g, prevGraph);\n    const layoutGraph = $605cbe9b1d3a694f$var$buildLayoutGraph(g);\n    // 控制是否为边的label留位置（这会影响是否在边中间添加dummy node）\n    if (!!edgeLabelSpace) options.ranksep = $605cbe9b1d3a694f$var$makeSpaceForEdgeLabels(layoutGraph, {\n        rankdir: rankdir,\n        ranksep: ranksep\n    });\n    let dimension;\n    // TODO: 暂时处理层级设置不正确时的异常报错，提示设置正确的层级\n    try {\n        dimension = $605cbe9b1d3a694f$var$runLayout(layoutGraph, options);\n    } catch (e) {\n        if (e.message === 'Not possible to find intersection inside of the rectangle') {\n            console.error(\"The following error may be caused by improper layer setting, please make sure your manual layer setting does not violate the graph's structure:\\n\", e);\n            return;\n        }\n        throw e;\n    }\n    $605cbe9b1d3a694f$var$updateInputGraph(g, layoutGraph);\n    return dimension;\n};\nconst $605cbe9b1d3a694f$var$runLayout = (g, options)=>{\n    const { acyclicer: acyclicer, ranker: ranker, rankdir: rankdir = 'tb', nodeOrder: nodeOrder, keepNodeOrder: keepNodeOrder, align: align, nodesep: nodesep = 50, edgesep: edgesep = 20, ranksep: ranksep = 50 } = options;\n    $605cbe9b1d3a694f$var$removeSelfEdges(g);\n    (0, $a9f4156122401558$export$889ea624f2cb2c57)(g, acyclicer);\n    const { nestingRoot: nestingRoot, nodeRankFactor: nodeRankFactor } = (0, $b171da702b6df92a$export$889ea624f2cb2c57)(g);\n    (0, $ada4a0ee058866d6$export$fbc8bcd33b574fbc)((0, $10a62036c6f8d4c5$export$556dc3686e4a2bd5)(g), ranker);\n    $605cbe9b1d3a694f$var$injectEdgeLabelProxies(g);\n    (0, $10a62036c6f8d4c5$export$45a0c732a9a44b01)(g, nodeRankFactor);\n    (0, $b171da702b6df92a$export$de863c629cb9919d)(g, nestingRoot);\n    (0, $10a62036c6f8d4c5$export$5747adf39cbd8007)(g);\n    $605cbe9b1d3a694f$var$assignRankMinMax(g);\n    $605cbe9b1d3a694f$var$removeEdgeLabelProxies(g);\n    const dummyChains = [];\n    (0, $f9e327107fa56550$export$889ea624f2cb2c57)(g, dummyChains);\n    (0, $9141d8e8c2a8fdc0$export$f30289267ab03372)(g, dummyChains);\n    (0, $7f8e6bb2288f5f8b$export$9a52541ba49edb51)(g);\n    if (keepNodeOrder) (0, $579587ea8e36cbfa$export$5eded36975f147bd)(g, nodeOrder);\n    (0, $a5dcf47086ff4819$export$aaaeab0fac9a3ccb)(g, keepNodeOrder);\n    $605cbe9b1d3a694f$var$insertSelfEdges(g);\n    (0, $0335f3b7cf097843$export$2c0e788bcc82013)(g, rankdir);\n    (0, $6e343856ddbefab2$export$5880b8b5730aff45)(g, {\n        align: align,\n        nodesep: nodesep,\n        edgesep: edgesep,\n        ranksep: ranksep\n    });\n    $605cbe9b1d3a694f$var$positionSelfEdges(g);\n    $605cbe9b1d3a694f$var$removeBorderNodes(g);\n    (0, $f9e327107fa56550$export$21f930c44940fd98)(g, dummyChains);\n    $605cbe9b1d3a694f$var$fixupEdgeLabelCoords(g);\n    (0, $0335f3b7cf097843$export$21f930c44940fd98)(g, rankdir);\n    const { width: width, height: height } = $605cbe9b1d3a694f$var$translateGraph(g);\n    $605cbe9b1d3a694f$var$assignNodeIntersects(g);\n    $605cbe9b1d3a694f$var$reversePointsForReversedEdges(g);\n    (0, $a9f4156122401558$export$21f930c44940fd98)(g);\n    return {\n        width: width,\n        height: height\n    };\n};\n/**\n * 继承上一个布局中的order，防止翻转\n * TODO: 暂时没有考虑涉及层级变动的布局，只保证原来布局层级和相对顺序不变\n */ const $605cbe9b1d3a694f$var$inheritOrder = (currG, prevG)=>{\n    currG.getAllNodes().forEach((n)=>{\n        const node = currG.getNode(n.id);\n        if (prevG.hasNode(n.id)) {\n            const prevNode = prevG.getNode(n.id);\n            node.data.fixorder = prevNode.data._order;\n            delete prevNode.data._order;\n        } else delete node.data.fixorder;\n    });\n};\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */ const $605cbe9b1d3a694f$var$updateInputGraph = (inputGraph, layoutGraph)=>{\n    inputGraph.getAllNodes().forEach((v)=>{\n        var _a;\n        const inputLabel = inputGraph.getNode(v.id);\n        if (inputLabel) {\n            const layoutLabel = layoutGraph.getNode(v.id);\n            inputLabel.data.x = layoutLabel.data.x;\n            inputLabel.data.y = layoutLabel.data.y;\n            inputLabel.data._order = layoutLabel.data.order;\n            inputLabel.data._rank = layoutLabel.data.rank;\n            if ((_a = layoutGraph.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n                inputLabel.data.width = layoutLabel.data.width;\n                inputLabel.data.height = layoutLabel.data.height;\n            }\n        }\n    });\n    inputGraph.getAllEdges().forEach((e)=>{\n        const inputLabel = inputGraph.getEdge(e.id);\n        const layoutLabel = layoutGraph.getEdge(e.id);\n        inputLabel.data.points = layoutLabel ? layoutLabel.data.points : [];\n        if (layoutLabel && layoutLabel.data.hasOwnProperty('x')) {\n            inputLabel.data.x = layoutLabel.data.x;\n            inputLabel.data.y = layoutLabel.data.y;\n        }\n    });\n// inputGraph.graph().width = layoutGraph.graph().width;\n// inputGraph.graph().height = layoutGraph.graph().height;\n};\nconst $605cbe9b1d3a694f$var$nodeNumAttrs = [\n    'width',\n    'height',\n    'layer',\n    'fixorder'\n]; // 需要传入layer, fixOrder作为参数参考\nconst $605cbe9b1d3a694f$var$nodeDefaults = {\n    width: 0,\n    height: 0\n};\nconst $605cbe9b1d3a694f$var$edgeNumAttrs = [\n    'minlen',\n    'weight',\n    'width',\n    'height',\n    'labeloffset'\n];\nconst $605cbe9b1d3a694f$var$edgeDefaults = {\n    minlen: 1,\n    weight: 1,\n    width: 0,\n    height: 0,\n    labeloffset: 10,\n    labelpos: 'r'\n};\nconst $605cbe9b1d3a694f$var$edgeAttrs = [\n    'labelpos'\n];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */ const $605cbe9b1d3a694f$var$buildLayoutGraph = (inputGraph)=>{\n    const g = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n        tree: []\n    });\n    inputGraph.getAllNodes().forEach((v)=>{\n        const node = $605cbe9b1d3a694f$var$canonicalize(inputGraph.getNode(v.id).data);\n        const defaultNode = Object.assign(Object.assign({}, $605cbe9b1d3a694f$var$nodeDefaults), node);\n        const defaultAttrs = $605cbe9b1d3a694f$var$selectNumberAttrs(defaultNode, $605cbe9b1d3a694f$var$nodeNumAttrs);\n        if (!g.hasNode(v.id)) g.addNode({\n            id: v.id,\n            data: Object.assign({}, defaultAttrs)\n        });\n        const parent = inputGraph.hasTreeStructure('combo') ? inputGraph.getParent(v.id, 'combo') : inputGraph.getParent(v.id);\n        if (!(0, $49c7da261e9a80be$export$2e2bcd8739ae039)(parent)) {\n            if (!g.hasNode(parent.id)) g.addNode(Object.assign({}, parent));\n            g.setParent(v.id, parent.id);\n        }\n    });\n    inputGraph.getAllEdges().forEach((e)=>{\n        const edge = $605cbe9b1d3a694f$var$canonicalize(inputGraph.getEdge(e.id).data);\n        const pickedProperties = {};\n        $605cbe9b1d3a694f$var$edgeAttrs === null || $605cbe9b1d3a694f$var$edgeAttrs === void 0 || $605cbe9b1d3a694f$var$edgeAttrs.forEach((key)=>{\n            if (edge[key] !== undefined) pickedProperties[key] = edge[key];\n        });\n        g.addEdge({\n            id: e.id,\n            source: e.source,\n            target: e.target,\n            data: Object.assign({}, $605cbe9b1d3a694f$var$edgeDefaults, $605cbe9b1d3a694f$var$selectNumberAttrs(edge, $605cbe9b1d3a694f$var$edgeNumAttrs), pickedProperties)\n        });\n    });\n    return g;\n};\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */ const $605cbe9b1d3a694f$var$makeSpaceForEdgeLabels = (g, options)=>{\n    const { ranksep: ranksep = 0, rankdir: rankdir } = options;\n    g.getAllNodes().forEach((node)=>{\n        if (!isNaN(node.data.layer)) {\n            if (!node.data.layer) node.data.layer = 0;\n        }\n    });\n    g.getAllEdges().forEach((edge)=>{\n        var _a;\n        edge.data.minlen *= 2;\n        if (((_a = edge.data.labelpos) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'c') {\n            if (rankdir === 'TB' || rankdir === 'BT') edge.data.width += edge.data.labeloffset;\n            else edge.data.height += edge.data.labeloffset;\n        }\n    });\n    return ranksep / 2;\n};\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */ const $605cbe9b1d3a694f$var$injectEdgeLabelProxies = (g)=>{\n    g.getAllEdges().forEach((e)=>{\n        if (e.data.width && e.data.height) {\n            const v = g.getNode(e.source);\n            const w = g.getNode(e.target);\n            const label = {\n                e: e,\n                rank: (w.data.rank - v.data.rank) / 2 + v.data.rank\n            };\n            (0, $10a62036c6f8d4c5$export$ecf34c2268abf7a0)(g, 'edge-proxy', label, '_ep');\n        }\n    });\n};\nconst $605cbe9b1d3a694f$var$assignRankMinMax = (g)=>{\n    let maxRank = 0;\n    g.getAllNodes().forEach((node)=>{\n        var _a, _b;\n        if (node.data.borderTop) {\n            node.data.minRank = (_a = g.getNode(node.data.borderTop)) === null || _a === void 0 ? void 0 : _a.data.rank;\n            node.data.maxRank = (_b = g.getNode(node.data.borderBottom)) === null || _b === void 0 ? void 0 : _b.data.rank;\n            maxRank = Math.max(maxRank, node.data.maxRank || -Infinity);\n        }\n    });\n    return maxRank;\n};\nconst $605cbe9b1d3a694f$var$removeEdgeLabelProxies = (g)=>{\n    g.getAllNodes().forEach((node)=>{\n        if (node.data.dummy === 'edge-proxy') {\n            g.getEdge(node.data.e.id).data.labelRank = node.data.rank;\n            g.removeNode(node.id);\n        }\n    });\n};\nconst $605cbe9b1d3a694f$var$translateGraph = (g, options)=>{\n    let minX;\n    let maxX = 0;\n    let minY;\n    let maxY = 0;\n    const { marginx: marginX = 0, marginy: marginY = 0 } = options || {};\n    const getExtremes = (attrs)=>{\n        if (!attrs.data) return;\n        const x = attrs.data.x;\n        const y = attrs.data.y;\n        const w = attrs.data.width;\n        const h = attrs.data.height;\n        if (!isNaN(x) && !isNaN(w)) {\n            if (minX === undefined) minX = x - w / 2;\n            minX = Math.min(minX, x - w / 2);\n            maxX = Math.max(maxX, x + w / 2);\n        }\n        if (!isNaN(y) && !isNaN(h)) {\n            if (minY === undefined) minY = y - h / 2;\n            minY = Math.min(minY, y - h / 2);\n            maxY = Math.max(maxY, y + h / 2);\n        }\n    };\n    g.getAllNodes().forEach((v)=>{\n        getExtremes(v);\n    });\n    g.getAllEdges().forEach((e)=>{\n        if (e === null || e === void 0 ? void 0 : e.data.hasOwnProperty('x')) getExtremes(e);\n    });\n    minX -= marginX;\n    minY -= marginY;\n    g.getAllNodes().forEach((node)=>{\n        node.data.x -= minX;\n        node.data.y -= minY;\n    });\n    g.getAllEdges().forEach((edge)=>{\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 || _a.forEach((p)=>{\n            p.x -= minX;\n            p.y -= minY;\n        });\n        if (edge.data.hasOwnProperty('x')) edge.data.x -= minX;\n        if (edge.data.hasOwnProperty('y')) edge.data.y -= minY;\n    });\n    return {\n        width: maxX - minX + marginX,\n        height: maxY - minY + marginY\n    };\n};\nconst $605cbe9b1d3a694f$var$assignNodeIntersects = (g)=>{\n    g.getAllEdges().forEach((e)=>{\n        const nodeV = g.getNode(e.source);\n        const nodeW = g.getNode(e.target);\n        let p1;\n        let p2;\n        if (!e.data.points) {\n            e.data.points = [];\n            p1 = {\n                x: nodeW.data.x,\n                y: nodeW.data.y\n            };\n            p2 = {\n                x: nodeV.data.x,\n                y: nodeV.data.y\n            };\n        } else {\n            p1 = e.data.points[0];\n            p2 = e.data.points[e.data.points.length - 1];\n        }\n        e.data.points.unshift((0, $10a62036c6f8d4c5$export$4a227323f5de0b79)(nodeV.data, p1));\n        e.data.points.push((0, $10a62036c6f8d4c5$export$4a227323f5de0b79)(nodeW.data, p2));\n    });\n};\nconst $605cbe9b1d3a694f$var$fixupEdgeLabelCoords = (g)=>{\n    g.getAllEdges().forEach((edge)=>{\n        if (edge.data.hasOwnProperty('x')) {\n            if (edge.data.labelpos === 'l' || edge.data.labelpos === 'r') edge.data.width -= edge.data.labeloffset;\n            switch(edge.data.labelpos){\n                case 'l':\n                    edge.data.x -= edge.data.width / 2 + edge.data.labeloffset;\n                    break;\n                case 'r':\n                    edge.data.x += edge.data.width / 2 + edge.data.labeloffset;\n                    break;\n            }\n        }\n    });\n};\nconst $605cbe9b1d3a694f$var$reversePointsForReversedEdges = (g)=>{\n    g.getAllEdges().forEach((edge)=>{\n        var _a;\n        if (edge.data.reversed) (_a = edge.data.points) === null || _a === void 0 || _a.reverse();\n    });\n};\nconst $605cbe9b1d3a694f$var$removeBorderNodes = (g)=>{\n    g.getAllNodes().forEach((v)=>{\n        var _a, _b, _c;\n        if ((_a = g.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n            const node = g.getNode(v.id);\n            const t = g.getNode(node.data.borderTop);\n            const b = g.getNode(node.data.borderBottom);\n            const l = g.getNode(node.data.borderLeft[((_b = node.data.borderLeft) === null || _b === void 0 ? void 0 : _b.length) - 1]);\n            const r = g.getNode(node.data.borderRight[((_c = node.data.borderRight) === null || _c === void 0 ? void 0 : _c.length) - 1]);\n            node.data.width = Math.abs((r === null || r === void 0 ? void 0 : r.data.x) - (l === null || l === void 0 ? void 0 : l.data.x)) || 10;\n            node.data.height = Math.abs((b === null || b === void 0 ? void 0 : b.data.y) - (t === null || t === void 0 ? void 0 : t.data.y)) || 10;\n            node.data.x = ((l === null || l === void 0 ? void 0 : l.data.x) || 0) + node.data.width / 2;\n            node.data.y = ((t === null || t === void 0 ? void 0 : t.data.y) || 0) + node.data.height / 2;\n        }\n    });\n    g.getAllNodes().forEach((n)=>{\n        if (n.data.dummy === 'border') g.removeNode(n.id);\n    });\n};\nconst $605cbe9b1d3a694f$var$removeSelfEdges = (g)=>{\n    g.getAllEdges().forEach((e)=>{\n        if (e.source === e.target) {\n            const node = g.getNode(e.source);\n            if (!node.data.selfEdges) node.data.selfEdges = [];\n            node.data.selfEdges.push(e);\n            g.removeEdge(e.id);\n        }\n    });\n};\nconst $605cbe9b1d3a694f$var$insertSelfEdges = (g)=>{\n    const layers = (0, $10a62036c6f8d4c5$export$aca89c9d4c6bb8ae)(g);\n    layers === null || layers === void 0 || layers.forEach((layer)=>{\n        let orderShift = 0;\n        layer === null || layer === void 0 || layer.forEach((v, i)=>{\n            var _a;\n            const node = g.getNode(v);\n            node.data.order = i + orderShift;\n            (_a = node.data.selfEdges) === null || _a === void 0 || _a.forEach((selfEdge)=>{\n                (0, $10a62036c6f8d4c5$export$ecf34c2268abf7a0)(g, 'selfedge', {\n                    width: selfEdge.data.width,\n                    height: selfEdge.data.height,\n                    rank: node.data.rank,\n                    order: i + ++orderShift,\n                    e: selfEdge\n                }, '_se');\n            });\n            delete node.data.selfEdges;\n        });\n    });\n};\nconst $605cbe9b1d3a694f$var$positionSelfEdges = (g)=>{\n    g.getAllNodes().forEach((v)=>{\n        const node = g.getNode(v.id);\n        if (node.data.dummy === 'selfedge') {\n            const selfNode = g.getNode(node.data.e.source);\n            const x = selfNode.data.x + selfNode.data.width / 2;\n            const y = selfNode.data.y;\n            const dx = node.data.x - x;\n            const dy = selfNode.data.height / 2;\n            if (g.hasEdge(node.data.e.id)) g.updateEdgeData(node.data.e.id, node.data.e.data);\n            else g.addEdge({\n                id: node.data.e.id,\n                source: node.data.e.source,\n                target: node.data.e.target,\n                data: node.data.e.data\n            });\n            g.removeNode(v.id);\n            node.data.e.data.points = [\n                {\n                    x: x + 2 * dx / 3,\n                    y: y - dy\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y - dy\n                },\n                {\n                    y: y,\n                    x: x + dx\n                },\n                {\n                    x: x + 5 * dx / 6,\n                    y: y + dy\n                },\n                {\n                    x: x + 2 * dx / 3,\n                    y: y + dy\n                }\n            ];\n            node.data.e.data.x = node.data.x;\n            node.data.e.data.y = node.data.y;\n        }\n    });\n};\nconst $605cbe9b1d3a694f$var$selectNumberAttrs = (obj, attrs)=>{\n    const pickedProperties = {};\n    attrs === null || attrs === void 0 || attrs.forEach((key)=>{\n        if (obj[key] === undefined) return;\n        pickedProperties[key] = +obj[key];\n    });\n    return pickedProperties;\n};\nconst $605cbe9b1d3a694f$var$canonicalize = (attrs = {})=>{\n    const newAttrs = {};\n    Object.keys(attrs).forEach((k)=>{\n        newAttrs[k.toLowerCase()] = attrs[k];\n    });\n    return newAttrs;\n};\n\n\n\nconst $9db318b25eeb9fa0$export$9cd59f9826255e47 = (target)=>{\n    if (target === null) return target;\n    if (target instanceof Date) return new Date(target.getTime());\n    if (target instanceof Array) {\n        const cp = [];\n        target.forEach((v)=>{\n            cp.push(v);\n        });\n        return cp.map((n)=>$9db318b25eeb9fa0$export$9cd59f9826255e47(n));\n    }\n    if (typeof target === 'object') {\n        const cp = {};\n        Object.keys(target).forEach((k)=>{\n            cp[k] = $9db318b25eeb9fa0$export$9cd59f9826255e47(target[k]);\n        });\n        return cp;\n    }\n    return target;\n};\nconst $9db318b25eeb9fa0$export$8630667bbca04569 = (target, initRange)=>{\n    const cloned = $9db318b25eeb9fa0$export$9cd59f9826255e47(target);\n    cloned.data = cloned.data || {};\n    if (initRange) {\n        if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(cloned.data.x)) cloned.data.x = Math.random() * initRange[0];\n        if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(cloned.data.y)) cloned.data.y = Math.random() * initRange[1];\n    }\n    return cloned;\n};\n\n/**\n * 判断值是否为函数\n * @return 是否为函数\n */ function $60dead5513d90bd9$export$2e2bcd8739ae039(value) {\n    return typeof value === 'function';\n}\n\nvar $93c5c1f45dc66437$export$2e2bcd8739ae039 = function(value) {\n    /**\n     * isObject({}) => true\n     * isObject([1, 2, 3]) => true\n     * isObject(Function) => true\n     * isObject(null) => false\n     */ var type = typeof value;\n    return value !== null && type === 'object' || type === 'function';\n};\n\n\n\nfunction $42c5e25589525d06$export$880c59a0ae1158a1(size) {\n    if (!size) return [\n        0,\n        0,\n        0\n    ];\n    if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(size)) return [\n        size,\n        size,\n        size\n    ];\n    else if (size.length === 0) return [\n        0,\n        0,\n        0\n    ];\n    const [x, y = x, z = x] = size;\n    return [\n        x,\n        y,\n        z\n    ];\n}\n\n\nfunction $0a789d93f195d394$export$54ea943624daf252(defaultValue, value) {\n    let resultFunc;\n    if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(value)) resultFunc = value;\n    else if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(value)) // value is number\n    resultFunc = ()=>value;\n    else // value is not number and function\n    resultFunc = ()=>defaultValue;\n    return resultFunc;\n}\nfunction $0a789d93f195d394$export$dbd46949b4b9980d(defaultValue, value, resultIsNumber = true) {\n    if (!value && value !== 0) return (d)=>{\n        const { size: size } = d.data || {};\n        if (size) {\n            if (Array.isArray(size)) return resultIsNumber ? Math.max(...size) || defaultValue : size;\n            if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(size) && size.width && size.height) return resultIsNumber ? Math.max(size.width, size.height) || defaultValue : [\n                size.width,\n                size.height\n            ];\n            return size;\n        }\n        return defaultValue;\n    };\n    if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(value)) return value;\n    if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(value)) return ()=>value;\n    if (Array.isArray(value)) return ()=>{\n        if (resultIsNumber) return Math.max(...value) || defaultValue;\n        return value;\n    };\n    if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(value) && value.width && value.height) return ()=>{\n        if (resultIsNumber) return Math.max(value.width, value.height) || defaultValue;\n        return [\n            value.width,\n            value.height\n        ];\n    };\n    return ()=>defaultValue;\n}\nconst $0a789d93f195d394$export$3a7a80b0f3334abe = (nodeSize, nodeSpacing, defaultNodeSize = 10)=>{\n    let nodeSizeFunc;\n    const nodeSpacingFunc = typeof nodeSpacing === 'function' ? nodeSpacing : ()=>nodeSpacing || 0;\n    if (!nodeSize) nodeSizeFunc = (d)=>{\n        var _a, _b, _c;\n        if ((_a = d.data) === null || _a === void 0 ? void 0 : _a.bboxSize) return (_b = d.data) === null || _b === void 0 ? void 0 : _b.bboxSize;\n        if ((_c = d.data) === null || _c === void 0 ? void 0 : _c.size) {\n            const dataSize = d.data.size;\n            if (Array.isArray(dataSize)) return dataSize;\n            if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(dataSize)) return [\n                dataSize.width,\n                dataSize.height\n            ];\n            return dataSize;\n        }\n        return defaultNodeSize;\n    };\n    else if (Array.isArray(nodeSize)) nodeSizeFunc = (d)=>nodeSize;\n    else if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(nodeSize)) nodeSizeFunc = nodeSize;\n    else nodeSizeFunc = (d)=>nodeSize;\n    const func = (d)=>{\n        const nodeSize = nodeSizeFunc(d);\n        const nodeSpacing = nodeSpacingFunc(d);\n        return Math.max(...(0, $42c5e25589525d06$export$880c59a0ae1158a1)(nodeSize)) + nodeSpacing;\n    };\n    return func;\n};\n\n\n\nconst $df440d22cac5c475$var$DEFAULTS_LAYOUT_OPTIONS = {\n    rankdir: 'TB',\n    nodesep: 50,\n    ranksep: 50,\n    edgeLabelSpace: true,\n    ranker: 'tight-tree',\n    controlPoints: false,\n    radial: false,\n    focusNode: null\n};\nclass $df440d22cac5c475$export$37faa137668b7035 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'antv-dagre';\n        this.options = Object.assign(Object.assign({}, $df440d22cac5c475$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericDagreLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericDagreLayout(true, graph, options);\n        });\n    }\n    genericDagreLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { nodeSize: nodeSize, align: align, rankdir: rankdir = 'TB', ranksep: ranksep, nodesep: nodesep, ranksepFunc: ranksepFunc, nodesepFunc: nodesepFunc, edgeLabelSpace: edgeLabelSpace, ranker: ranker, nodeOrder: nodeOrder, begin: begin, controlPoints: controlPoints, radial: radial, sortByCombo: sortByCombo, preset: // focusNode,\n            preset } = mergedOptions;\n            const g = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                tree: []\n            });\n            const ranksepfunc = (0, $0a789d93f195d394$export$54ea943624daf252)(ranksep || 50, ranksepFunc);\n            const nodesepfunc = (0, $0a789d93f195d394$export$54ea943624daf252)(nodesep || 50, nodesepFunc);\n            let horisep = nodesepfunc;\n            let vertisep = ranksepfunc;\n            if (rankdir === 'LR' || rankdir === 'RL') {\n                horisep = ranksepfunc;\n                vertisep = nodesepfunc;\n            }\n            const nodeSizeFunc = (0, $0a789d93f195d394$export$dbd46949b4b9980d)(10, nodeSize, false);\n            // copy graph to g\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            nodes.forEach((node)=>{\n                const size = (0, $42c5e25589525d06$export$880c59a0ae1158a1)(nodeSizeFunc(node));\n                const verti = vertisep(node);\n                const hori = horisep(node);\n                const width = size[0] + 2 * hori;\n                const height = size[1] + 2 * verti;\n                const layer = node.data.layer;\n                if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(layer)) // 如果有layer属性，加入到node的label中\n                g.addNode({\n                    id: node.id,\n                    data: {\n                        width: width,\n                        height: height,\n                        layer: layer\n                    }\n                });\n                else g.addNode({\n                    id: node.id,\n                    data: {\n                        width: width,\n                        height: height\n                    }\n                });\n            });\n            if (sortByCombo) {\n                g.attachTreeStructure('combo');\n                nodes.forEach((node)=>{\n                    const { parentId: parentId } = node.data;\n                    if (parentId === undefined) return;\n                    if (g.hasNode(parentId)) g.setParent(node.id, parentId, 'combo');\n                });\n            }\n            edges.forEach((edge)=>{\n                // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n                g.addEdge({\n                    id: edge.id,\n                    source: edge.source,\n                    target: edge.target,\n                    data: {\n                        weight: edge.data.weight || 1\n                    }\n                });\n            });\n            let prevGraph = undefined;\n            if (preset === null || preset === void 0 ? void 0 : preset.length) prevGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                nodes: preset\n            });\n            (0, $605cbe9b1d3a694f$export$b3219800bda33a1f)(g, {\n                prevGraph: prevGraph,\n                edgeLabelSpace: edgeLabelSpace,\n                keepNodeOrder: !!nodeOrder,\n                nodeOrder: nodeOrder || [],\n                acyclicer: 'greedy',\n                ranker: ranker,\n                rankdir: rankdir,\n                nodesep: nodesep,\n                align: align\n            });\n            const layoutTopLeft = [\n                0,\n                0\n            ];\n            if (begin) {\n                let minX = Infinity;\n                let minY = Infinity;\n                g.getAllNodes().forEach((node)=>{\n                    if (minX > node.data.x) minX = node.data.x;\n                    if (minY > node.data.y) minY = node.data.y;\n                });\n                g.getAllEdges().forEach((edge)=>{\n                    var _a;\n                    (_a = edge.data.points) === null || _a === void 0 || _a.forEach((point)=>{\n                        if (minX > point.x) minX = point.x;\n                        if (minY > point.y) minY = point.y;\n                    });\n                });\n                layoutTopLeft[0] = begin[0] - minX;\n                layoutTopLeft[1] = begin[1] - minY;\n            }\n            const isHorizontal = rankdir === 'LR' || rankdir === 'RL';\n            if (radial) ;\n            else {\n                const layerCoords = new Set();\n                const isInvert = rankdir === 'BT' || rankdir === 'RL';\n                const layerCoordSort = isInvert ? (a, b)=>b - a : (a, b)=>a - b;\n                g.getAllNodes().forEach((node)=>{\n                    // let ndata: any = this.nodeMap[node];\n                    // if (!ndata) {\n                    //   ndata = combos?.find((it) => it.id === node);\n                    // }\n                    // if (!ndata) return;\n                    // ndata.x = node.data.x! + dBegin[0];\n                    // ndata.y = node.data.y! + dBegin[1];\n                    // //  pass layer order to data for increment layout use\n                    // ndata._order = node.data._order;\n                    // layerCoords.add(isHorizontal ? ndata.x : ndata.y);\n                    node.data.x = node.data.x + layoutTopLeft[0];\n                    node.data.y = node.data.y + layoutTopLeft[1];\n                    layerCoords.add(isHorizontal ? node.data.x : node.data.y);\n                });\n                const layerCoordsArr = Array.from(layerCoords).sort(layerCoordSort);\n                // pre-define the isHorizontal related functions to avoid redundant calc in interations\n                const isDifferentLayer = isHorizontal ? (point1, point2)=>point1.x !== point2.x : (point1, point2)=>point1.y !== point2.y;\n                const filterControlPointsOutOfBoundary = isHorizontal ? (ps, point1, point2)=>{\n                    const max = Math.max(point1.y, point2.y);\n                    const min = Math.min(point1.y, point2.y);\n                    return ps.filter((point)=>point.y <= max && point.y >= min);\n                } : (ps, point1, point2)=>{\n                    const max = Math.max(point1.x, point2.x);\n                    const min = Math.min(point1.x, point2.x);\n                    return ps.filter((point)=>point.x <= max && point.x >= min);\n                };\n                g.getAllEdges().forEach((edge, i)=>{\n                    var _a;\n                    // const i = edges.findIndex((it) => {\n                    //   return it.source === edge.source && it.target === edge.target;\n                    // });\n                    // if (i <= -1) return;\n                    if (edgeLabelSpace && controlPoints && edge.data.type !== 'loop') edge.data.controlPoints = $df440d22cac5c475$var$getControlPoints((_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.map(({ x: x, y: y })=>({\n                            x: x + layoutTopLeft[0],\n                            y: y + layoutTopLeft[1]\n                        })), g.getNode(edge.source), g.getNode(edge.target), layerCoordsArr, isHorizontal, isDifferentLayer, filterControlPointsOutOfBoundary);\n                });\n            }\n            // calculated nodes as temporary result\n            let layoutNodes = [];\n            // layout according to the original order in the data.nodes\n            layoutNodes = g.getAllNodes().map((node)=>(0, $9db318b25eeb9fa0$export$8630667bbca04569)(node));\n            const layoutEdges = g.getAllEdges();\n            if (assign) {\n                layoutNodes.forEach((node)=>{\n                    graph.mergeNodeData(node.id, {\n                        x: node.data.x,\n                        y: node.data.y\n                    });\n                });\n                layoutEdges.forEach((edge)=>{\n                    graph.mergeEdgeData(edge.id, {\n                        controlPoints: edge.data.controlPoints\n                    });\n                });\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges: layoutEdges\n            };\n            return result;\n        });\n    }\n}\n/**\n * Format controlPoints to avoid polylines crossing nodes\n * @param points\n * @param sourceNode\n * @param targetNode\n * @param layerCoordsArr\n * @param isHorizontal\n * @returns\n */ const $df440d22cac5c475$var$getControlPoints = (points, sourceNode, targetNode, layerCoordsArr, isHorizontal, isDifferentLayer, filterControlPointsOutOfBoundary)=>{\n    let controlPoints = (points === null || points === void 0 ? void 0 : points.slice(1, points.length - 1)) || []; // 去掉头尾\n    // 酌情增加控制点，使折线不穿过跨层的节点\n    if (sourceNode && targetNode) {\n        let { x: sourceX, y: sourceY } = sourceNode.data;\n        let { x: targetX, y: targetY } = targetNode.data;\n        if (isHorizontal) {\n            sourceX = sourceNode.data.y;\n            sourceY = sourceNode.data.x;\n            targetX = targetNode.data.y;\n            targetY = targetNode.data.x;\n        }\n        // 为跨层级的边增加第一个控制点。忽略垂直的/横向的边。\n        // 新控制点 = {\n        //   x: 终点x,\n        //   y: (起点y + 下一层y) / 2,   #下一层y可能不等于终点y\n        // }\n        if (targetY !== sourceY && sourceX !== targetX) {\n            const sourceLayer = layerCoordsArr.indexOf(sourceY);\n            const sourceNextLayerCoord = layerCoordsArr[sourceLayer + 1];\n            if (sourceNextLayerCoord) {\n                const firstControlPoint = controlPoints[0];\n                const insertStartControlPoint = isHorizontal ? {\n                    x: (sourceY + sourceNextLayerCoord) / 2,\n                    y: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.y) || targetX\n                } : {\n                    x: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.x) || targetX,\n                    y: (sourceY + sourceNextLayerCoord) / 2\n                };\n                // 当新增的控制点不存在（!=当前第一个控制点）时添加\n                if (!firstControlPoint || isDifferentLayer(firstControlPoint, insertStartControlPoint)) controlPoints.unshift(insertStartControlPoint);\n            }\n            const targetLayer = layerCoordsArr.indexOf(targetY);\n            const layerDiff = Math.abs(targetLayer - sourceLayer);\n            if (layerDiff === 1) {\n                controlPoints = filterControlPointsOutOfBoundary(controlPoints, sourceNode.data, targetNode.data);\n                // one controlPoint at least\n                if (!controlPoints.length) controlPoints.push(isHorizontal ? {\n                    x: (sourceY + targetY) / 2,\n                    y: sourceX\n                } : {\n                    x: sourceX,\n                    y: (sourceY + targetY) / 2\n                });\n            } else if (layerDiff > 1) {\n                const targetLastLayerCoord = layerCoordsArr[targetLayer - 1];\n                if (targetLastLayerCoord) {\n                    const lastControlPoints = controlPoints[controlPoints.length - 1];\n                    const insertEndControlPoint = isHorizontal ? {\n                        x: (targetY + targetLastLayerCoord) / 2,\n                        y: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.y) || targetX\n                    } : {\n                        x: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.x) || sourceX,\n                        y: (targetY + targetLastLayerCoord) / 2\n                    };\n                    // 当新增的控制点不存在（!=当前最后一个控制点）时添加\n                    if (!lastControlPoints || isDifferentLayer(lastControlPoints, insertEndControlPoint)) controlPoints.push(insertEndControlPoint);\n                }\n            }\n        }\n    }\n    return controlPoints;\n};\n\n\n\n\n/**\n * Assign or only return the result for the graph who has no nodes or only one node.\n * @param graph original graph\n * @param assign whether assign result to original graph\n * @param center the layout center\n * @returns\n */ const $dd5b35eb4e609074$export$3f5334baeb17ae93 = (graph, assign, center)=>{\n    const nodes = graph.getAllNodes();\n    const edges = graph.getAllEdges();\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n        const result = {\n            nodes: [],\n            edges: edges\n        };\n        return result;\n    }\n    if (nodes.length === 1) {\n        if (assign) graph.mergeNodeData(nodes[0].id, {\n            x: center[0],\n            y: center[1]\n        });\n        const result = {\n            nodes: [\n                Object.assign(Object.assign({}, nodes[0]), {\n                    data: Object.assign(Object.assign({}, nodes[0].data), {\n                        x: center[0],\n                        y: center[1]\n                    })\n                })\n            ],\n            edges: edges\n        };\n        return result;\n    }\n};\n\n\nconst $aa34fcd309b753d3$var$DEFAULTS_LAYOUT_OPTIONS = {\n    radius: null,\n    startRadius: null,\n    endRadius: null,\n    startAngle: 0,\n    endAngle: 2 * Math.PI,\n    clockwise: true,\n    divisions: 1,\n    ordering: null,\n    angleRatio: 1\n};\nclass $aa34fcd309b753d3$export$59c1a03c0095767a {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'circular';\n        this.options = Object.assign(Object.assign({}, $aa34fcd309b753d3$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericCircularLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericCircularLayout(true, graph, options);\n        });\n    }\n    genericCircularLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { width: width, height: height, center: center, divisions: divisions, startAngle: startAngle = 0, endAngle: endAngle = 2 * Math.PI, angleRatio: angleRatio, ordering: ordering, clockwise: clockwise, nodeSpacing: paramNodeSpacing, nodeSize: paramNodeSize } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            // Calculate center according to `window` if not provided.\n            const [calculatedWidth, calculatedHeight, calculatedCenter] = $aa34fcd309b753d3$var$calculateCenter(width, height, center);\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            if (!n || n === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, calculatedCenter);\n            const angleStep = (endAngle - startAngle) / n;\n            let { radius: radius, startRadius: startRadius, endRadius: endRadius } = mergedOptions;\n            if (paramNodeSpacing) {\n                const nodeSpacing = (0, $0a789d93f195d394$export$54ea943624daf252)(10, paramNodeSpacing);\n                const nodeSize = (0, $0a789d93f195d394$export$dbd46949b4b9980d)(10, paramNodeSize);\n                let maxNodeSize = -Infinity;\n                nodes.forEach((node)=>{\n                    const nSize = nodeSize(node);\n                    if (maxNodeSize < nSize) maxNodeSize = nSize;\n                });\n                let perimeter = 0;\n                nodes.forEach((node, i)=>{\n                    if (i === 0) perimeter += maxNodeSize || 10;\n                    else perimeter += (nodeSpacing(node) || 0) + (maxNodeSize || 10);\n                });\n                radius = perimeter / (2 * Math.PI);\n            } else if (!radius && !startRadius && !endRadius) radius = Math.min(calculatedHeight, calculatedWidth) / 2;\n            else if (!startRadius && endRadius) startRadius = endRadius;\n            else if (startRadius && !endRadius) endRadius = startRadius;\n            const astep = angleStep * angleRatio;\n            // calculated nodes as temporary result\n            let layoutNodes = [];\n            if (ordering === 'topology') // layout according to the topology\n            layoutNodes = $aa34fcd309b753d3$var$topologyOrdering(graph, nodes);\n            else if (ordering === 'topology-directed') // layout according to the topology\n            layoutNodes = $aa34fcd309b753d3$var$topologyOrdering(graph, nodes, true);\n            else if (ordering === 'degree') // layout according to the descent order of degrees\n            layoutNodes = $aa34fcd309b753d3$var$degreeOrdering(graph, nodes);\n            else // layout according to the original order in the data.nodes\n            layoutNodes = nodes.map((node)=>(0, $9db318b25eeb9fa0$export$8630667bbca04569)(node));\n            const divN = Math.ceil(n / divisions); // node number in each division\n            for(let i = 0; i < n; ++i){\n                let r = radius;\n                if (!r && startRadius !== null && endRadius !== null) r = startRadius + i * (endRadius - startRadius) / (n - 1);\n                if (!r) r = 10 + i * 100 / (n - 1);\n                let angle = startAngle + i % divN * astep + 2 * Math.PI / divisions * Math.floor(i / divN);\n                if (!clockwise) angle = endAngle - i % divN * astep - 2 * Math.PI / divisions * Math.floor(i / divN);\n                layoutNodes[i].data.x = calculatedCenter[0] + Math.cos(angle) * r;\n                layoutNodes[i].data.y = calculatedCenter[1] + Math.sin(angle) * r;\n            }\n            if (assign) layoutNodes.forEach((node)=>{\n                graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                });\n            });\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            return result;\n        });\n    }\n}\n/**\n * order the nodes acoording to the graph topology\n * @param graph\n * @param nodes\n * @param directed\n * @returns\n */ const $aa34fcd309b753d3$var$topologyOrdering = (graph, nodes, directed = false)=>{\n    const orderedCNodes = [\n        (0, $9db318b25eeb9fa0$export$8630667bbca04569)(nodes[0])\n    ];\n    const pickFlags = {};\n    const n = nodes.length;\n    pickFlags[nodes[0].id] = true;\n    // write children into cnodes\n    let k = 0;\n    nodes.forEach((node, i)=>{\n        if (i !== 0) {\n            if ((i === n - 1 || graph.getDegree(node.id, 'both') !== graph.getDegree(nodes[i + 1].id, 'both') || graph.areNeighbors(orderedCNodes[k].id, node.id)) && !pickFlags[node.id]) {\n                orderedCNodes.push((0, $9db318b25eeb9fa0$export$8630667bbca04569)(node));\n                pickFlags[node.id] = true;\n                k++;\n            } else {\n                const children = directed ? graph.getSuccessors(orderedCNodes[k].id) : graph.getNeighbors(orderedCNodes[k].id);\n                let foundChild = false;\n                for(let j = 0; j < children.length; j++){\n                    const child = children[j];\n                    if (graph.getDegree(child.id) === graph.getDegree(node.id) && !pickFlags[child.id]) {\n                        orderedCNodes.push((0, $9db318b25eeb9fa0$export$8630667bbca04569)(child));\n                        pickFlags[child.id] = true;\n                        foundChild = true;\n                        break;\n                    }\n                }\n                let ii = 0;\n                while(!foundChild){\n                    if (!pickFlags[nodes[ii].id]) {\n                        orderedCNodes.push((0, $9db318b25eeb9fa0$export$8630667bbca04569)(nodes[ii]));\n                        pickFlags[nodes[ii].id] = true;\n                        foundChild = true;\n                    }\n                    ii++;\n                    if (ii === n) break;\n                }\n            }\n        }\n    });\n    return orderedCNodes;\n};\n/**\n * order the nodes according to their degree\n * @param graph\n * @param nodes\n * @returns\n */ function $aa34fcd309b753d3$var$degreeOrdering(graph, nodes) {\n    const orderedNodes = [];\n    nodes.forEach((node, i)=>{\n        orderedNodes.push((0, $9db318b25eeb9fa0$export$8630667bbca04569)(node));\n    });\n    orderedNodes.sort((nodeA, nodeB)=>graph.getDegree(nodeA.id, 'both') - graph.getDegree(nodeB.id, 'both'));\n    return orderedNodes;\n}\n/**\n * format the invalide width and height, and get the center position\n * @param width\n * @param height\n * @param center\n * @returns\n */ const $aa34fcd309b753d3$var$calculateCenter = (width, height, center)=>{\n    let calculatedWidth = width;\n    let calculatedHeight = height;\n    let calculatedCenter = center;\n    if (!calculatedWidth && typeof window !== 'undefined') calculatedWidth = window.innerWidth;\n    if (!calculatedHeight && typeof window !== 'undefined') calculatedHeight = window.innerHeight;\n    if (!calculatedCenter) calculatedCenter = [\n        calculatedWidth / 2,\n        calculatedHeight / 2\n    ];\n    return [\n        calculatedWidth,\n        calculatedHeight,\n        calculatedCenter\n    ];\n};\n\n\n\n\n\n\n/**\n * 判断值是否为字符串\n * @return 是否为字符串\n */ function $7545a33aa1e40079$export$2e2bcd8739ae039(value) {\n    return typeof value === 'string';\n}\n\n\nconst $6ba9229e0ed76d17$export$43bee75e5e14138e = Array.isArray;\n\n\n\n\nconst $960ff972045b2e6c$var$DEFAULTS_LAYOUT_OPTIONS = {\n    nodeSize: 30,\n    nodeSpacing: 10,\n    preventOverlap: false,\n    sweep: undefined,\n    equidistant: false,\n    startAngle: 1.5 * Math.PI,\n    clockwise: true,\n    maxLevelDiff: undefined,\n    sortBy: 'degree'\n};\nclass $960ff972045b2e6c$export$9347783c4f7c1005 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'concentric';\n        this.options = Object.assign(Object.assign({}, $960ff972045b2e6c$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericConcentricLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericConcentricLayout(true, graph, options);\n        });\n    }\n    genericConcentricLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center: propsCenter, width: propsWidth, height: propsHeight, sortBy: propsSortBy, maxLevelDiff: propsMaxLevelDiff, sweep: propsSweep, clockwise: clockwise, equidistant: equidistant, preventOverlap: preventOverlap, startAngle: startAngle = 1.5 * Math.PI, nodeSize: nodeSize, nodeSpacing: nodeSpacing } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n            const center = !propsCenter ? [\n                width / 2,\n                height / 2\n            ] : propsCenter;\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, center);\n            const layoutNodes = [];\n            let maxNodeSize;\n            let maxNodeSpacing = 0;\n            if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(nodeSize)) maxNodeSize = Math.max(nodeSize[0], nodeSize[1]);\n            else if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(nodeSize)) {\n                maxNodeSize = -Infinity;\n                nodes.forEach((node)=>{\n                    const currentSize = Math.max(...(0, $42c5e25589525d06$export$880c59a0ae1158a1)(nodeSize(node)));\n                    if (currentSize > maxNodeSize) maxNodeSize = currentSize;\n                });\n            } else maxNodeSize = nodeSize;\n            if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(nodeSpacing)) maxNodeSpacing = Math.max(nodeSpacing[0], nodeSpacing[1]);\n            else if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(nodeSpacing)) maxNodeSpacing = nodeSpacing;\n            nodes.forEach((node)=>{\n                const cnode = (0, $9db318b25eeb9fa0$export$8630667bbca04569)(node);\n                layoutNodes.push(cnode);\n                let nodeSize = maxNodeSize;\n                const { data: data } = cnode;\n                if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(data.size)) nodeSize = Math.max(data.size[0], data.size[1]);\n                else if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.size)) nodeSize = data.size;\n                else if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(data.size)) nodeSize = Math.max(data.size.width, data.size.height);\n                maxNodeSize = Math.max(maxNodeSize, nodeSize);\n                if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(nodeSpacing)) maxNodeSpacing = Math.max(nodeSpacing(node), maxNodeSpacing);\n            });\n            // layout\n            const nodeIdxMap = {};\n            layoutNodes.forEach((node, i)=>{\n                nodeIdxMap[node.id] = i;\n            });\n            // get the node degrees\n            let sortBy = propsSortBy;\n            if (!(0, $7545a33aa1e40079$export$2e2bcd8739ae039)(sortBy) || layoutNodes[0].data[sortBy] === undefined) sortBy = 'degree';\n            if (sortBy === 'degree') layoutNodes.sort((n1, n2)=>graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n            else // sort nodes by value\n            layoutNodes.sort((n1, n2)=>n2.data[sortBy] - n1.data[sortBy]);\n            const maxValueNode = layoutNodes[0];\n            const maxLevelDiff = (propsMaxLevelDiff || (sortBy === 'degree' ? graph.getDegree(maxValueNode.id, 'both') : maxValueNode.data[sortBy])) / 4;\n            // put the values into levels\n            const levels = [\n                {\n                    nodes: []\n                }\n            ];\n            let currentLevel = levels[0];\n            layoutNodes.forEach((node)=>{\n                if (currentLevel.nodes.length > 0) {\n                    const diff = sortBy === 'degree' ? Math.abs(graph.getDegree(currentLevel.nodes[0].id, 'both') - graph.getDegree(node.id, 'both')) : Math.abs(currentLevel.nodes[0].data[sortBy] - node.data[sortBy]);\n                    if (maxLevelDiff && diff >= maxLevelDiff) {\n                        currentLevel = {\n                            nodes: []\n                        };\n                        levels.push(currentLevel);\n                    }\n                }\n                currentLevel.nodes.push(node);\n            });\n            // create positions for levels\n            let minDist = maxNodeSize + maxNodeSpacing; // min dist between nodes\n            if (!preventOverlap) {\n                // then strictly constrain to bb\n                const firstLvlHasMulti = levels.length > 0 && levels[0].nodes.length > 1;\n                const maxR = Math.min(width, height) / 2 - minDist;\n                const rStep = maxR / (levels.length + (firstLvlHasMulti ? 1 : 0));\n                minDist = Math.min(minDist, rStep);\n            }\n            // find the metrics for each level\n            let r = 0;\n            levels.forEach((level)=>{\n                const sweep = propsSweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.nodes.length : propsSweep;\n                level.dTheta = sweep / Math.max(1, level.nodes.length - 1);\n                // calculate the radius\n                if (level.nodes.length > 1 && preventOverlap) {\n                    // but only if more than one node (can't overlap)\n                    const dcos = Math.cos(level.dTheta) - Math.cos(0);\n                    const dsin = Math.sin(level.dTheta) - Math.sin(0);\n                    const rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n                    r = Math.max(rMin, r);\n                }\n                level.r = r;\n                r += minDist;\n            });\n            if (equidistant) {\n                let rDeltaMax = 0;\n                let rr = 0;\n                for(let i = 0; i < levels.length; i++){\n                    const level = levels[i];\n                    const rDelta = (level.r || 0) - rr;\n                    rDeltaMax = Math.max(rDeltaMax, rDelta);\n                }\n                rr = 0;\n                levels.forEach((level, i)=>{\n                    if (i === 0) rr = level.r || 0;\n                    level.r = rr;\n                    rr += rDeltaMax;\n                });\n            }\n            // calculate the node positions\n            levels.forEach((level)=>{\n                const dTheta = level.dTheta || 0;\n                const rr = level.r || 0;\n                level.nodes.forEach((node, j)=>{\n                    const theta = startAngle + (clockwise ? 1 : -1) * dTheta * j;\n                    node.data.x = center[0] + rr * Math.cos(theta);\n                    node.data.y = center[1] + rr * Math.sin(theta);\n                });\n            });\n            if (assign) layoutNodes.forEach((node)=>graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                }));\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            return result;\n        });\n    }\n}\n\n\n\n\n\n\nfunction $83939962230503a0$export$2e2bcd8739ae039(d) {\n    const x = +this._x.call(null, d), y = +this._y.call(null, d);\n    return $83939962230503a0$var$add(this.cover(x, y), x, y, d);\n}\nfunction $83939962230503a0$var$add(tree, x, y, d) {\n    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n    var parent, node = tree._root, leaf = {\n        data: d\n    }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n    // Find the existing leaf for the new point, or add it.\n    while(node.length){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n    }while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));\n    return parent[j] = node, parent[i] = leaf, tree;\n}\nfunction $83939962230503a0$export$32ed0561867ec8a1(data) {\n    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;\n    // Compute the points and their extent.\n    for(i = 0; i < n; ++i){\n        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n        xz[i] = x;\n        yz[i] = y;\n        if (x < x0) x0 = x;\n        if (x > x1) x1 = x;\n        if (y < y0) y0 = y;\n        if (y > y1) y1 = y;\n    }\n    // If there were no (valid) points, abort.\n    if (x0 > x1 || y0 > y1) return this;\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0).cover(x1, y1);\n    // Add the new points.\n    for(i = 0; i < n; ++i)$83939962230503a0$var$add(this, xz[i], yz[i], data[i]);\n    return this;\n}\n\n\nfunction $376bb09fed744856$export$2e2bcd8739ae039(x, y) {\n    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;\n    // If the quadtree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing quadrant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n        x1 = (x0 = Math.floor(x)) + 1;\n        y1 = (y0 = Math.floor(y)) + 1;\n    } else {\n        var z = x1 - x0 || 1, node = this._root, parent, i;\n        while(x0 > x || x >= x1 || y0 > y || y >= y1){\n            i = (y < y0) << 1 | x < x0;\n            parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n            switch(i){\n                case 0:\n                    x1 = x0 + z, y1 = y0 + z;\n                    break;\n                case 1:\n                    x0 = x1 - z, y1 = y0 + z;\n                    break;\n                case 2:\n                    x1 = x0 + z, y0 = y1 - z;\n                    break;\n                case 3:\n                    x0 = x1 - z, y0 = y1 - z;\n                    break;\n            }\n        }\n        if (this._root && this._root.length) this._root = node;\n    }\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    return this;\n}\n\n\nfunction $b0d85ca60dfcdf7c$export$2e2bcd8739ae039() {\n    var data = [];\n    this.visit(function(node) {\n        if (!node.length) do data.push(node.data);\n        while (node = node.next);\n    });\n    return data;\n}\n\n\nfunction $f65eb5aff436d6b5$export$2e2bcd8739ae039(_) {\n    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [\n        [\n            this._x0,\n            this._y0\n        ],\n        [\n            this._x1,\n            this._y1\n        ]\n    ];\n}\n\n\nfunction $90d47b8ce333b8e5$export$2e2bcd8739ae039(node, x0, y0, x1, y1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n}\n\n\nfunction $48126c6ae980ffaf$export$2e2bcd8739ae039(x, y, radius) {\n    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;\n    if (node) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node, x0, y0, x3, y3));\n    if (radius == null) radius = Infinity;\n    else {\n        x0 = x - radius, y0 = y - radius;\n        x3 = x + radius, y3 = y + radius;\n        radius *= radius;\n    }\n    while(q = quads.pop()){\n        // Stop searching if this quadrant can’t contain a closer node.\n        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue;\n        // Bisect the current quadrant.\n        if (node.length) {\n            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;\n            quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node[3], xm, ym, x2, y2), new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node[2], x1, ym, xm, y2), new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node[1], xm, y1, x2, ym), new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node[0], x1, y1, xm, ym));\n            // Visit the closest quadrant first.\n            if (i = (y >= ym) << 1 | x >= xm) {\n                q = quads[quads.length - 1];\n                quads[quads.length - 1] = quads[quads.length - 1 - i];\n                quads[quads.length - 1 - i] = q;\n            }\n        } else {\n            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;\n            if (d2 < radius) {\n                var d = Math.sqrt(radius = d2);\n                x0 = x - d, y0 = y - d;\n                x3 = x + d, y3 = y + d;\n                data = node.data;\n            }\n        }\n    }\n    return data;\n}\n\n\nfunction $3ba32cc1ed5c365b$export$2e2bcd8739ae039(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while(true){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n        if (!node.length) break;\n        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3]) retainer = parent, j = i;\n    }\n    // Find the point to remove.\n    while(node.data !== d)if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return next ? previous.next = next : delete previous.next, this;\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n        if (retainer) retainer[j] = node;\n        else this._root = node;\n    }\n    return this;\n}\nfunction $3ba32cc1ed5c365b$export$1cfc7aad5cb1833b(data) {\n    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);\n    return this;\n}\n\n\nfunction $9979881dbeebee0f$export$2e2bcd8739ae039() {\n    return this._root;\n}\n\n\nfunction $adb3097303305c20$export$2e2bcd8739ae039() {\n    var size = 0;\n    this.visit(function(node) {\n        if (!node.length) do ++size;\n        while (node = node.next);\n    });\n    return size;\n}\n\n\n\nfunction $53812128496715b2$export$2e2bcd8739ae039(callback) {\n    var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n    if (node) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(node, this._x0, this._y0, this._x1, this._y1));\n    while(q = quads.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n        if (child = node[3]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, xm, ym, x1, y1));\n        if (child = node[2]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, x0, ym, xm, y1));\n        if (child = node[1]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, xm, y0, x1, ym));\n        if (child = node[0]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, x0, y0, xm, ym));\n    }\n    return this;\n}\n\n\n\nfunction $b4baeb4133c8e8f8$export$2e2bcd8739ae039(callback) {\n    var quads = [], next = [], q;\n    if (this._root) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(this._root, this._x0, this._y0, this._x1, this._y1));\n    while(q = quads.pop()){\n        var node = q.node;\n        if (node.length) {\n            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n            if (child = node[0]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, x0, y0, xm, ym));\n            if (child = node[1]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, xm, y0, x1, ym));\n            if (child = node[2]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, x0, ym, xm, y1));\n            if (child = node[3]) quads.push(new (0, $90d47b8ce333b8e5$export$2e2bcd8739ae039)(child, xm, ym, x1, y1));\n        }\n        next.push(q);\n    }\n    while(q = next.pop())callback(q.node, q.x0, q.y0, q.x1, q.y1);\n    return this;\n}\n\n\nfunction $68d6e2e34d4d6fcf$export$e6fafc98131d2a44(d) {\n    return d[0];\n}\nfunction $68d6e2e34d4d6fcf$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n}\n\n\nfunction $ad79df58142e57c2$export$6f0a21aeb844a64c(d) {\n    return d[1];\n}\nfunction $ad79df58142e57c2$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n}\n\n\nfunction $931875583ffa81b8$export$2e2bcd8739ae039(nodes, x, y) {\n    var tree = new $931875583ffa81b8$var$Quadtree(x == null ? (0, $68d6e2e34d4d6fcf$export$e6fafc98131d2a44) : x, y == null ? (0, $ad79df58142e57c2$export$6f0a21aeb844a64c) : y, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n}\nfunction $931875583ffa81b8$var$Quadtree(x, y, x0, y0, x1, y1) {\n    this._x = x;\n    this._y = y;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._root = undefined;\n}\nfunction $931875583ffa81b8$var$leaf_copy(leaf) {\n    var copy = {\n        data: leaf.data\n    }, next = copy;\n    while(leaf = leaf.next)next = next.next = {\n        data: leaf.data\n    };\n    return copy;\n}\nvar $931875583ffa81b8$var$treeProto = $931875583ffa81b8$export$2e2bcd8739ae039.prototype = $931875583ffa81b8$var$Quadtree.prototype;\n$931875583ffa81b8$var$treeProto.copy = function() {\n    var copy = new $931875583ffa81b8$var$Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;\n    if (!node) return copy;\n    if (!node.length) return copy._root = $931875583ffa81b8$var$leaf_copy(node), copy;\n    nodes = [\n        {\n            source: node,\n            target: copy._root = new Array(4)\n        }\n    ];\n    while(node = nodes.pop()){\n        for(var i = 0; i < 4; ++i)if (child = node.source[i]) {\n            if (child.length) nodes.push({\n                source: child,\n                target: node.target[i] = new Array(4)\n            });\n            else node.target[i] = $931875583ffa81b8$var$leaf_copy(child);\n        }\n    }\n    return copy;\n};\n$931875583ffa81b8$var$treeProto.add = (0, $83939962230503a0$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.addAll = (0, $83939962230503a0$export$32ed0561867ec8a1);\n$931875583ffa81b8$var$treeProto.cover = (0, $376bb09fed744856$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.data = (0, $b0d85ca60dfcdf7c$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.extent = (0, $f65eb5aff436d6b5$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.find = (0, $48126c6ae980ffaf$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.remove = (0, $3ba32cc1ed5c365b$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.removeAll = (0, $3ba32cc1ed5c365b$export$1cfc7aad5cb1833b);\n$931875583ffa81b8$var$treeProto.root = (0, $9979881dbeebee0f$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.size = (0, $adb3097303305c20$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.visit = (0, $53812128496715b2$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.visitAfter = (0, $b4baeb4133c8e8f8$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.x = (0, $68d6e2e34d4d6fcf$export$2e2bcd8739ae039);\n$931875583ffa81b8$var$treeProto.y = (0, $ad79df58142e57c2$export$2e2bcd8739ae039);\n\n\nfunction $f4cec970825c3c67$export$2e2bcd8739ae039(d) {\n    const x = +this._x.call(null, d), y = +this._y.call(null, d), z = +this._z.call(null, d);\n    return $f4cec970825c3c67$var$add(this.cover(x, y, z), x, y, z, d);\n}\nfunction $f4cec970825c3c67$var$add(tree, x, y, z, d) {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) return tree; // ignore invalid points\n    var parent, node = tree._root, leaf = {\n        data: d\n    }, x0 = tree._x0, y0 = tree._y0, z0 = tree._z0, x1 = tree._x1, y1 = tree._y1, z1 = tree._z1, xm, ym, zm, xp, yp, zp, right, bottom, deep, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n    // Find the existing leaf for the new point, or add it.\n    while(node.length){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm;\n        else z1 = zm;\n        if (parent = node, !(node = node[i = deep << 2 | bottom << 1 | right])) return parent[i] = leaf, tree;\n    }\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    yp = +tree._y.call(null, node.data);\n    zp = +tree._z.call(null, node.data);\n    if (x === xp && y === yp && z === zp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n        parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm;\n        else z1 = zm;\n    }while ((i = deep << 2 | bottom << 1 | right) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | xp >= xm));\n    return parent[j] = node, parent[i] = leaf, tree;\n}\nfunction $f4cec970825c3c67$export$32ed0561867ec8a1(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    const n = data.length;\n    const xz = new Float64Array(n);\n    const yz = new Float64Array(n);\n    const zz = new Float64Array(n);\n    let x0 = Infinity, y0 = Infinity, z0 = Infinity, x1 = -Infinity, y1 = -Infinity, z1 = -Infinity;\n    // Compute the points and their extent.\n    for(let i = 0, d, x, y, z; i < n; ++i){\n        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) continue;\n        xz[i] = x;\n        yz[i] = y;\n        zz[i] = z;\n        if (x < x0) x0 = x;\n        if (x > x1) x1 = x;\n        if (y < y0) y0 = y;\n        if (y > y1) y1 = y;\n        if (z < z0) z0 = z;\n        if (z > z1) z1 = z;\n    }\n    // If there were no (valid) points, abort.\n    if (x0 > x1 || y0 > y1 || z0 > z1) return this;\n    // Expand the tree to cover the new points.\n    this.cover(x0, y0, z0).cover(x1, y1, z1);\n    // Add the new points.\n    for(let i = 0; i < n; ++i)$f4cec970825c3c67$var$add(this, xz[i], yz[i], zz[i], data[i]);\n    return this;\n}\n\n\nfunction $4bc988b80b433044$export$2e2bcd8739ae039(x, y, z) {\n    if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n    var x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1;\n    // If the octree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing octant boundaries don’t change due to floating point error!\n    if (isNaN(x0)) {\n        x1 = (x0 = Math.floor(x)) + 1;\n        y1 = (y0 = Math.floor(y)) + 1;\n        z1 = (z0 = Math.floor(z)) + 1;\n    } else {\n        var t = x1 - x0 || 1, node = this._root, parent, i;\n        while(x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1){\n            i = (z < z0) << 2 | (y < y0) << 1 | x < x0;\n            parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n            switch(i){\n                case 0:\n                    x1 = x0 + t, y1 = y0 + t, z1 = z0 + t;\n                    break;\n                case 1:\n                    x0 = x1 - t, y1 = y0 + t, z1 = z0 + t;\n                    break;\n                case 2:\n                    x1 = x0 + t, y0 = y1 - t, z1 = z0 + t;\n                    break;\n                case 3:\n                    x0 = x1 - t, y0 = y1 - t, z1 = z0 + t;\n                    break;\n                case 4:\n                    x1 = x0 + t, y1 = y0 + t, z0 = z1 - t;\n                    break;\n                case 5:\n                    x0 = x1 - t, y1 = y0 + t, z0 = z1 - t;\n                    break;\n                case 6:\n                    x1 = x0 + t, y0 = y1 - t, z0 = z1 - t;\n                    break;\n                case 7:\n                    x0 = x1 - t, y0 = y1 - t, z0 = z1 - t;\n                    break;\n            }\n        }\n        if (this._root && this._root.length) this._root = node;\n    }\n    this._x0 = x0;\n    this._y0 = y0;\n    this._z0 = z0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._z1 = z1;\n    return this;\n}\n\n\nfunction $7245b13424496c5e$export$2e2bcd8739ae039() {\n    var data = [];\n    this.visit(function(node) {\n        if (!node.length) do data.push(node.data);\n        while (node = node.next);\n    });\n    return data;\n}\n\n\nfunction $74b568b1e42d7768$export$2e2bcd8739ae039(_) {\n    return arguments.length ? this.cover(+_[0][0], +_[0][1], +_[0][2]).cover(+_[1][0], +_[1][1], +_[1][2]) : isNaN(this._x0) ? undefined : [\n        [\n            this._x0,\n            this._y0,\n            this._z0\n        ],\n        [\n            this._x1,\n            this._y1,\n            this._z1\n        ]\n    ];\n}\n\n\nfunction $2220a65d06df47aa$export$2e2bcd8739ae039(node, x0, y0, z0, x1, y1, z1) {\n    this.node = node;\n    this.x0 = x0;\n    this.y0 = y0;\n    this.z0 = z0;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.z1 = z1;\n}\n\n\nfunction $765c71ee5717b42f$export$2e2bcd8739ae039(x, y, z, radius) {\n    var data, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1, y1, z1, x2, y2, z2, x3 = this._x1, y3 = this._y1, z3 = this._z1, octs = [], node = this._root, q, i;\n    if (node) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node, x0, y0, z0, x3, y3, z3));\n    if (radius == null) radius = Infinity;\n    else {\n        x0 = x - radius, y0 = y - radius, z0 = z - radius;\n        x3 = x + radius, y3 = y + radius, z3 = z + radius;\n        radius *= radius;\n    }\n    while(q = octs.pop()){\n        // Stop searching if this octant can’t contain a closer node.\n        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (z1 = q.z0) > z3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0 || (z2 = q.z1) < z0) continue;\n        // Bisect the current octant.\n        if (node.length) {\n            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2, zm = (z1 + z2) / 2;\n            octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[7], xm, ym, zm, x2, y2, z2), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[6], x1, ym, zm, xm, y2, z2), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[5], xm, y1, zm, x2, ym, z2), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[4], x1, y1, zm, xm, ym, z2), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[3], xm, ym, z1, x2, y2, zm), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[2], x1, ym, z1, xm, y2, zm), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[1], xm, y1, z1, x2, ym, zm), new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node[0], x1, y1, z1, xm, ym, zm));\n            // Visit the closest octant first.\n            if (i = (z >= zm) << 2 | (y >= ym) << 1 | x >= xm) {\n                q = octs[octs.length - 1];\n                octs[octs.length - 1] = octs[octs.length - 1 - i];\n                octs[octs.length - 1 - i] = q;\n            }\n        } else {\n            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), dz = z - +this._z.call(null, node.data), d2 = dx * dx + dy * dy + dz * dz;\n            if (d2 < radius) {\n                var d = Math.sqrt(radius = d2);\n                x0 = x - d, y0 = y - d, z0 = z - d;\n                x3 = x + d, y3 = y + d, z3 = z + d;\n                data = node.data;\n            }\n        }\n    }\n    return data;\n}\n\n\nfunction $2faed2b3a009fc54$export$2e2bcd8739ae039(d) {\n    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, z0 = this._z0, x1 = this._x1, y1 = this._y1, z1 = this._z1, x, y, z, xm, ym, zm, right, bottom, deep, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while(true){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;\n        else y1 = ym;\n        if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm;\n        else z1 = zm;\n        if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n        if (!node.length) break;\n        if (parent[i + 1 & 7] || parent[i + 2 & 7] || parent[i + 3 & 7] || parent[i + 4 & 7] || parent[i + 5 & 7] || parent[i + 6 & 7] || parent[i + 7 & 7]) retainer = parent, j = i;\n    }\n    // Find the point to remove.\n    while(node.data !== d)if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return next ? previous.next = next : delete previous.next, this;\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7]) && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {\n        if (retainer) retainer[j] = node;\n        else this._root = node;\n    }\n    return this;\n}\nfunction $2faed2b3a009fc54$export$1cfc7aad5cb1833b(data) {\n    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);\n    return this;\n}\n\n\nfunction $7fc790765b09295d$export$2e2bcd8739ae039() {\n    return this._root;\n}\n\n\nfunction $4585b434c9c577cc$export$2e2bcd8739ae039() {\n    var size = 0;\n    this.visit(function(node) {\n        if (!node.length) do ++size;\n        while (node = node.next);\n    });\n    return size;\n}\n\n\n\nfunction $847c6df97984f0ab$export$2e2bcd8739ae039(callback) {\n    var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;\n    if (node) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n    while(q = octs.pop())if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n        if (child = node[7]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, ym, zm, x1, y1, z1));\n        if (child = node[6]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, ym, zm, xm, y1, z1));\n        if (child = node[5]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, y0, zm, x1, ym, z1));\n        if (child = node[4]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, y0, zm, xm, ym, z1));\n        if (child = node[3]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, ym, z0, x1, y1, zm));\n        if (child = node[2]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, ym, z0, xm, y1, zm));\n        if (child = node[1]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, y0, z0, x1, ym, zm));\n        if (child = node[0]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, y0, z0, xm, ym, zm));\n    }\n    return this;\n}\n\n\n\nfunction $9b63a3c9bccb34c6$export$2e2bcd8739ae039(callback) {\n    var octs = [], next = [], q;\n    if (this._root) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n    while(q = octs.pop()){\n        var node = q.node;\n        if (node.length) {\n            var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n            if (child = node[0]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, y0, z0, xm, ym, zm));\n            if (child = node[1]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, y0, z0, x1, ym, zm));\n            if (child = node[2]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, ym, z0, xm, y1, zm));\n            if (child = node[3]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, ym, z0, x1, y1, zm));\n            if (child = node[4]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, y0, zm, xm, ym, z1));\n            if (child = node[5]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, y0, zm, x1, ym, z1));\n            if (child = node[6]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, x0, ym, zm, xm, y1, z1));\n            if (child = node[7]) octs.push(new (0, $2220a65d06df47aa$export$2e2bcd8739ae039)(child, xm, ym, zm, x1, y1, z1));\n        }\n        next.push(q);\n    }\n    while(q = next.pop())callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);\n    return this;\n}\n\n\nfunction $47f5bc969651f9c3$export$e6fafc98131d2a44(d) {\n    return d[0];\n}\nfunction $47f5bc969651f9c3$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n}\n\n\nfunction $d575502cd4a3de1f$export$6f0a21aeb844a64c(d) {\n    return d[1];\n}\nfunction $d575502cd4a3de1f$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._y = _, this) : this._y;\n}\n\n\nfunction $13352fc31f4f860f$export$f56e419c070182d8(d) {\n    return d[2];\n}\nfunction $13352fc31f4f860f$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._z = _, this) : this._z;\n}\n\n\nfunction $9431a2c1ce26e0cb$export$2e2bcd8739ae039(nodes, x, y, z) {\n    var tree = new $9431a2c1ce26e0cb$var$Octree(x == null ? (0, $47f5bc969651f9c3$export$e6fafc98131d2a44) : x, y == null ? (0, $d575502cd4a3de1f$export$6f0a21aeb844a64c) : y, z == null ? (0, $13352fc31f4f860f$export$f56e419c070182d8) : z, NaN, NaN, NaN, NaN, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n}\nfunction $9431a2c1ce26e0cb$var$Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._x0 = x0;\n    this._y0 = y0;\n    this._z0 = z0;\n    this._x1 = x1;\n    this._y1 = y1;\n    this._z1 = z1;\n    this._root = undefined;\n}\nfunction $9431a2c1ce26e0cb$var$leaf_copy(leaf) {\n    var copy = {\n        data: leaf.data\n    }, next = copy;\n    while(leaf = leaf.next)next = next.next = {\n        data: leaf.data\n    };\n    return copy;\n}\nvar $9431a2c1ce26e0cb$var$treeProto = $9431a2c1ce26e0cb$export$2e2bcd8739ae039.prototype = $9431a2c1ce26e0cb$var$Octree.prototype;\n$9431a2c1ce26e0cb$var$treeProto.copy = function() {\n    var copy = new $9431a2c1ce26e0cb$var$Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1), node = this._root, nodes, child;\n    if (!node) return copy;\n    if (!node.length) return copy._root = $9431a2c1ce26e0cb$var$leaf_copy(node), copy;\n    nodes = [\n        {\n            source: node,\n            target: copy._root = new Array(8)\n        }\n    ];\n    while(node = nodes.pop()){\n        for(var i = 0; i < 8; ++i)if (child = node.source[i]) {\n            if (child.length) nodes.push({\n                source: child,\n                target: node.target[i] = new Array(8)\n            });\n            else node.target[i] = $9431a2c1ce26e0cb$var$leaf_copy(child);\n        }\n    }\n    return copy;\n};\n$9431a2c1ce26e0cb$var$treeProto.add = (0, $f4cec970825c3c67$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.addAll = (0, $f4cec970825c3c67$export$32ed0561867ec8a1);\n$9431a2c1ce26e0cb$var$treeProto.cover = (0, $4bc988b80b433044$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.data = (0, $7245b13424496c5e$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.extent = (0, $74b568b1e42d7768$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.find = (0, $765c71ee5717b42f$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.remove = (0, $2faed2b3a009fc54$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.removeAll = (0, $2faed2b3a009fc54$export$1cfc7aad5cb1833b);\n$9431a2c1ce26e0cb$var$treeProto.root = (0, $7fc790765b09295d$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.size = (0, $4585b434c9c577cc$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.visit = (0, $847c6df97984f0ab$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.visitAfter = (0, $9b63a3c9bccb34c6$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.x = (0, $47f5bc969651f9c3$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.y = (0, $d575502cd4a3de1f$export$2e2bcd8739ae039);\n$9431a2c1ce26e0cb$var$treeProto.z = (0, $13352fc31f4f860f$export$2e2bcd8739ae039);\n\n\nconst $b6856b13833883c2$var$theta2 = 0.81; // Barnes-Hut approximation threshold\nconst $b6856b13833883c2$var$epsilon = 0.1; // 为了防止出现除0的情况，加一个epsilon\nfunction $b6856b13833883c2$export$fef20e2a22d94f43(calcGraph, factor, coulombDisScale2, accMap, dimensions = 2) {\n    const weightParam = factor / coulombDisScale2;\n    const calcNodes = calcGraph.getAllNodes();\n    const data = calcNodes.map((calcNode, i)=>{\n        const { nodeStrength: nodeStrength, x: x, y: y, z: z, size: size } = calcNode.data;\n        return {\n            x: x,\n            y: y,\n            z: z,\n            size: size,\n            index: i,\n            id: calcNode.id,\n            vx: 0,\n            vy: 0,\n            vz: 0,\n            weight: weightParam * nodeStrength\n        };\n    });\n    const tree = (dimensions === 2 ? (0, $931875583ffa81b8$export$2e2bcd8739ae039)(data, (d)=>d.x, (d)=>d.y) : (0, $9431a2c1ce26e0cb$export$2e2bcd8739ae039)(data, (d)=>d.x, (d)=>d.y, (d)=>d.z)).visitAfter($b6856b13833883c2$var$accumulate); // init internal node\n    const nodeMap = new Map();\n    data.forEach((n)=>{\n        nodeMap.set(n.id, n);\n        // @ts-ignore\n        $b6856b13833883c2$var$computeForce(n, tree, dimensions);\n    });\n    data.map((n, i)=>{\n        const { id: id, data: data } = calcNodes[i];\n        const { mass: mass = 1 } = data;\n        // 从 0 开始，= 初始化 + 加斥力\n        accMap[id] = {\n            x: n.vx / mass,\n            y: n.vy / mass,\n            z: n.vz / mass\n        };\n    });\n    return accMap;\n}\nfunction $b6856b13833883c2$var$accumulate(treeNode) {\n    let accWeight = 0;\n    let accX = 0;\n    let accY = 0;\n    let accZ = 0;\n    let accSize = 0;\n    const numChildren = treeNode.length;\n    if (numChildren) {\n        // internal node, accumulate 4 child quads\n        for(let i = 0; i < numChildren; i++){\n            const q = treeNode[i];\n            if (q && q.weight) {\n                accWeight += q.weight;\n                accX += q.x * q.weight;\n                accY += q.y * q.weight;\n                accZ += q.z * q.weight;\n                accSize += q.size * q.weight;\n            }\n        }\n        treeNode.x = accX / accWeight;\n        treeNode.y = accY / accWeight;\n        treeNode.z = accZ / accWeight;\n        treeNode.size = accSize / accWeight;\n        treeNode.weight = accWeight;\n    } else {\n        // leaf node\n        const q = treeNode;\n        treeNode.x = q.data.x;\n        treeNode.y = q.data.y;\n        treeNode.z = q.data.z;\n        treeNode.size = q.data.size;\n        treeNode.weight = q.data.weight;\n    }\n}\nconst $b6856b13833883c2$var$apply = (treeNode, x1, arg1, arg2, arg3, node, dimensions)=>{\n    var _a;\n    if (((_a = treeNode.data) === null || _a === void 0 ? void 0 : _a.id) === node.id) return;\n    const x2 = [\n        arg1,\n        arg2,\n        arg3\n    ][dimensions - 1];\n    const dx = node.x - treeNode.x || $b6856b13833883c2$var$epsilon;\n    const dy = node.y - treeNode.y || $b6856b13833883c2$var$epsilon;\n    const dz = node.z - treeNode.z || $b6856b13833883c2$var$epsilon;\n    const pos = [\n        dx,\n        dy,\n        dz\n    ];\n    const width = x2 - x1;\n    let len2 = 0;\n    for(let i = 0; i < dimensions; i++)len2 += pos[i] * pos[i];\n    const len1 = Math.sqrt(len2);\n    const len3 = len1 * len2;\n    // far node, apply Barnes-Hut approximation\n    if (width * width * $b6856b13833883c2$var$theta2 < len2) {\n        const param = treeNode.weight / len3;\n        node.vx += dx * param;\n        node.vy += dy * param;\n        node.vz += dz * param;\n        return true;\n    }\n    // near quad, compute force directly\n    if (treeNode.length) return false; // internal node, visit children\n    // leaf node\n    if (treeNode.data !== node) {\n        const param = treeNode.data.weight / len3;\n        node.vx += dx * param;\n        node.vy += dy * param;\n        node.vz += dz * param;\n    }\n};\n// @ts-ignore\nfunction $b6856b13833883c2$var$computeForce(node, tree, dimensions) {\n    // @ts-ignore\n    tree.visit((treeNode, x1, y1, x2, y2)=>$b6856b13833883c2$var$apply(treeNode, x1, y1, x2, y2, node, dimensions));\n}\n\n\nconst $92cd346d3bd9f938$var$DEFAULTS_LAYOUT_OPTIONS = {\n    dimensions: 2,\n    maxIteration: 500,\n    gravity: 10,\n    factor: 1,\n    edgeStrength: 50,\n    nodeStrength: 1000,\n    coulombDisScale: 0.005,\n    damping: 0.9,\n    maxSpeed: 200,\n    minMovement: 0.4,\n    interval: 0.02,\n    linkDistance: 200,\n    clusterNodeStrength: 20,\n    preventOverlap: true,\n    distanceThresholdMode: 'mean'\n};\nclass $92cd346d3bd9f938$export$9a500154086f6247 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'force';\n        /**\n         * time interval for layout force animations\n         */ this.timeInterval = 0;\n        /**\n         * compare with minMovement to end the nodes' movement\n         */ this.judgingDistance = 0;\n        this.running = false;\n        this.options = Object.assign(Object.assign({}, $92cd346d3bd9f938$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericForceLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericForceLayout(true, graph, options);\n        });\n    }\n    /**\n     * Stop simulation immediately.\n     */ stop() {\n        if (this.timeInterval && typeof window !== 'undefined') window.clearInterval(this.timeInterval);\n        this.running = false;\n    }\n    /**\n     * Manually steps the simulation by the specified number of iterations.\n     * @see https://github.com/d3/d3-force#simulation_tick\n     */ tick(iterations = this.options.maxIteration || 1) {\n        if (this.lastResult) return this.lastResult;\n        for(let i = 0; (this.judgingDistance > this.lastOptions.minMovement || i < 1) && i < iterations; i++){\n            this.runOneStep(this.lastCalcGraph, this.lastGraph, i, this.lastVelMap, this.lastOptions);\n            this.updatePosition(this.lastGraph, this.lastCalcGraph, this.lastVelMap, this.lastOptions);\n        }\n        const result = {\n            nodes: this.lastLayoutNodes,\n            edges: this.lastLayoutEdges\n        };\n        if (this.lastAssign) result.nodes.forEach((node)=>this.lastGraph.mergeNodeData(node.id, {\n                x: node.data.x,\n                y: node.data.y,\n                z: this.options.dimensions === 3 ? node.data.z : undefined\n            }));\n        return result;\n    }\n    genericForceLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const formattedOptions = this.formatOptions(mergedOptions, graph);\n            const { dimensions: dimensions, width: width, height: height, nodeSize: nodeSize, getMass: getMass, nodeStrength: nodeStrength, edgeStrength: edgeStrength, linkDistance: linkDistance } = formattedOptions;\n            // clones the original data and attaches calculation attributes for this layout algorithm\n            const layoutNodes = nodes.map((node, i)=>{\n                return Object.assign(Object.assign({}, node), {\n                    data: Object.assign(Object.assign({}, node.data), {\n                        // ...randomDistribution(node, dimensions, 30, i),\n                        x: (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(node.data.x) ? node.data.x : Math.random() * width,\n                        y: (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(node.data.y) ? node.data.y : Math.random() * height,\n                        z: (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(node.data.z) ? node.data.z : Math.random() * Math.sqrt(width * height),\n                        size: nodeSize(node) || 30,\n                        mass: getMass(node),\n                        nodeStrength: nodeStrength(node)\n                    })\n                });\n            });\n            const layoutEdges = edges.map((edge)=>Object.assign(Object.assign({}, edge), {\n                    data: Object.assign(Object.assign({}, edge.data), {\n                        edgeStrength: edgeStrength(edge),\n                        linkDistance: linkDistance(edge, graph.getNode(edge.source), graph.getNode(edge.target))\n                    })\n                }));\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n                this.lastResult = {\n                    nodes: [],\n                    edges: edges\n                };\n                return {\n                    nodes: [],\n                    edges: edges\n                };\n            }\n            const velMap = {};\n            nodes.forEach((node, i)=>{\n                velMap[node.id] = {\n                    x: 0,\n                    y: 0,\n                    z: 0\n                };\n            });\n            const calcGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                nodes: layoutNodes,\n                edges: layoutEdges\n            });\n            this.formatCentripetal(formattedOptions, calcGraph);\n            const { maxIteration: maxIteration, minMovement: minMovement, onTick: onTick } = formattedOptions;\n            // Use them later in `tick`.\n            this.lastLayoutNodes = layoutNodes;\n            this.lastLayoutEdges = layoutEdges;\n            this.lastAssign = assign;\n            this.lastGraph = graph;\n            this.lastCalcGraph = calcGraph;\n            this.lastOptions = formattedOptions;\n            this.lastVelMap = velMap;\n            if (typeof window === 'undefined') return;\n            let iter = 0;\n            return new Promise((resolve)=>{\n                // interval for render the result after each iteration\n                this.timeInterval = window.setInterval(()=>{\n                    if (!nodes || !this.running) resolve({\n                        nodes: $92cd346d3bd9f938$var$formatOutNodes(graph, layoutNodes),\n                        edges: edges\n                    });\n                    this.runOneStep(calcGraph, graph, iter, velMap, formattedOptions);\n                    this.updatePosition(graph, calcGraph, velMap, formattedOptions);\n                    if (assign) layoutNodes.forEach((node)=>graph.mergeNodeData(node.id, {\n                            x: node.data.x,\n                            y: node.data.y,\n                            z: dimensions === 3 ? node.data.z : undefined\n                        }));\n                    onTick === null || onTick === void 0 || onTick({\n                        nodes: $92cd346d3bd9f938$var$formatOutNodes(graph, layoutNodes),\n                        edges: edges\n                    });\n                    iter++;\n                    if (iter >= maxIteration || this.judgingDistance < minMovement) {\n                        window.clearInterval(this.timeInterval);\n                        resolve({\n                            nodes: $92cd346d3bd9f938$var$formatOutNodes(graph, layoutNodes),\n                            edges: edges\n                        });\n                    }\n                }, 0);\n                this.running = true;\n            });\n        });\n    }\n    /**\n     * Format merged layout options.\n     * @param options merged layout options\n     * @param graph original graph\n     * @returns\n     */ formatOptions(options, graph) {\n        const formattedOptions = Object.assign({}, options);\n        const { width: propsWidth, height: propsHeight, getMass: getMass } = options;\n        // === formating width, height, and center =====\n        formattedOptions.width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n        formattedOptions.height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n        if (!options.center) formattedOptions.center = [\n            formattedOptions.width / 2,\n            formattedOptions.height / 2\n        ];\n        // === formating node mass =====\n        if (!getMass) formattedOptions.getMass = (d)=>{\n            let massWeight = 1;\n            if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(d === null || d === void 0 ? void 0 : d.data.mass)) massWeight = d === null || d === void 0 ? void 0 : d.data.mass;\n            const degree = graph.getDegree(d.id, 'both');\n            return !degree || degree < 5 ? massWeight : degree * 5 * massWeight;\n        };\n        // === formating node size =====\n        formattedOptions.nodeSize = (0, $0a789d93f195d394$export$3a7a80b0f3334abe)(options.nodeSize, options.nodeSpacing);\n        // === formating node / edge strengths =====\n        const linkDistanceFn = options.linkDistance ? (0, $0a789d93f195d394$export$54ea943624daf252)(1, options.linkDistance) : (edge)=>{\n            return 1 + formattedOptions.nodeSize(graph.getNode(edge.source)) + formattedOptions.nodeSize(graph.getNode(edge.target));\n        };\n        formattedOptions.linkDistance = linkDistanceFn;\n        formattedOptions.nodeStrength = (0, $0a789d93f195d394$export$54ea943624daf252)(1, options.nodeStrength);\n        formattedOptions.edgeStrength = (0, $0a789d93f195d394$export$54ea943624daf252)(1, options.edgeStrength);\n        return formattedOptions;\n    }\n    /**\n     * Format centripetalOption in the option.\n     * @param options merged layout options\n     * @param calcGraph calculation graph\n     */ formatCentripetal(options, calcGraph) {\n        const { dimensions: dimensions, centripetalOptions: centripetalOptions, center: center, clusterNodeStrength: clusterNodeStrength, leafCluster: leafCluster, clustering: clustering, nodeClusterBy: nodeClusterBy } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        // === formating centripetalOptions =====\n        const basicCentripetal = centripetalOptions || {\n            leaf: 2,\n            single: 2,\n            others: 1,\n            // eslint-disable-next-line\n            center: (n)=>{\n                return {\n                    x: center[0],\n                    y: center[1],\n                    z: dimensions === 3 ? center[2] : undefined\n                };\n            }\n        };\n        if (typeof clusterNodeStrength !== 'function') options.clusterNodeStrength = (node)=>clusterNodeStrength;\n        let sameTypeLeafMap;\n        let clusters;\n        if (leafCluster && nodeClusterBy) {\n            sameTypeLeafMap = $92cd346d3bd9f938$var$getSameTypeLeafMap(calcGraph, nodeClusterBy);\n            clusters = Array.from(new Set(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.map((node)=>node.data[nodeClusterBy]))) || [];\n            // @ts-ignore\n            options.centripetalOptions = Object.assign(basicCentripetal, {\n                single: 100,\n                leaf: (node)=>{\n                    // 找出与它关联的边的起点或终点出发的所有一度节点中同类型的叶子节点\n                    const { siblingLeaves: siblingLeaves, sameTypeLeaves: sameTypeLeaves } = sameTypeLeafMap[node.id] || {};\n                    // 如果都是同一类型或者每种类型只有1个，则施加默认向心力\n                    if ((sameTypeLeaves === null || sameTypeLeaves === void 0 ? void 0 : sameTypeLeaves.length) === (siblingLeaves === null || siblingLeaves === void 0 ? void 0 : siblingLeaves.length) || (clusters === null || clusters === void 0 ? void 0 : clusters.length) === 1) return 1;\n                    return options.clusterNodeStrength(node);\n                },\n                others: 1,\n                center: (node)=>{\n                    const degree = calcGraph.getDegree(node.id, 'both');\n                    // 孤点默认给1个远离的中心点\n                    if (!degree) return {\n                        x: 100,\n                        y: 100,\n                        z: 0\n                    };\n                    let centerPos;\n                    if (degree === 1) {\n                        // 如果为叶子节点\n                        // 找出与它关联的边的起点出发的所有一度节点中同类型的叶子节点\n                        const { sameTypeLeaves: sameTypeLeaves = [] } = sameTypeLeafMap[node.id] || {};\n                        if (sameTypeLeaves.length === 1) // 如果同类型的叶子节点只有1个，中心位置为undefined\n                        centerPos = undefined;\n                        else if (sameTypeLeaves.length > 1) // 找出同类型节点平均位置作为中心\n                        centerPos = $92cd346d3bd9f938$var$getAvgNodePosition(sameTypeLeaves);\n                    } else centerPos = undefined;\n                    return {\n                        x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n                        y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n                        z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z\n                    };\n                }\n            });\n        }\n        if (clustering && nodeClusterBy) {\n            if (!sameTypeLeafMap) sameTypeLeafMap = $92cd346d3bd9f938$var$getSameTypeLeafMap(calcGraph, nodeClusterBy);\n            if (!clusters) clusters = Array.from(new Set(calcNodes.map((node)=>node.data[nodeClusterBy])));\n            clusters = clusters.filter((item)=>item !== undefined);\n            const centerInfo = {};\n            clusters.forEach((cluster)=>{\n                const sameTypeNodes = calcNodes.filter((node)=>node.data[nodeClusterBy] === cluster).map((node)=>calcGraph.getNode(node.id));\n                // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                centerInfo[cluster] = $92cd346d3bd9f938$var$getAvgNodePosition(sameTypeNodes);\n            });\n            options.centripetalOptions = Object.assign(basicCentripetal, {\n                single: (node)=>options.clusterNodeStrength(node),\n                leaf: (node)=>options.clusterNodeStrength(node),\n                others: (node)=>options.clusterNodeStrength(node),\n                center: (node)=>{\n                    // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                    const centerPos = centerInfo[node.data[nodeClusterBy]];\n                    return {\n                        x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n                        y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n                        z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z\n                    };\n                }\n            });\n        }\n        const { leaf: leaf, single: single, others: others } = options.centripetalOptions || {};\n        if (leaf && typeof leaf !== 'function') options.centripetalOptions.leaf = ()=>leaf;\n        if (single && typeof single !== 'function') options.centripetalOptions.single = ()=>single;\n        if (others && typeof others !== 'function') options.centripetalOptions.others = ()=>others;\n    }\n    /**\n     * One iteration.\n     * @param calcGraph calculation graph\n     * @param graph origin graph\n     * @param iter current iteration index\n     * @param velMap nodes' velocity map\n     * @param options formatted layout options\n     * @returns\n     */ runOneStep(calcGraph, graph, iter, velMap, options) {\n        const accMap = {};\n        const calcNodes = calcGraph.getAllNodes();\n        const calcEdges = calcGraph.getAllEdges();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return;\n        const { monitor: monitor } = options;\n        this.calRepulsive(calcGraph, accMap, options);\n        if (calcEdges) this.calAttractive(calcGraph, accMap, options);\n        this.calGravity(calcGraph, graph, accMap, options);\n        this.updateVelocity(calcGraph, accMap, velMap, options);\n        /** 如果需要监控信息，则提供给用户 */ if (monitor) {\n            const energy = this.calTotalEnergy(accMap, calcNodes);\n            monitor({\n                energy: energy,\n                nodes: graph.getAllNodes(),\n                edges: graph.getAllEdges(),\n                iterations: iter\n            });\n        }\n    }\n    /**\n     * Calculate graph energy for monitoring convergence.\n     * @param accMap acceleration map\n     * @param nodes calculation nodes\n     * @returns energy\n     */ calTotalEnergy(accMap, nodes) {\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return 0;\n        let energy = 0.0;\n        nodes.forEach((node, i)=>{\n            const vx = accMap[node.id].x;\n            const vy = accMap[node.id].y;\n            const vz = this.options.dimensions === 3 ? accMap[node.id].z : 0;\n            const speed2 = vx * vx + vy * vy + vz * vz;\n            const { mass: mass = 1 } = node.data;\n            energy += mass * speed2 * 0.5; // p = 1/2*(mv^2)\n        });\n        return energy;\n    }\n    /**\n     * Calculate the repulsive forces according to coulombs law.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     * @param options formatted layout options\n     */ calRepulsive(calcGraph, accMap, options) {\n        const { dimensions: dimensions, factor: factor, coulombDisScale: coulombDisScale } = options;\n        (0, $b6856b13833883c2$export$fef20e2a22d94f43)(calcGraph, factor, coulombDisScale * coulombDisScale, accMap, dimensions);\n    }\n    /**\n     * Calculate the attractive forces according to hooks law.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     */ calAttractive(calcGraph, accMap, options) {\n        const { dimensions: dimensions, nodeSize: nodeSize } = options;\n        calcGraph.getAllEdges().forEach((edge, i)=>{\n            const { source: source, target: target } = edge;\n            const sourceNode = calcGraph.getNode(source);\n            const targetNode = calcGraph.getNode(target);\n            if (!sourceNode || !targetNode) return;\n            let vecX = targetNode.data.x - sourceNode.data.x;\n            let vecY = targetNode.data.y - sourceNode.data.y;\n            let vecZ = dimensions === 3 ? targetNode.data.z - sourceNode.data.z : 0;\n            if (!vecX && !vecY) {\n                vecX = Math.random() * 0.01;\n                vecY = Math.random() * 0.01;\n                if (dimensions === 3 && !vecZ) vecZ = Math.random() * 0.01;\n            }\n            const vecLength = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ);\n            if (vecLength < nodeSize(sourceNode) + nodeSize(targetNode)) return;\n            const direX = vecX / vecLength;\n            const direY = vecY / vecLength;\n            const direZ = vecZ / vecLength;\n            const { linkDistance: linkDistance = 200, edgeStrength: edgeStrength = 200 } = edge.data || {};\n            const diff = linkDistance - vecLength;\n            const param = diff * edgeStrength;\n            const massSource = sourceNode.data.mass || 1;\n            const massTarget = targetNode.data.mass || 1;\n            // 质量占比越大，对另一端影响程度越大\n            const sourceMassRatio = 1 / massSource;\n            const targetMassRatio = 1 / massTarget;\n            const disX = direX * param;\n            const disY = direY * param;\n            const disZ = direZ * param;\n            accMap[source].x -= disX * sourceMassRatio;\n            accMap[source].y -= disY * sourceMassRatio;\n            accMap[source].z -= disZ * sourceMassRatio;\n            accMap[target].x += disX * targetMassRatio;\n            accMap[target].y += disY * targetMassRatio;\n            accMap[target].z += disZ * targetMassRatio;\n        });\n    }\n    /**\n     * Calculate the gravity forces toward center.\n     * @param calcGraph calculation graph\n     * @param graph origin graph\n     * @param accMap acceleration map\n     * @param options formatted layout options\n     */ calGravity(calcGraph, graph, accMap, options) {\n        const { getCenter: getCenter } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        const nodes = graph.getAllNodes();\n        const edges = graph.getAllEdges();\n        const { width: width, height: height, center: center, gravity: defaultGravity, centripetalOptions: centripetalOptions } = options;\n        if (!calcNodes) return;\n        calcNodes.forEach((calcNode)=>{\n            const { id: id, data: data } = calcNode;\n            const { mass: mass, x: x, y: y, z: z } = data;\n            const node = graph.getNode(id);\n            let vecX = 0;\n            let vecY = 0;\n            let vecZ = 0;\n            let gravity = defaultGravity;\n            const inDegree = calcGraph.getDegree(id, 'in');\n            const outDegree = calcGraph.getDegree(id, 'out');\n            const degree = calcGraph.getDegree(id, 'both');\n            const forceCenter = getCenter === null || getCenter === void 0 ? void 0 : getCenter(node, degree);\n            if (forceCenter) {\n                const [centerX, centerY, strength] = forceCenter;\n                vecX = x - centerX;\n                vecY = y - centerY;\n                gravity = strength;\n            } else {\n                vecX = x - center[0];\n                vecY = y - center[1];\n                vecZ = z - center[2];\n            }\n            if (gravity) {\n                accMap[id].x -= gravity * vecX / mass;\n                accMap[id].y -= gravity * vecY / mass;\n                accMap[id].z -= gravity * vecZ / mass;\n            }\n            if (centripetalOptions) {\n                const { leaf: leaf, single: single, others: others, center: centriCenter } = centripetalOptions;\n                const { x: centriX, y: centriY, z: centriZ, centerStrength: centerStrength } = (centriCenter === null || centriCenter === void 0 ? void 0 : centriCenter(node, nodes, edges, width, height)) || {\n                    x: 0,\n                    y: 0,\n                    z: 0,\n                    centerStrength: 0\n                };\n                if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(centriX) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(centriY)) return;\n                const vx = (x - centriX) / mass;\n                const vy = (y - centriY) / mass;\n                const vz = (z - centriZ) / mass;\n                if (centerStrength) {\n                    accMap[id].x -= centerStrength * vx;\n                    accMap[id].y -= centerStrength * vy;\n                    accMap[id].z -= centerStrength * vz;\n                }\n                // 孤点\n                if (degree === 0) {\n                    const singleStrength = single(node);\n                    if (!singleStrength) return;\n                    accMap[id].x -= singleStrength * vx;\n                    accMap[id].y -= singleStrength * vy;\n                    accMap[id].z -= singleStrength * vz;\n                    return;\n                }\n                // 没有出度或没有入度，都认为是叶子节点\n                if (inDegree === 0 || outDegree === 0) {\n                    const leafStrength = leaf(node, nodes, edges);\n                    if (!leafStrength) return;\n                    accMap[id].x -= leafStrength * vx;\n                    accMap[id].y -= leafStrength * vy;\n                    accMap[id].z -= leafStrength * vz;\n                    return;\n                }\n                /** others */ const othersStrength = others(node);\n                if (!othersStrength) return;\n                accMap[id].x -= othersStrength * vx;\n                accMap[id].y -= othersStrength * vy;\n                accMap[id].z -= othersStrength * vz;\n            }\n        });\n    }\n    /**\n     * Update the velocities for nodes.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     * @param velMap velocity map\n     * @param options formatted layout options\n     * @returns\n     */ updateVelocity(calcGraph, accMap, velMap, options) {\n        const { damping: damping, maxSpeed: maxSpeed, interval: interval, dimensions: dimensions } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return;\n        calcNodes.forEach((calcNode)=>{\n            const { id: id } = calcNode;\n            let vx = (velMap[id].x + accMap[id].x * interval) * damping || 0.01;\n            let vy = (velMap[id].y + accMap[id].y * interval) * damping || 0.01;\n            let vz = dimensions === 3 ? (velMap[id].z + accMap[id].z * interval) * damping || 0.01 : 0.0;\n            const vLength = Math.sqrt(vx * vx + vy * vy + vz * vz);\n            if (vLength > maxSpeed) {\n                const param2 = maxSpeed / vLength;\n                vx = param2 * vx;\n                vy = param2 * vy;\n                vz = param2 * vz;\n            }\n            velMap[id] = {\n                x: vx,\n                y: vy,\n                z: vz\n            };\n        });\n    }\n    /**\n     * Update nodes' positions.\n     * @param graph origin graph\n     * @param calcGraph calculatition graph\n     * @param velMap velocity map\n     * @param options formatted layou options\n     * @returns\n     */ updatePosition(graph, calcGraph, velMap, options) {\n        const { distanceThresholdMode: distanceThresholdMode, interval: interval, dimensions: dimensions } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) {\n            this.judgingDistance = 0;\n            return;\n        }\n        let sum = 0;\n        if (distanceThresholdMode === 'max') this.judgingDistance = -Infinity;\n        else if (distanceThresholdMode === 'min') this.judgingDistance = Infinity;\n        calcNodes.forEach((calcNode)=>{\n            const { id: id } = calcNode;\n            const node = graph.getNode(id);\n            if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(node.data.fx) && (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(node.data.fy)) {\n                calcGraph.mergeNodeData(id, {\n                    x: node.data.fx,\n                    y: node.data.fy,\n                    z: dimensions === 3 ? node.data.fz : undefined\n                });\n                return;\n            }\n            const distX = velMap[id].x * interval;\n            const distY = velMap[id].y * interval;\n            const distZ = dimensions === 3 ? velMap[id].z * interval : 0.0;\n            calcGraph.mergeNodeData(id, {\n                x: calcNode.data.x + distX,\n                y: calcNode.data.y + distY,\n                z: calcNode.data.z + distZ\n            });\n            const distanceMagnitude = Math.sqrt(distX * distX + distY * distY + distZ * distZ);\n            switch(distanceThresholdMode){\n                case 'max':\n                    if (this.judgingDistance < distanceMagnitude) this.judgingDistance = distanceMagnitude;\n                    break;\n                case 'min':\n                    if (this.judgingDistance > distanceMagnitude) this.judgingDistance = distanceMagnitude;\n                    break;\n                default:\n                    sum = sum + distanceMagnitude;\n                    break;\n            }\n        });\n        if (!distanceThresholdMode || distanceThresholdMode === 'mean') this.judgingDistance = sum / calcNodes.length;\n    }\n}\n/**\n * Group the leaf nodes according to nodeClusterBy field.\n * @param calcGraph calculation graph\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns related same group leaf nodes for each leaf node\n */ const $92cd346d3bd9f938$var$getSameTypeLeafMap = (calcGraph, nodeClusterBy)=>{\n    const calcNodes = calcGraph.getAllNodes();\n    if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) return {};\n    const sameTypeLeafMap = {};\n    calcNodes.forEach((node, i)=>{\n        const degree = calcGraph.getDegree(node.id, 'both');\n        if (degree === 1) sameTypeLeafMap[node.id] = $92cd346d3bd9f938$var$getCoreNodeAndSiblingLeaves(calcGraph, 'leaf', node, nodeClusterBy);\n    });\n    return sameTypeLeafMap;\n};\n/**\n * Find the successor or predecessor of node as coreNode, the sibling leaf nodes\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param node the target node\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns coreNode, sibling leaf nodes, and grouped sibling leaf nodes\n */ const $92cd346d3bd9f938$var$getCoreNodeAndSiblingLeaves = (calcGraph, type, node, nodeClusterBy)=>{\n    const inDegree = calcGraph.getDegree(node.id, 'in');\n    const outDegree = calcGraph.getDegree(node.id, 'out');\n    // node is not a leaf, coreNode is itself, siblingLeaves is empty\n    let coreNode = node;\n    let siblingLeaves = [];\n    if (inDegree === 0) {\n        // node is a leaf node without out edges, its related(successor) node is coreNode, siblingLeaves is the neighbors of its related node\n        coreNode = calcGraph.getSuccessors(node.id)[0];\n        siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n    } else if (outDegree === 0) {\n        // node is a leaf node without in edges, its related(predecessor) node is coreNode, siblingLeaves is the neighbors of its related node\n        coreNode = calcGraph.getPredecessors(node.id)[0];\n        siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n    }\n    // siblingLeaves are leaf nodes\n    siblingLeaves = siblingLeaves.filter((node)=>calcGraph.getDegree(node.id, 'in') === 0 || calcGraph.getDegree(node.id, 'out') === 0);\n    const sameTypeLeaves = $92cd346d3bd9f938$var$getSameTypeNodes(calcGraph, type, nodeClusterBy, node, siblingLeaves);\n    return {\n        coreNode: coreNode,\n        siblingLeaves: siblingLeaves,\n        sameTypeLeaves: sameTypeLeaves\n    };\n};\n/**\n * Find the same type (according to nodeClusterBy field) of node in relativeNodes.\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @param node the target node\n * @param relativeNodes node's related ndoes to be filtered\n * @returns related nodes that meet the filtering conditions\n */ const $92cd346d3bd9f938$var$getSameTypeNodes = (calcGraph, type, nodeClusterBy, node, relativeNodes)=>{\n    const typeName = node.data[nodeClusterBy] || '';\n    let sameTypeNodes = (relativeNodes === null || relativeNodes === void 0 ? void 0 : relativeNodes.filter((item)=>item.data[nodeClusterBy] === typeName)) || [];\n    if (type === 'leaf') sameTypeNodes = sameTypeNodes.filter((item)=>calcGraph.getDegree(item.id, 'in') === 0 || calcGraph.getDegree(item.id, 'out') === 0);\n    return sameTypeNodes;\n};\n/**\n * Get the average position of nodes.\n * @param nodes nodes set\n * @returns average ppsition\n */ const $92cd346d3bd9f938$var$getAvgNodePosition = (nodes)=>{\n    const totalNodes = {\n        x: 0,\n        y: 0\n    };\n    nodes.forEach((node)=>{\n        const { x: x, y: y } = node.data;\n        totalNodes.x += x || 0;\n        totalNodes.y += y || 0;\n    });\n    // 获取均值向量\n    const length = nodes.length || 1;\n    return {\n        x: totalNodes.x / length,\n        y: totalNodes.y / length\n    };\n};\n/**\n * Format the output nodes from CalcNode[].\n * @param graph origin graph\n * @param layoutNodes calculation nodes\n * @returns output nodes\n */ const $92cd346d3bd9f938$var$formatOutNodes = (graph, layoutNodes)=>layoutNodes.map((calcNode)=>{\n        const { id: id, data: data } = calcNode;\n        const node = graph.getNode(id);\n        return Object.assign(Object.assign({}, node), {\n            data: Object.assign(Object.assign({}, node.data), {\n                x: data.x,\n                y: data.y,\n                z: data.z\n            })\n        });\n    });\n\n\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst $2de0c695164809c4$var$toString = Object.prototype.toString;\nfunction $2de0c695164809c4$export$b587624c098d7880(value) {\n    const tag = $2de0c695164809c4$var$toString.call(value);\n    return tag.endsWith('Array]') && !tag.includes('Big');\n}\n\n\n\n\nfunction $baa8c1ec59b98971$export$2e2bcd8739ae039(input) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!(0, $2de0c695164809c4$export$b587624c098d7880)(input)) throw new TypeError('input must be an array');\n    if (input.length === 0) throw new TypeError('input must not be empty');\n    var _options$fromIndex = options.fromIndex, fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex, _options$toIndex = options.toIndex, toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n    if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) throw new Error('fromIndex must be a positive integer smaller than length');\n    if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n    var maxValue = input[fromIndex];\n    for(var i = fromIndex + 1; i < toIndex; i++)if (input[i] > maxValue) maxValue = input[i];\n    return maxValue;\n}\n\n\n\nfunction $c66aeec6ed9a32a0$export$2e2bcd8739ae039(input) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!(0, $2de0c695164809c4$export$b587624c098d7880)(input)) throw new TypeError('input must be an array');\n    if (input.length === 0) throw new TypeError('input must not be empty');\n    var _options$fromIndex = options.fromIndex, fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex, _options$toIndex = options.toIndex, toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n    if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) throw new Error('fromIndex must be a positive integer smaller than length');\n    if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n    var minValue = input[fromIndex];\n    for(var i = fromIndex + 1; i < toIndex; i++)if (input[i] < minValue) minValue = input[i];\n    return minValue;\n}\n\n\nfunction $0baf16655112703d$export$2e2bcd8739ae039(input) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!(0, $2de0c695164809c4$export$b587624c098d7880)(input)) throw new TypeError('input must be an array');\n    else if (input.length === 0) throw new TypeError('input must not be empty');\n    var output;\n    if (options.output !== undefined) {\n        if (!(0, $2de0c695164809c4$export$b587624c098d7880)(options.output)) throw new TypeError('output option must be an array if specified');\n        output = options.output;\n    } else output = new Array(input.length);\n    var currentMin = (0, $c66aeec6ed9a32a0$export$2e2bcd8739ae039)(input);\n    var currentMax = (0, $baa8c1ec59b98971$export$2e2bcd8739ae039)(input);\n    if (currentMin === currentMax) throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n    var _options$min = options.min, minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min, _options$max = options.max, maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n    if (minValue >= maxValue) throw new RangeError('min option must be smaller than max option');\n    var factor = (maxValue - minValue) / (currentMax - currentMin);\n    for(var i = 0; i < input.length; i++)output[i] = (input[i] - currentMin) * factor + minValue;\n    return output;\n}\n\n\nconst $32acbc006b852959$var$indent = ' '.repeat(2);\nconst $32acbc006b852959$var$indentData = ' '.repeat(4);\nfunction $32acbc006b852959$export$b1353423cee91caf() {\n    return $32acbc006b852959$export$66f7e3f9359f0f9e(this);\n}\nfunction $32acbc006b852959$export$66f7e3f9359f0f9e(matrix, options = {}) {\n    const { maxRows: maxRows = 15, maxColumns: maxColumns = 10, maxNumSize: maxNumSize = 8, padMinus: padMinus = 'auto' } = options;\n    return `${matrix.constructor.name} {\n${$32acbc006b852959$var$indent}[\n${$32acbc006b852959$var$indentData}${$32acbc006b852959$var$inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${$32acbc006b852959$var$indent}]\n${$32acbc006b852959$var$indent}rows: ${matrix.rows}\n${$32acbc006b852959$var$indent}columns: ${matrix.columns}\n}`;\n}\nfunction $32acbc006b852959$var$inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n    const { rows: rows, columns: columns } = matrix;\n    const maxI = Math.min(rows, maxRows);\n    const maxJ = Math.min(columns, maxColumns);\n    const result = [];\n    if (padMinus === 'auto') {\n        padMinus = false;\n        loop: for(let i = 0; i < maxI; i++){\n            for(let j = 0; j < maxJ; j++)if (matrix.get(i, j) < 0) {\n                padMinus = true;\n                break loop;\n            }\n        }\n    }\n    for(let i = 0; i < maxI; i++){\n        let line = [];\n        for(let j = 0; j < maxJ; j++)line.push($32acbc006b852959$var$formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n        result.push(`${line.join(' ')}`);\n    }\n    if (maxJ !== columns) result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n    if (maxI !== rows) result.push(`... ${rows - maxRows} more rows`);\n    return result.join(`\\n${$32acbc006b852959$var$indentData}`);\n}\nfunction $32acbc006b852959$var$formatNumber(num, maxNumSize, padMinus) {\n    return (num >= 0 && padMinus ? ` ${$32acbc006b852959$var$formatNumber2(num, maxNumSize - 1)}` : $32acbc006b852959$var$formatNumber2(num, maxNumSize)).padEnd(maxNumSize);\n}\nfunction $32acbc006b852959$var$formatNumber2(num, len) {\n    // small.length numbers should be as is\n    let str = num.toString();\n    if (str.length <= len) return str;\n    // (7)'0.00123' is better then (7)'1.23e-2'\n    // (8)'0.000123' is worse then (7)'1.23e-3',\n    let fix = num.toFixed(len);\n    if (fix.length > len) fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n    if (fix.length <= len && !fix.startsWith('0.000') && !fix.startsWith('-0.000')) return fix;\n    // well, if it's still too long the user should've used longer numbers\n    let exp = num.toExponential(len);\n    if (exp.length > len) exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n    return exp.slice(0);\n}\n\n\nfunction $4ad79b664750787f$export$f9fe1a46265a1978(AbstractMatrix, Matrix) {\n    AbstractMatrix.prototype.add = function add(value) {\n        if (typeof value === 'number') return this.addS(value);\n        return this.addM(value);\n    };\n    AbstractMatrix.prototype.addS = function addS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) + value);\n        return this;\n    };\n    AbstractMatrix.prototype.addM = function addM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) + matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.add = function add(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.add(value);\n    };\n    AbstractMatrix.prototype.sub = function sub(value) {\n        if (typeof value === 'number') return this.subS(value);\n        return this.subM(value);\n    };\n    AbstractMatrix.prototype.subS = function subS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) - value);\n        return this;\n    };\n    AbstractMatrix.prototype.subM = function subM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) - matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.sub = function sub(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.sub(value);\n    };\n    AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n    AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n    AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n    AbstractMatrix.subtract = AbstractMatrix.sub;\n    AbstractMatrix.prototype.mul = function mul(value) {\n        if (typeof value === 'number') return this.mulS(value);\n        return this.mulM(value);\n    };\n    AbstractMatrix.prototype.mulS = function mulS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) * value);\n        return this;\n    };\n    AbstractMatrix.prototype.mulM = function mulM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) * matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.mul = function mul(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.mul(value);\n    };\n    AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n    AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n    AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n    AbstractMatrix.multiply = AbstractMatrix.mul;\n    AbstractMatrix.prototype.div = function div(value) {\n        if (typeof value === 'number') return this.divS(value);\n        return this.divM(value);\n    };\n    AbstractMatrix.prototype.divS = function divS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) / value);\n        return this;\n    };\n    AbstractMatrix.prototype.divM = function divM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) / matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.div = function div(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.div(value);\n    };\n    AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n    AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n    AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n    AbstractMatrix.divide = AbstractMatrix.div;\n    AbstractMatrix.prototype.mod = function mod(value) {\n        if (typeof value === 'number') return this.modS(value);\n        return this.modM(value);\n    };\n    AbstractMatrix.prototype.modS = function modS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) % value);\n        return this;\n    };\n    AbstractMatrix.prototype.modM = function modM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) % matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.mod = function mod(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.mod(value);\n    };\n    AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n    AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n    AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n    AbstractMatrix.modulus = AbstractMatrix.mod;\n    AbstractMatrix.prototype.and = function and(value) {\n        if (typeof value === 'number') return this.andS(value);\n        return this.andM(value);\n    };\n    AbstractMatrix.prototype.andS = function andS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) & value);\n        return this;\n    };\n    AbstractMatrix.prototype.andM = function andM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) & matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.and = function and(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.and(value);\n    };\n    AbstractMatrix.prototype.or = function or(value) {\n        if (typeof value === 'number') return this.orS(value);\n        return this.orM(value);\n    };\n    AbstractMatrix.prototype.orS = function orS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) | value);\n        return this;\n    };\n    AbstractMatrix.prototype.orM = function orM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) | matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.or = function or(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.or(value);\n    };\n    AbstractMatrix.prototype.xor = function xor(value) {\n        if (typeof value === 'number') return this.xorS(value);\n        return this.xorM(value);\n    };\n    AbstractMatrix.prototype.xorS = function xorS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) ^ value);\n        return this;\n    };\n    AbstractMatrix.prototype.xorM = function xorM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.xor = function xor(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.xor(value);\n    };\n    AbstractMatrix.prototype.leftShift = function leftShift(value) {\n        if (typeof value === 'number') return this.leftShiftS(value);\n        return this.leftShiftM(value);\n    };\n    AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) << value);\n        return this;\n    };\n    AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) << matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.leftShift = function leftShift(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.leftShift(value);\n    };\n    AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n        if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n        return this.signPropagatingRightShiftM(value);\n    };\n    AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) >> value);\n        return this;\n    };\n    AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.signPropagatingRightShift(value);\n    };\n    AbstractMatrix.prototype.rightShift = function rightShift(value) {\n        if (typeof value === 'number') return this.rightShiftS(value);\n        return this.rightShiftM(value);\n    };\n    AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) >>> value);\n        return this;\n    };\n    AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n        return this;\n    };\n    AbstractMatrix.rightShift = function rightShift(matrix, value) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.rightShift(value);\n    };\n    AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n    AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n    AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n    AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n    AbstractMatrix.prototype.not = function not() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, ~this.get(i, j));\n        return this;\n    };\n    AbstractMatrix.not = function not(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.not();\n    };\n    AbstractMatrix.prototype.abs = function abs() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.abs(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.abs = function abs(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.abs();\n    };\n    AbstractMatrix.prototype.acos = function acos() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.acos(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.acos = function acos(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.acos();\n    };\n    AbstractMatrix.prototype.acosh = function acosh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.acosh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.acosh = function acosh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.acosh();\n    };\n    AbstractMatrix.prototype.asin = function asin() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.asin(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.asin = function asin(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.asin();\n    };\n    AbstractMatrix.prototype.asinh = function asinh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.asinh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.asinh = function asinh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.asinh();\n    };\n    AbstractMatrix.prototype.atan = function atan() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.atan(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.atan = function atan(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.atan();\n    };\n    AbstractMatrix.prototype.atanh = function atanh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.atanh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.atanh = function atanh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.atanh();\n    };\n    AbstractMatrix.prototype.cbrt = function cbrt() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.cbrt(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.cbrt = function cbrt(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.cbrt();\n    };\n    AbstractMatrix.prototype.ceil = function ceil() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.ceil(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.ceil = function ceil(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.ceil();\n    };\n    AbstractMatrix.prototype.clz32 = function clz32() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.clz32(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.clz32 = function clz32(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.clz32();\n    };\n    AbstractMatrix.prototype.cos = function cos() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.cos(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.cos = function cos(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.cos();\n    };\n    AbstractMatrix.prototype.cosh = function cosh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.cosh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.cosh = function cosh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.cosh();\n    };\n    AbstractMatrix.prototype.exp = function exp() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.exp(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.exp = function exp(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.exp();\n    };\n    AbstractMatrix.prototype.expm1 = function expm1() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.expm1(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.expm1 = function expm1(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.expm1();\n    };\n    AbstractMatrix.prototype.floor = function floor() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.floor(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.floor = function floor(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.floor();\n    };\n    AbstractMatrix.prototype.fround = function fround() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.fround(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.fround = function fround(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.fround();\n    };\n    AbstractMatrix.prototype.log = function log() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.log(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.log = function log(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.log();\n    };\n    AbstractMatrix.prototype.log1p = function log1p() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.log1p(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.log1p = function log1p(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.log1p();\n    };\n    AbstractMatrix.prototype.log10 = function log10() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.log10(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.log10 = function log10(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.log10();\n    };\n    AbstractMatrix.prototype.log2 = function log2() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.log2(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.log2 = function log2(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.log2();\n    };\n    AbstractMatrix.prototype.round = function round() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.round(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.round = function round(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.round();\n    };\n    AbstractMatrix.prototype.sign = function sign() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.sign(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.sign = function sign(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.sign();\n    };\n    AbstractMatrix.prototype.sin = function sin() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.sin(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.sin = function sin(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.sin();\n    };\n    AbstractMatrix.prototype.sinh = function sinh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.sinh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.sinh = function sinh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.sinh();\n    };\n    AbstractMatrix.prototype.sqrt = function sqrt() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.sqrt(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.sqrt = function sqrt(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.sqrt();\n    };\n    AbstractMatrix.prototype.tan = function tan() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.tan(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.tan = function tan(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.tan();\n    };\n    AbstractMatrix.prototype.tanh = function tanh() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.tanh(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.tanh = function tanh(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.tanh();\n    };\n    AbstractMatrix.prototype.trunc = function trunc() {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, Math.trunc(this.get(i, j)));\n        return this;\n    };\n    AbstractMatrix.trunc = function trunc(matrix) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.trunc();\n    };\n    AbstractMatrix.pow = function pow(matrix, arg0) {\n        const newMatrix = new Matrix(matrix);\n        return newMatrix.pow(arg0);\n    };\n    AbstractMatrix.prototype.pow = function pow(value) {\n        if (typeof value === 'number') return this.powS(value);\n        return this.powM(value);\n    };\n    AbstractMatrix.prototype.powS = function powS(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) ** value);\n        return this;\n    };\n    AbstractMatrix.prototype.powM = function powM(matrix) {\n        matrix = Matrix.checkMatrix(matrix);\n        if (this.rows !== matrix.rows || this.columns !== matrix.columns) throw new RangeError('Matrices dimensions must be equal');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n        return this;\n    };\n}\n\n\n\nfunction $da7aaf9942a3acc4$export$1c43f07899a70228(matrix, index, outer) {\n    let max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) throw new RangeError('Row index out of range');\n}\nfunction $da7aaf9942a3acc4$export$9f3f99fd4fb91358(matrix, index, outer) {\n    let max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) throw new RangeError('Column index out of range');\n}\nfunction $da7aaf9942a3acc4$export$af0312fee396fd93(matrix, vector) {\n    if (vector.to1DArray) vector = vector.to1DArray();\n    if (vector.length !== matrix.columns) throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n}\nfunction $da7aaf9942a3acc4$export$d13fb0648ea9f6c7(matrix, vector) {\n    if (vector.to1DArray) vector = vector.to1DArray();\n    if (vector.length !== matrix.rows) throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n}\nfunction $da7aaf9942a3acc4$export$f1ebfb29aa181ce9(matrix, rowIndices) {\n    if (!(0, $2de0c695164809c4$export$b587624c098d7880)(rowIndices)) throw new TypeError('row indices must be an array');\n    for(let i = 0; i < rowIndices.length; i++){\n        if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) throw new RangeError('row indices are out of range');\n    }\n}\nfunction $da7aaf9942a3acc4$export$2c3e14daf01f9739(matrix, columnIndices) {\n    if (!(0, $2de0c695164809c4$export$b587624c098d7880)(columnIndices)) throw new TypeError('column indices must be an array');\n    for(let i = 0; i < columnIndices.length; i++){\n        if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) throw new RangeError('column indices are out of range');\n    }\n}\nfunction $da7aaf9942a3acc4$export$da114b648d798864(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new RangeError('expected 4 arguments');\n    $da7aaf9942a3acc4$var$checkNumber('startRow', startRow);\n    $da7aaf9942a3acc4$var$checkNumber('endRow', endRow);\n    $da7aaf9942a3acc4$var$checkNumber('startColumn', startColumn);\n    $da7aaf9942a3acc4$var$checkNumber('endColumn', endColumn);\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) throw new RangeError('Submatrix indices are out of range');\n}\nfunction $da7aaf9942a3acc4$export$9ffbd50e3873ea06(length, value = 0) {\n    let array = [];\n    for(let i = 0; i < length; i++)array.push(value);\n    return array;\n}\nfunction $da7aaf9942a3acc4$var$checkNumber(name, value) {\n    if (typeof value !== 'number') throw new TypeError(`${name} must be a number`);\n}\nfunction $da7aaf9942a3acc4$export$f0dd04159b94e070(matrix) {\n    if (matrix.isEmpty()) throw new Error('Empty matrix has no elements to index');\n}\n\n\nfunction $559b0163e55d4cf4$export$8f455058137a1ae1(matrix) {\n    let sum = (0, $da7aaf9942a3acc4$export$9ffbd50e3873ea06)(matrix.rows);\n    for(let i = 0; i < matrix.rows; ++i)for(let j = 0; j < matrix.columns; ++j)sum[i] += matrix.get(i, j);\n    return sum;\n}\nfunction $559b0163e55d4cf4$export$76d99fcf491f8353(matrix) {\n    let sum = (0, $da7aaf9942a3acc4$export$9ffbd50e3873ea06)(matrix.columns);\n    for(let i = 0; i < matrix.rows; ++i)for(let j = 0; j < matrix.columns; ++j)sum[j] += matrix.get(i, j);\n    return sum;\n}\nfunction $559b0163e55d4cf4$export$e9666e11c29bfd93(matrix) {\n    let v = 0;\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)v += matrix.get(i, j);\n    return v;\n}\nfunction $559b0163e55d4cf4$export$c48f519082514e8e(matrix) {\n    let sum = (0, $da7aaf9942a3acc4$export$9ffbd50e3873ea06)(matrix.rows, 1);\n    for(let i = 0; i < matrix.rows; ++i)for(let j = 0; j < matrix.columns; ++j)sum[i] *= matrix.get(i, j);\n    return sum;\n}\nfunction $559b0163e55d4cf4$export$f896e61c4deaaeab(matrix) {\n    let sum = (0, $da7aaf9942a3acc4$export$9ffbd50e3873ea06)(matrix.columns, 1);\n    for(let i = 0; i < matrix.rows; ++i)for(let j = 0; j < matrix.columns; ++j)sum[j] *= matrix.get(i, j);\n    return sum;\n}\nfunction $559b0163e55d4cf4$export$dcf59fc14c9dc536(matrix) {\n    let v = 1;\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)v *= matrix.get(i, j);\n    return v;\n}\nfunction $559b0163e55d4cf4$export$12e045d6bca3f52f(matrix, unbiased, mean) {\n    const rows = matrix.rows;\n    const cols = matrix.columns;\n    const variance = [];\n    for(let i = 0; i < rows; i++){\n        let sum1 = 0;\n        let sum2 = 0;\n        let x = 0;\n        for(let j = 0; j < cols; j++){\n            x = matrix.get(i, j) - mean[i];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) variance.push((sum2 - sum1 * sum1 / cols) / (cols - 1));\n        else variance.push((sum2 - sum1 * sum1 / cols) / cols);\n    }\n    return variance;\n}\nfunction $559b0163e55d4cf4$export$8eaba4ad2bf7f22f(matrix, unbiased, mean) {\n    const rows = matrix.rows;\n    const cols = matrix.columns;\n    const variance = [];\n    for(let j = 0; j < cols; j++){\n        let sum1 = 0;\n        let sum2 = 0;\n        let x = 0;\n        for(let i = 0; i < rows; i++){\n            x = matrix.get(i, j) - mean[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) variance.push((sum2 - sum1 * sum1 / rows) / (rows - 1));\n        else variance.push((sum2 - sum1 * sum1 / rows) / rows);\n    }\n    return variance;\n}\nfunction $559b0163e55d4cf4$export$e41d45637057ea2f(matrix, unbiased, mean) {\n    const rows = matrix.rows;\n    const cols = matrix.columns;\n    const size = rows * cols;\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for(let i = 0; i < rows; i++)for(let j = 0; j < cols; j++){\n        x = matrix.get(i, j) - mean;\n        sum1 += x;\n        sum2 += x * x;\n    }\n    if (unbiased) return (sum2 - sum1 * sum1 / size) / (size - 1);\n    else return (sum2 - sum1 * sum1 / size) / size;\n}\nfunction $559b0163e55d4cf4$export$d657ff37d9803f2c(matrix, mean) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) - mean[i]);\n}\nfunction $559b0163e55d4cf4$export$a97d54bde1f37f4f(matrix, mean) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) - mean[j]);\n}\nfunction $559b0163e55d4cf4$export$4961127515ac14d9(matrix, mean) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) - mean);\n}\nfunction $559b0163e55d4cf4$export$401b5d1e21b3d95f(matrix) {\n    const scale = [];\n    for(let i = 0; i < matrix.rows; i++){\n        let sum = 0;\n        for(let j = 0; j < matrix.columns; j++)sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n        scale.push(Math.sqrt(sum));\n    }\n    return scale;\n}\nfunction $559b0163e55d4cf4$export$be914f666e802cef(matrix, scale) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) / scale[i]);\n}\nfunction $559b0163e55d4cf4$export$67bf442048b342f3(matrix) {\n    const scale = [];\n    for(let j = 0; j < matrix.columns; j++){\n        let sum = 0;\n        for(let i = 0; i < matrix.rows; i++)sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n        scale.push(Math.sqrt(sum));\n    }\n    return scale;\n}\nfunction $559b0163e55d4cf4$export$909f59241c977663(matrix, scale) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) / scale[j]);\n}\nfunction $559b0163e55d4cf4$export$1ca6b014d842307d(matrix) {\n    const divider = matrix.size - 1;\n    let sum = 0;\n    for(let j = 0; j < matrix.columns; j++)for(let i = 0; i < matrix.rows; i++)sum += matrix.get(i, j) ** 2 / divider;\n    return Math.sqrt(sum);\n}\nfunction $559b0163e55d4cf4$export$2049ee336508b8aa(matrix, scale) {\n    for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)matrix.set(i, j, matrix.get(i, j) / scale);\n}\n\n\n\nclass $d20607c8c82d3b0f$export$4b275fa73feb14fa {\n    static from1DArray(newRows, newColumns, newData) {\n        let length = newRows * newColumns;\n        if (length !== newData.length) throw new RangeError('data length does not match given dimensions');\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(newRows, newColumns);\n        for(let row = 0; row < newRows; row++)for(let column = 0; column < newColumns; column++)newMatrix.set(row, column, newData[row * newColumns + column]);\n        return newMatrix;\n    }\n    static rowVector(newData) {\n        let vector = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(1, newData.length);\n        for(let i = 0; i < newData.length; i++)vector.set(0, i, newData[i]);\n        return vector;\n    }\n    static columnVector(newData) {\n        let vector = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(newData.length, 1);\n        for(let i = 0; i < newData.length; i++)vector.set(i, 0, newData[i]);\n        return vector;\n    }\n    static zeros(rows, columns) {\n        return new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rows, columns);\n    }\n    static ones(rows, columns) {\n        return new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rows, columns).fill(1);\n    }\n    static rand(rows, columns, options = {}) {\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { random: random = Math.random } = options;\n        let matrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rows, columns);\n        for(let i = 0; i < rows; i++)for(let j = 0; j < columns; j++)matrix.set(i, j, random());\n        return matrix;\n    }\n    static randInt(rows, columns, options = {}) {\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { min: min = 0, max: max = 1000, random: random = Math.random } = options;\n        if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n        if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n        if (min >= max) throw new RangeError('min must be smaller than max');\n        let interval = max - min;\n        let matrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rows, columns);\n        for(let i = 0; i < rows; i++)for(let j = 0; j < columns; j++){\n            let value = min + Math.round(random() * interval);\n            matrix.set(i, j, value);\n        }\n        return matrix;\n    }\n    static eye(rows, columns, value) {\n        if (columns === undefined) columns = rows;\n        if (value === undefined) value = 1;\n        let min = Math.min(rows, columns);\n        let matrix = this.zeros(rows, columns);\n        for(let i = 0; i < min; i++)matrix.set(i, i, value);\n        return matrix;\n    }\n    static diag(data, rows, columns) {\n        let l = data.length;\n        if (rows === undefined) rows = l;\n        if (columns === undefined) columns = rows;\n        let min = Math.min(l, rows, columns);\n        let matrix = this.zeros(rows, columns);\n        for(let i = 0; i < min; i++)matrix.set(i, i, data[i]);\n        return matrix;\n    }\n    static min(matrix1, matrix2) {\n        matrix1 = this.checkMatrix(matrix1);\n        matrix2 = this.checkMatrix(matrix2);\n        let rows = matrix1.rows;\n        let columns = matrix1.columns;\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rows, columns);\n        for(let i = 0; i < rows; i++)for(let j = 0; j < columns; j++)result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        return result;\n    }\n    static max(matrix1, matrix2) {\n        matrix1 = this.checkMatrix(matrix1);\n        matrix2 = this.checkMatrix(matrix2);\n        let rows = matrix1.rows;\n        let columns = matrix1.columns;\n        let result = new this(rows, columns);\n        for(let i = 0; i < rows; i++)for(let j = 0; j < columns; j++)result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        return result;\n    }\n    static checkMatrix(value) {\n        return $d20607c8c82d3b0f$export$4b275fa73feb14fa.isMatrix(value) ? value : new $d20607c8c82d3b0f$export$2e2bcd8739ae039(value);\n    }\n    static isMatrix(value) {\n        return value != null && value.klass === 'Matrix';\n    }\n    get size() {\n        return this.rows * this.columns;\n    }\n    apply(callback) {\n        if (typeof callback !== 'function') throw new TypeError('callback must be a function');\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)callback.call(this, i, j);\n        return this;\n    }\n    to1DArray() {\n        let array = [];\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)array.push(this.get(i, j));\n        return array;\n    }\n    to2DArray() {\n        let copy = [];\n        for(let i = 0; i < this.rows; i++){\n            copy.push([]);\n            for(let j = 0; j < this.columns; j++)copy[i].push(this.get(i, j));\n        }\n        return copy;\n    }\n    toJSON() {\n        return this.to2DArray();\n    }\n    isRowVector() {\n        return this.rows === 1;\n    }\n    isColumnVector() {\n        return this.columns === 1;\n    }\n    isVector() {\n        return this.rows === 1 || this.columns === 1;\n    }\n    isSquare() {\n        return this.rows === this.columns;\n    }\n    isEmpty() {\n        return this.rows === 0 || this.columns === 0;\n    }\n    isSymmetric() {\n        if (this.isSquare()) {\n            for(let i = 0; i < this.rows; i++)for(let j = 0; j <= i; j++){\n                if (this.get(i, j) !== this.get(j, i)) return false;\n            }\n            return true;\n        }\n        return false;\n    }\n    isDistance() {\n        if (!this.isSymmetric()) return false;\n        for(let i = 0; i < this.rows; i++){\n            if (this.get(i, i) !== 0) return false;\n        }\n        return true;\n    }\n    isEchelonForm() {\n        let i = 0;\n        let j = 0;\n        let previousColumn = -1;\n        let isEchelonForm = true;\n        let checked = false;\n        while(i < this.rows && isEchelonForm){\n            j = 0;\n            checked = false;\n            while(j < this.columns && checked === false){\n                if (this.get(i, j) === 0) j++;\n                else if (this.get(i, j) === 1 && j > previousColumn) {\n                    checked = true;\n                    previousColumn = j;\n                } else {\n                    isEchelonForm = false;\n                    checked = true;\n                }\n            }\n            i++;\n        }\n        return isEchelonForm;\n    }\n    isReducedEchelonForm() {\n        let i = 0;\n        let j = 0;\n        let previousColumn = -1;\n        let isReducedEchelonForm = true;\n        let checked = false;\n        while(i < this.rows && isReducedEchelonForm){\n            j = 0;\n            checked = false;\n            while(j < this.columns && checked === false){\n                if (this.get(i, j) === 0) j++;\n                else if (this.get(i, j) === 1 && j > previousColumn) {\n                    checked = true;\n                    previousColumn = j;\n                } else {\n                    isReducedEchelonForm = false;\n                    checked = true;\n                }\n            }\n            for(let k = j + 1; k < this.rows; k++)if (this.get(i, k) !== 0) isReducedEchelonForm = false;\n            i++;\n        }\n        return isReducedEchelonForm;\n    }\n    echelonForm() {\n        let result = this.clone();\n        let h = 0;\n        let k = 0;\n        while(h < result.rows && k < result.columns){\n            let iMax = h;\n            for(let i = h; i < result.rows; i++)if (result.get(i, k) > result.get(iMax, k)) iMax = i;\n            if (result.get(iMax, k) === 0) k++;\n            else {\n                result.swapRows(h, iMax);\n                let tmp = result.get(h, k);\n                for(let j = k; j < result.columns; j++)result.set(h, j, result.get(h, j) / tmp);\n                for(let i = h + 1; i < result.rows; i++){\n                    let factor = result.get(i, k) / result.get(h, k);\n                    result.set(i, k, 0);\n                    for(let j = k + 1; j < result.columns; j++)result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n                }\n                h++;\n                k++;\n            }\n        }\n        return result;\n    }\n    reducedEchelonForm() {\n        let result = this.echelonForm();\n        let m = result.columns;\n        let n = result.rows;\n        let h = n - 1;\n        while(h >= 0)if (result.maxRow(h) === 0) h--;\n        else {\n            let p = 0;\n            let pivot = false;\n            while(p < n && pivot === false)if (result.get(h, p) === 1) pivot = true;\n            else p++;\n            for(let i = 0; i < h; i++){\n                let factor = result.get(i, p);\n                for(let j = p; j < m; j++){\n                    let tmp = result.get(i, j) - factor * result.get(h, j);\n                    result.set(i, j, tmp);\n                }\n            }\n            h--;\n        }\n        return result;\n    }\n    set() {\n        throw new Error('set method is unimplemented');\n    }\n    get() {\n        throw new Error('get method is unimplemented');\n    }\n    repeat(options = {}) {\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { rows: rows = 1, columns: columns = 1 } = options;\n        if (!Number.isInteger(rows) || rows <= 0) throw new TypeError('rows must be a positive integer');\n        if (!Number.isInteger(columns) || columns <= 0) throw new TypeError('columns must be a positive integer');\n        let matrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(this.rows * rows, this.columns * columns);\n        for(let i = 0; i < rows; i++)for(let j = 0; j < columns; j++)matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        return matrix;\n    }\n    fill(value) {\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, value);\n        return this;\n    }\n    neg() {\n        return this.mulS(-1);\n    }\n    getRow(index) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, index);\n        let row = [];\n        for(let i = 0; i < this.columns; i++)row.push(this.get(index, i));\n        return row;\n    }\n    getRowVector(index) {\n        return $d20607c8c82d3b0f$export$2e2bcd8739ae039.rowVector(this.getRow(index));\n    }\n    setRow(index, array) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, index);\n        array = (0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, array);\n        for(let i = 0; i < this.columns; i++)this.set(index, i, array[i]);\n        return this;\n    }\n    swapRows(row1, row2) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row1);\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row2);\n        for(let i = 0; i < this.columns; i++){\n            let temp = this.get(row1, i);\n            this.set(row1, i, this.get(row2, i));\n            this.set(row2, i, temp);\n        }\n        return this;\n    }\n    getColumn(index) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, index);\n        let column = [];\n        for(let i = 0; i < this.rows; i++)column.push(this.get(i, index));\n        return column;\n    }\n    getColumnVector(index) {\n        return $d20607c8c82d3b0f$export$2e2bcd8739ae039.columnVector(this.getColumn(index));\n    }\n    setColumn(index, array) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, index);\n        array = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, array);\n        for(let i = 0; i < this.rows; i++)this.set(i, index, array[i]);\n        return this;\n    }\n    swapColumns(column1, column2) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column1);\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column2);\n        for(let i = 0; i < this.rows; i++){\n            let temp = this.get(i, column1);\n            this.set(i, column1, this.get(i, column2));\n            this.set(i, column2, temp);\n        }\n        return this;\n    }\n    addRowVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) + vector[j]);\n        return this;\n    }\n    subRowVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) - vector[j]);\n        return this;\n    }\n    mulRowVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) * vector[j]);\n        return this;\n    }\n    divRowVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) / vector[j]);\n        return this;\n    }\n    addColumnVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) + vector[i]);\n        return this;\n    }\n    subColumnVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) - vector[i]);\n        return this;\n    }\n    mulColumnVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) * vector[i]);\n        return this;\n    }\n    divColumnVector(vector) {\n        vector = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, vector);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)this.set(i, j, this.get(i, j) / vector[i]);\n        return this;\n    }\n    mulRow(index, value) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, index);\n        for(let i = 0; i < this.columns; i++)this.set(index, i, this.get(index, i) * value);\n        return this;\n    }\n    mulColumn(index, value) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, index);\n        for(let i = 0; i < this.rows; i++)this.set(i, index, this.get(i, index) * value);\n        return this;\n    }\n    max(by) {\n        if (this.isEmpty()) return NaN;\n        switch(by){\n            case 'row':\n                {\n                    const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) > max[row]) max[row] = this.get(row, column);\n                    }\n                    return max;\n                }\n            case 'column':\n                {\n                    const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) > max[column]) max[column] = this.get(row, column);\n                    }\n                    return max;\n                }\n            case undefined:\n                {\n                    let max = this.get(0, 0);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) > max) max = this.get(row, column);\n                    }\n                    return max;\n                }\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    maxIndex() {\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(0, 0);\n        let idx = [\n            0,\n            0\n        ];\n        for(let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.columns; j++)if (this.get(i, j) > v) {\n                v = this.get(i, j);\n                idx[0] = i;\n                idx[1] = j;\n            }\n        }\n        return idx;\n    }\n    min(by) {\n        if (this.isEmpty()) return NaN;\n        switch(by){\n            case 'row':\n                {\n                    const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) < min[row]) min[row] = this.get(row, column);\n                    }\n                    return min;\n                }\n            case 'column':\n                {\n                    const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) < min[column]) min[column] = this.get(row, column);\n                    }\n                    return min;\n                }\n            case undefined:\n                {\n                    let min = this.get(0, 0);\n                    for(let row = 0; row < this.rows; row++){\n                        for(let column = 0; column < this.columns; column++)if (this.get(row, column) < min) min = this.get(row, column);\n                    }\n                    return min;\n                }\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    minIndex() {\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(0, 0);\n        let idx = [\n            0,\n            0\n        ];\n        for(let i = 0; i < this.rows; i++){\n            for(let j = 0; j < this.columns; j++)if (this.get(i, j) < v) {\n                v = this.get(i, j);\n                idx[0] = i;\n                idx[1] = j;\n            }\n        }\n        return idx;\n    }\n    maxRow(row) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row);\n        if (this.isEmpty()) return NaN;\n        let v = this.get(row, 0);\n        for(let i = 1; i < this.columns; i++)if (this.get(row, i) > v) v = this.get(row, i);\n        return v;\n    }\n    maxRowIndex(row) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row);\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(row, 0);\n        let idx = [\n            row,\n            0\n        ];\n        for(let i = 1; i < this.columns; i++)if (this.get(row, i) > v) {\n            v = this.get(row, i);\n            idx[1] = i;\n        }\n        return idx;\n    }\n    minRow(row) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row);\n        if (this.isEmpty()) return NaN;\n        let v = this.get(row, 0);\n        for(let i = 1; i < this.columns; i++)if (this.get(row, i) < v) v = this.get(row, i);\n        return v;\n    }\n    minRowIndex(row) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, row);\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(row, 0);\n        let idx = [\n            row,\n            0\n        ];\n        for(let i = 1; i < this.columns; i++)if (this.get(row, i) < v) {\n            v = this.get(row, i);\n            idx[1] = i;\n        }\n        return idx;\n    }\n    maxColumn(column) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column);\n        if (this.isEmpty()) return NaN;\n        let v = this.get(0, column);\n        for(let i = 1; i < this.rows; i++)if (this.get(i, column) > v) v = this.get(i, column);\n        return v;\n    }\n    maxColumnIndex(column) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column);\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(0, column);\n        let idx = [\n            0,\n            column\n        ];\n        for(let i = 1; i < this.rows; i++)if (this.get(i, column) > v) {\n            v = this.get(i, column);\n            idx[0] = i;\n        }\n        return idx;\n    }\n    minColumn(column) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column);\n        if (this.isEmpty()) return NaN;\n        let v = this.get(0, column);\n        for(let i = 1; i < this.rows; i++)if (this.get(i, column) < v) v = this.get(i, column);\n        return v;\n    }\n    minColumnIndex(column) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, column);\n        (0, $da7aaf9942a3acc4$export$f0dd04159b94e070)(this);\n        let v = this.get(0, column);\n        let idx = [\n            0,\n            column\n        ];\n        for(let i = 1; i < this.rows; i++)if (this.get(i, column) < v) {\n            v = this.get(i, column);\n            idx[0] = i;\n        }\n        return idx;\n    }\n    diag() {\n        let min = Math.min(this.rows, this.columns);\n        let diag = [];\n        for(let i = 0; i < min; i++)diag.push(this.get(i, i));\n        return diag;\n    }\n    norm(type = 'frobenius') {\n        switch(type){\n            case 'max':\n                return this.max();\n            case 'frobenius':\n                return Math.sqrt(this.dot(this));\n            default:\n                throw new RangeError(`unknown norm type: ${type}`);\n        }\n    }\n    cumulativeSum() {\n        let sum = 0;\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++){\n            sum += this.get(i, j);\n            this.set(i, j, sum);\n        }\n        return this;\n    }\n    dot(vector2) {\n        if ($d20607c8c82d3b0f$export$4b275fa73feb14fa.isMatrix(vector2)) vector2 = vector2.to1DArray();\n        let vector1 = this.to1DArray();\n        if (vector1.length !== vector2.length) throw new RangeError('vectors do not have the same size');\n        let dot = 0;\n        for(let i = 0; i < vector1.length; i++)dot += vector1[i] * vector2[i];\n        return dot;\n    }\n    mmul(other) {\n        other = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(other);\n        let m = this.rows;\n        let n = this.columns;\n        let p = other.columns;\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(m, p);\n        let Bcolj = new Float64Array(n);\n        for(let j = 0; j < p; j++){\n            for(let k = 0; k < n; k++)Bcolj[k] = other.get(k, j);\n            for(let i = 0; i < m; i++){\n                let s = 0;\n                for(let k = 0; k < n; k++)s += this.get(i, k) * Bcolj[k];\n                result.set(i, j, s);\n            }\n        }\n        return result;\n    }\n    mpow(scalar) {\n        if (!this.isSquare()) throw new RangeError('Matrix must be square');\n        if (!Number.isInteger(scalar) || scalar < 0) throw new RangeError('Exponent must be a non-negative integer');\n        // Russian Peasant exponentiation, i.e. exponentiation by squaring\n        let result = $d20607c8c82d3b0f$export$2e2bcd8739ae039.eye(this.rows);\n        let bb = this;\n        // Note: Don't bit shift. In JS, that would truncate at 32 bits\n        for(let e = scalar; e > 1; e /= 2){\n            if ((e & 1) !== 0) result = result.mmul(bb);\n            bb = bb.mmul(bb);\n        }\n        return result;\n    }\n    strassen2x2(other) {\n        other = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(other);\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(2, 2);\n        const a11 = this.get(0, 0);\n        const b11 = other.get(0, 0);\n        const a12 = this.get(0, 1);\n        const b12 = other.get(0, 1);\n        const a21 = this.get(1, 0);\n        const b21 = other.get(1, 0);\n        const a22 = this.get(1, 1);\n        const b22 = other.get(1, 1);\n        // Compute intermediate values.\n        const m1 = (a11 + a22) * (b11 + b22);\n        const m2 = (a21 + a22) * b11;\n        const m3 = a11 * (b12 - b22);\n        const m4 = a22 * (b21 - b11);\n        const m5 = (a11 + a12) * b22;\n        const m6 = (a21 - a11) * (b11 + b12);\n        const m7 = (a12 - a22) * (b21 + b22);\n        // Combine intermediate values into the output.\n        const c00 = m1 + m4 - m5 + m7;\n        const c01 = m3 + m5;\n        const c10 = m2 + m4;\n        const c11 = m1 - m2 + m3 + m6;\n        result.set(0, 0, c00);\n        result.set(0, 1, c01);\n        result.set(1, 0, c10);\n        result.set(1, 1, c11);\n        return result;\n    }\n    strassen3x3(other) {\n        other = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(other);\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(3, 3);\n        const a00 = this.get(0, 0);\n        const a01 = this.get(0, 1);\n        const a02 = this.get(0, 2);\n        const a10 = this.get(1, 0);\n        const a11 = this.get(1, 1);\n        const a12 = this.get(1, 2);\n        const a20 = this.get(2, 0);\n        const a21 = this.get(2, 1);\n        const a22 = this.get(2, 2);\n        const b00 = other.get(0, 0);\n        const b01 = other.get(0, 1);\n        const b02 = other.get(0, 2);\n        const b10 = other.get(1, 0);\n        const b11 = other.get(1, 1);\n        const b12 = other.get(1, 2);\n        const b20 = other.get(2, 0);\n        const b21 = other.get(2, 1);\n        const b22 = other.get(2, 2);\n        const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n        const m2 = (a00 - a10) * (-b01 + b11);\n        const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n        const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n        const m5 = (a10 + a11) * (-b00 + b01);\n        const m6 = a00 * b00;\n        const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n        const m8 = (-a00 + a20) * (b02 - b12);\n        const m9 = (a20 + a21) * (-b00 + b02);\n        const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n        const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n        const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n        const m13 = (a02 - a22) * (b11 - b21);\n        const m14 = a02 * b20;\n        const m15 = (a21 + a22) * (-b20 + b21);\n        const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n        const m17 = (a02 - a12) * (b12 - b22);\n        const m18 = (a11 + a12) * (-b20 + b22);\n        const m19 = a01 * b10;\n        const m20 = a12 * b21;\n        const m21 = a10 * b02;\n        const m22 = a20 * b01;\n        const m23 = a22 * b22;\n        const c00 = m6 + m14 + m19;\n        const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n        const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n        const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n        const c11 = m2 + m4 + m5 + m6 + m20;\n        const c12 = m14 + m16 + m17 + m18 + m21;\n        const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n        const c21 = m12 + m13 + m14 + m15 + m22;\n        const c22 = m6 + m7 + m8 + m9 + m23;\n        result.set(0, 0, c00);\n        result.set(0, 1, c01);\n        result.set(0, 2, c02);\n        result.set(1, 0, c10);\n        result.set(1, 1, c11);\n        result.set(1, 2, c12);\n        result.set(2, 0, c20);\n        result.set(2, 1, c21);\n        result.set(2, 2, c22);\n        return result;\n    }\n    mmulStrassen(y) {\n        y = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(y);\n        let x = this.clone();\n        let r1 = x.rows;\n        let c1 = x.columns;\n        let r2 = y.rows;\n        let c2 = y.columns;\n        if (c1 !== r2) // eslint-disable-next-line no-console\n        console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n        // Put a matrix into the top left of a matrix of zeros.\n        // `rows` and `cols` are the dimensions of the output matrix.\n        function embed(mat, rows, cols) {\n            let r = mat.rows;\n            let c = mat.columns;\n            if (r === rows && c === cols) return mat;\n            else {\n                let resultat = $d20607c8c82d3b0f$export$4b275fa73feb14fa.zeros(rows, cols);\n                resultat = resultat.setSubMatrix(mat, 0, 0);\n                return resultat;\n            }\n        }\n        // Make sure both matrices are the same size.\n        // This is exclusively for simplicity:\n        // this algorithm can be implemented with matrices of different sizes.\n        let r = Math.max(r1, r2);\n        let c = Math.max(c1, c2);\n        x = embed(x, r, c);\n        y = embed(y, r, c);\n        // Our recursive multiplication function.\n        function blockMult(a, b, rows, cols) {\n            // For small matrices, resort to naive multiplication.\n            if (rows <= 512 || cols <= 512) return a.mmul(b); // a is equivalent to this\n            // Apply dynamic padding.\n            if (rows % 2 === 1 && cols % 2 === 1) {\n                a = embed(a, rows + 1, cols + 1);\n                b = embed(b, rows + 1, cols + 1);\n            } else if (rows % 2 === 1) {\n                a = embed(a, rows + 1, cols);\n                b = embed(b, rows + 1, cols);\n            } else if (cols % 2 === 1) {\n                a = embed(a, rows, cols + 1);\n                b = embed(b, rows, cols + 1);\n            }\n            let halfRows = parseInt(a.rows / 2, 10);\n            let halfCols = parseInt(a.columns / 2, 10);\n            // Subdivide input matrices.\n            let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n            let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n            let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n            let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n            let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n            let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n            let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n            let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n            // Compute intermediate values.\n            let m1 = blockMult($d20607c8c82d3b0f$export$4b275fa73feb14fa.add(a11, a22), $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(b11, b22), halfRows, halfCols);\n            let m2 = blockMult($d20607c8c82d3b0f$export$4b275fa73feb14fa.add(a21, a22), b11, halfRows, halfCols);\n            let m3 = blockMult(a11, $d20607c8c82d3b0f$export$4b275fa73feb14fa.sub(b12, b22), halfRows, halfCols);\n            let m4 = blockMult(a22, $d20607c8c82d3b0f$export$4b275fa73feb14fa.sub(b21, b11), halfRows, halfCols);\n            let m5 = blockMult($d20607c8c82d3b0f$export$4b275fa73feb14fa.add(a11, a12), b22, halfRows, halfCols);\n            let m6 = blockMult($d20607c8c82d3b0f$export$4b275fa73feb14fa.sub(a21, a11), $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(b11, b12), halfRows, halfCols);\n            let m7 = blockMult($d20607c8c82d3b0f$export$4b275fa73feb14fa.sub(a12, a22), $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(b21, b22), halfRows, halfCols);\n            // Combine intermediate values into the output.\n            let c11 = $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(m1, m4);\n            c11.sub(m5);\n            c11.add(m7);\n            let c12 = $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(m3, m5);\n            let c21 = $d20607c8c82d3b0f$export$4b275fa73feb14fa.add(m2, m4);\n            let c22 = $d20607c8c82d3b0f$export$4b275fa73feb14fa.sub(m1, m2);\n            c22.add(m3);\n            c22.add(m6);\n            // Crop output to the desired size (undo dynamic padding).\n            let result = $d20607c8c82d3b0f$export$4b275fa73feb14fa.zeros(2 * c11.rows, 2 * c11.columns);\n            result = result.setSubMatrix(c11, 0, 0);\n            result = result.setSubMatrix(c12, c11.rows, 0);\n            result = result.setSubMatrix(c21, 0, c11.columns);\n            result = result.setSubMatrix(c22, c11.rows, c11.columns);\n            return result.subMatrix(0, rows - 1, 0, cols - 1);\n        }\n        return blockMult(x, y, r, c);\n    }\n    scaleRows(options = {}) {\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { min: min = 0, max: max = 1 } = options;\n        if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n        if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n        if (min >= max) throw new RangeError('min must be smaller than max');\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(this.rows, this.columns);\n        for(let i = 0; i < this.rows; i++){\n            const row = this.getRow(i);\n            if (row.length > 0) (0, $0baf16655112703d$export$2e2bcd8739ae039)(row, {\n                min: min,\n                max: max,\n                output: row\n            });\n            newMatrix.setRow(i, row);\n        }\n        return newMatrix;\n    }\n    scaleColumns(options = {}) {\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { min: min = 0, max: max = 1 } = options;\n        if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n        if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n        if (min >= max) throw new RangeError('min must be smaller than max');\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(this.rows, this.columns);\n        for(let i = 0; i < this.columns; i++){\n            const column = this.getColumn(i);\n            if (column.length) (0, $0baf16655112703d$export$2e2bcd8739ae039)(column, {\n                min: min,\n                max: max,\n                output: column\n            });\n            newMatrix.setColumn(i, column);\n        }\n        return newMatrix;\n    }\n    flipRows() {\n        const middle = Math.ceil(this.columns / 2);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < middle; j++){\n            let first = this.get(i, j);\n            let last = this.get(i, this.columns - 1 - j);\n            this.set(i, j, last);\n            this.set(i, this.columns - 1 - j, first);\n        }\n        return this;\n    }\n    flipColumns() {\n        const middle = Math.ceil(this.rows / 2);\n        for(let j = 0; j < this.columns; j++)for(let i = 0; i < middle; i++){\n            let first = this.get(i, j);\n            let last = this.get(this.rows - 1 - i, j);\n            this.set(i, j, last);\n            this.set(this.rows - 1 - i, j, first);\n        }\n        return this;\n    }\n    kroneckerProduct(other) {\n        other = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(other);\n        let m = this.rows;\n        let n = this.columns;\n        let p = other.rows;\n        let q = other.columns;\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(m * p, n * q);\n        for(let i = 0; i < m; i++)for(let j = 0; j < n; j++){\n            for(let k = 0; k < p; k++)for(let l = 0; l < q; l++)result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n        }\n        return result;\n    }\n    kroneckerSum(other) {\n        other = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(other);\n        if (!this.isSquare() || !other.isSquare()) throw new Error('Kronecker Sum needs two Square Matrices');\n        let m = this.rows;\n        let n = other.rows;\n        let AxI = this.kroneckerProduct($d20607c8c82d3b0f$export$2e2bcd8739ae039.eye(n, n));\n        let IxB = $d20607c8c82d3b0f$export$2e2bcd8739ae039.eye(m, m).kroneckerProduct(other);\n        return AxI.add(IxB);\n    }\n    transpose() {\n        let result = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(this.columns, this.rows);\n        for(let i = 0; i < this.rows; i++)for(let j = 0; j < this.columns; j++)result.set(j, i, this.get(i, j));\n        return result;\n    }\n    sortRows(compareFunction = $d20607c8c82d3b0f$var$compareNumbers) {\n        for(let i = 0; i < this.rows; i++)this.setRow(i, this.getRow(i).sort(compareFunction));\n        return this;\n    }\n    sortColumns(compareFunction = $d20607c8c82d3b0f$var$compareNumbers) {\n        for(let i = 0; i < this.columns; i++)this.setColumn(i, this.getColumn(i).sort(compareFunction));\n        return this;\n    }\n    subMatrix(startRow, endRow, startColumn, endColumn) {\n        (0, $da7aaf9942a3acc4$export$da114b648d798864)(this, startRow, endRow, startColumn, endColumn);\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(endRow - startRow + 1, endColumn - startColumn + 1);\n        for(let i = startRow; i <= endRow; i++)for(let j = startColumn; j <= endColumn; j++)newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n        return newMatrix;\n    }\n    subMatrixRow(indices, startColumn, endColumn) {\n        if (startColumn === undefined) startColumn = 0;\n        if (endColumn === undefined) endColumn = this.columns - 1;\n        if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) throw new RangeError('Argument out of range');\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(indices.length, endColumn - startColumn + 1);\n        for(let i = 0; i < indices.length; i++)for(let j = startColumn; j <= endColumn; j++){\n            if (indices[i] < 0 || indices[i] >= this.rows) throw new RangeError(`Row index out of range: ${indices[i]}`);\n            newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n        return newMatrix;\n    }\n    subMatrixColumn(indices, startRow, endRow) {\n        if (startRow === undefined) startRow = 0;\n        if (endRow === undefined) endRow = this.rows - 1;\n        if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) throw new RangeError('Argument out of range');\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(endRow - startRow + 1, indices.length);\n        for(let i = 0; i < indices.length; i++)for(let j = startRow; j <= endRow; j++){\n            if (indices[i] < 0 || indices[i] >= this.columns) throw new RangeError(`Column index out of range: ${indices[i]}`);\n            newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n        return newMatrix;\n    }\n    setSubMatrix(matrix, startRow, startColumn) {\n        matrix = $d20607c8c82d3b0f$export$2e2bcd8739ae039.checkMatrix(matrix);\n        if (matrix.isEmpty()) return this;\n        let endRow = startRow + matrix.rows - 1;\n        let endColumn = startColumn + matrix.columns - 1;\n        (0, $da7aaf9942a3acc4$export$da114b648d798864)(this, startRow, endRow, startColumn, endColumn);\n        for(let i = 0; i < matrix.rows; i++)for(let j = 0; j < matrix.columns; j++)this.set(startRow + i, startColumn + j, matrix.get(i, j));\n        return this;\n    }\n    selection(rowIndices, columnIndices) {\n        (0, $da7aaf9942a3acc4$export$f1ebfb29aa181ce9)(this, rowIndices);\n        (0, $da7aaf9942a3acc4$export$2c3e14daf01f9739)(this, columnIndices);\n        let newMatrix = new $d20607c8c82d3b0f$export$2e2bcd8739ae039(rowIndices.length, columnIndices.length);\n        for(let i = 0; i < rowIndices.length; i++){\n            let rowIndex = rowIndices[i];\n            for(let j = 0; j < columnIndices.length; j++){\n                let columnIndex = columnIndices[j];\n                newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n            }\n        }\n        return newMatrix;\n    }\n    trace() {\n        let min = Math.min(this.rows, this.columns);\n        let trace = 0;\n        for(let i = 0; i < min; i++)trace += this.get(i, i);\n        return trace;\n    }\n    clone() {\n        return this.constructor.copy(this, new $d20607c8c82d3b0f$export$2e2bcd8739ae039(this.rows, this.columns));\n    }\n    /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */ static copy(from, to) {\n        for (const [row, column, value] of from.entries())to.set(row, column, value);\n        return to;\n    }\n    sum(by) {\n        switch(by){\n            case 'row':\n                return (0, $559b0163e55d4cf4$export$8f455058137a1ae1)(this);\n            case 'column':\n                return (0, $559b0163e55d4cf4$export$76d99fcf491f8353)(this);\n            case undefined:\n                return (0, $559b0163e55d4cf4$export$e9666e11c29bfd93)(this);\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    product(by) {\n        switch(by){\n            case 'row':\n                return (0, $559b0163e55d4cf4$export$c48f519082514e8e)(this);\n            case 'column':\n                return (0, $559b0163e55d4cf4$export$f896e61c4deaaeab)(this);\n            case undefined:\n                return (0, $559b0163e55d4cf4$export$dcf59fc14c9dc536)(this);\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    mean(by) {\n        const sum = this.sum(by);\n        switch(by){\n            case 'row':\n                for(let i = 0; i < this.rows; i++)sum[i] /= this.columns;\n                return sum;\n            case 'column':\n                for(let i = 0; i < this.columns; i++)sum[i] /= this.rows;\n                return sum;\n            case undefined:\n                return sum / this.size;\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    variance(by, options = {}) {\n        if (typeof by === 'object') {\n            options = by;\n            by = undefined;\n        }\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { unbiased: unbiased = true, mean: mean = this.mean(by) } = options;\n        if (typeof unbiased !== 'boolean') throw new TypeError('unbiased must be a boolean');\n        switch(by){\n            case 'row':\n                if (!(0, $2de0c695164809c4$export$b587624c098d7880)(mean)) throw new TypeError('mean must be an array');\n                return (0, $559b0163e55d4cf4$export$12e045d6bca3f52f)(this, unbiased, mean);\n            case 'column':\n                if (!(0, $2de0c695164809c4$export$b587624c098d7880)(mean)) throw new TypeError('mean must be an array');\n                return (0, $559b0163e55d4cf4$export$8eaba4ad2bf7f22f)(this, unbiased, mean);\n            case undefined:\n                if (typeof mean !== 'number') throw new TypeError('mean must be a number');\n                return (0, $559b0163e55d4cf4$export$e41d45637057ea2f)(this, unbiased, mean);\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    standardDeviation(by, options) {\n        if (typeof by === 'object') {\n            options = by;\n            by = undefined;\n        }\n        const variance = this.variance(by, options);\n        if (by === undefined) return Math.sqrt(variance);\n        else {\n            for(let i = 0; i < variance.length; i++)variance[i] = Math.sqrt(variance[i]);\n            return variance;\n        }\n    }\n    center(by, options = {}) {\n        if (typeof by === 'object') {\n            options = by;\n            by = undefined;\n        }\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        const { center: center = this.mean(by) } = options;\n        switch(by){\n            case 'row':\n                if (!(0, $2de0c695164809c4$export$b587624c098d7880)(center)) throw new TypeError('center must be an array');\n                (0, $559b0163e55d4cf4$export$d657ff37d9803f2c)(this, center);\n                return this;\n            case 'column':\n                if (!(0, $2de0c695164809c4$export$b587624c098d7880)(center)) throw new TypeError('center must be an array');\n                (0, $559b0163e55d4cf4$export$a97d54bde1f37f4f)(this, center);\n                return this;\n            case undefined:\n                if (typeof center !== 'number') throw new TypeError('center must be a number');\n                (0, $559b0163e55d4cf4$export$4961127515ac14d9)(this, center);\n                return this;\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    scale(by, options = {}) {\n        if (typeof by === 'object') {\n            options = by;\n            by = undefined;\n        }\n        if (typeof options !== 'object') throw new TypeError('options must be an object');\n        let scale = options.scale;\n        switch(by){\n            case 'row':\n                if (scale === undefined) scale = (0, $559b0163e55d4cf4$export$401b5d1e21b3d95f)(this);\n                else if (!(0, $2de0c695164809c4$export$b587624c098d7880)(scale)) throw new TypeError('scale must be an array');\n                (0, $559b0163e55d4cf4$export$be914f666e802cef)(this, scale);\n                return this;\n            case 'column':\n                if (scale === undefined) scale = (0, $559b0163e55d4cf4$export$67bf442048b342f3)(this);\n                else if (!(0, $2de0c695164809c4$export$b587624c098d7880)(scale)) throw new TypeError('scale must be an array');\n                (0, $559b0163e55d4cf4$export$909f59241c977663)(this, scale);\n                return this;\n            case undefined:\n                if (scale === undefined) scale = (0, $559b0163e55d4cf4$export$1ca6b014d842307d)(this);\n                else if (typeof scale !== 'number') throw new TypeError('scale must be a number');\n                (0, $559b0163e55d4cf4$export$2049ee336508b8aa)(this, scale);\n                return this;\n            default:\n                throw new Error(`invalid option: ${by}`);\n        }\n    }\n    toString(options) {\n        return (0, $32acbc006b852959$export$66f7e3f9359f0f9e)(this, options);\n    }\n    [Symbol.iterator]() {\n        return this.entries();\n    }\n    /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */ *entries() {\n        for(let row = 0; row < this.rows; row++)for(let col = 0; col < this.columns; col++)yield [\n            row,\n            col,\n            this.get(row, col)\n        ];\n    }\n    /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */ *values() {\n        for(let row = 0; row < this.rows; row++)for(let col = 0; col < this.columns; col++)yield this.get(row, col);\n    }\n}\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') $d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype[Symbol.for('nodejs.util.inspect.custom')] = (0, $32acbc006b852959$export$b1353423cee91caf);\nfunction $d20607c8c82d3b0f$var$compareNumbers(a, b) {\n    return a - b;\n}\nfunction $d20607c8c82d3b0f$var$isArrayOfNumbers(array) {\n    return array.every((element)=>{\n        return typeof element === 'number';\n    });\n}\n// Synonyms\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.random = $d20607c8c82d3b0f$export$4b275fa73feb14fa.rand;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.randomInt = $d20607c8c82d3b0f$export$4b275fa73feb14fa.randInt;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.diagonal = $d20607c8c82d3b0f$export$4b275fa73feb14fa.diag;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.diagonal = $d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.diag;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.identity = $d20607c8c82d3b0f$export$4b275fa73feb14fa.eye;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.negate = $d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.neg;\n$d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.tensorProduct = $d20607c8c82d3b0f$export$4b275fa73feb14fa.prototype.kroneckerProduct;\nclass $d20607c8c82d3b0f$export$2e2bcd8739ae039 extends $d20607c8c82d3b0f$export$4b275fa73feb14fa {\n    /**\n   * @type {Float64Array[]}\n   */ data;\n    /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */ #initData(nRows, nColumns) {\n        this.data = [];\n        if (Number.isInteger(nColumns) && nColumns >= 0) for(let i = 0; i < nRows; i++)this.data.push(new Float64Array(nColumns));\n        else throw new TypeError('nColumns must be a positive integer');\n        this.rows = nRows;\n        this.columns = nColumns;\n    }\n    constructor(nRows, nColumns){\n        super();\n        if ($d20607c8c82d3b0f$export$2e2bcd8739ae039.isMatrix(nRows)) {\n            this.#initData(nRows.rows, nRows.columns);\n            $d20607c8c82d3b0f$export$2e2bcd8739ae039.copy(nRows, this);\n        } else if (Number.isInteger(nRows) && nRows >= 0) this.#initData(nRows, nColumns);\n        else if ((0, $2de0c695164809c4$export$b587624c098d7880)(nRows)) {\n            // Copy the values from the 2D array\n            const arrayData = nRows;\n            nRows = arrayData.length;\n            nColumns = nRows ? arrayData[0].length : 0;\n            if (typeof nColumns !== 'number') throw new TypeError('Data must be a 2D array with at least one element');\n            this.data = [];\n            for(let i = 0; i < nRows; i++){\n                if (arrayData[i].length !== nColumns) throw new RangeError('Inconsistent array dimensions');\n                if (!$d20607c8c82d3b0f$var$isArrayOfNumbers(arrayData[i])) throw new TypeError('Input data contains non-numeric values');\n                this.data.push(Float64Array.from(arrayData[i]));\n            }\n            this.rows = nRows;\n            this.columns = nColumns;\n        } else throw new TypeError('First argument must be a positive number or an array');\n    }\n    set(rowIndex, columnIndex, value) {\n        this.data[rowIndex][columnIndex] = value;\n        return this;\n    }\n    get(rowIndex, columnIndex) {\n        return this.data[rowIndex][columnIndex];\n    }\n    removeRow(index) {\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, index);\n        this.data.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        (0, $da7aaf9942a3acc4$export$1c43f07899a70228)(this, index, true);\n        array = Float64Array.from((0, $da7aaf9942a3acc4$export$af0312fee396fd93)(this, array));\n        this.data.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n    removeColumn(index) {\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, index);\n        for(let i = 0; i < this.rows; i++){\n            const newRow = new Float64Array(this.columns - 1);\n            for(let j = 0; j < index; j++)newRow[j] = this.data[i][j];\n            for(let j = index + 1; j < this.columns; j++)newRow[j - 1] = this.data[i][j];\n            this.data[i] = newRow;\n        }\n        this.columns -= 1;\n        return this;\n    }\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        (0, $da7aaf9942a3acc4$export$9f3f99fd4fb91358)(this, index, true);\n        array = (0, $da7aaf9942a3acc4$export$d13fb0648ea9f6c7)(this, array);\n        for(let i = 0; i < this.rows; i++){\n            const newRow = new Float64Array(this.columns + 1);\n            let j = 0;\n            for(; j < index; j++)newRow[j] = this.data[i][j];\n            newRow[j++] = array[i];\n            for(; j < this.columns + 1; j++)newRow[j] = this.data[i][j - 1];\n            this.data[i] = newRow;\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n(0, $4ad79b664750787f$export$f9fe1a46265a1978)($d20607c8c82d3b0f$export$4b275fa73feb14fa, $d20607c8c82d3b0f$export$2e2bcd8739ae039);\n\n\n\nclass $11b776c954f0aef0$export$2e2bcd8739ae039 extends (0, $d20607c8c82d3b0f$export$4b275fa73feb14fa) {\n    constructor(data){\n        super();\n        this.data = data;\n        this.rows = data.length;\n        this.columns = data[0].length;\n    }\n    set(rowIndex, columnIndex, value) {\n        this.data[rowIndex][columnIndex] = value;\n        return this;\n    }\n    get(rowIndex, columnIndex) {\n        return this.data[rowIndex][columnIndex];\n    }\n}\n\n\nfunction $fde1c2dcebdd06e9$export$39cf33a0d758f8b4(a, b) {\n    let r = 0;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n}\n\n\nclass $ce73bb3df5d80b5b$export$2e2bcd8739ae039 {\n    constructor(value, options = {}){\n        value = (0, $11b776c954f0aef0$export$2e2bcd8739ae039).checkMatrix(value);\n        if (value.isEmpty()) throw new Error('Matrix must be non-empty');\n        let m = value.rows;\n        let n = value.columns;\n        const { computeLeftSingularVectors: computeLeftSingularVectors = true, computeRightSingularVectors: computeRightSingularVectors = true, autoTranspose: autoTranspose = false } = options;\n        let wantu = Boolean(computeLeftSingularVectors);\n        let wantv = Boolean(computeRightSingularVectors);\n        let swapped = false;\n        let a;\n        if (m < n) {\n            if (!autoTranspose) {\n                a = value.clone();\n                // eslint-disable-next-line no-console\n                console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n            } else {\n                a = value.transpose();\n                m = a.rows;\n                n = a.columns;\n                swapped = true;\n                let aux = wantu;\n                wantu = wantv;\n                wantv = aux;\n            }\n        } else a = value.clone();\n        let nu = Math.min(m, n);\n        let ni = Math.min(m + 1, n);\n        let s = new Float64Array(ni);\n        let U = new (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039)(m, nu);\n        let V = new (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039)(n, n);\n        let e = new Float64Array(n);\n        let work = new Float64Array(m);\n        let si = new Float64Array(ni);\n        for(let i = 0; i < ni; i++)si[i] = i;\n        let nct = Math.min(m - 1, n);\n        let nrt = Math.max(0, Math.min(n - 2, m));\n        let mrc = Math.max(nct, nrt);\n        for(let k = 0; k < mrc; k++){\n            if (k < nct) {\n                s[k] = 0;\n                for(let i = k; i < m; i++)s[k] = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(s[k], a.get(i, k));\n                if (s[k] !== 0) {\n                    if (a.get(k, k) < 0) s[k] = -s[k];\n                    for(let i = k; i < m; i++)a.set(i, k, a.get(i, k) / s[k]);\n                    a.set(k, k, a.get(k, k) + 1);\n                }\n                s[k] = -s[k];\n            }\n            for(let j = k + 1; j < n; j++){\n                if (k < nct && s[k] !== 0) {\n                    let t = 0;\n                    for(let i = k; i < m; i++)t += a.get(i, k) * a.get(i, j);\n                    t = -t / a.get(k, k);\n                    for(let i = k; i < m; i++)a.set(i, j, a.get(i, j) + t * a.get(i, k));\n                }\n                e[j] = a.get(k, j);\n            }\n            if (wantu && k < nct) for(let i = k; i < m; i++)U.set(i, k, a.get(i, k));\n            if (k < nrt) {\n                e[k] = 0;\n                for(let i = k + 1; i < n; i++)e[k] = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(e[k], e[i]);\n                if (e[k] !== 0) {\n                    if (e[k + 1] < 0) e[k] = 0 - e[k];\n                    for(let i = k + 1; i < n; i++)e[i] /= e[k];\n                    e[k + 1] += 1;\n                }\n                e[k] = -e[k];\n                if (k + 1 < m && e[k] !== 0) {\n                    for(let i = k + 1; i < m; i++)work[i] = 0;\n                    for(let i = k + 1; i < m; i++)for(let j = k + 1; j < n; j++)work[i] += e[j] * a.get(i, j);\n                    for(let j = k + 1; j < n; j++){\n                        let t = -e[j] / e[k + 1];\n                        for(let i = k + 1; i < m; i++)a.set(i, j, a.get(i, j) + t * work[i]);\n                    }\n                }\n                if (wantv) for(let i = k + 1; i < n; i++)V.set(i, k, e[i]);\n            }\n        }\n        let p = Math.min(n, m + 1);\n        if (nct < n) s[nct] = a.get(nct, nct);\n        if (m < p) s[p - 1] = 0;\n        if (nrt + 1 < p) e[nrt] = a.get(nrt, p - 1);\n        e[p - 1] = 0;\n        if (wantu) {\n            for(let j = nct; j < nu; j++){\n                for(let i = 0; i < m; i++)U.set(i, j, 0);\n                U.set(j, j, 1);\n            }\n            for(let k = nct - 1; k >= 0; k--)if (s[k] !== 0) {\n                for(let j = k + 1; j < nu; j++){\n                    let t = 0;\n                    for(let i = k; i < m; i++)t += U.get(i, k) * U.get(i, j);\n                    t = -t / U.get(k, k);\n                    for(let i = k; i < m; i++)U.set(i, j, U.get(i, j) + t * U.get(i, k));\n                }\n                for(let i = k; i < m; i++)U.set(i, k, -U.get(i, k));\n                U.set(k, k, 1 + U.get(k, k));\n                for(let i = 0; i < k - 1; i++)U.set(i, k, 0);\n            } else {\n                for(let i = 0; i < m; i++)U.set(i, k, 0);\n                U.set(k, k, 1);\n            }\n        }\n        if (wantv) for(let k = n - 1; k >= 0; k--){\n            if (k < nrt && e[k] !== 0) for(let j = k + 1; j < n; j++){\n                let t = 0;\n                for(let i = k + 1; i < n; i++)t += V.get(i, k) * V.get(i, j);\n                t = -t / V.get(k + 1, k);\n                for(let i = k + 1; i < n; i++)V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n            for(let i = 0; i < n; i++)V.set(i, k, 0);\n            V.set(k, k, 1);\n        }\n        let pp = p - 1;\n        let iter = 0;\n        let eps = Number.EPSILON;\n        while(p > 0){\n            let k, kase;\n            for(k = p - 2; k >= -1; k--){\n                if (k === -1) break;\n                const alpha = Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n                if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n                    e[k] = 0;\n                    break;\n                }\n            }\n            if (k === p - 2) kase = 4;\n            else {\n                let ks;\n                for(ks = p - 1; ks >= k; ks--){\n                    if (ks === k) break;\n                    let t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                    if (Math.abs(s[ks]) <= eps * t) {\n                        s[ks] = 0;\n                        break;\n                    }\n                }\n                if (ks === k) kase = 3;\n                else if (ks === p - 1) kase = 1;\n                else {\n                    kase = 2;\n                    k = ks;\n                }\n            }\n            k++;\n            switch(kase){\n                case 1:\n                    {\n                        let f = e[p - 2];\n                        e[p - 2] = 0;\n                        for(let j = p - 2; j >= k; j--){\n                            let t = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(s[j], f);\n                            let cs = s[j] / t;\n                            let sn = f / t;\n                            s[j] = t;\n                            if (j !== k) {\n                                f = -sn * e[j - 1];\n                                e[j - 1] = cs * e[j - 1];\n                            }\n                            if (wantv) for(let i = 0; i < n; i++){\n                                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                                V.set(i, j, t);\n                            }\n                        }\n                        break;\n                    }\n                case 2:\n                    {\n                        let f = e[k - 1];\n                        e[k - 1] = 0;\n                        for(let j = k; j < p; j++){\n                            let t = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(s[j], f);\n                            let cs = s[j] / t;\n                            let sn = f / t;\n                            s[j] = t;\n                            f = -sn * e[j];\n                            e[j] = cs * e[j];\n                            if (wantu) for(let i = 0; i < m; i++){\n                                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                                U.set(i, j, t);\n                            }\n                        }\n                        break;\n                    }\n                case 3:\n                    {\n                        const scale = Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2]), Math.abs(e[p - 2]), Math.abs(s[k]), Math.abs(e[k]));\n                        const sp = s[p - 1] / scale;\n                        const spm1 = s[p - 2] / scale;\n                        const epm1 = e[p - 2] / scale;\n                        const sk = s[k] / scale;\n                        const ek = e[k] / scale;\n                        const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                        const c = sp * epm1 * (sp * epm1);\n                        let shift = 0;\n                        if (b !== 0 || c !== 0) {\n                            if (b < 0) shift = 0 - Math.sqrt(b * b + c);\n                            else shift = Math.sqrt(b * b + c);\n                            shift = c / (b + shift);\n                        }\n                        let f = (sk + sp) * (sk - sp) + shift;\n                        let g = sk * ek;\n                        for(let j = k; j < p - 1; j++){\n                            let t = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(f, g);\n                            if (t === 0) t = Number.MIN_VALUE;\n                            let cs = f / t;\n                            let sn = g / t;\n                            if (j !== k) e[j - 1] = t;\n                            f = cs * s[j] + sn * e[j];\n                            e[j] = cs * e[j] - sn * s[j];\n                            g = sn * s[j + 1];\n                            s[j + 1] = cs * s[j + 1];\n                            if (wantv) for(let i = 0; i < n; i++){\n                                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                                V.set(i, j, t);\n                            }\n                            t = (0, $fde1c2dcebdd06e9$export$39cf33a0d758f8b4)(f, g);\n                            if (t === 0) t = Number.MIN_VALUE;\n                            cs = f / t;\n                            sn = g / t;\n                            s[j] = t;\n                            f = cs * e[j] + sn * s[j + 1];\n                            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                            g = sn * e[j + 1];\n                            e[j + 1] = cs * e[j + 1];\n                            if (wantu && j < m - 1) for(let i = 0; i < m; i++){\n                                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                                U.set(i, j, t);\n                            }\n                        }\n                        e[p - 2] = f;\n                        iter = iter + 1;\n                        break;\n                    }\n                case 4:\n                    if (s[k] <= 0) {\n                        s[k] = s[k] < 0 ? -s[k] : 0;\n                        if (wantv) for(let i = 0; i <= pp; i++)V.set(i, k, -V.get(i, k));\n                    }\n                    while(k < pp){\n                        if (s[k] >= s[k + 1]) break;\n                        let t = s[k];\n                        s[k] = s[k + 1];\n                        s[k + 1] = t;\n                        if (wantv && k < n - 1) for(let i = 0; i < n; i++){\n                            t = V.get(i, k + 1);\n                            V.set(i, k + 1, V.get(i, k));\n                            V.set(i, k, t);\n                        }\n                        if (wantu && k < m - 1) for(let i = 0; i < m; i++){\n                            t = U.get(i, k + 1);\n                            U.set(i, k + 1, U.get(i, k));\n                            U.set(i, k, t);\n                        }\n                        k++;\n                    }\n                    iter = 0;\n                    p--;\n                    break;\n            }\n        }\n        if (swapped) {\n            let tmp = V;\n            V = U;\n            U = tmp;\n        }\n        this.m = m;\n        this.n = n;\n        this.s = s;\n        this.U = U;\n        this.V = V;\n    }\n    solve(value) {\n        let Y = value;\n        let e = this.threshold;\n        let scols = this.s.length;\n        let Ls = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).zeros(scols, scols);\n        for(let i = 0; i < scols; i++)if (Math.abs(this.s[i]) <= e) Ls.set(i, i, 0);\n        else Ls.set(i, i, 1 / this.s[i]);\n        let U = this.U;\n        let V = this.rightSingularVectors;\n        let VL = V.mmul(Ls);\n        let vrows = V.rows;\n        let urows = U.rows;\n        let VLU = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).zeros(vrows, urows);\n        for(let i = 0; i < vrows; i++)for(let j = 0; j < urows; j++){\n            let sum = 0;\n            for(let k = 0; k < scols; k++)sum += VL.get(i, k) * U.get(j, k);\n            VLU.set(i, j, sum);\n        }\n        return VLU.mmul(Y);\n    }\n    solveForDiagonal(value) {\n        return this.solve((0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).diag(value));\n    }\n    inverse() {\n        let V = this.V;\n        let e = this.threshold;\n        let vrows = V.rows;\n        let vcols = V.columns;\n        let X = new (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039)(vrows, this.s.length);\n        for(let i = 0; i < vrows; i++){\n            for(let j = 0; j < vcols; j++)if (Math.abs(this.s[j]) > e) X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n        let U = this.U;\n        let urows = U.rows;\n        let ucols = U.columns;\n        let Y = new (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039)(vrows, urows);\n        for(let i = 0; i < vrows; i++)for(let j = 0; j < urows; j++){\n            let sum = 0;\n            for(let k = 0; k < ucols; k++)sum += X.get(i, k) * U.get(j, k);\n            Y.set(i, j, sum);\n        }\n        return Y;\n    }\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    }\n    get norm2() {\n        return this.s[0];\n    }\n    get rank() {\n        let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n        let r = 0;\n        let s = this.s;\n        for(let i = 0, ii = s.length; i < ii; i++)if (s[i] > tol) r++;\n        return r;\n    }\n    get diagonal() {\n        return Array.from(this.s);\n    }\n    get threshold() {\n        return Number.EPSILON / 2 * Math.max(this.m, this.n) * this.s[0];\n    }\n    get leftSingularVectors() {\n        return this.U;\n    }\n    get rightSingularVectors() {\n        return this.V;\n    }\n    get diagonalMatrix() {\n        return (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).diag(this.s);\n    }\n}\n\n\n\n\nconst $e4d865a10babc9da$export$fbbf4bd85aaff6bd = (adjMatrix)=>{\n    // initialize\n    const dist = [];\n    const size = adjMatrix.length;\n    for(let i = 0; i < size; i += 1){\n        dist[i] = [];\n        for(let j = 0; j < size; j += 1){\n            if (i === j) dist[i][j] = 0;\n            else if (adjMatrix[i][j] === 0 || !adjMatrix[i][j]) dist[i][j] = Infinity;\n            else dist[i][j] = adjMatrix[i][j];\n        }\n    }\n    // floyd\n    for(let k = 0; k < size; k += 1)for(let i = 0; i < size; i += 1){\n        for(let j = 0; j < size; j += 1)if (dist[i][j] > dist[i][k] + dist[k][j]) dist[i][j] = dist[i][k] + dist[k][j];\n    }\n    return dist;\n};\nconst $e4d865a10babc9da$export$b7dd8b2289c43065 = (data, directed)=>{\n    const { nodes: nodes, edges: edges } = data;\n    const matrix = [];\n    // map node with index in data.nodes\n    const nodeMap = {};\n    if (!nodes) throw new Error('invalid nodes data!');\n    if (nodes) nodes.forEach((node, i)=>{\n        nodeMap[node.id] = i;\n        const row = [];\n        matrix.push(row);\n    });\n    edges === null || edges === void 0 || edges.forEach((e)=>{\n        const { source: source, target: target } = e;\n        const sIndex = nodeMap[source];\n        const tIndex = nodeMap[target];\n        if (sIndex === undefined || tIndex === undefined) return;\n        matrix[sIndex][tIndex] = 1;\n        if (!directed) matrix[tIndex][sIndex] = 1;\n    });\n    return matrix;\n};\nconst $e4d865a10babc9da$export$f89d8f511263c5b = (matrix, ratio)=>{\n    const result = [];\n    matrix.forEach((row)=>{\n        const newRow = [];\n        row.forEach((v)=>{\n            newRow.push(v * ratio);\n        });\n        result.push(newRow);\n    });\n    return result;\n};\nconst $e4d865a10babc9da$export$4d7b865a5fd254d3 = (nodes)=>{\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    nodes.forEach((node)=>{\n        let size = node.data.size;\n        if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(size)) {\n            if (size.length === 1) size = [\n                size[0],\n                size[0]\n            ];\n        } else if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(size)) size = [\n            size,\n            size\n        ];\n        else if (size === undefined || isNaN(size)) size = [\n            30,\n            30\n        ];\n        const halfSize = [\n            size[0] / 2,\n            size[1] / 2\n        ];\n        const left = node.data.x - halfSize[0];\n        const right = node.data.x + halfSize[0];\n        const top = node.data.y - halfSize[1];\n        const bottom = node.data.y + halfSize[1];\n        if (minX > left) minX = left;\n        if (minY > top) minY = top;\n        if (maxX < right) maxX = right;\n        if (maxY < bottom) maxY = bottom;\n    });\n    return {\n        minX: minX,\n        minY: minY,\n        maxX: maxX,\n        maxY: maxY\n    };\n};\nconst $e4d865a10babc9da$export$58ff206e6557f2f0 = (p1, p2)=>Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\nconst $e4d865a10babc9da$export$6c2da045c9b1be36 = (graph, nodes, fn, mode = 'TB', treeKey, stopFns = {})=>{\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return;\n    const { stopBranchFn: stopBranchFn, stopAllFn: stopAllFn } = stopFns;\n    for(let i = 0; i < nodes.length; i++){\n        const node = nodes[i];\n        if (!graph.hasNode(node.id)) continue;\n        if (stopBranchFn === null || stopBranchFn === void 0 ? void 0 : stopBranchFn(node)) continue; // Stop this branch\n        if (stopAllFn === null || stopAllFn === void 0 ? void 0 : stopAllFn(node)) return; // Stop all\n        if (mode === 'TB') fn(node); // Traverse from top to bottom\n        $e4d865a10babc9da$export$6c2da045c9b1be36(graph, graph.getChildren(node.id, treeKey), fn, mode, treeKey, stopFns);\n        if (mode !== 'TB') fn(node); // Traverse from bottom to top\n    }\n};\n\n\n\nconst $b3ade54c9d7b6e23$var$DEFAULTS_LAYOUT_OPTIONS = {\n    center: [\n        0,\n        0\n    ],\n    linkDistance: 50\n};\nclass $b3ade54c9d7b6e23$export$6b075c289f9d9aa8 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'mds';\n        this.options = Object.assign(Object.assign({}, $b3ade54c9d7b6e23$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericMDSLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericMDSLayout(true, graph, options);\n        });\n    }\n    genericMDSLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center: center = [\n                0,\n                0\n            ], linkDistance: linkDistance = 50 } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, center);\n            // the graph-theoretic distance (shortest path distance) matrix\n            const adjMatrix = (0, $e4d865a10babc9da$export$b7dd8b2289c43065)({\n                nodes: nodes,\n                edges: edges\n            }, false);\n            const distances = (0, $e4d865a10babc9da$export$fbbf4bd85aaff6bd)(adjMatrix);\n            $b3ade54c9d7b6e23$var$handleInfinity(distances);\n            // scale the ideal edge length acoording to linkDistance\n            const scaledD = (0, $e4d865a10babc9da$export$f89d8f511263c5b)(distances, linkDistance);\n            // get positions by MDS\n            const positions = $b3ade54c9d7b6e23$var$runMDS(scaledD);\n            const layoutNodes = [];\n            positions.forEach((p, i)=>{\n                const cnode = (0, $9db318b25eeb9fa0$export$8630667bbca04569)(nodes[i]);\n                cnode.data.x = p[0] + center[0];\n                cnode.data.y = p[1] + center[1];\n                layoutNodes.push(cnode);\n            });\n            if (assign) layoutNodes.forEach((node)=>graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                }));\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            return result;\n        });\n    }\n}\nconst $b3ade54c9d7b6e23$var$handleInfinity = (distances)=>{\n    let maxDistance = -999999;\n    distances.forEach((row)=>{\n        row.forEach((value)=>{\n            if (value === Infinity) return;\n            if (maxDistance < value) maxDistance = value;\n        });\n    });\n    distances.forEach((row, i)=>{\n        row.forEach((value, j)=>{\n            if (value === Infinity) distances[i][j] = maxDistance;\n        });\n    });\n};\n/**\n * mds 算法\n * @return {array} positions 计算后的节点位置数组\n */ const $b3ade54c9d7b6e23$var$runMDS = (distances)=>{\n    const dimension = 2;\n    // square distances\n    const M = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).mul((0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).pow(distances, 2), -0.5);\n    // double centre the rows/columns\n    const rowMeans = M.mean('row');\n    const colMeans = M.mean('column');\n    const totalMean = M.mean();\n    M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n    // take the SVD of the double centred matrix, and return the\n    // points from it\n    const ret = new (0, $ce73bb3df5d80b5b$export$2e2bcd8739ae039)(M);\n    const eigenValues = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).sqrt(ret.diagonalMatrix).diagonal();\n    return ret.leftSingularVectors.toJSON().map((row)=>{\n        return (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).mul([\n            row\n        ], [\n            eigenValues\n        ]).toJSON()[0].splice(0, dimension);\n    });\n};\n\n\nfunction $5c9f98f9b91eed31$export$6db3e338b9f8fea2(layout) {\n    return !!layout.tick && !!layout.stop;\n}\n\n\n\n\nconst $ec66f2af978f3a33$var$FORCE_LAYOUT_TYPE_MAP = {\n    gForce: true,\n    force2: true,\n    d3force: true,\n    fruchterman: true,\n    forceAtlas2: true,\n    force: true,\n    'graphin-force': true\n};\nconst $ec66f2af978f3a33$var$DEFAULTS_LAYOUT_OPTIONS = {\n    center: [\n        0,\n        0\n    ],\n    comboPadding: 10,\n    treeKey: 'combo'\n};\nclass $ec66f2af978f3a33$export$a8b67f22f5576612 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'comboCombined';\n        this.options = Object.assign(Object.assign({}, $ec66f2af978f3a33$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericComboCombinedLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericComboCombinedLayout(true, graph, options);\n        });\n    }\n    genericComboCombinedLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = this.initVals(Object.assign(Object.assign({}, this.options), options));\n            const { center: center, treeKey: treeKey, outerLayout: propsOuterLayout } = mergedOptions;\n            const nodes = graph.getAllNodes().filter((node)=>!node.data._isCombo);\n            const combos = graph.getAllNodes().filter((node)=>node.data._isCombo);\n            const edges = graph.getAllEdges();\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            if (!n || n === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, center);\n            // output nodes\n            const layoutNodes = [];\n            const nodeMap = new Map();\n            nodes.forEach((node)=>{\n                nodeMap.set(node.id, node);\n            });\n            const comboMap = new Map();\n            combos.forEach((combo)=>{\n                comboMap.set(combo.id, combo);\n            });\n            // each one in comboNodes is a combo contains the size and child nodes\n            // comboNodes includes the node who has no parent combo\n            const comboNodes = new Map();\n            // the inner layouts, the result positions are stored in comboNodes and their child nodes\n            const innerGraphLayoutPromises = this.getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, mergedOptions, comboNodes);\n            yield Promise.all(innerGraphLayoutPromises);\n            const outerNodeIds = new Map();\n            const outerLayoutNodes = [];\n            const nodeAncestorIdMap = new Map();\n            let allHaveNoPosition = true;\n            graph.getRoots(treeKey).forEach((root)=>{\n                const combo = comboNodes.get(root.id);\n                const cacheCombo = comboMap.get(root.id) || nodeMap.get(root.id);\n                const comboLayoutNode = {\n                    id: root.id,\n                    data: Object.assign(Object.assign({}, root.data), {\n                        x: combo.data.x || cacheCombo.data.x,\n                        y: combo.data.y || cacheCombo.data.y,\n                        fx: combo.data.fx || cacheCombo.data.fx,\n                        fy: combo.data.fy || cacheCombo.data.fy,\n                        mass: combo.data.mass || cacheCombo.data.mass,\n                        size: combo.data.size\n                    })\n                };\n                outerLayoutNodes.push(comboLayoutNode);\n                outerNodeIds.set(root.id, true);\n                if (!isNaN(comboLayoutNode.data.x) && comboLayoutNode.data.x !== 0 && !isNaN(comboLayoutNode.data.y) && comboLayoutNode.data.y !== 0) allHaveNoPosition = false;\n                else {\n                    comboLayoutNode.data.x = Math.random() * 100;\n                    comboLayoutNode.data.y = Math.random() * 100;\n                }\n                (0, $e4d865a10babc9da$export$6c2da045c9b1be36)(graph, [\n                    root\n                ], (child)=>{\n                    if (child.id !== root.id) nodeAncestorIdMap.set(child.id, root.id);\n                }, 'TB', treeKey);\n            });\n            const outerLayoutEdges = [];\n            edges.forEach((edge)=>{\n                const sourceAncestorId = nodeAncestorIdMap.get(edge.source) || edge.source;\n                const targetAncestorId = nodeAncestorIdMap.get(edge.target) || edge.target;\n                // create an edge for outer layout if both source and target's ancestor combo is in outer layout nodes\n                if (sourceAncestorId !== targetAncestorId && outerNodeIds.has(sourceAncestorId) && outerNodeIds.has(targetAncestorId)) outerLayoutEdges.push({\n                    id: edge.id,\n                    source: sourceAncestorId,\n                    target: targetAncestorId,\n                    data: {}\n                });\n            });\n            // 若有需要最外层的 combo 或节点，则对最外层执行力导向\n            let outerPositions;\n            if (outerLayoutNodes === null || outerLayoutNodes === void 0 ? void 0 : outerLayoutNodes.length) {\n                if (outerLayoutNodes.length === 1) {\n                    outerLayoutNodes[0].data.x = center[0];\n                    outerLayoutNodes[0].data.y = center[1];\n                } else {\n                    const outerLayoutGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                        nodes: outerLayoutNodes,\n                        edges: outerLayoutEdges\n                    });\n                    const outerLayout = propsOuterLayout || new (0, $92cd346d3bd9f938$export$9a500154086f6247)();\n                    // preset the nodes if the outerLayout is a force family layout\n                    if (allHaveNoPosition && $ec66f2af978f3a33$var$FORCE_LAYOUT_TYPE_MAP[outerLayout.id]) {\n                        const outerLayoutPreset = outerLayoutNodes.length < 100 ? new (0, $b3ade54c9d7b6e23$export$6b075c289f9d9aa8)() : new (0, $960ff972045b2e6c$export$9347783c4f7c1005)();\n                        yield outerLayoutPreset.assign(outerLayoutGraph);\n                    }\n                    const options = Object.assign({\n                        center: center,\n                        kg: 5,\n                        preventOverlap: true,\n                        animate: false\n                    }, outerLayout.id === 'force' ? {\n                        gravity: 1,\n                        factor: 4,\n                        linkDistance: (edge, source, target)=>{\n                            const sourceSize = Math.max(...source.data.size) || 32;\n                            const targetSize = Math.max(...target.data.size) || 32;\n                            return sourceSize / 2 + targetSize / 2 + 200;\n                        }\n                    } : {});\n                    outerPositions = yield $ec66f2af978f3a33$var$executeLayout(outerLayout, outerLayoutGraph, options);\n                }\n                // move the combos and their child nodes\n                comboNodes.forEach((comboNode)=>{\n                    var _a;\n                    const outerPosition = outerPositions.nodes.find((pos)=>pos.id === comboNode.id);\n                    if (outerPosition) {\n                        // if it is one of the outer layout nodes, update the positions\n                        const { x: x, y: y } = outerPosition.data;\n                        comboNode.data.visited = true;\n                        comboNode.data.x = x;\n                        comboNode.data.y = y;\n                        layoutNodes.push({\n                            id: comboNode.id,\n                            data: {\n                                x: x,\n                                y: y\n                            }\n                        });\n                    }\n                    // move the child nodes\n                    const { x: x, y: y } = comboNode.data;\n                    (_a = comboNode.data.nodes) === null || _a === void 0 || _a.forEach((node)=>{\n                        layoutNodes.push({\n                            id: node.id,\n                            data: {\n                                x: node.data.x + x,\n                                y: node.data.y + y\n                            }\n                        });\n                    });\n                });\n                // move the nodes from top to bottom\n                comboNodes.forEach(({ data: data })=>{\n                    const { x: x, y: y, visited: visited, nodes: nodes } = data;\n                    nodes === null || nodes === void 0 || nodes.forEach((node)=>{\n                        if (!visited) {\n                            const layoutNode = layoutNodes.find((n)=>n.id === node.id);\n                            layoutNode.data.x += x || 0;\n                            layoutNode.data.y += y || 0;\n                        }\n                    });\n                });\n            }\n            if (assign) layoutNodes.forEach((node)=>{\n                graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                });\n            });\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            return result;\n        });\n    }\n    initVals(options) {\n        const formattedOptions = Object.assign({}, options);\n        const { nodeSize: nodeSize, spacing: spacing, comboPadding: comboPadding } = options;\n        let nodeSizeFunc;\n        let spacingFunc;\n        // nodeSpacing to function\n        if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(spacing)) spacingFunc = ()=>spacing;\n        else if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(spacing)) spacingFunc = spacing;\n        else spacingFunc = ()=>0;\n        formattedOptions.spacing = spacingFunc;\n        // nodeSize to function\n        if (!nodeSize) nodeSizeFunc = (d)=>{\n            const spacing = spacingFunc(d);\n            if (d.size) {\n                if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(d.size)) {\n                    const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                    return (res + spacing) / 2;\n                }\n                if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(d.size)) {\n                    const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                    return (res + spacing) / 2;\n                }\n                return (d.size + spacing) / 2;\n            }\n            return 32 + spacing / 2;\n        };\n        else if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(nodeSize)) nodeSizeFunc = (d)=>{\n            const size = nodeSize(d);\n            const spacing = spacingFunc(d);\n            if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(d.size)) {\n                const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                return (res + spacing) / 2;\n            }\n            return ((size || 32) + spacing) / 2;\n        };\n        else if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(nodeSize)) {\n            const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n            const radius = larger / 2;\n            nodeSizeFunc = (d)=>radius + spacingFunc(d) / 2;\n        } else {\n            // number type\n            const radius = nodeSize / 2;\n            nodeSizeFunc = (d)=>radius + spacingFunc(d) / 2;\n        }\n        formattedOptions.nodeSize = nodeSizeFunc;\n        // comboPadding to function\n        let comboPaddingFunc;\n        if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(comboPadding)) comboPaddingFunc = ()=>comboPadding;\n        else if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(comboPadding)) comboPaddingFunc = ()=>Math.max.apply(null, comboPadding);\n        else if ((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(comboPadding)) comboPaddingFunc = comboPadding;\n        else // null type\n        comboPaddingFunc = ()=>0;\n        formattedOptions.comboPadding = comboPaddingFunc;\n        return formattedOptions;\n    }\n    getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, options, comboNodes) {\n        const { nodeSize: nodeSize, comboPadding: comboPadding, spacing: spacing, innerLayout: innerLayout } = options;\n        const innerGraphLayout = innerLayout || new (0, $960ff972045b2e6c$export$9347783c4f7c1005)({});\n        const innerLayoutOptions = {\n            center: [\n                0,\n                0\n            ],\n            preventOverlap: true,\n            nodeSpacing: spacing\n        };\n        const innerLayoutPromises = [];\n        const getSize = (node)=>{\n            // @ts-ignore\n            let padding = (comboPadding === null || comboPadding === void 0 ? void 0 : comboPadding(node)) || 10;\n            if ((0, $6ba9229e0ed76d17$export$43bee75e5e14138e)(padding)) padding = Math.max(...padding);\n            return {\n                size: padding ? [\n                    padding * 2,\n                    padding * 2\n                ] : [\n                    30,\n                    30\n                ],\n                padding: padding\n            };\n        };\n        graph.getRoots(treeKey).forEach((root)=>{\n            // @ts-ignore\n            comboNodes.set(root.id, {\n                id: root.id,\n                data: {\n                    nodes: [],\n                    size: getSize(root).size\n                }\n            });\n            let start = Promise.resolve();\n            // Regard the child nodes in one combo as a graph, and layout them from bottom to top\n            (0, $e4d865a10babc9da$export$6c2da045c9b1be36)(graph, [\n                root\n            ], (treeNode)=>{\n                var _a;\n                if (!treeNode.data._isCombo) return;\n                const { size: nsize, padding: padding } = getSize(treeNode);\n                if (!((_a = graph.getChildren(treeNode.id, treeKey)) === null || _a === void 0 ? void 0 : _a.length)) // empty combo\n                comboNodes.set(treeNode.id, {\n                    id: treeNode.id,\n                    data: Object.assign(Object.assign({}, treeNode.data), {\n                        size: nsize\n                    })\n                });\n                else {\n                    // combo not empty\n                    const comboNode = comboNodes.get(treeNode.id);\n                    comboNodes.set(treeNode.id, {\n                        id: treeNode.id,\n                        data: Object.assign({\n                            nodes: []\n                        }, comboNode === null || comboNode === void 0 ? void 0 : comboNode.data)\n                    });\n                    const innerLayoutNodeIds = new Map();\n                    const innerLayoutNodes = graph.getChildren(treeNode.id, treeKey).map((child)=>{\n                        if (child.data._isCombo) {\n                            if (!comboNodes.has(child.id)) comboNodes.set(child.id, {\n                                id: child.id,\n                                data: Object.assign({}, child.data)\n                            });\n                            innerLayoutNodeIds.set(child.id, true);\n                            return comboNodes.get(child.id);\n                        }\n                        const oriNode = nodeMap.get(child.id) || comboMap.get(child.id);\n                        innerLayoutNodeIds.set(child.id, true);\n                        return {\n                            id: child.id,\n                            data: Object.assign(Object.assign({}, oriNode.data), child.data)\n                        };\n                    });\n                    const innerGraphData = {\n                        nodes: innerLayoutNodes,\n                        edges: edges.filter((edge)=>innerLayoutNodeIds.has(edge.source) && innerLayoutNodeIds.has(edge.target))\n                    };\n                    let minNodeSize = Infinity;\n                    innerLayoutNodes.forEach((node)=>{\n                        var _a;\n                        let { size: size } = node.data;\n                        if (!size) size = ((_a = comboNodes.get(node.id)) === null || _a === void 0 ? void 0 : _a.data.size) || (nodeSize === null || nodeSize === void 0 ? void 0 : nodeSize(node)) || [\n                            30,\n                            30\n                        ];\n                        if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(size)) size = [\n                            size,\n                            size\n                        ];\n                        const [size0, size1] = size;\n                        if (minNodeSize > size0) minNodeSize = size0;\n                        if (minNodeSize > size1) minNodeSize = size1;\n                        node.data.size = size;\n                    });\n                    // innerGraphLayout.assign(innerGraphCore, innerLayoutOptions);\n                    start = start.then(()=>(0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n                            const innerGraphCore = new (0, $49867c5a46937b53$export$614db49f3febe941)(innerGraphData);\n                            yield $ec66f2af978f3a33$var$executeLayout(innerGraphLayout, innerGraphCore, innerLayoutOptions, true);\n                            const { minX: minX, minY: minY, maxX: maxX, maxY: maxY } = (0, $e4d865a10babc9da$export$4d7b865a5fd254d3)(innerLayoutNodes);\n                            // move the innerGraph to [0, 0], for later controlled by parent layout\n                            const center = {\n                                x: (maxX + minX) / 2,\n                                y: (maxY + minY) / 2\n                            };\n                            innerGraphData.nodes.forEach((node)=>{\n                                node.data.x -= center.x;\n                                node.data.y -= center.y;\n                            });\n                            const size = [\n                                Math.max(maxX - minX, minNodeSize) + padding * 2,\n                                Math.max(maxY - minY, minNodeSize) + padding * 2\n                            ];\n                            comboNodes.get(treeNode.id).data.size = size;\n                            comboNodes.get(treeNode.id).data.nodes = innerLayoutNodes;\n                        }));\n                }\n                return true;\n            }, 'BT', treeKey);\n            innerLayoutPromises.push(start);\n        });\n        return innerLayoutPromises;\n    }\n}\nfunction $ec66f2af978f3a33$var$executeLayout(layout, graph, options, assign) {\n    var _a;\n    return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n        if ((0, $5c9f98f9b91eed31$export$6db3e338b9f8fea2)(layout)) {\n            layout.execute(graph, options);\n            layout.stop();\n            return layout.tick((_a = options.iterations) !== null && _a !== void 0 ? _a : 300);\n        }\n        if (assign) return yield layout.assign(graph, options);\n        return yield layout.execute(graph, options);\n    });\n}\n\n\n\n\n\nvar $53ff79a1510f3f02$var$isObjectLike = function(value) {\n    /**\n     * isObjectLike({}) => true\n     * isObjectLike([1, 2, 3]) => true\n     * isObjectLike(Function) => false\n     * isObjectLike(null) => false\n     */ return typeof value === 'object' && value !== null;\n};\nvar $53ff79a1510f3f02$export$2e2bcd8739ae039 = $53ff79a1510f3f02$var$isObjectLike;\n\n\nvar $e9ee084a8ef3e04c$var$toString = {}.toString;\nvar $e9ee084a8ef3e04c$var$isType = function(value, type) {\n    return $e9ee084a8ef3e04c$var$toString.call(value) === '[object ' + type + ']';\n};\nvar $e9ee084a8ef3e04c$export$2e2bcd8739ae039 = $e9ee084a8ef3e04c$var$isType;\n\n\nvar $fc5e4ee51ccb3ebf$var$isPlainObject = function(value) {\n    /**\n     * isObjectLike(new Foo) => false\n     * isObjectLike([1, 2, 3]) => false\n     * isObjectLike({ x: 0, y: 0 }) => true\n     * isObjectLike(Object.create(null)) => true\n     */ if (!(0, $53ff79a1510f3f02$export$2e2bcd8739ae039)(value) || !(0, $e9ee084a8ef3e04c$export$2e2bcd8739ae039)(value, 'Object')) return false;\n    if (Object.getPrototypeOf(value) === null) return true;\n    var proto = value;\n    while(Object.getPrototypeOf(proto) !== null)proto = Object.getPrototypeOf(proto);\n    return Object.getPrototypeOf(value) === proto;\n};\nvar $fc5e4ee51ccb3ebf$export$2e2bcd8739ae039 = $fc5e4ee51ccb3ebf$var$isPlainObject;\n\n\nvar $15db18227e015d3e$var$MAX_MIX_LEVEL = 5;\nfunction $15db18227e015d3e$var$hasOwn(object, property) {\n    if (Object.hasOwn) return Object.hasOwn(object, property);\n    if (object == null) throw new TypeError('Cannot convert undefined or null to object');\n    return Object.prototype.hasOwnProperty.call(Object(object), property);\n}\nfunction $15db18227e015d3e$var$_deepMix(dist, src, level, maxLevel) {\n    level = level || 0;\n    maxLevel = maxLevel || $15db18227e015d3e$var$MAX_MIX_LEVEL;\n    for(var key in src)if ($15db18227e015d3e$var$hasOwn(src, key)) {\n        var value = src[key];\n        if (value !== null && (0, $fc5e4ee51ccb3ebf$export$2e2bcd8739ae039)(value)) {\n            if (!(0, $fc5e4ee51ccb3ebf$export$2e2bcd8739ae039)(dist[key])) dist[key] = {};\n            if (level < maxLevel) $15db18227e015d3e$var$_deepMix(dist[key], value, level + 1, maxLevel);\n            else dist[key] = src[key];\n        } else if ((0, $fca728a03c30d69f$export$2e2bcd8739ae039)(value)) {\n            dist[key] = [];\n            dist[key] = dist[key].concat(value);\n        } else if (value !== undefined) dist[key] = value;\n    }\n}\n// todo 重写\nvar $15db18227e015d3e$var$deepMix = function(rst) {\n    var args = [];\n    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];\n    for(var i = 0; i < args.length; i += 1)$15db18227e015d3e$var$_deepMix(rst, args[i]);\n    return rst;\n};\nvar $15db18227e015d3e$export$2e2bcd8739ae039 = $15db18227e015d3e$var$deepMix;\n\n\n\nfunction $6b58deacb9cbb42a$var$each(elements, func) {\n    if (!elements) return;\n    var rst;\n    if ((0, $fca728a03c30d69f$export$2e2bcd8739ae039)(elements)) for(var i = 0, len = elements.length; i < len; i++){\n        rst = func(elements[i], i);\n        if (rst === false) break;\n    }\n    else if ((0, $93c5c1f45dc66437$export$2e2bcd8739ae039)(elements)) {\n        for(var k in elements)if (elements.hasOwnProperty(k)) {\n            rst = func(elements[k], k);\n            if (rst === false) break;\n        }\n    }\n}\nvar $6b58deacb9cbb42a$export$2e2bcd8739ae039 = $6b58deacb9cbb42a$var$each;\n\n\n\nvar $8decd245a1872fb9$var$hasOwnProperty = Object.prototype.hasOwnProperty;\nvar $8decd245a1872fb9$export$2e2bcd8739ae039 = function(object, keys) {\n    if (object === null || !(0, $fc5e4ee51ccb3ebf$export$2e2bcd8739ae039)(object)) return {};\n    var result = {};\n    (0, $6b58deacb9cbb42a$export$2e2bcd8739ae039)(keys, function(key) {\n        if ($8decd245a1872fb9$var$hasOwnProperty.call(object, key)) result[key] = object[key];\n    });\n    return result;\n};\n\n\nfunction $a2f2fe6e26446039$export$2e2bcd8739ae039(x, y) {\n    var nodes, strength = 1;\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n    function force() {\n        var i, n = nodes.length, node, sx = 0, sy = 0;\n        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x, sy += node.y;\n        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i)node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n    force.initialize = function(_) {\n        nodes = _;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = +_, force) : x;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = +_, force) : y;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    return force;\n}\n\n\nfunction $3cc5547f90c3d791$export$2e2bcd8739ae039(x) {\n    return function() {\n        return x;\n    };\n}\n\n\nfunction $6b4de4abbd0b0ab1$export$2e2bcd8739ae039(random) {\n    return (random() - 0.5) * 1e-6;\n}\n\n\nfunction $8943c4e559031338$var$x(d) {\n    return d.x + d.vx;\n}\nfunction $8943c4e559031338$var$y(d) {\n    return d.y + d.vy;\n}\nfunction $8943c4e559031338$export$2e2bcd8739ae039(radius) {\n    var nodes, radii, random, strength = 1, iterations = 1;\n    if (typeof radius !== \"function\") radius = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(radius == null ? 1 : +radius);\n    function force() {\n        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;\n        for(var k = 0; k < iterations; ++k){\n            tree = (0, $931875583ffa81b8$export$2e2bcd8739ae039)(nodes, $8943c4e559031338$var$x, $8943c4e559031338$var$y).visitAfter(prepare);\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                ri = radii[node.index], ri2 = ri * ri;\n                xi = node.x + node.vx;\n                yi = node.y + node.vy;\n                tree.visit(apply);\n            }\n        }\n        function apply(quad, x0, y0, x1, y1) {\n            var data = quad.data, rj = quad.r, r = ri + rj;\n            if (data) {\n                if (data.index > node.index) {\n                    var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;\n                    if (l < r * r) {\n                        if (x === 0) x = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += x * x;\n                        if (y === 0) y = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += y * y;\n                        l = (r - (l = Math.sqrt(l))) / l * strength;\n                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n                        node.vy += (y *= l) * r;\n                        data.vx -= x * (r = 1 - r);\n                        data.vy -= y * r;\n                    }\n                }\n                return;\n            }\n            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n        }\n    }\n    function prepare(quad) {\n        if (quad.data) return quad.r = radii[quad.data.index];\n        for(var i = quad.r = 0; i < 4; ++i)if (quad[i] && quad[i].r > quad.r) quad.r = quad[i].r;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        radii = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    force.radius = function(_) {\n        return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : radius;\n    };\n    return force;\n}\n\n\n\nfunction $fe54ec893d8aca5a$var$index(d) {\n    return d.index;\n}\nfunction $fe54ec893d8aca5a$var$find(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"node not found: \" + nodeId);\n    return node;\n}\nfunction $fe54ec893d8aca5a$export$2e2bcd8739ae039(links) {\n    var id = $fe54ec893d8aca5a$var$index, strength = defaultStrength, strengths, distance = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(30), distances, nodes, count, bias, random, iterations = 1;\n    if (links == null) links = [];\n    function defaultStrength(link) {\n        return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n    function force(alpha) {\n        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x, y, l, b; i < n; ++i){\n            link = links[i], source = link.source, target = link.target;\n            x = target.x + target.vx - source.x - source.vx || (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random);\n            y = target.y + target.vy - source.y - source.vy || (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random);\n            l = Math.sqrt(x * x + y * y);\n            l = (l - distances[i]) / l * alpha * strengths[i];\n            x *= l, y *= l;\n            target.vx -= x * (b = bias[i]);\n            target.vy -= y * b;\n            source.vx += x * (b = 1 - b);\n            source.vy += y * b;\n        }\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[\n                id(d, i, nodes),\n                d\n            ])), link;\n        for(i = 0, count = new Array(n); i < m; ++i){\n            link = links[i], link.index = i;\n            if (typeof link.source !== \"object\") link.source = $fe54ec893d8aca5a$var$find(nodeById, link.source);\n            if (typeof link.target !== \"object\") link.target = $fe54ec893d8aca5a$var$find(nodeById, link.target);\n            count[link.source.index] = (count[link.source.index] || 0) + 1;\n            count[link.target.index] = (count[link.target.index] || 0) + 1;\n        }\n        for(i = 0, bias = new Array(m); i < m; ++i)link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n        strengths = new Array(m), initializeStrength();\n        distances = new Array(m), initializeDistance();\n    }\n    function initializeStrength() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);\n    }\n    function initializeDistance() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.links = function(_) {\n        return arguments.length ? (links = _, initialize(), force) : links;\n    };\n    force.id = function(_) {\n        return arguments.length ? (id = _, force) : id;\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initializeStrength(), force) : strength;\n    };\n    force.distance = function(_) {\n        return arguments.length ? (distance = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initializeDistance(), force) : distance;\n    };\n    return force;\n}\n\n\n\n\nvar $5f4629e300d5fac4$var$noop = {\n    value: ()=>{}\n};\nfunction $5f4629e300d5fac4$var$dispatch() {\n    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){\n        if (!(t = arguments[i] + \"\") || t in _ || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n        _[t] = [];\n    }\n    return new $5f4629e300d5fac4$var$Dispatch(_);\n}\nfunction $5f4629e300d5fac4$var$Dispatch(_) {\n    this._ = _;\n}\nfunction $5f4629e300d5fac4$var$parseTypenames(typenames, types) {\n    return typenames.trim().split(/^|\\s+/).map(function(t) {\n        var name = \"\", i = t.indexOf(\".\");\n        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n        if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n        return {\n            type: t,\n            name: name\n        };\n    });\n}\n$5f4629e300d5fac4$var$Dispatch.prototype = $5f4629e300d5fac4$var$dispatch.prototype = {\n    constructor: $5f4629e300d5fac4$var$Dispatch,\n    on: function(typename, callback) {\n        var _ = this._, T = $5f4629e300d5fac4$var$parseTypenames(typename + \"\", _), t, i = -1, n = T.length;\n        // If no callback was specified, return the callback of the given type and name.\n        if (arguments.length < 2) {\n            while(++i < n)if ((t = (typename = T[i]).type) && (t = $5f4629e300d5fac4$var$get(_[t], typename.name))) return t;\n            return;\n        }\n        // If a type was specified, set the callback for the given type and name.\n        // Otherwise, if a null callback was specified, remove callbacks of the given name.\n        if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n        while(++i < n){\n            if (t = (typename = T[i]).type) _[t] = $5f4629e300d5fac4$var$set(_[t], typename.name, callback);\n            else if (callback == null) for(t in _)_[t] = $5f4629e300d5fac4$var$set(_[t], typename.name, null);\n        }\n        return this;\n    },\n    copy: function() {\n        var copy = {}, _ = this._;\n        for(var t in _)copy[t] = _[t].slice();\n        return new $5f4629e300d5fac4$var$Dispatch(copy);\n    },\n    call: function(type, that) {\n        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    },\n    apply: function(type, that, args) {\n        if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);\n    }\n};\nfunction $5f4629e300d5fac4$var$get(type, name) {\n    for(var i = 0, n = type.length, c; i < n; ++i){\n        if ((c = type[i]).name === name) return c.value;\n    }\n}\nfunction $5f4629e300d5fac4$var$set(type, name, callback) {\n    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {\n        type[i] = $5f4629e300d5fac4$var$noop, type = type.slice(0, i).concat(type.slice(i + 1));\n        break;\n    }\n    if (callback != null) type.push({\n        name: name,\n        value: callback\n    });\n    return type;\n}\nvar $5f4629e300d5fac4$export$2e2bcd8739ae039 = $5f4629e300d5fac4$var$dispatch;\n\n\nvar $983ef41e0479cc7a$var$frame = 0, $983ef41e0479cc7a$var$timeout = 0, $983ef41e0479cc7a$var$interval = 0, $983ef41e0479cc7a$var$pokeDelay = 1000, $983ef41e0479cc7a$var$taskHead, $983ef41e0479cc7a$var$taskTail, $983ef41e0479cc7a$var$clockLast = 0, $983ef41e0479cc7a$var$clockNow = 0, $983ef41e0479cc7a$var$clockSkew = 0, $983ef41e0479cc7a$var$clock = typeof performance === \"object\" && performance.now ? performance : Date, $983ef41e0479cc7a$var$setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {\n    setTimeout(f, 17);\n};\nfunction $983ef41e0479cc7a$export$461939dd4422153() {\n    return $983ef41e0479cc7a$var$clockNow || ($983ef41e0479cc7a$var$setFrame($983ef41e0479cc7a$var$clearNow), $983ef41e0479cc7a$var$clockNow = $983ef41e0479cc7a$var$clock.now() + $983ef41e0479cc7a$var$clockSkew);\n}\nfunction $983ef41e0479cc7a$var$clearNow() {\n    $983ef41e0479cc7a$var$clockNow = 0;\n}\nfunction $983ef41e0479cc7a$export$c57e9b2d8b9e4de() {\n    this._call = this._time = this._next = null;\n}\n$983ef41e0479cc7a$export$c57e9b2d8b9e4de.prototype = $983ef41e0479cc7a$export$9dc4ecf953986f04.prototype = {\n    constructor: $983ef41e0479cc7a$export$c57e9b2d8b9e4de,\n    restart: function(callback, delay, time) {\n        if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n        time = (time == null ? $983ef41e0479cc7a$export$461939dd4422153() : +time) + (delay == null ? 0 : +delay);\n        if (!this._next && $983ef41e0479cc7a$var$taskTail !== this) {\n            if ($983ef41e0479cc7a$var$taskTail) $983ef41e0479cc7a$var$taskTail._next = this;\n            else $983ef41e0479cc7a$var$taskHead = this;\n            $983ef41e0479cc7a$var$taskTail = this;\n        }\n        this._call = callback;\n        this._time = time;\n        $983ef41e0479cc7a$var$sleep();\n    },\n    stop: function() {\n        if (this._call) {\n            this._call = null;\n            this._time = Infinity;\n            $983ef41e0479cc7a$var$sleep();\n        }\n    }\n};\nfunction $983ef41e0479cc7a$export$9dc4ecf953986f04(callback, delay, time) {\n    var t = new $983ef41e0479cc7a$export$c57e9b2d8b9e4de;\n    t.restart(callback, delay, time);\n    return t;\n}\nfunction $983ef41e0479cc7a$export$d60154c1d7f3990e() {\n    $983ef41e0479cc7a$export$461939dd4422153(); // Get the current time, if not already set.\n    ++$983ef41e0479cc7a$var$frame; // Pretend we’ve set an alarm, if we haven’t already.\n    var t = $983ef41e0479cc7a$var$taskHead, e;\n    while(t){\n        if ((e = $983ef41e0479cc7a$var$clockNow - t._time) >= 0) t._call.call(undefined, e);\n        t = t._next;\n    }\n    --$983ef41e0479cc7a$var$frame;\n}\nfunction $983ef41e0479cc7a$var$wake() {\n    $983ef41e0479cc7a$var$clockNow = ($983ef41e0479cc7a$var$clockLast = $983ef41e0479cc7a$var$clock.now()) + $983ef41e0479cc7a$var$clockSkew;\n    $983ef41e0479cc7a$var$frame = $983ef41e0479cc7a$var$timeout = 0;\n    try {\n        $983ef41e0479cc7a$export$d60154c1d7f3990e();\n    } finally{\n        $983ef41e0479cc7a$var$frame = 0;\n        $983ef41e0479cc7a$var$nap();\n        $983ef41e0479cc7a$var$clockNow = 0;\n    }\n}\nfunction $983ef41e0479cc7a$var$poke() {\n    var now = $983ef41e0479cc7a$var$clock.now(), delay = now - $983ef41e0479cc7a$var$clockLast;\n    if (delay > $983ef41e0479cc7a$var$pokeDelay) $983ef41e0479cc7a$var$clockSkew -= delay, $983ef41e0479cc7a$var$clockLast = now;\n}\nfunction $983ef41e0479cc7a$var$nap() {\n    var t0, t1 = $983ef41e0479cc7a$var$taskHead, t2, time = Infinity;\n    while(t1)if (t1._call) {\n        if (time > t1._time) time = t1._time;\n        t0 = t1, t1 = t1._next;\n    } else {\n        t2 = t1._next, t1._next = null;\n        t1 = t0 ? t0._next = t2 : $983ef41e0479cc7a$var$taskHead = t2;\n    }\n    $983ef41e0479cc7a$var$taskTail = t0;\n    $983ef41e0479cc7a$var$sleep(time);\n}\nfunction $983ef41e0479cc7a$var$sleep(time) {\n    if ($983ef41e0479cc7a$var$frame) return; // Soonest alarm already set, or will be.\n    if ($983ef41e0479cc7a$var$timeout) $983ef41e0479cc7a$var$timeout = clearTimeout($983ef41e0479cc7a$var$timeout);\n    var delay = time - $983ef41e0479cc7a$var$clockNow; // Strictly less than if we recomputed clockNow.\n    if (delay > 24) {\n        if (time < Infinity) $983ef41e0479cc7a$var$timeout = setTimeout($983ef41e0479cc7a$var$wake, time - $983ef41e0479cc7a$var$clock.now() - $983ef41e0479cc7a$var$clockSkew);\n        if ($983ef41e0479cc7a$var$interval) $983ef41e0479cc7a$var$interval = clearInterval($983ef41e0479cc7a$var$interval);\n    } else {\n        if (!$983ef41e0479cc7a$var$interval) $983ef41e0479cc7a$var$clockLast = $983ef41e0479cc7a$var$clock.now(), $983ef41e0479cc7a$var$interval = setInterval($983ef41e0479cc7a$var$poke, $983ef41e0479cc7a$var$pokeDelay);\n        $983ef41e0479cc7a$var$frame = 1, $983ef41e0479cc7a$var$setFrame($983ef41e0479cc7a$var$wake);\n    }\n}\n\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst $91414088188ff396$var$a = 1664525;\nconst $91414088188ff396$var$c = 1013904223;\nconst $91414088188ff396$var$m = 4294967296; // 2^32\nfunction $91414088188ff396$export$2e2bcd8739ae039() {\n    let s = 1;\n    return ()=>(s = ($91414088188ff396$var$a * s + $91414088188ff396$var$c) % $91414088188ff396$var$m) / $91414088188ff396$var$m;\n}\n\n\nfunction $3c51ee1f934d4bfb$export$d141bba7fdc215a3(d) {\n    return d.x;\n}\nfunction $3c51ee1f934d4bfb$export$4a5767248b18ef41(d) {\n    return d.y;\n}\nvar $3c51ee1f934d4bfb$var$initialRadius = 10, $3c51ee1f934d4bfb$var$initialAngle = Math.PI * (3 - Math.sqrt(5));\nfunction $3c51ee1f934d4bfb$export$2e2bcd8739ae039(nodes) {\n    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = (0, $983ef41e0479cc7a$export$9dc4ecf953986f04)(step), event = (0, $5f4629e300d5fac4$export$2e2bcd8739ae039)(\"tick\", \"end\"), random = (0, $91414088188ff396$export$2e2bcd8739ae039)();\n    if (nodes == null) nodes = [];\n    function step() {\n        tick();\n        event.call(\"tick\", simulation);\n        if (alpha < alphaMin) {\n            stepper.stop();\n            event.call(\"end\", simulation);\n        }\n    }\n    function tick(iterations) {\n        var i, n = nodes.length, node;\n        if (iterations === undefined) iterations = 1;\n        for(var k = 0; k < iterations; ++k){\n            alpha += (alphaTarget - alpha) * alphaDecay;\n            forces.forEach(function(force) {\n                force(alpha);\n            });\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                if (node.fx == null) node.x += node.vx *= velocityDecay;\n                else node.x = node.fx, node.vx = 0;\n                if (node.fy == null) node.y += node.vy *= velocityDecay;\n                else node.y = node.fy, node.vy = 0;\n            }\n        }\n        return simulation;\n    }\n    function initializeNodes() {\n        for(var i = 0, n = nodes.length, node; i < n; ++i){\n            node = nodes[i], node.index = i;\n            if (node.fx != null) node.x = node.fx;\n            if (node.fy != null) node.y = node.fy;\n            if (isNaN(node.x) || isNaN(node.y)) {\n                var radius = $3c51ee1f934d4bfb$var$initialRadius * Math.sqrt(0.5 + i), angle = i * $3c51ee1f934d4bfb$var$initialAngle;\n                node.x = radius * Math.cos(angle);\n                node.y = radius * Math.sin(angle);\n            }\n            if (isNaN(node.vx) || isNaN(node.vy)) node.vx = node.vy = 0;\n        }\n    }\n    function initializeForce(force) {\n        if (force.initialize) force.initialize(nodes, random);\n        return force;\n    }\n    initializeNodes();\n    return simulation = {\n        tick: tick,\n        restart: function() {\n            return stepper.restart(step), simulation;\n        },\n        stop: function() {\n            return stepper.stop(), simulation;\n        },\n        nodes: function(_) {\n            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n        },\n        alpha: function(_) {\n            return arguments.length ? (alpha = +_, simulation) : alpha;\n        },\n        alphaMin: function(_) {\n            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n        },\n        alphaDecay: function(_) {\n            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n        },\n        alphaTarget: function(_) {\n            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n        },\n        velocityDecay: function(_) {\n            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n        },\n        randomSource: function(_) {\n            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n        },\n        force: function(name, _) {\n            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n        },\n        find: function(x, y, radius) {\n            var i = 0, n = nodes.length, dx, dy, d2, node, closest;\n            if (radius == null) radius = Infinity;\n            else radius *= radius;\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                dx = x - node.x;\n                dy = y - node.y;\n                d2 = dx * dx + dy * dy;\n                if (d2 < radius) closest = node, radius = d2;\n            }\n            return closest;\n        },\n        on: function(name, _) {\n            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n        }\n    };\n}\n\n\nfunction $d9804b8672ebf17d$export$2e2bcd8739ae039() {\n    var nodes, node, random, alpha, strength = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;\n    function force(_) {\n        var i, n = nodes.length, tree = (0, $931875583ffa81b8$export$2e2bcd8739ae039)(nodes, (0, $3c51ee1f934d4bfb$export$d141bba7fdc215a3), (0, $3c51ee1f934d4bfb$export$4a5767248b18ef41)).visitAfter(accumulate);\n        for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        strengths = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n    function accumulate(quad) {\n        var strength = 0, q, c, weight = 0, x, y, i;\n        // For internal nodes, accumulate forces from child quadrants.\n        if (quad.length) {\n            for(x = y = i = 0; i < 4; ++i)if ((q = quad[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n            quad.x = x / weight;\n            quad.y = y / weight;\n        } else {\n            q = quad;\n            q.x = q.data.x;\n            q.y = q.data.y;\n            do strength += strengths[q.data.index];\n            while (q = q.next);\n        }\n        quad.value = strength;\n    }\n    function apply(quad, x1, _, x2) {\n        if (!quad.value) return true;\n        var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;\n        // Apply the Barnes-Hut approximation if possible.\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (w * w / theta2 < l) {\n            if (l < distanceMax2) {\n                if (x === 0) x = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += x * x;\n                if (y === 0) y = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += y * y;\n                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n                node.vx += x * quad.value * alpha / l;\n                node.vy += y * quad.value * alpha / l;\n            }\n            return true;\n        } else if (quad.length || l >= distanceMax2) return;\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (quad.data !== node || quad.next) {\n            if (x === 0) x = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += x * x;\n            if (y === 0) y = (0, $6b4de4abbd0b0ab1$export$2e2bcd8739ae039)(random), l += y * y;\n            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        }\n        do if (quad.data !== node) {\n            w = strengths[quad.data.index] * alpha / l;\n            node.vx += x * w;\n            node.vy += y * w;\n        }\n        while (quad = quad.next);\n    }\n    force.initialize = function(_nodes, _random) {\n        nodes = _nodes;\n        random = _random;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.distanceMin = function(_) {\n        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n    force.distanceMax = function(_) {\n        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n    force.theta = function(_) {\n        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n    return force;\n}\n\n\nfunction $9dfa59f47d4fbf16$export$2e2bcd8739ae039(radius, x, y) {\n    var nodes, strength = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(0.1), strengths, radiuses;\n    if (typeof radius !== \"function\") radius = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+radius);\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n    function force(alpha) {\n        for(var i = 0, n = nodes.length; i < n; ++i){\n            var node = nodes[i], dx = node.x - x || 1e-6, dy = node.y - y || 1e-6, r = Math.sqrt(dx * dx + dy * dy), k = (radiuses[i] - r) * strengths[i] * alpha / r;\n            node.vx += dx * k;\n            node.vy += dy * k;\n        }\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        radiuses = new Array(n);\n        for(i = 0; i < n; ++i){\n            radiuses[i] = +radius(nodes[i], i, nodes);\n            strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n        }\n    }\n    force.initialize = function(_) {\n        nodes = _, initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.radius = function(_) {\n        return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : radius;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = +_, force) : x;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = +_, force) : y;\n    };\n    return force;\n}\n\n\nfunction $33483a8678f8fab3$export$2e2bcd8739ae039(x) {\n    var strength = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(0.1), nodes, strengths, xz;\n    if (typeof x !== \"function\") x = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(x == null ? 0 : +x);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        xz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : x;\n    };\n    return force;\n}\n\n\nfunction $105aa014e41bb8e2$export$2e2bcd8739ae039(y) {\n    var strength = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(0.1), nodes, strengths, yz;\n    if (typeof y !== \"function\") y = (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(y == null ? 0 : +y);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        yz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, $3cc5547f90c3d791$export$2e2bcd8739ae039)(+_), initialize(), force) : y;\n    };\n    return force;\n}\n\n\nclass $465548e1faf77560$export$8ff17a5dd8c72f61 {\n    constructor(options){\n        this.id = 'd3-force';\n        this.config = {\n            inputNodeAttrs: [\n                'x',\n                'y',\n                'vx',\n                'vy',\n                'fx',\n                'fy'\n            ],\n            outputNodeAttrs: [\n                'x',\n                'y',\n                'vx',\n                'vy'\n            ],\n            simulationAttrs: [\n                'alpha',\n                'alphaMin',\n                'alphaDecay',\n                'alphaTarget',\n                'velocityDecay',\n                'randomSource'\n            ]\n        };\n        this.forceMap = {\n            link: (0, $fe54ec893d8aca5a$export$2e2bcd8739ae039),\n            manyBody: (0, $d9804b8672ebf17d$export$2e2bcd8739ae039),\n            center: (0, $a2f2fe6e26446039$export$2e2bcd8739ae039),\n            collide: (0, $8943c4e559031338$export$2e2bcd8739ae039),\n            radial: (0, $9dfa59f47d4fbf16$export$2e2bcd8739ae039),\n            x: (0, $33483a8678f8fab3$export$2e2bcd8739ae039),\n            y: (0, $105aa014e41bb8e2$export$2e2bcd8739ae039)\n        };\n        // @ts-ignore\n        this.options = {\n            link: {\n                id: (edge)=>edge.id\n            },\n            manyBody: {},\n            center: {\n                x: 0,\n                y: 0\n            }\n        };\n        this.context = {\n            options: {},\n            assign: false,\n            nodes: [],\n            edges: []\n        };\n        (0, $15db18227e015d3e$export$2e2bcd8739ae039)(this.options, options);\n        if (this.options.forceSimulation) this.simulation = this.options.forceSimulation;\n    }\n    execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericLayout(false, graph, options);\n        });\n    }\n    assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericLayout(true, graph, options);\n        });\n    }\n    stop() {\n        this.simulation.stop();\n    }\n    tick(iterations) {\n        this.simulation.tick(iterations);\n        return this.getResult();\n    }\n    restart() {\n        this.simulation.restart();\n    }\n    setFixedPosition(id, position) {\n        const node = this.context.nodes.find((n)=>n.id === id);\n        if (!node) return;\n        position.forEach((value, index)=>{\n            if (typeof value === 'number' || value === null) {\n                const key = [\n                    'fx',\n                    'fy',\n                    'fz'\n                ][index];\n                node[key] = value;\n            }\n        });\n    }\n    getOptions(options) {\n        var _a, _b;\n        const _ = (0, $15db18227e015d3e$export$2e2bcd8739ae039)({}, this.options, options);\n        // process nodeSize\n        if (_.collide && ((_a = _.collide) === null || _a === void 0 ? void 0 : _a.radius) === undefined) {\n            _.collide = _.collide || {};\n            // @ts-ignore\n            _.collide.radius = (_b = _.nodeSize) !== null && _b !== void 0 ? _b : 10;\n        }\n        // process iterations\n        if (_.iterations === undefined) {\n            if (_.link && _.link.iterations === undefined) _.iterations = _.link.iterations;\n            if (_.collide && _.collide.iterations === undefined) _.iterations = _.collide.iterations;\n        }\n        // assign to context\n        this.context.options = _;\n        return _;\n    }\n    genericLayout(assign, graph, options) {\n        var _a;\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const _options = this.getOptions(options);\n            const nodes = graph.getAllNodes().map(({ id: id, data: data })=>Object.assign(Object.assign({\n                    id: id\n                }, data), (0, $8decd245a1872fb9$export$2e2bcd8739ae039)(data.data, this.config.inputNodeAttrs)));\n            const edges = graph.getAllEdges().map((edge)=>Object.assign({}, edge));\n            Object.assign(this.context, {\n                assign: assign,\n                nodes: nodes,\n                edges: edges,\n                graph: graph\n            });\n            const promise = new Promise((resolver)=>{\n                this.resolver = resolver;\n            });\n            const simulation = this.setSimulation(_options);\n            simulation.nodes(nodes);\n            (_a = simulation.force('link')) === null || _a === void 0 || _a.links(edges);\n            return promise;\n        });\n    }\n    getResult() {\n        const { assign: assign, nodes: nodes, edges: edges, graph: graph } = this.context;\n        const nodesResult = nodes.map((node)=>({\n                id: node.id,\n                data: Object.assign(Object.assign({}, node.data), (0, $8decd245a1872fb9$export$2e2bcd8739ae039)(node, this.config.outputNodeAttrs))\n            }));\n        const edgeResult = edges.map(({ id: id, source: source, target: target, data: data })=>({\n                id: id,\n                source: typeof source === 'object' ? source.id : source,\n                target: typeof target === 'object' ? target.id : target,\n                data: data\n            }));\n        if (assign) nodesResult.forEach((node)=>graph.mergeNodeData(node.id, node.data));\n        return {\n            nodes: nodesResult,\n            edges: edgeResult\n        };\n    }\n    initSimulation() {\n        return (0, $3c51ee1f934d4bfb$export$2e2bcd8739ae039)();\n    }\n    setSimulation(options) {\n        const simulation = this.simulation || this.options.forceSimulation || this.initSimulation();\n        if (!this.simulation) this.simulation = simulation.on('tick', ()=>{\n            var _a;\n            return (_a = options.onTick) === null || _a === void 0 ? void 0 : _a.call(options, this.getResult());\n        }).on('end', ()=>{\n            var _a;\n            return (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.call(this, this.getResult());\n        });\n        $465548e1faf77560$var$apply(simulation, this.config.simulationAttrs.map((name)=>[\n                name,\n                options[name]\n            ]));\n        Object.entries(this.forceMap).forEach(([name, Ctor])=>{\n            const forceName = name;\n            if (options[name]) {\n                let force = simulation.force(forceName);\n                if (!force) {\n                    force = Ctor();\n                    simulation.force(forceName, force);\n                }\n                $465548e1faf77560$var$apply(force, Object.entries(options[forceName]));\n            } else simulation.force(forceName, null);\n        });\n        return simulation;\n    }\n}\nconst $465548e1faf77560$var$apply = (target, params)=>{\n    return params.reduce((acc, [method, param])=>{\n        if (!acc[method] || param === undefined) return acc;\n        return acc[method].call(target, param);\n    }, target);\n};\n\n\nfunction $c69e818ff67516f1$export$2e2bcd8739ae039(x, y, z) {\n    var nodes, strength = 1;\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n    if (z == null) z = 0;\n    function force() {\n        var i, n = nodes.length, node, sx = 0, sy = 0, sz = 0;\n        for(i = 0; i < n; ++i)node = nodes[i], sx += node.x || 0, sy += node.y || 0, sz += node.z || 0;\n        for(sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, sz = (sz / n - z) * strength, i = 0; i < n; ++i){\n            node = nodes[i];\n            if (sx) node.x -= sx;\n            if (sy) node.y -= sy;\n            if (sz) node.z -= sz;\n        }\n    }\n    force.initialize = function(_) {\n        nodes = _;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = +_, force) : x;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = +_, force) : y;\n    };\n    force.z = function(_) {\n        return arguments.length ? (z = +_, force) : z;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    return force;\n}\n\nfunction $2e2dc9eef50bf4c2$export$2e2bcd8739ae039(d) {\n    const x = +this._x.call(null, d);\n    return $2e2dc9eef50bf4c2$var$add(this.cover(x), x, d);\n}\nfunction $2e2dc9eef50bf4c2$var$add(tree, x, d) {\n    if (isNaN(x)) return tree; // ignore invalid points\n    var parent, node = tree._root, leaf = {\n        data: d\n    }, x0 = tree._x0, x1 = tree._x1, xm, xp, right, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return tree._root = leaf, tree;\n    // Find the existing leaf for the new point, or add it.\n    while(node.length){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (parent = node, !(node = node[i = +right])) return parent[i] = leaf, tree;\n    }\n    // Is the new point is exactly coincident with the existing point?\n    xp = +tree._x.call(null, node.data);\n    if (x === xp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n    // Otherwise, split the leaf node until the old and new point are separated.\n    do {\n        parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n    }while ((i = +right) === (j = +(xp >= xm)));\n    return parent[j] = node, parent[i] = leaf, tree;\n}\nfunction $2e2dc9eef50bf4c2$export$32ed0561867ec8a1(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    const n = data.length;\n    const xz = new Float64Array(n);\n    let x0 = Infinity, x1 = -Infinity;\n    // Compute the points and their extent.\n    for(let i = 0, x; i < n; ++i){\n        if (isNaN(x = +this._x.call(null, data[i]))) continue;\n        xz[i] = x;\n        if (x < x0) x0 = x;\n        if (x > x1) x1 = x;\n    }\n    // If there were no (valid) points, abort.\n    if (x0 > x1) return this;\n    // Expand the tree to cover the new points.\n    this.cover(x0).cover(x1);\n    // Add the new points.\n    for(let i = 0; i < n; ++i)$2e2dc9eef50bf4c2$var$add(this, xz[i], data[i]);\n    return this;\n}\n\n\nfunction $1969577a57f7f942$export$2e2bcd8739ae039(x) {\n    if (isNaN(x = +x)) return this; // ignore invalid points\n    var x0 = this._x0, x1 = this._x1;\n    // If the binarytree has no extent, initialize them.\n    // Integer extent are necessary so that if we later double the extent,\n    // the existing half boundaries don’t change due to floating point error!\n    if (isNaN(x0)) x1 = (x0 = Math.floor(x)) + 1;\n    else {\n        var z = x1 - x0 || 1, node = this._root, parent, i;\n        while(x0 > x || x >= x1){\n            i = +(x < x0);\n            parent = new Array(2), parent[i] = node, node = parent, z *= 2;\n            switch(i){\n                case 0:\n                    x1 = x0 + z;\n                    break;\n                case 1:\n                    x0 = x1 - z;\n                    break;\n            }\n        }\n        if (this._root && this._root.length) this._root = node;\n    }\n    this._x0 = x0;\n    this._x1 = x1;\n    return this;\n}\n\n\nfunction $e8e8c2315616cbf2$export$2e2bcd8739ae039() {\n    var data = [];\n    this.visit(function(node) {\n        if (!node.length) do data.push(node.data);\n        while (node = node.next);\n    });\n    return data;\n}\n\n\nfunction $fd0a4cf1965b27cc$export$2e2bcd8739ae039(_) {\n    return arguments.length ? this.cover(+_[0][0]).cover(+_[1][0]) : isNaN(this._x0) ? undefined : [\n        [\n            this._x0\n        ],\n        [\n            this._x1\n        ]\n    ];\n}\n\n\nfunction $80f10b9c54513b5b$export$2e2bcd8739ae039(node, x0, x1) {\n    this.node = node;\n    this.x0 = x0;\n    this.x1 = x1;\n}\n\n\nfunction $e34628647fac6434$export$2e2bcd8739ae039(x, radius) {\n    var data, x0 = this._x0, x1, x2, x3 = this._x1, halves = [], node = this._root, q, i;\n    if (node) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(node, x0, x3));\n    if (radius == null) radius = Infinity;\n    else {\n        x0 = x - radius;\n        x3 = x + radius;\n    }\n    while(q = halves.pop()){\n        // Stop searching if this half can’t contain a closer node.\n        if (!(node = q.node) || (x1 = q.x0) > x3 || (x2 = q.x1) < x0) continue;\n        // Bisect the current half.\n        if (node.length) {\n            var xm = (x1 + x2) / 2;\n            halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(node[1], xm, x2), new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(node[0], x1, xm));\n            // Visit the closest half first.\n            if (i = +(x >= xm)) {\n                q = halves[halves.length - 1];\n                halves[halves.length - 1] = halves[halves.length - 1 - i];\n                halves[halves.length - 1 - i] = q;\n            }\n        } else {\n            var d = Math.abs(x - +this._x.call(null, node.data));\n            if (d < radius) {\n                radius = d;\n                x0 = x - d;\n                x3 = x + d;\n                data = node.data;\n            }\n        }\n    }\n    return data;\n}\n\n\nfunction $df9e07a10528e604$export$2e2bcd8739ae039(d) {\n    if (isNaN(x = +this._x.call(null, d))) return this; // ignore invalid points\n    var parent, node = this._root, retainer, previous, next, x0 = this._x0, x1 = this._x1, x, xm, right, i, j;\n    // If the tree is empty, initialize the root as a leaf.\n    if (!node) return this;\n    // Find the leaf node for the point.\n    // While descending, also retain the deepest parent with a non-removed sibling.\n    if (node.length) while(true){\n        if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;\n        else x1 = xm;\n        if (!(parent = node, node = node[i = +right])) return this;\n        if (!node.length) break;\n        if (parent[i + 1 & 1]) retainer = parent, j = i;\n    }\n    // Find the point to remove.\n    while(node.data !== d)if (!(previous = node, node = node.next)) return this;\n    if (next = node.next) delete node.next;\n    // If there are multiple coincident points, remove just the point.\n    if (previous) return next ? previous.next = next : delete previous.next, this;\n    // If this is the root point, remove it.\n    if (!parent) return this._root = next, this;\n    // Remove this leaf.\n    next ? parent[i] = next : delete parent[i];\n    // If the parent now contains exactly one leaf, collapse superfluous parents.\n    if ((node = parent[0] || parent[1]) && node === (parent[1] || parent[0]) && !node.length) {\n        if (retainer) retainer[j] = node;\n        else this._root = node;\n    }\n    return this;\n}\nfunction $df9e07a10528e604$export$1cfc7aad5cb1833b(data) {\n    for(var i = 0, n = data.length; i < n; ++i)this.remove(data[i]);\n    return this;\n}\n\n\nfunction $dca0b1c5d4874c6f$export$2e2bcd8739ae039() {\n    return this._root;\n}\n\n\nfunction $98b00eec1a44986e$export$2e2bcd8739ae039() {\n    var size = 0;\n    this.visit(function(node) {\n        if (!node.length) do ++size;\n        while (node = node.next);\n    });\n    return size;\n}\n\n\n\nfunction $b18c1489928ad5a2$export$2e2bcd8739ae039(callback) {\n    var halves = [], q, node = this._root, child, x0, x1;\n    if (node) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(node, this._x0, this._x1));\n    while(q = halves.pop())if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {\n        var xm = (x0 + x1) / 2;\n        if (child = node[1]) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(child, xm, x1));\n        if (child = node[0]) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(child, x0, xm));\n    }\n    return this;\n}\n\n\n\nfunction $1976bf276179f8df$export$2e2bcd8739ae039(callback) {\n    var halves = [], next = [], q;\n    if (this._root) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(this._root, this._x0, this._x1));\n    while(q = halves.pop()){\n        var node = q.node;\n        if (node.length) {\n            var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;\n            if (child = node[0]) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(child, x0, xm));\n            if (child = node[1]) halves.push(new (0, $80f10b9c54513b5b$export$2e2bcd8739ae039)(child, xm, x1));\n        }\n        next.push(q);\n    }\n    while(q = next.pop())callback(q.node, q.x0, q.x1);\n    return this;\n}\n\n\nfunction $f0811b954d7f0d09$export$e6fafc98131d2a44(d) {\n    return d[0];\n}\nfunction $f0811b954d7f0d09$export$2e2bcd8739ae039(_) {\n    return arguments.length ? (this._x = _, this) : this._x;\n}\n\n\nfunction $7a3f1e75af4c0371$export$2e2bcd8739ae039(nodes, x) {\n    var tree = new $7a3f1e75af4c0371$var$Binarytree(x == null ? (0, $f0811b954d7f0d09$export$e6fafc98131d2a44) : x, NaN, NaN);\n    return nodes == null ? tree : tree.addAll(nodes);\n}\nfunction $7a3f1e75af4c0371$var$Binarytree(x, x0, x1) {\n    this._x = x;\n    this._x0 = x0;\n    this._x1 = x1;\n    this._root = undefined;\n}\nfunction $7a3f1e75af4c0371$var$leaf_copy(leaf) {\n    var copy = {\n        data: leaf.data\n    }, next = copy;\n    while(leaf = leaf.next)next = next.next = {\n        data: leaf.data\n    };\n    return copy;\n}\nvar $7a3f1e75af4c0371$var$treeProto = $7a3f1e75af4c0371$export$2e2bcd8739ae039.prototype = $7a3f1e75af4c0371$var$Binarytree.prototype;\n$7a3f1e75af4c0371$var$treeProto.copy = function() {\n    var copy = new $7a3f1e75af4c0371$var$Binarytree(this._x, this._x0, this._x1), node = this._root, nodes, child;\n    if (!node) return copy;\n    if (!node.length) return copy._root = $7a3f1e75af4c0371$var$leaf_copy(node), copy;\n    nodes = [\n        {\n            source: node,\n            target: copy._root = new Array(2)\n        }\n    ];\n    while(node = nodes.pop()){\n        for(var i = 0; i < 2; ++i)if (child = node.source[i]) {\n            if (child.length) nodes.push({\n                source: child,\n                target: node.target[i] = new Array(2)\n            });\n            else node.target[i] = $7a3f1e75af4c0371$var$leaf_copy(child);\n        }\n    }\n    return copy;\n};\n$7a3f1e75af4c0371$var$treeProto.add = (0, $2e2dc9eef50bf4c2$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.addAll = (0, $2e2dc9eef50bf4c2$export$32ed0561867ec8a1);\n$7a3f1e75af4c0371$var$treeProto.cover = (0, $1969577a57f7f942$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.data = (0, $e8e8c2315616cbf2$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.extent = (0, $fd0a4cf1965b27cc$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.find = (0, $e34628647fac6434$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.remove = (0, $df9e07a10528e604$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.removeAll = (0, $df9e07a10528e604$export$1cfc7aad5cb1833b);\n$7a3f1e75af4c0371$var$treeProto.root = (0, $dca0b1c5d4874c6f$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.size = (0, $98b00eec1a44986e$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.visit = (0, $b18c1489928ad5a2$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.visitAfter = (0, $1976bf276179f8df$export$2e2bcd8739ae039);\n$7a3f1e75af4c0371$var$treeProto.x = (0, $f0811b954d7f0d09$export$2e2bcd8739ae039);\n\n\n\n\nfunction $494eee40e0cbed93$export$2e2bcd8739ae039(x) {\n    return function() {\n        return x;\n    };\n}\n\n\nfunction $caa8cc0c93472ec1$export$2e2bcd8739ae039(random) {\n    return (random() - 0.5) * 1e-6;\n}\n\n\nfunction $9946e066c1170270$var$x(d) {\n    return d.x + d.vx;\n}\nfunction $9946e066c1170270$var$y(d) {\n    return d.y + d.vy;\n}\nfunction $9946e066c1170270$var$z(d) {\n    return d.z + d.vz;\n}\nfunction $9946e066c1170270$export$2e2bcd8739ae039(radius) {\n    var nodes, nDim, radii, random, strength = 1, iterations = 1;\n    if (typeof radius !== \"function\") radius = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(radius == null ? 1 : +radius);\n    function force() {\n        var i, n = nodes.length, tree, node, xi, yi, zi, ri, ri2;\n        for(var k = 0; k < iterations; ++k){\n            tree = (nDim === 1 ? (0, $7a3f1e75af4c0371$export$2e2bcd8739ae039)(nodes, $9946e066c1170270$var$x) : nDim === 2 ? (0, $931875583ffa81b8$export$2e2bcd8739ae039)(nodes, $9946e066c1170270$var$x, $9946e066c1170270$var$y) : nDim === 3 ? (0, $9431a2c1ce26e0cb$export$2e2bcd8739ae039)(nodes, $9946e066c1170270$var$x, $9946e066c1170270$var$y, $9946e066c1170270$var$z) : null).visitAfter(prepare);\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                ri = radii[node.index], ri2 = ri * ri;\n                xi = node.x + node.vx;\n                if (nDim > 1) yi = node.y + node.vy;\n                if (nDim > 2) zi = node.z + node.vz;\n                tree.visit(apply);\n            }\n        }\n        function apply(treeNode, arg1, arg2, arg3, arg4, arg5, arg6) {\n            var args = [\n                arg1,\n                arg2,\n                arg3,\n                arg4,\n                arg5,\n                arg6\n            ];\n            var x0 = args[0], y0 = args[1], z0 = args[2], x1 = args[nDim], y1 = args[nDim + 1], z1 = args[nDim + 2];\n            var data = treeNode.data, rj = treeNode.r, r = ri + rj;\n            if (data) {\n                if (data.index > node.index) {\n                    var x = xi - data.x - data.vx, y = nDim > 1 ? yi - data.y - data.vy : 0, z = nDim > 2 ? zi - data.z - data.vz : 0, l = x * x + y * y + z * z;\n                    if (l < r * r) {\n                        if (x === 0) x = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += x * x;\n                        if (nDim > 1 && y === 0) y = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += y * y;\n                        if (nDim > 2 && z === 0) z = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += z * z;\n                        l = (r - (l = Math.sqrt(l))) / l * strength;\n                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n                        if (nDim > 1) node.vy += (y *= l) * r;\n                        if (nDim > 2) node.vz += (z *= l) * r;\n                        data.vx -= x * (r = 1 - r);\n                        if (nDim > 1) data.vy -= y * r;\n                        if (nDim > 2) data.vz -= z * r;\n                    }\n                }\n                return;\n            }\n            return x0 > xi + r || x1 < xi - r || nDim > 1 && (y0 > yi + r || y1 < yi - r) || nDim > 2 && (z0 > zi + r || z1 < zi - r);\n        }\n    }\n    function prepare(treeNode) {\n        if (treeNode.data) return treeNode.r = radii[treeNode.data.index];\n        for(var i = treeNode.r = 0; i < Math.pow(2, nDim); ++i)if (treeNode[i] && treeNode[i].r > treeNode.r) treeNode.r = treeNode[i].r;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        radii = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n    }\n    force.initialize = function(_nodes, ...args) {\n        nodes = _nodes;\n        random = args.find((arg)=>typeof arg === 'function') || Math.random;\n        nDim = args.find((arg)=>[\n                1,\n                2,\n                3\n            ].includes(arg)) || 2;\n        initialize();\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = +_, force) : strength;\n    };\n    force.radius = function(_) {\n        return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : radius;\n    };\n    return force;\n}\n\n\n\nfunction $4927b6ae91da5193$var$index(d) {\n    return d.index;\n}\nfunction $4927b6ae91da5193$var$find(nodeById, nodeId) {\n    var node = nodeById.get(nodeId);\n    if (!node) throw new Error(\"node not found: \" + nodeId);\n    return node;\n}\nfunction $4927b6ae91da5193$export$2e2bcd8739ae039(links) {\n    var id = $4927b6ae91da5193$var$index, strength = defaultStrength, strengths, distance = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(30), distances, nodes, nDim, count, bias, random, iterations = 1;\n    if (links == null) links = [];\n    function defaultStrength(link) {\n        return 1 / Math.min(count[link.source.index], count[link.target.index]);\n    }\n    function force(alpha) {\n        for(var k = 0, n = links.length; k < iterations; ++k)for(var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i){\n            link = links[i], source = link.source, target = link.target;\n            x = target.x + target.vx - source.x - source.vx || (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random);\n            if (nDim > 1) y = target.y + target.vy - source.y - source.vy || (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random);\n            if (nDim > 2) z = target.z + target.vz - source.z - source.vz || (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random);\n            l = Math.sqrt(x * x + y * y + z * z);\n            l = (l - distances[i]) / l * alpha * strengths[i];\n            x *= l, y *= l, z *= l;\n            target.vx -= x * (b = bias[i]);\n            if (nDim > 1) target.vy -= y * b;\n            if (nDim > 2) target.vz -= z * b;\n            source.vx += x * (b = 1 - b);\n            if (nDim > 1) source.vy += y * b;\n            if (nDim > 2) source.vz += z * b;\n        }\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, m = links.length, nodeById = new Map(nodes.map((d, i)=>[\n                id(d, i, nodes),\n                d\n            ])), link;\n        for(i = 0, count = new Array(n); i < m; ++i){\n            link = links[i], link.index = i;\n            if (typeof link.source !== \"object\") link.source = $4927b6ae91da5193$var$find(nodeById, link.source);\n            if (typeof link.target !== \"object\") link.target = $4927b6ae91da5193$var$find(nodeById, link.target);\n            count[link.source.index] = (count[link.source.index] || 0) + 1;\n            count[link.target.index] = (count[link.target.index] || 0) + 1;\n        }\n        for(i = 0, bias = new Array(m); i < m; ++i)link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n        strengths = new Array(m), initializeStrength();\n        distances = new Array(m), initializeDistance();\n    }\n    function initializeStrength() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)strengths[i] = +strength(links[i], i, links);\n    }\n    function initializeDistance() {\n        if (!nodes) return;\n        for(var i = 0, n = links.length; i < n; ++i)distances[i] = +distance(links[i], i, links);\n    }\n    force.initialize = function(_nodes, ...args) {\n        nodes = _nodes;\n        random = args.find((arg)=>typeof arg === 'function') || Math.random;\n        nDim = args.find((arg)=>[\n                1,\n                2,\n                3\n            ].includes(arg)) || 2;\n        initialize();\n    };\n    force.links = function(_) {\n        return arguments.length ? (links = _, initialize(), force) : links;\n    };\n    force.id = function(_) {\n        return arguments.length ? (id = _, force) : id;\n    };\n    force.iterations = function(_) {\n        return arguments.length ? (iterations = +_, force) : iterations;\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initializeStrength(), force) : strength;\n    };\n    force.distance = function(_) {\n        return arguments.length ? (distance = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initializeDistance(), force) : distance;\n    };\n    return force;\n}\n\n\n\n\n\n\n\n\n// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst $be5ed28a6f104ec4$var$a = 1664525;\nconst $be5ed28a6f104ec4$var$c = 1013904223;\nconst $be5ed28a6f104ec4$var$m = 4294967296; // 2^32\nfunction $be5ed28a6f104ec4$export$2e2bcd8739ae039() {\n    let s = 1;\n    return ()=>(s = ($be5ed28a6f104ec4$var$a * s + $be5ed28a6f104ec4$var$c) % $be5ed28a6f104ec4$var$m) / $be5ed28a6f104ec4$var$m;\n}\n\n\nvar $66c47472392496d1$var$MAX_DIMENSIONS = 3;\nfunction $66c47472392496d1$export$d141bba7fdc215a3(d) {\n    return d.x;\n}\nfunction $66c47472392496d1$export$4a5767248b18ef41(d) {\n    return d.y;\n}\nfunction $66c47472392496d1$export$df995fae86a55f06(d) {\n    return d.z;\n}\nvar $66c47472392496d1$var$initialRadius = 10, $66c47472392496d1$var$initialAngleRoll = Math.PI * (3 - Math.sqrt(5)), $66c47472392496d1$var$initialAngleYaw = Math.PI * 20 / (9 + Math.sqrt(221)); // Markov irrational number\nfunction $66c47472392496d1$export$2e2bcd8739ae039(nodes, numDimensions) {\n    numDimensions = numDimensions || 2;\n    var nDim = Math.min($66c47472392496d1$var$MAX_DIMENSIONS, Math.max(1, Math.round(numDimensions))), simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = new Map(), stepper = (0, $983ef41e0479cc7a$export$9dc4ecf953986f04)(step), event = (0, $5f4629e300d5fac4$export$2e2bcd8739ae039)(\"tick\", \"end\"), random = (0, $be5ed28a6f104ec4$export$2e2bcd8739ae039)();\n    if (nodes == null) nodes = [];\n    function step() {\n        tick();\n        event.call(\"tick\", simulation);\n        if (alpha < alphaMin) {\n            stepper.stop();\n            event.call(\"end\", simulation);\n        }\n    }\n    function tick(iterations) {\n        var i, n = nodes.length, node;\n        if (iterations === undefined) iterations = 1;\n        for(var k = 0; k < iterations; ++k){\n            alpha += (alphaTarget - alpha) * alphaDecay;\n            forces.forEach(function(force) {\n                force(alpha);\n            });\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                if (node.fx == null) node.x += node.vx *= velocityDecay;\n                else node.x = node.fx, node.vx = 0;\n                if (nDim > 1) {\n                    if (node.fy == null) node.y += node.vy *= velocityDecay;\n                    else node.y = node.fy, node.vy = 0;\n                }\n                if (nDim > 2) {\n                    if (node.fz == null) node.z += node.vz *= velocityDecay;\n                    else node.z = node.fz, node.vz = 0;\n                }\n            }\n        }\n        return simulation;\n    }\n    function initializeNodes() {\n        for(var i = 0, n = nodes.length, node; i < n; ++i){\n            node = nodes[i], node.index = i;\n            if (node.fx != null) node.x = node.fx;\n            if (node.fy != null) node.y = node.fy;\n            if (node.fz != null) node.z = node.fz;\n            if (isNaN(node.x) || nDim > 1 && isNaN(node.y) || nDim > 2 && isNaN(node.z)) {\n                var radius = $66c47472392496d1$var$initialRadius * (nDim > 2 ? Math.cbrt(0.5 + i) : nDim > 1 ? Math.sqrt(0.5 + i) : i), rollAngle = i * $66c47472392496d1$var$initialAngleRoll, yawAngle = i * $66c47472392496d1$var$initialAngleYaw;\n                if (nDim === 1) node.x = radius;\n                else if (nDim === 2) {\n                    node.x = radius * Math.cos(rollAngle);\n                    node.y = radius * Math.sin(rollAngle);\n                } else {\n                    node.x = radius * Math.sin(rollAngle) * Math.cos(yawAngle);\n                    node.y = radius * Math.cos(rollAngle);\n                    node.z = radius * Math.sin(rollAngle) * Math.sin(yawAngle);\n                }\n            }\n            if (isNaN(node.vx) || nDim > 1 && isNaN(node.vy) || nDim > 2 && isNaN(node.vz)) {\n                node.vx = 0;\n                if (nDim > 1) node.vy = 0;\n                if (nDim > 2) node.vz = 0;\n            }\n        }\n    }\n    function initializeForce(force) {\n        if (force.initialize) force.initialize(nodes, random, nDim);\n        return force;\n    }\n    initializeNodes();\n    return simulation = {\n        tick: tick,\n        restart: function() {\n            return stepper.restart(step), simulation;\n        },\n        stop: function() {\n            return stepper.stop(), simulation;\n        },\n        numDimensions: function(_) {\n            return arguments.length ? (nDim = Math.min($66c47472392496d1$var$MAX_DIMENSIONS, Math.max(1, Math.round(_))), forces.forEach(initializeForce), simulation) : nDim;\n        },\n        nodes: function(_) {\n            return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n        },\n        alpha: function(_) {\n            return arguments.length ? (alpha = +_, simulation) : alpha;\n        },\n        alphaMin: function(_) {\n            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n        },\n        alphaDecay: function(_) {\n            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n        },\n        alphaTarget: function(_) {\n            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n        },\n        velocityDecay: function(_) {\n            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n        },\n        randomSource: function(_) {\n            return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n        },\n        force: function(name, _) {\n            return arguments.length > 1 ? (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);\n        },\n        find: function() {\n            var args = Array.prototype.slice.call(arguments);\n            var x = args.shift() || 0, y = (nDim > 1 ? args.shift() : null) || 0, z = (nDim > 2 ? args.shift() : null) || 0, radius = args.shift() || Infinity;\n            var i = 0, n = nodes.length, dx, dy, dz, d2, node, closest;\n            radius *= radius;\n            for(i = 0; i < n; ++i){\n                node = nodes[i];\n                dx = x - node.x;\n                dy = y - (node.y || 0);\n                dz = z - (node.z || 0);\n                d2 = dx * dx + dy * dy + dz * dz;\n                if (d2 < radius) closest = node, radius = d2;\n            }\n            return closest;\n        },\n        on: function(name, _) {\n            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n        }\n    };\n}\n\n\nfunction $333f423018e73891$export$2e2bcd8739ae039() {\n    var nodes, nDim, node, random, alpha, strength = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;\n    function force(_) {\n        var i, n = nodes.length, tree = (nDim === 1 ? (0, $7a3f1e75af4c0371$export$2e2bcd8739ae039)(nodes, (0, $66c47472392496d1$export$d141bba7fdc215a3)) : nDim === 2 ? (0, $931875583ffa81b8$export$2e2bcd8739ae039)(nodes, (0, $66c47472392496d1$export$d141bba7fdc215a3), (0, $66c47472392496d1$export$4a5767248b18ef41)) : nDim === 3 ? (0, $9431a2c1ce26e0cb$export$2e2bcd8739ae039)(nodes, (0, $66c47472392496d1$export$d141bba7fdc215a3), (0, $66c47472392496d1$export$4a5767248b18ef41), (0, $66c47472392496d1$export$df995fae86a55f06)) : null).visitAfter(accumulate);\n        for(alpha = _, i = 0; i < n; ++i)node = nodes[i], tree.visit(apply);\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length, node;\n        strengths = new Array(n);\n        for(i = 0; i < n; ++i)node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n    }\n    function accumulate(treeNode) {\n        var strength = 0, q, c, weight = 0, x, y, z, i;\n        var numChildren = treeNode.length;\n        // For internal nodes, accumulate forces from children.\n        if (numChildren) {\n            for(x = y = z = i = 0; i < numChildren; ++i)if ((q = treeNode[i]) && (c = Math.abs(q.value))) strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n            strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions\n            treeNode.x = x / weight;\n            if (nDim > 1) treeNode.y = y / weight;\n            if (nDim > 2) treeNode.z = z / weight;\n        } else {\n            q = treeNode;\n            q.x = q.data.x;\n            if (nDim > 1) q.y = q.data.y;\n            if (nDim > 2) q.z = q.data.z;\n            do strength += strengths[q.data.index];\n            while (q = q.next);\n        }\n        treeNode.value = strength;\n    }\n    function apply(treeNode, x1, arg1, arg2, arg3) {\n        if (!treeNode.value) return true;\n        var x2 = [\n            arg1,\n            arg2,\n            arg3\n        ][nDim - 1];\n        var x = treeNode.x - node.x, y = nDim > 1 ? treeNode.y - node.y : 0, z = nDim > 2 ? treeNode.z - node.z : 0, w = x2 - x1, l = x * x + y * y + z * z;\n        // Apply the Barnes-Hut approximation if possible.\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (w * w / theta2 < l) {\n            if (l < distanceMax2) {\n                if (x === 0) x = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += x * x;\n                if (nDim > 1 && y === 0) y = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += y * y;\n                if (nDim > 2 && z === 0) z = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += z * z;\n                if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n                node.vx += x * treeNode.value * alpha / l;\n                if (nDim > 1) node.vy += y * treeNode.value * alpha / l;\n                if (nDim > 2) node.vz += z * treeNode.value * alpha / l;\n            }\n            return true;\n        } else if (treeNode.length || l >= distanceMax2) return;\n        // Limit forces for very close nodes; randomize direction if coincident.\n        if (treeNode.data !== node || treeNode.next) {\n            if (x === 0) x = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += x * x;\n            if (nDim > 1 && y === 0) y = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += y * y;\n            if (nDim > 2 && z === 0) z = (0, $caa8cc0c93472ec1$export$2e2bcd8739ae039)(random), l += z * z;\n            if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        }\n        do if (treeNode.data !== node) {\n            w = strengths[treeNode.data.index] * alpha / l;\n            node.vx += x * w;\n            if (nDim > 1) node.vy += y * w;\n            if (nDim > 2) node.vz += z * w;\n        }\n        while (treeNode = treeNode.next);\n    }\n    force.initialize = function(_nodes, ...args) {\n        nodes = _nodes;\n        random = args.find((arg)=>typeof arg === 'function') || Math.random;\n        nDim = args.find((arg)=>[\n                1,\n                2,\n                3\n            ].includes(arg)) || 2;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.distanceMin = function(_) {\n        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n    };\n    force.distanceMax = function(_) {\n        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n    };\n    force.theta = function(_) {\n        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n    };\n    return force;\n}\n\n\nfunction $649e282b79f7cda5$export$2e2bcd8739ae039(radius, x, y, z) {\n    var nodes, nDim, strength = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(0.1), strengths, radiuses;\n    if (typeof radius !== \"function\") radius = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+radius);\n    if (x == null) x = 0;\n    if (y == null) y = 0;\n    if (z == null) z = 0;\n    function force(alpha) {\n        for(var i = 0, n = nodes.length; i < n; ++i){\n            var node = nodes[i], dx = node.x - x || 1e-6, dy = (node.y || 0) - y || 1e-6, dz = (node.z || 0) - z || 1e-6, r = Math.sqrt(dx * dx + dy * dy + dz * dz), k = (radiuses[i] - r) * strengths[i] * alpha / r;\n            node.vx += dx * k;\n            if (nDim > 1) node.vy += dy * k;\n            if (nDim > 2) node.vz += dz * k;\n        }\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        radiuses = new Array(n);\n        for(i = 0; i < n; ++i){\n            radiuses[i] = +radius(nodes[i], i, nodes);\n            strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n        }\n    }\n    force.initialize = function(initNodes, ...args) {\n        nodes = initNodes;\n        nDim = args.find((arg)=>[\n                1,\n                2,\n                3\n            ].includes(arg)) || 2;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.radius = function(_) {\n        return arguments.length ? (radius = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : radius;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = +_, force) : x;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = +_, force) : y;\n    };\n    force.z = function(_) {\n        return arguments.length ? (z = +_, force) : z;\n    };\n    return force;\n}\n\n\nfunction $385bdf1f65f911f3$export$2e2bcd8739ae039(x) {\n    var strength = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(0.1), nodes, strengths, xz;\n    if (typeof x !== \"function\") x = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(x == null ? 0 : +x);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        xz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.x = function(_) {\n        return arguments.length ? (x = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : x;\n    };\n    return force;\n}\n\n\nfunction $40a0669f8da73b90$export$2e2bcd8739ae039(y) {\n    var strength = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(0.1), nodes, strengths, yz;\n    if (typeof y !== \"function\") y = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(y == null ? 0 : +y);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        yz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.y = function(_) {\n        return arguments.length ? (y = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : y;\n    };\n    return force;\n}\n\n\nfunction $321ffd38c95a9021$export$2e2bcd8739ae039(z) {\n    var strength = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(0.1), nodes, strengths, zz;\n    if (typeof z !== \"function\") z = (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(z == null ? 0 : +z);\n    function force(alpha) {\n        for(var i = 0, n = nodes.length, node; i < n; ++i)node = nodes[i], node.vz += (zz[i] - node.z) * strengths[i] * alpha;\n    }\n    function initialize() {\n        if (!nodes) return;\n        var i, n = nodes.length;\n        strengths = new Array(n);\n        zz = new Array(n);\n        for(i = 0; i < n; ++i)strengths[i] = isNaN(zz[i] = +z(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n    force.initialize = function(_) {\n        nodes = _;\n        initialize();\n    };\n    force.strength = function(_) {\n        return arguments.length ? (strength = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : strength;\n    };\n    force.z = function(_) {\n        return arguments.length ? (z = typeof _ === \"function\" ? _ : (0, $494eee40e0cbed93$export$2e2bcd8739ae039)(+_), initialize(), force) : z;\n    };\n    return force;\n}\n\n\n\nclass $f96c471f81bf7e93$export$db0fc25040afae38 extends (0, $465548e1faf77560$export$8ff17a5dd8c72f61) {\n    constructor(){\n        super(...arguments);\n        this.id = 'd3-force-3d';\n        this.config = {\n            inputNodeAttrs: [\n                'x',\n                'y',\n                'z',\n                'vx',\n                'vy',\n                'vz',\n                'fx',\n                'fy',\n                'fz'\n            ],\n            outputNodeAttrs: [\n                'x',\n                'y',\n                'z',\n                'vx',\n                'vy',\n                'vz'\n            ],\n            simulationAttrs: [\n                'alpha',\n                'alphaMin',\n                'alphaDecay',\n                'alphaTarget',\n                'velocityDecay',\n                'randomSource',\n                'numDimensions'\n            ]\n        };\n        this.forceMap = {\n            link: (0, $4927b6ae91da5193$export$2e2bcd8739ae039),\n            manyBody: (0, $333f423018e73891$export$2e2bcd8739ae039),\n            center: (0, $c69e818ff67516f1$export$2e2bcd8739ae039),\n            collide: (0, $9946e066c1170270$export$2e2bcd8739ae039),\n            radial: (0, $649e282b79f7cda5$export$2e2bcd8739ae039),\n            x: (0, $385bdf1f65f911f3$export$2e2bcd8739ae039),\n            y: (0, $40a0669f8da73b90$export$2e2bcd8739ae039),\n            z: (0, $321ffd38c95a9021$export$2e2bcd8739ae039)\n        };\n        this.options = {\n            numDimensions: 3,\n            link: {\n                id: (edge)=>edge.id\n            },\n            manyBody: {},\n            center: {\n                x: 0,\n                y: 0,\n                z: 0\n            }\n        };\n    }\n    initSimulation() {\n        return (0, $66c47472392496d1$export$2e2bcd8739ae039)();\n    }\n}\n\n\n\n\nvar $212b038eae3e1418$exports = {};\n/*\nCopyright (c) 2012-2014 Chris Pettitt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/ \n\n\n\n\n\n$212b038eae3e1418$exports = {\n    graphlib: (parcelRequire(\"3vj6M\")),\n    layout: (parcelRequire(\"49gez\")),\n    debug: (parcelRequire(\"21fNM\")),\n    util: {\n        time: (parcelRequire(\"2o807\")).time,\n        notime: (parcelRequire(\"2o807\")).notime\n    },\n    version: (parcelRequire(\"8PPkN\"))\n};\n\n\n\nclass $4c0edf0487870c01$export$248f0a26949d24d9 {\n    constructor(options){\n        this.id = 'dagre';\n        this.options = {};\n        Object.assign(this.options, $4c0edf0487870c01$export$248f0a26949d24d9.defaultOptions, options);\n    }\n    execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericDagreLayout(false, graph, Object.assign(Object.assign({}, this.options), options));\n        });\n    }\n    assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericDagreLayout(true, graph, Object.assign(Object.assign({}, this.options), options));\n        });\n    }\n    genericDagreLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const { nodeSize: nodeSize } = options;\n            const g = new (0, $212b038eae3e1418$exports.graphlib).Graph();\n            g.setGraph(options);\n            g.setDefaultEdgeLabel(()=>({}));\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if ([\n                ...nodes,\n                ...edges\n            ].some(({ id: id })=>(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(id))) console.error('Dagre layout only support string id, it will convert number to string.');\n            graph.getAllNodes().forEach((node)=>{\n                const { id: id } = node;\n                const data = Object.assign({}, node.data);\n                if (nodeSize !== undefined) {\n                    const [width, height] = (0, $42c5e25589525d06$export$880c59a0ae1158a1)((0, $60dead5513d90bd9$export$2e2bcd8739ae039)(nodeSize) ? nodeSize(node) : nodeSize);\n                    Object.assign(data, {\n                        width: width,\n                        height: height\n                    });\n                }\n                g.setNode(id.toString(), data);\n            });\n            graph.getAllEdges().forEach(({ id: id, source: source, target: target })=>{\n                g.setEdge(source.toString(), target.toString(), {\n                    id: id\n                });\n            });\n            (0, (/*@__PURE__*/$parcel$interopDefault($212b038eae3e1418$exports))).layout(g);\n            const mapping = {\n                nodes: [],\n                edges: []\n            };\n            g.nodes().forEach((id)=>{\n                const data = g.node(id);\n                mapping.nodes.push({\n                    id: id,\n                    data: data\n                });\n                if (assign) graph.mergeNodeData(id, data);\n            });\n            g.edges().forEach((edge)=>{\n                const _a = g.edge(edge), { id: id } = _a, data = (0, $4ce669c46e60ac46$export$3c9a16f847548506)(_a, [\n                    \"id\"\n                ]);\n                const { v: source, w: target } = edge;\n                mapping.edges.push({\n                    id: id,\n                    source: source,\n                    target: target,\n                    data: data\n                });\n                if (assign) graph.mergeEdgeData(id, data);\n            });\n            return mapping;\n        });\n    }\n}\n$4c0edf0487870c01$export$248f0a26949d24d9.defaultOptions = {};\n\n\n\n\n\n\n\n\n// represents a body(a point mass) and its position\nclass $d204286452318e3e$export$2e2bcd8739ae039 {\n    constructor(params){\n        /**\n         * the id of this body, the same with the node id\n         * @type  {number}\n         */ this.id = params.id || 0;\n        /**\n         * the position of this body\n         * @type  {number}\n         */ this.rx = params.rx;\n        /**\n         * the position of this body\n         * @type  {number}\n         */ this.ry = params.ry;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */ this.fx = 0;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */ this.fy = 0;\n        /**\n         * the mass of this body, =1 for a node\n         * @type  {number}\n         */ this.mass = params.mass;\n        /**\n         * the degree of the node represented by this body\n         * @type  {number}\n         */ this.degree = params.degree;\n        /**\n         * the parameter for repulsive force, = kr\n         * @type  {number}\n         */ this.g = params.g || 0;\n    }\n    // returns the euclidean distance\n    distanceTo(bo) {\n        const dx = this.rx - bo.rx;\n        const dy = this.ry - bo.ry;\n        return Math.hypot(dx, dy);\n    }\n    setPos(x, y) {\n        this.rx = x;\n        this.ry = y;\n    }\n    // resets the forces\n    resetForce() {\n        this.fx = 0;\n        this.fy = 0;\n    }\n    addForce(b) {\n        const dx = b.rx - this.rx;\n        const dy = b.ry - this.ry;\n        let dist = Math.hypot(dx, dy);\n        dist = dist < 0.0001 ? 0.0001 : dist;\n        // the repulsive defined by force atlas 2\n        const F = this.g * (this.degree + 1) * (b.degree + 1) / dist;\n        this.fx += F * dx / dist;\n        this.fy += F * dy / dist;\n    }\n    // if quad contains this body\n    in(quad) {\n        return quad.contains(this.rx, this.ry);\n    }\n    // returns a new body\n    add(bo) {\n        const nenwMass = this.mass + bo.mass;\n        const x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n        const y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n        const dg = this.degree + bo.degree;\n        const params = {\n            rx: x,\n            ry: y,\n            mass: nenwMass,\n            degree: dg\n        };\n        return new $d204286452318e3e$export$2e2bcd8739ae039(params);\n    }\n}\n\n\nclass $5d974aad89a7f8a8$export$2e2bcd8739ae039 {\n    constructor(params){\n        /**\n         * the center position of this quad\n         * @type  {number}\n         */ this.xmid = params.xmid;\n        /**\n         * the center position of this quad\n         * @type  {number}\n         */ this.ymid = params.ymid;\n        /**\n         * the length of this quad\n         * @type  {number}\n         */ this.length = params.length;\n        /**\n         * the mass center of this quad\n         * @type  {number}\n         */ this.massCenter = params.massCenter || [\n            0,\n            0\n        ];\n        /**\n         * the mass of this quad\n         * @type  {number}\n         */ this.mass = params.mass || 1;\n    }\n    getLength() {\n        return this.length;\n    }\n    contains(x, y) {\n        const halfLen = this.length / 2;\n        return x <= this.xmid + halfLen && x >= this.xmid - halfLen && y <= this.ymid + halfLen && y >= this.ymid - halfLen;\n    }\n    // northwest quadrant\n    // tslint:disable-next-line\n    NW() {\n        const x = this.xmid - this.length / 4;\n        const y = this.ymid + this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len\n        };\n        const NW = new $5d974aad89a7f8a8$export$2e2bcd8739ae039(params);\n        return NW;\n    }\n    // northeast\n    // tslint:disable-next-line\n    NE() {\n        const x = this.xmid + this.length / 4;\n        const y = this.ymid + this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len\n        };\n        const NE = new $5d974aad89a7f8a8$export$2e2bcd8739ae039(params);\n        return NE;\n    }\n    // southwest\n    // tslint:disable-next-line\n    SW() {\n        const x = this.xmid - this.length / 4;\n        const y = this.ymid - this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len\n        };\n        const SW = new $5d974aad89a7f8a8$export$2e2bcd8739ae039(params);\n        return SW;\n    }\n    // southeast\n    // tslint:disable-next-line\n    SE() {\n        const x = this.xmid + this.length / 4;\n        const y = this.ymid - this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len\n        };\n        const SE = new $5d974aad89a7f8a8$export$2e2bcd8739ae039(params);\n        return SE;\n    }\n}\n\n\n/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */ class $972905a276045d8d$export$2e2bcd8739ae039 {\n    // each quadtree represents a quadrant and an aggregate body\n    // that represents all bodies inside the quadrant\n    constructor(param){\n        /**\n         * (aggregated) body in this quad\n         * @type  {object}\n         */ this.body = null;\n        /**\n         * tree representing the northwest quadrant\n         * @type  {object}\n         */ this.quad = null;\n        this.NW = null;\n        this.NE = null;\n        this.SW = null;\n        this.SE = null;\n        /**\n         * threshold\n         * @type  {number}\n         */ this.theta = 0.5;\n        if (param != null) this.quad = param;\n    }\n    // insert a body(node) into the tree\n    insert(bo) {\n        // if this node does not contain a body, put the new body bo here\n        if (this.body == null) {\n            this.body = bo;\n            return;\n        }\n        // internal node\n        if (!this._isExternal()) {\n            // update mass info\n            this.body = this.body.add(bo);\n            // insert body into quadrant\n            this._putBody(bo);\n        } else {\n            // external node\n            // divide this region into four children\n            if (this.quad) {\n                this.NW = new $972905a276045d8d$export$2e2bcd8739ae039(this.quad.NW());\n                this.NE = new $972905a276045d8d$export$2e2bcd8739ae039(this.quad.NE());\n                this.SW = new $972905a276045d8d$export$2e2bcd8739ae039(this.quad.SW());\n                this.SE = new $972905a276045d8d$export$2e2bcd8739ae039(this.quad.SE());\n            }\n            // insert this body and bo\n            this._putBody(this.body);\n            this._putBody(bo);\n            // update the mass info\n            this.body = this.body.add(bo);\n        }\n    }\n    // inserts bo into a quad\n    // tslint:disable-next-line\n    _putBody(bo) {\n        if (!this.quad) return;\n        if (bo.in(this.quad.NW()) && this.NW) this.NW.insert(bo);\n        else if (bo.in(this.quad.NE()) && this.NE) this.NE.insert(bo);\n        else if (bo.in(this.quad.SW()) && this.SW) this.SW.insert(bo);\n        else if (bo.in(this.quad.SE()) && this.SE) this.SE.insert(bo);\n    }\n    // tslint:disable-next-line\n    _isExternal() {\n        // four children are null\n        return this.NW == null && this.NE == null && this.SW == null && this.SE == null;\n    }\n    // update the forces\n    updateForce(bo) {\n        if (this.body == null || bo === this.body) return;\n        // if the current node is external\n        if (this._isExternal()) bo.addForce(this.body);\n        else {\n            const s = this.quad ? this.quad.getLength() : 0;\n            const d = this.body.distanceTo(bo);\n            // b is far enough\n            if (s / d < this.theta) bo.addForce(this.body);\n            else {\n                this.NW && this.NW.updateForce(bo);\n                this.NE && this.NE.updateForce(bo);\n                this.SW && this.SW.updateForce(bo);\n                this.SE && this.SE.updateForce(bo);\n            }\n        }\n    }\n}\n\n\nconst $4c1ed8fdef031a27$var$DEFAULTS_LAYOUT_OPTIONS = {\n    center: [\n        0,\n        0\n    ],\n    width: 300,\n    height: 300,\n    kr: 5,\n    kg: 1,\n    mode: 'normal',\n    preventOverlap: false,\n    dissuadeHubs: false,\n    maxIteration: 0,\n    ks: 0.1,\n    ksmax: 10,\n    tao: 0.1\n};\nclass $4c1ed8fdef031a27$export$c10edd245dbf6143 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'forceAtlas2';\n        this.options = Object.assign(Object.assign({}, $4c1ed8fdef031a27$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericForceAtlas2Layout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericForceAtlas2Layout(true, graph, options);\n        });\n    }\n    genericForceAtlas2Layout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const edges = graph.getAllEdges();\n            const nodes = graph.getAllNodes();\n            const mergedOptions = this.formatOptions(options, nodes.length);\n            const { width: width, height: height, prune: prune, maxIteration: maxIteration, nodeSize: nodeSize, center: center } = mergedOptions;\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, center);\n            const calcNodes = nodes.map((node)=>(0, $9db318b25eeb9fa0$export$8630667bbca04569)(node, [\n                    width,\n                    height\n                ]));\n            const calcEdges = edges.filter((edge)=>{\n                const { source: source, target: target } = edge;\n                return source !== target;\n            });\n            const calcGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                nodes: calcNodes,\n                edges: calcEdges\n            });\n            const sizes = this.getSizes(calcGraph, nodeSize);\n            this.run(calcGraph, graph, maxIteration, sizes, assign, mergedOptions);\n            // if prune, place the leaves around their parents, and then re-layout for several iterations.\n            if (prune) {\n                for(let j = 0; j < calcEdges.length; j += 1){\n                    const { source: source, target: target } = calcEdges[j];\n                    const sourceDegree = calcGraph.getDegree(source);\n                    const targetDegree = calcGraph.getDegree(source);\n                    if (sourceDegree <= 1) {\n                        const targetNode = calcGraph.getNode(target);\n                        calcGraph.mergeNodeData(source, {\n                            x: targetNode.data.x,\n                            y: targetNode.data.y\n                        });\n                    } else if (targetDegree <= 1) {\n                        const sourceNode = calcGraph.getNode(source);\n                        calcGraph.mergeNodeData(target, {\n                            x: sourceNode.data.x,\n                            y: sourceNode.data.y\n                        });\n                    }\n                }\n                const postOptions = Object.assign(Object.assign({}, mergedOptions), {\n                    prune: false,\n                    barnesHut: false\n                });\n                this.run(calcGraph, graph, 100, sizes, assign, postOptions);\n            }\n            return {\n                nodes: calcNodes,\n                edges: edges\n            };\n        });\n    }\n    /**\n     * Init the node positions if there is no initial positions.\n     * And pre-calculate the size (max of width and height) for each node.\n     * @param calcGraph graph for calculation\n     * @param nodeSize node size config from layout options\n     * @returns {SizeMap} node'id mapped to max of its width and height\n     */ getSizes(calcGraph, nodeSize) {\n        const nodes = calcGraph.getAllNodes();\n        const sizes = {};\n        for(let i = 0; i < nodes.length; i += 1){\n            const node = nodes[i];\n            sizes[node.id] = (0, $0a789d93f195d394$export$3a7a80b0f3334abe)(nodeSize, undefined)(node);\n        }\n        return sizes;\n    }\n    /**\n     * Format the options.\n     * @param options input options\n     * @param nodeNum number of nodes\n     * @returns formatted options\n     */ formatOptions(options = {}, nodeNum) {\n        const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n        const { center: center, width: width, height: height, barnesHut: barnesHut, prune: prune, maxIteration: maxIteration, kr: kr, kg: kg } = mergedOptions;\n        mergedOptions.width = !width && typeof window !== 'undefined' ? window.innerWidth : width;\n        mergedOptions.height = !height && typeof window !== 'undefined' ? window.innerHeight : height;\n        mergedOptions.center = !center ? [\n            mergedOptions.width / 2,\n            mergedOptions.height / 2\n        ] : center;\n        if (barnesHut === undefined && nodeNum > 250) mergedOptions.barnesHut = true;\n        if (prune === undefined && nodeNum > 100) mergedOptions.prune = true;\n        if (maxIteration === 0 && !prune) {\n            mergedOptions.maxIteration = 250;\n            if (nodeNum <= 200 && nodeNum > 100) mergedOptions.maxIteration = 1000;\n            else if (nodeNum > 200) mergedOptions.maxIteration = 1200;\n        } else if (maxIteration === 0 && prune) {\n            mergedOptions.maxIteration = 100;\n            if (nodeNum <= 200 && nodeNum > 100) mergedOptions.maxIteration = 500;\n            else if (nodeNum > 200) mergedOptions.maxIteration = 950;\n        }\n        if (!kr) {\n            mergedOptions.kr = 50;\n            if (nodeNum > 100 && nodeNum <= 500) mergedOptions.kr = 20;\n            else if (nodeNum > 500) mergedOptions.kr = 1;\n        }\n        if (!kg) {\n            mergedOptions.kg = 20;\n            if (nodeNum > 100 && nodeNum <= 500) mergedOptions.kg = 10;\n            else if (nodeNum > 500) mergedOptions.kg = 1;\n        }\n        return mergedOptions;\n    }\n    /**\n     * Loops for fa2.\n     * @param calcGraph graph for calculation\n     * @param graph original graph\n     * @param iteration iteration number\n     * @param sizes nodes' size\n     * @param options formatted layout options\n     * @returns\n     */ run(calcGraph, graph, iteration, sizes, assign, options) {\n        const { kr: kr, barnesHut: barnesHut, onTick: onTick } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        let sg = 0;\n        let iter = iteration;\n        const forces = {};\n        const preForces = {};\n        const bodies = {};\n        for(let i = 0; i < calcNodes.length; i += 1){\n            const { data: data, id: id } = calcNodes[i];\n            forces[id] = [\n                0,\n                0\n            ];\n            if (barnesHut) {\n                const params = {\n                    id: i,\n                    rx: data.x,\n                    ry: data.y,\n                    mass: 1,\n                    g: kr,\n                    degree: calcGraph.getDegree(id)\n                };\n                bodies[id] = new (0, $d204286452318e3e$export$2e2bcd8739ae039)(params);\n            }\n        }\n        while(iter > 0){\n            sg = this.oneStep(calcGraph, {\n                iter: iter,\n                preventOverlapIters: 50,\n                krPrime: 100,\n                sg: sg,\n                forces: forces,\n                preForces: preForces,\n                bodies: bodies,\n                sizes: sizes\n            }, options);\n            iter--;\n            onTick === null || onTick === void 0 || onTick({\n                nodes: calcNodes,\n                edges: graph.getAllEdges()\n            });\n        // if (assign) {\n        //   calcNodes.forEach(({ id, data }) => graph.mergeNodeData(id, {\n        //     x: data.x,\n        //     y: data.y\n        //   }))\n        // }\n        }\n        return calcGraph;\n    }\n    /**\n     * One step for a loop.\n     * @param graph graph for calculation\n     * @param params parameters for a loop\n     * @param options formatted layout's input options\n     * @returns\n     */ oneStep(graph, params, options) {\n        const { iter: iter, preventOverlapIters: preventOverlapIters, krPrime: krPrime, sg: sg, preForces: preForces, bodies: bodies, sizes: sizes } = params;\n        let { forces: forces } = params;\n        const { preventOverlap: preventOverlap, barnesHut: barnesHut } = options;\n        const nodes = graph.getAllNodes();\n        for(let i = 0; i < nodes.length; i += 1){\n            const { id: id } = nodes[i];\n            preForces[id] = [\n                ...forces[id]\n            ];\n            forces[id] = [\n                0,\n                0\n            ];\n        }\n        // attractive forces, existing on every actual edge\n        forces = this.getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options);\n        // repulsive forces and Gravity, existing on every node pair\n        // if preventOverlap, using the no-optimized method in the last preventOverlapIters instead.\n        if (barnesHut && (preventOverlap && iter > preventOverlapIters || !preventOverlap)) forces = this.getOptRepGraForces(graph, forces, bodies, options);\n        else forces = this.getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options);\n        // update the positions\n        return this.updatePos(graph, forces, preForces, sg, options);\n    }\n    /**\n     * Calculate the attract forces for nodes.\n     * @param graph graph for calculation\n     * @param iter current iteration index\n     * @param preventOverlapIters the iteration number for preventing overlappings\n     * @param sizes nodes' sizes\n     * @param forces forces for nodes, which will be modified\n     * @param options formatted layout's input options\n     * @returns\n     */ getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options) {\n        const { preventOverlap: preventOverlap, dissuadeHubs: dissuadeHubs, mode: mode, prune: prune } = options;\n        const edges = graph.getAllEdges();\n        for(let i = 0; i < edges.length; i += 1){\n            const { source: source, target: target } = edges[i];\n            const sourceNode = graph.getNode(source);\n            const targetNode = graph.getNode(target);\n            const sourceDegree = graph.getDegree(source);\n            const targetDegree = graph.getDegree(target);\n            if (prune && (sourceDegree <= 1 || targetDegree <= 1)) continue;\n            const dir = [\n                targetNode.data.x - sourceNode.data.x,\n                targetNode.data.y - sourceNode.data.y\n            ];\n            let eucliDis = Math.hypot(dir[0], dir[1]);\n            eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            if (preventOverlap && iter < preventOverlapIters) eucliDis = eucliDis - sizes[source] - sizes[target];\n            let fa1 = eucliDis;\n            let fa2 = fa1;\n            if (mode === 'linlog') {\n                fa1 = Math.log(1 + eucliDis);\n                fa2 = fa1;\n            }\n            if (dissuadeHubs) {\n                fa1 = eucliDis / sourceDegree;\n                fa2 = eucliDis / targetDegree;\n            }\n            if (preventOverlap && iter < preventOverlapIters && eucliDis <= 0) {\n                fa1 = 0;\n                fa2 = 0;\n            } else if (preventOverlap && iter < preventOverlapIters && eucliDis > 0) {\n                fa1 = eucliDis;\n                fa2 = eucliDis;\n            }\n            forces[source][0] += fa1 * dir[0];\n            forces[target][0] -= fa2 * dir[0];\n            forces[source][1] += fa1 * dir[1];\n            forces[target][1] -= fa2 * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Calculate the repulsive forces for nodes under barnesHut mode.\n     * @param graph graph for calculatiion\n     * @param forces forces for nodes, which will be modified\n     * @param bodies force body map\n     * @param options formatted layout's input options\n     * @returns\n     */ getOptRepGraForces(graph, forces, bodies, options) {\n        const { kg: kg, center: center, prune: prune } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        let minx = 9e10;\n        let maxx = -90000000000;\n        let miny = 9e10;\n        let maxy = -90000000000;\n        for(let i = 0; i < nodeNum; i += 1){\n            const { id: id, data: data } = nodes[i];\n            if (prune && graph.getDegree(id) <= 1) continue;\n            bodies[id].setPos(data.x, data.y);\n            if (data.x >= maxx) maxx = data.x;\n            if (data.x <= minx) minx = data.x;\n            if (data.y >= maxy) maxy = data.y;\n            if (data.y <= miny) miny = data.y;\n        }\n        const width = Math.max(maxx - minx, maxy - miny);\n        const quadParams = {\n            xmid: (maxx + minx) / 2,\n            ymid: (maxy + miny) / 2,\n            length: width,\n            massCenter: center,\n            mass: nodeNum\n        };\n        const quad = new (0, $5d974aad89a7f8a8$export$2e2bcd8739ae039)(quadParams);\n        const quadTree = new (0, $972905a276045d8d$export$2e2bcd8739ae039)(quad);\n        // build the tree, insert the nodes(quads) into the tree\n        for(let i = 0; i < nodeNum; i += 1){\n            const { id: id } = nodes[i];\n            if (prune && graph.getDegree(id) <= 1) continue;\n            if (bodies[id].in(quad)) quadTree.insert(bodies[id]);\n        }\n        // update the repulsive forces and the gravity.\n        for(let i = 0; i < nodeNum; i += 1){\n            const { id: id, data: data } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1) continue;\n            bodies[id].resetForce();\n            quadTree.updateForce(bodies[id]);\n            forces[id][0] -= bodies[id].fx;\n            forces[id][1] -= bodies[id].fy;\n            // gravity\n            const dir = [\n                data.x - center[0],\n                data.y - center[1]\n            ];\n            let eucliDis = Math.hypot(dir[0], dir[1]);\n            eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            const fg = kg * (degree + 1); // tslint:disable-line\n            forces[id][0] -= fg * dir[0];\n            forces[id][1] -= fg * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Calculate the repulsive forces for nodes.\n     * @param graph graph for calculatiion\n     * @param iter current iteration index\n     * @param preventOverlapIters the iteration number for preventing overlappings\n     * @param forces forces for nodes, which will be modified\n     * @param krPrime larger the krPrime, larger the repulsive force\n     * @param sizes nodes' sizes\n     * @param options formatted layout's input options\n     * @returns\n     */ getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options) {\n        const { preventOverlap: preventOverlap, kr: kr, kg: kg, center: center, prune: prune } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        for(let i = 0; i < nodeNum; i += 1){\n            const nodei = nodes[i];\n            const degreei = graph.getDegree(nodei.id);\n            for(let j = i + 1; j < nodeNum; j += 1){\n                const nodej = nodes[j];\n                const degreej = graph.getDegree(nodej.id);\n                if (prune && (degreei <= 1 || degreej <= 1)) continue;\n                const dir = [\n                    nodej.data.x - nodei.data.x,\n                    nodej.data.y - nodei.data.y\n                ];\n                let eucliDis = Math.hypot(dir[0], dir[1]);\n                eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n                dir[0] = dir[0] / eucliDis;\n                dir[1] = dir[1] / eucliDis;\n                if (preventOverlap && iter < preventOverlapIters) eucliDis = eucliDis - sizes[nodei.id] - sizes[nodej.id];\n                let fr = kr * (degreei + 1) * (degreej + 1) / eucliDis;\n                if (preventOverlap && iter < preventOverlapIters && eucliDis < 0) fr = krPrime * (degreei + 1) * (degreej + 1);\n                else if (preventOverlap && iter < preventOverlapIters && eucliDis === 0) fr = 0;\n                else if (preventOverlap && iter < preventOverlapIters && eucliDis > 0) fr = kr * (degreei + 1) * (degreej + 1) / eucliDis;\n                forces[nodei.id][0] -= fr * dir[0];\n                forces[nodej.id][0] += fr * dir[0];\n                forces[nodei.id][1] -= fr * dir[1];\n                forces[nodej.id][1] += fr * dir[1];\n            }\n            // gravity\n            const dir = [\n                nodei.data.x - center[0],\n                nodei.data.y - center[1]\n            ];\n            const eucliDis = Math.hypot(dir[0], dir[1]);\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            const fg = kg * (degreei + 1); // tslint:disable-line\n            forces[nodei.id][0] -= fg * dir[0];\n            forces[nodei.id][1] -= fg * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Update node positions.\n     * @param graph graph for calculatiion\n     * @param forces forces for nodes, which will be modified\n     * @param preForces previous forces for nodes, which will be modified\n     * @param sg constant for move distance of one step\n     * @param options formatted layout's input options\n     * @returns\n     */ updatePos(graph, forces, preForces, sg, options) {\n        const { ks: ks, tao: tao, prune: prune, ksmax: ksmax } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        const swgns = [];\n        const trans = [];\n        // swg(G) and tra(G)\n        let swgG = 0;\n        let traG = 0;\n        let usingSg = sg;\n        for(let i = 0; i < nodeNum; i += 1){\n            const { id: id } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1) continue;\n            const minus = [\n                forces[id][0] - preForces[id][0],\n                forces[id][1] - preForces[id][1]\n            ];\n            const minusNorm = Math.hypot(minus[0], minus[1]);\n            const add = [\n                forces[id][0] + preForces[id][0],\n                forces[id][1] + preForces[id][1]\n            ];\n            const addNorm = Math.hypot(add[0], add[1]);\n            swgns[i] = minusNorm;\n            trans[i] = addNorm / 2;\n            swgG += (degree + 1) * swgns[i];\n            traG += (degree + 1) * trans[i];\n        }\n        const preSG = usingSg;\n        usingSg = tao * traG / swgG;\n        if (preSG !== 0) usingSg = usingSg > 1.5 * preSG ? 1.5 * preSG : usingSg;\n        // update the node positions\n        for(let i = 0; i < nodeNum; i += 1){\n            const { id: id, data: data } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1) continue;\n            if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.fx) && (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.fy)) continue;\n            let sn = ks * usingSg / (1 + usingSg * Math.sqrt(swgns[i]));\n            let absForce = Math.hypot(forces[id][0], forces[id][1]);\n            absForce = absForce < 0.0001 ? 0.0001 : absForce;\n            const max = ksmax / absForce;\n            sn = sn > max ? max : sn;\n            const dnx = sn * forces[id][0];\n            const dny = sn * forces[id][1];\n            graph.mergeNodeData(id, {\n                x: data.x + dnx,\n                y: data.y + dny\n            });\n        }\n        return usingSg;\n    }\n}\n\n\n\n\n\n\nconst $0957c668a07db458$var$DEFAULTS_LAYOUT_OPTIONS = {\n    maxIteration: 1000,\n    gravity: 10,\n    speed: 5,\n    clustering: false,\n    clusterGravity: 10,\n    width: 300,\n    height: 300,\n    nodeClusterBy: 'cluster'\n};\nconst $0957c668a07db458$var$SPEED_DIVISOR = 800;\nclass $0957c668a07db458$export$407f4cf112ef23b2 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'fruchterman';\n        this.timeInterval = 0;\n        this.running = false;\n        this.options = Object.assign(Object.assign({}, $0957c668a07db458$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericFruchtermanLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericFruchtermanLayout(true, graph, options);\n        });\n    }\n    /**\n     * Stop simulation immediately.\n     */ stop() {\n        if (this.timeInterval && typeof window !== 'undefined') window.clearInterval(this.timeInterval);\n        this.running = false;\n    }\n    /**\n     * Manually steps the simulation by the specified number of iterations.\n     * @see https://github.com/d3/d3-force#simulation_tick\n     */ tick(iterations = this.options.maxIteration || 1) {\n        if (this.lastResult) return this.lastResult;\n        for(let i = 0; i < iterations; i++)this.runOneStep(this.lastGraph, this.lastClusterMap, this.lastOptions);\n        const result = {\n            nodes: this.lastLayoutNodes,\n            edges: this.lastLayoutEdges\n        };\n        if (this.lastAssign) result.nodes.forEach((node)=>this.lastGraph.mergeNodeData(node.id, {\n                x: node.data.x,\n                y: node.data.y,\n                z: this.options.dimensions === 3 ? node.data.z : undefined\n            }));\n        return result;\n    }\n    genericFruchtermanLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            if (this.running) return;\n            const formattedOptions = this.formatOptions(options);\n            const { dimensions: dimensions, width: width, height: height, center: center, clustering: clustering, nodeClusterBy: nodeClusterBy, maxIteration: maxIteration, onTick: onTick } = formattedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n                const result = {\n                    nodes: [],\n                    edges: edges\n                };\n                this.lastResult = result;\n                return result;\n            }\n            if (nodes.length === 1) {\n                if (assign) graph.mergeNodeData(nodes[0].id, {\n                    x: center[0],\n                    y: center[1],\n                    z: dimensions === 3 ? center[2] : undefined\n                });\n                const result = {\n                    nodes: [\n                        Object.assign(Object.assign({}, nodes[0]), {\n                            data: Object.assign(Object.assign({}, nodes[0].data), {\n                                x: center[0],\n                                y: center[1],\n                                z: dimensions === 3 ? center[2] : undefined\n                            })\n                        })\n                    ],\n                    edges: edges\n                };\n                this.lastResult = result;\n                return result;\n            }\n            const layoutNodes = nodes.map((node)=>(0, $9db318b25eeb9fa0$export$8630667bbca04569)(node, [\n                    width,\n                    height\n                ]));\n            const calcGraph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                nodes: layoutNodes,\n                edges: edges\n            });\n            // clustering info\n            const clusterMap = {};\n            if (clustering) layoutNodes.forEach((node)=>{\n                const clusterValue = node.data[nodeClusterBy];\n                if (!clusterMap[clusterValue]) clusterMap[clusterValue] = {\n                    name: clusterValue,\n                    cx: 0,\n                    cy: 0,\n                    count: 0\n                };\n            });\n            // Use them later in `tick`.\n            this.lastLayoutNodes = layoutNodes;\n            this.lastLayoutEdges = edges;\n            this.lastAssign = assign;\n            this.lastGraph = calcGraph;\n            this.lastOptions = formattedOptions;\n            this.lastClusterMap = clusterMap;\n            if (typeof window === 'undefined') return;\n            let iter = 0;\n            return new Promise((resolve)=>{\n                // interval for render the result after each iteration\n                this.timeInterval = window.setInterval(()=>{\n                    if (!this.running) {\n                        resolve({\n                            nodes: layoutNodes,\n                            edges: edges\n                        });\n                        return;\n                    }\n                    this.runOneStep(calcGraph, clusterMap, formattedOptions);\n                    if (assign) layoutNodes.forEach(({ id: id, data: data })=>graph.mergeNodeData(id, {\n                            x: data.x,\n                            y: data.y,\n                            z: dimensions === 3 ? data.z : undefined\n                        }));\n                    onTick === null || onTick === void 0 || onTick({\n                        nodes: layoutNodes,\n                        edges: edges\n                    });\n                    iter++;\n                    if (iter >= maxIteration) {\n                        window.clearInterval(this.timeInterval);\n                        resolve({\n                            nodes: layoutNodes,\n                            edges: edges\n                        });\n                    }\n                }, 0);\n                this.running = true;\n            });\n        });\n    }\n    formatOptions(options = {}) {\n        const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n        const { clustering: clustering, nodeClusterBy: nodeClusterBy } = mergedOptions;\n        const { center: propsCenter, width: propsWidth, height: propsHeight } = mergedOptions;\n        mergedOptions.width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n        mergedOptions.height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n        mergedOptions.center = !propsCenter ? [\n            mergedOptions.width / 2,\n            mergedOptions.height / 2\n        ] : propsCenter;\n        mergedOptions.clustering = clustering && !!nodeClusterBy;\n        return mergedOptions;\n    }\n    runOneStep(calcGraph, clusterMap, options) {\n        const { dimensions: dimensions, height: height, width: width, gravity: gravity, center: center, speed: speed, clustering: clustering, nodeClusterBy: nodeClusterBy, clusterGravity: propsClusterGravity } = options;\n        const area = height * width;\n        const maxDisplace = Math.sqrt(area) / 10;\n        const nodes = calcGraph.getAllNodes();\n        const k2 = area / (nodes.length + 1);\n        const k = Math.sqrt(k2);\n        const displacements = {};\n        this.applyCalculate(calcGraph, displacements, k, k2);\n        // gravity for clusters\n        if (clustering) {\n            // reset the clustering centers\n            for(const key in clusterMap){\n                clusterMap[key].cx = 0;\n                clusterMap[key].cy = 0;\n                clusterMap[key].count = 0;\n            }\n            // re-compute clustering centers\n            nodes.forEach((node)=>{\n                const { data: data } = node; // node is one of layoutNodes, which is formatted and data field exists\n                const c = clusterMap[data[nodeClusterBy]];\n                if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.x)) c.cx += data.x;\n                if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.y)) c.cy += data.y;\n                c.count++;\n            });\n            for(const key in clusterMap){\n                clusterMap[key].cx /= clusterMap[key].count;\n                clusterMap[key].cy /= clusterMap[key].count;\n            }\n            // compute the cluster gravity forces\n            const clusterGravity = propsClusterGravity || gravity;\n            nodes.forEach((node, j)=>{\n                const { id: id, data: data } = node;\n                if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.y)) return;\n                const c = clusterMap[data[nodeClusterBy]];\n                const distLength = Math.sqrt((data.x - c.cx) * (data.x - c.cx) + (data.y - c.cy) * (data.y - c.cy));\n                const gravityForce = k * clusterGravity;\n                displacements[id].x -= gravityForce * (data.x - c.cx) / distLength;\n                displacements[id].y -= gravityForce * (data.y - c.cy) / distLength;\n            });\n        }\n        // gravity\n        nodes.forEach((node, j)=>{\n            const { id: id, data: data } = node;\n            if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.y)) return;\n            const gravityForce = 0.01 * k * gravity;\n            displacements[id].x -= gravityForce * (data.x - center[0]);\n            displacements[id].y -= gravityForce * (data.y - center[1]);\n            if (dimensions === 3) displacements[id].z -= gravityForce * (data.z - center[2]);\n        });\n        // move\n        nodes.forEach((node, j)=>{\n            const { id: id, data: data } = node;\n            if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.fx) && (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.fy)) {\n                data.x = data.fx;\n                data.y = data.fy;\n                if (dimensions === 3) data.z = data.fz;\n                return;\n            }\n            if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(data.y)) return;\n            const distLength = Math.sqrt(displacements[id].x * displacements[id].x + displacements[id].y * displacements[id].y + (dimensions === 3 ? displacements[id].z * displacements[id].z : 0));\n            if (distLength > 0) {\n                // && !n.isFixed()\n                const limitedDist = Math.min(maxDisplace * (speed / $0957c668a07db458$var$SPEED_DIVISOR), distLength);\n                calcGraph.mergeNodeData(id, {\n                    x: data.x + displacements[id].x / distLength * limitedDist,\n                    y: data.y + displacements[id].y / distLength * limitedDist,\n                    z: dimensions === 3 ? data.z + displacements[id].z / distLength * limitedDist : undefined\n                });\n            }\n        });\n    }\n    applyCalculate(calcGraph, displacements, k, k2) {\n        this.calRepulsive(calcGraph, displacements, k2);\n        this.calAttractive(calcGraph, displacements, k);\n    }\n    calRepulsive(calcGraph, displacements, k2) {\n        const nodes = calcGraph.getAllNodes();\n        nodes.forEach(({ data: v, id: vid }, i)=>{\n            displacements[vid] = {\n                x: 0,\n                y: 0,\n                z: 0\n            };\n            nodes.forEach(({ data: u, id: uid }, j)=>{\n                if (i <= j || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(v.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(u.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(v.y) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(u.y)) return;\n                let vecX = v.x - u.x;\n                let vecY = v.y - u.y;\n                let vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n                let lengthSqr = vecX * vecX + vecY * vecY + vecZ * vecZ;\n                if (lengthSqr === 0) {\n                    lengthSqr = 1;\n                    vecX = 0.01;\n                    vecY = 0.01;\n                    vecZ = 0.01;\n                }\n                const common = k2 / lengthSqr;\n                const dispX = vecX * common;\n                const dispY = vecY * common;\n                const dispZ = vecZ * common;\n                displacements[vid].x += dispX;\n                displacements[vid].y += dispY;\n                displacements[uid].x -= dispX;\n                displacements[uid].y -= dispY;\n                if (this.options.dimensions === 3) {\n                    displacements[vid].z += dispZ;\n                    displacements[uid].z -= dispZ;\n                }\n            });\n        });\n    }\n    calAttractive(calcGraph, displacements, k) {\n        const edges = calcGraph.getAllEdges();\n        edges.forEach((e)=>{\n            const { source: source, target: target } = e;\n            if (!source || !target || source === target) return;\n            const { data: u } = calcGraph.getNode(source);\n            const { data: v } = calcGraph.getNode(target);\n            if (!(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(v.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(u.x) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(v.y) || !(0, $9cadcb45972fb445$export$2e2bcd8739ae039)(u.y)) return;\n            const vecX = v.x - u.x;\n            const vecY = v.y - u.y;\n            const vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n            const common = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ) / k;\n            const dispX = vecX * common;\n            const dispY = vecY * common;\n            const dispZ = vecZ * common;\n            displacements[source].x += dispX;\n            displacements[source].y += dispY;\n            displacements[target].x -= dispX;\n            displacements[target].y -= dispY;\n            if (this.options.dimensions === 3) {\n                displacements[source].z += dispZ;\n                displacements[target].z -= dispZ;\n            }\n        });\n    }\n}\n\n\n\n\n\n\n\nconst $901ae2dc3d3ba2b6$var$DEFAULTS_LAYOUT_OPTIONS = {\n    begin: [\n        0,\n        0\n    ],\n    preventOverlap: true,\n    preventOverlapPadding: 10,\n    condense: false,\n    rows: undefined,\n    cols: undefined,\n    position: undefined,\n    sortBy: 'degree',\n    nodeSize: 30,\n    width: 300,\n    height: 300\n};\nclass $901ae2dc3d3ba2b6$export$7d2b12578154a735 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'grid';\n        this.options = Object.assign(Object.assign({}, $901ae2dc3d3ba2b6$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericGridLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericGridLayout(true, graph, options);\n        });\n    }\n    genericGridLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { begin: begin = [\n                0,\n                0\n            ], condense: condense, preventOverlapPadding: preventOverlapPadding, preventOverlap: preventOverlap, rows: propsRows, cols: propsCols, nodeSpacing: paramNodeSpacing, nodeSize: paramNodeSize, width: propsWidth, height: propsHeight, position: position } = mergedOptions;\n            let { sortBy: sortBy } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            // Need no layout if there is no node.\n            if (!n || n === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, begin);\n            const layoutNodes = nodes.map((node)=>(0, $9db318b25eeb9fa0$export$8630667bbca04569)(node));\n            if (// `id` should be reserved keyword\n            sortBy !== 'id' && (!(0, $7545a33aa1e40079$export$2e2bcd8739ae039)(sortBy) || layoutNodes[0].data[sortBy] === undefined)) sortBy = 'degree';\n            if (sortBy === 'degree') layoutNodes.sort((n1, n2)=>graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n            else if (sortBy === 'id') // sort nodes by ID\n            layoutNodes.sort((n1, n2)=>{\n                if ((0, $9cadcb45972fb445$export$2e2bcd8739ae039)(n2.id) && (0, $9cadcb45972fb445$export$2e2bcd8739ae039)(n1.id)) return n2.id - n1.id;\n                return `${n1.id}`.localeCompare(`${n2.id}`);\n            });\n            else // sort nodes by value\n            layoutNodes.sort((n1, n2)=>n2.data[sortBy] - n1.data[sortBy]);\n            const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n            const cells = n;\n            const rcs = {\n                rows: propsRows,\n                cols: propsCols\n            };\n            // if rows or columns were set in self, use those values\n            if (propsRows != null && propsCols != null) {\n                rcs.rows = propsRows;\n                rcs.cols = propsCols;\n            } else if (propsRows != null && propsCols == null) {\n                rcs.rows = propsRows;\n                rcs.cols = Math.ceil(cells / rcs.rows);\n            } else if (propsRows == null && propsCols != null) {\n                rcs.cols = propsCols;\n                rcs.rows = Math.ceil(cells / rcs.cols);\n            } else {\n                // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n                // width/height * splits^2 = cells where splits is number of times to split width\n                const splits = Math.sqrt(cells * height / width);\n                rcs.rows = Math.round(splits);\n                rcs.cols = Math.round(width / height * splits);\n            }\n            rcs.rows = Math.max(rcs.rows, 1);\n            rcs.cols = Math.max(rcs.cols, 1);\n            if (rcs.cols * rcs.rows > cells) {\n                // otherwise use the automatic values and adjust accordingly\n                // if rounding was up, see if we can reduce rows or columns\n                const sm = $901ae2dc3d3ba2b6$var$small(rcs);\n                const lg = $901ae2dc3d3ba2b6$var$large(rcs);\n                // reducing the small side takes away the most cells, so try it first\n                if ((sm - 1) * lg >= cells) $901ae2dc3d3ba2b6$var$small(rcs, sm - 1);\n                else if ((lg - 1) * sm >= cells) $901ae2dc3d3ba2b6$var$large(rcs, lg - 1);\n            } else // if rounding was too low, add rows or columns\n            while(rcs.cols * rcs.rows < cells){\n                const sm = $901ae2dc3d3ba2b6$var$small(rcs);\n                const lg = $901ae2dc3d3ba2b6$var$large(rcs);\n                // try to add to larger side first (adds less in multiplication)\n                if ((lg + 1) * sm >= cells) $901ae2dc3d3ba2b6$var$large(rcs, lg + 1);\n                else $901ae2dc3d3ba2b6$var$small(rcs, sm + 1);\n            }\n            let cellWidth = condense ? 0 : width / rcs.cols;\n            let cellHeight = condense ? 0 : height / rcs.rows;\n            if (preventOverlap || paramNodeSpacing) {\n                const nodeSpacing = (0, $0a789d93f195d394$export$54ea943624daf252)(10, paramNodeSpacing);\n                const nodeSize = (0, $0a789d93f195d394$export$dbd46949b4b9980d)(30, paramNodeSize, false);\n                layoutNodes.forEach((node)=>{\n                    if (!node.data.x || !node.data.y) {\n                        // for bb\n                        node.data.x = 0;\n                        node.data.y = 0;\n                    }\n                    const oNode = graph.getNode(node.id);\n                    const [nodeW, nodeH] = (0, $42c5e25589525d06$export$880c59a0ae1158a1)(nodeSize(oNode) || 30);\n                    const p = nodeSpacing !== undefined ? nodeSpacing(node) : preventOverlapPadding;\n                    const w = nodeW + p;\n                    const h = nodeH + p;\n                    cellWidth = Math.max(cellWidth, w);\n                    cellHeight = Math.max(cellHeight, h);\n                });\n            }\n            const cellUsed = {}; // e.g. 'c-0-2' => true\n            // to keep track of current cell position\n            const rc = {\n                row: 0,\n                col: 0\n            };\n            // get a cache of all the manual positions\n            const id2manPos = {};\n            for(let i = 0; i < layoutNodes.length; i++){\n                const node = layoutNodes[i];\n                let rcPos;\n                if (position) // TODO: not sure the api name\n                rcPos = position(graph.getNode(node.id));\n                if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n                    // must have at least row or col def'd\n                    const pos = {\n                        row: rcPos.row,\n                        col: rcPos.col\n                    };\n                    if (pos.col === undefined) {\n                        // find unused col\n                        pos.col = 0;\n                        while($901ae2dc3d3ba2b6$var$used(cellUsed, pos))pos.col++;\n                    } else if (pos.row === undefined) {\n                        // find unused row\n                        pos.row = 0;\n                        while($901ae2dc3d3ba2b6$var$used(cellUsed, pos))pos.row++;\n                    }\n                    id2manPos[node.id] = pos;\n                    $901ae2dc3d3ba2b6$var$use(cellUsed, pos);\n                }\n                $901ae2dc3d3ba2b6$var$getPos(node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed);\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            if (assign) layoutNodes.forEach((node)=>{\n                graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                });\n            });\n            return result;\n        });\n    }\n}\nconst $901ae2dc3d3ba2b6$var$small = (rcs, val)=>{\n    let res;\n    const rows = rcs.rows || 5;\n    const cols = rcs.cols || 5;\n    if (val == null) res = Math.min(rows, cols);\n    else {\n        const min = Math.min(rows, cols);\n        if (min === rcs.rows) rcs.rows = val;\n        else rcs.cols = val;\n    }\n    return res;\n};\nconst $901ae2dc3d3ba2b6$var$large = (rcs, val)=>{\n    let result;\n    const usedRows = rcs.rows || 5;\n    const usedCols = rcs.cols || 5;\n    if (val == null) result = Math.max(usedRows, usedCols);\n    else {\n        const max = Math.max(usedRows, usedCols);\n        if (max === rcs.rows) rcs.rows = val;\n        else rcs.cols = val;\n    }\n    return result;\n};\nconst $901ae2dc3d3ba2b6$var$used = (cellUsed, rc)=>cellUsed[`c-${rc.row}-${rc.col}`] || false;\nconst $901ae2dc3d3ba2b6$var$use = (cellUsed, rc)=>cellUsed[`c-${rc.row}-${rc.col}`] = true;\nconst $901ae2dc3d3ba2b6$var$moveToNextCell = (rcs, rc)=>{\n    const cols = rcs.cols || 5;\n    rc.col++;\n    if (rc.col >= cols) {\n        rc.col = 0;\n        rc.row++;\n    }\n};\nconst $901ae2dc3d3ba2b6$var$getPos = (node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed)=>{\n    let x;\n    let y;\n    // see if we have a manual position set\n    const rcPos = id2manPos[node.id];\n    if (rcPos) {\n        x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n        y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    } else {\n        // otherwise set automatically\n        while($901ae2dc3d3ba2b6$var$used(cellUsed, rc))$901ae2dc3d3ba2b6$var$moveToNextCell(rcs, rc);\n        x = rc.col * cellWidth + cellWidth / 2 + begin[0];\n        y = rc.row * cellHeight + cellHeight / 2 + begin[1];\n        $901ae2dc3d3ba2b6$var$use(cellUsed, rc);\n        $901ae2dc3d3ba2b6$var$moveToNextCell(rcs, rc);\n    }\n    node.data.x = x;\n    node.data.y = y;\n};\n\n\n\n\n\n\n\n\nconst $15cb736e04d72afa$export$d708eb154746899c = (dimension, distances, linkDistance)=>{\n    try {\n        // square distances\n        const M = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).mul((0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).pow(distances, 2), -0.5);\n        // double centre the rows/columns\n        const rowMeans = M.mean('row');\n        const colMeans = M.mean('column');\n        const totalMean = M.mean();\n        M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n        // take the SVD of the double centred matrix, and return the\n        // points from it\n        const ret = new (0, $ce73bb3df5d80b5b$export$2e2bcd8739ae039)(M);\n        const eigenValues = (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).sqrt(ret.diagonalMatrix).diagonal();\n        return ret.leftSingularVectors.toJSON().map((row)=>{\n            return (0, $d20607c8c82d3b0f$export$2e2bcd8739ae039).mul([\n                row\n            ], [\n                eigenValues\n            ]).toJSON()[0].splice(0, dimension);\n        });\n    } catch (_a) {\n        const res = [];\n        for(let i = 0; i < distances.length; i++){\n            const x = Math.random() * linkDistance;\n            const y = Math.random() * linkDistance;\n            res.push([\n                x,\n                y\n            ]);\n        }\n        return res;\n    }\n};\n\n\nconst $8861122576ccad6e$var$SPEED_DIVISOR = 800;\nconst $8861122576ccad6e$var$DEFAULTS_LAYOUT_OPTIONS = {\n    iterations: 10,\n    height: 10,\n    width: 10,\n    speed: 100,\n    gravity: 10,\n    k: 5\n};\nconst $8861122576ccad6e$export$53e8e49630801d47 = (graph, options)=>{\n    const mergedOptions = Object.assign(Object.assign({}, $8861122576ccad6e$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    const { positions: positions, iterations: iterations, width: width, k: k, speed: speed = 100, strictRadial: strictRadial, focusIdx: focusIdx, radii: radii = [], nodeSizeFunc: nodeSizeFunc } = mergedOptions;\n    const nodes = graph.getAllNodes();\n    const disp = [];\n    const maxDisplace = width / 10;\n    for(let i = 0; i < iterations; i++){\n        positions.forEach((_, k)=>{\n            disp[k] = {\n                x: 0,\n                y: 0\n            };\n        });\n        // 给重叠的节点增加斥力\n        $8861122576ccad6e$var$getRepulsion(nodes, positions, disp, k, radii, nodeSizeFunc);\n        $8861122576ccad6e$var$updatePositions(positions, disp, speed, strictRadial, focusIdx, maxDisplace, width, radii);\n    }\n    return positions;\n};\nconst $8861122576ccad6e$var$getRepulsion = (nodes, positions, disp, k, radii, nodeSizeFunc)=>{\n    positions.forEach((v, i)=>{\n        disp[i] = {\n            x: 0,\n            y: 0\n        };\n        positions.forEach((u, j)=>{\n            if (i === j) return;\n            // v and u are not on the same circle, return\n            if (radii[i] !== radii[j]) return;\n            let vecx = v.x - u.x;\n            let vecy = v.y - u.y;\n            let vecLength = Math.sqrt(vecx * vecx + vecy * vecy);\n            if (vecLength === 0) {\n                vecLength = 1;\n                const sign = i > j ? 1 : -1;\n                vecx = 0.01 * sign;\n                vecy = 0.01 * sign;\n            }\n            // these two nodes overlap\n            if (vecLength < nodeSizeFunc(nodes[i]) / 2 + nodeSizeFunc(nodes[j]) / 2) {\n                const common = k * k / vecLength;\n                disp[i].x += vecx / vecLength * common;\n                disp[i].y += vecy / vecLength * common;\n            }\n        });\n    });\n};\nconst $8861122576ccad6e$var$updatePositions = (positions, disp, speed, strictRadial, focusIdx, maxDisplace, width, radii)=>{\n    const maxDisp = maxDisplace || width / 10;\n    if (strictRadial) disp.forEach((di, i)=>{\n        const vx = positions[i].x - positions[focusIdx].x;\n        const vy = positions[i].y - positions[focusIdx].y;\n        const vLength = Math.sqrt(vx * vx + vy * vy);\n        let vpx = vy / vLength;\n        let vpy = -vx / vLength;\n        const diLength = Math.sqrt(di.x * di.x + di.y * di.y);\n        let alpha = Math.acos((vpx * di.x + vpy * di.y) / diLength);\n        if (alpha > Math.PI / 2) {\n            alpha -= Math.PI / 2;\n            vpx *= -1;\n            vpy *= -1;\n        }\n        const tdispLength = Math.cos(alpha) * diLength;\n        di.x = vpx * tdispLength;\n        di.y = vpy * tdispLength;\n    });\n    // move\n    positions.forEach((n, i)=>{\n        if (i === focusIdx) return;\n        const distLength = Math.sqrt(disp[i].x * disp[i].x + disp[i].y * disp[i].y);\n        if (distLength > 0 && i !== focusIdx) {\n            const limitedDist = Math.min(maxDisp * (speed / $8861122576ccad6e$var$SPEED_DIVISOR), distLength);\n            n.x += disp[i].x / distLength * limitedDist;\n            n.y += disp[i].y / distLength * limitedDist;\n            if (strictRadial) {\n                let vx = n.x - positions[focusIdx].x;\n                let vy = n.y - positions[focusIdx].y;\n                const nfDis = Math.sqrt(vx * vx + vy * vy);\n                vx = vx / nfDis * radii[i];\n                vy = vy / nfDis * radii[i];\n                n.x = positions[focusIdx].x + vx;\n                n.y = positions[focusIdx].y + vy;\n            }\n        }\n    });\n    return positions;\n};\n\n\nconst $a372b9cc25c90c6c$var$DEFAULTS_LAYOUT_OPTIONS = {\n    maxIteration: 1000,\n    focusNode: null,\n    unitRadius: null,\n    linkDistance: 50,\n    preventOverlap: false,\n    strictRadial: true,\n    maxPreventOverlapIteration: 200,\n    sortStrength: 10\n};\nclass $a372b9cc25c90c6c$export$e305311e38386ec3 {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'radial';\n        this.options = Object.assign(Object.assign({}, $a372b9cc25c90c6c$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericRadialLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericRadialLayout(true, graph, options);\n        });\n    }\n    genericRadialLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { width: propsWidth, height: propsHeight, center: propsCenter, focusNode: propsFocusNode, unitRadius: propsUnitRadius, nodeSize: nodeSize, nodeSpacing: nodeSpacing, strictRadial: strictRadial, preventOverlap: preventOverlap, maxPreventOverlapIteration: maxPreventOverlapIteration, sortBy: sortBy, linkDistance: linkDistance = 50, sortStrength: sortStrength = 10, maxIteration: maxIteration = 1000 } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n            const center = !propsCenter ? [\n                width / 2,\n                height / 2\n            ] : propsCenter;\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) return (0, $dd5b35eb4e609074$export$3f5334baeb17ae93)(graph, assign, center);\n            let focusNode = nodes[0];\n            if ((0, $7545a33aa1e40079$export$2e2bcd8739ae039)(propsFocusNode)) {\n                for(let i = 0; i < nodes.length; i++)if (nodes[i].id === propsFocusNode) {\n                    focusNode = nodes[i];\n                    break;\n                }\n            } else focusNode = propsFocusNode || nodes[0];\n            // the index of the focusNode in data\n            const focusIndex = $a372b9cc25c90c6c$var$getIndexById(nodes, focusNode.id);\n            // the graph-theoretic distance (shortest path distance) matrix\n            const adjMatrix = (0, $e4d865a10babc9da$export$b7dd8b2289c43065)({\n                nodes: nodes,\n                edges: edges\n            }, false);\n            const distances = (0, $e4d865a10babc9da$export$fbbf4bd85aaff6bd)(adjMatrix);\n            const maxDistance = $a372b9cc25c90c6c$var$maxToFocus(distances, focusIndex);\n            // replace first node in unconnected component to the circle at (maxDistance + 1)\n            $a372b9cc25c90c6c$var$handleInfinity(distances, focusIndex, maxDistance + 1);\n            // the shortest path distance from each node to focusNode\n            const focusNodeD = distances[focusIndex];\n            let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n            let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n            if (semiWidth === 0) semiWidth = width / 2;\n            if (semiHeight === 0) semiHeight = height / 2;\n            // the maxRadius of the graph\n            const maxRadius = Math.min(semiWidth, semiHeight);\n            const maxD = Math.max(...focusNodeD);\n            // the radius for each nodes away from focusNode\n            const radii = [];\n            const unitRadius = !propsUnitRadius ? maxRadius / maxD : propsUnitRadius;\n            focusNodeD.forEach((value, i)=>{\n                radii[i] = value * unitRadius;\n            });\n            const idealDistances = $a372b9cc25c90c6c$var$eIdealDisMatrix(nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength);\n            // the weight matrix, Wij = 1 / dij^(-2)\n            const weights = $a372b9cc25c90c6c$var$getWeightMatrix(idealDistances);\n            // the initial positions from mds, move the graph to origin, centered at focusNode\n            const mdsResult = (0, $15cb736e04d72afa$export$d708eb154746899c)(linkDistance, idealDistances, linkDistance);\n            let positions = mdsResult.map(([x, y])=>({\n                    x: (isNaN(x) ? Math.random() * linkDistance : x) - mdsResult[focusIndex][0],\n                    y: (isNaN(y) ? Math.random() * linkDistance : y) - mdsResult[focusIndex][1]\n                }));\n            this.run(maxIteration, positions, weights, idealDistances, radii, focusIndex);\n            let nodeSizeFunc;\n            // stagger the overlapped nodes\n            if (preventOverlap) {\n                nodeSizeFunc = (0, $0a789d93f195d394$export$3a7a80b0f3334abe)(nodeSize, nodeSpacing);\n                const nonoverlapForceParams = {\n                    nodes: nodes,\n                    nodeSizeFunc: nodeSizeFunc,\n                    positions: positions,\n                    radii: radii,\n                    height: height,\n                    width: width,\n                    strictRadial: Boolean(strictRadial),\n                    focusIdx: focusIndex,\n                    iterations: maxPreventOverlapIteration || 200,\n                    k: positions.length / 4.5\n                };\n                positions = (0, $8861122576ccad6e$export$53e8e49630801d47)(graph, nonoverlapForceParams);\n            }\n            // move the graph to center\n            const layoutNodes = [];\n            positions.forEach((p, i)=>{\n                const cnode = (0, $9db318b25eeb9fa0$export$8630667bbca04569)(nodes[i]);\n                cnode.data.x = p.x + center[0];\n                cnode.data.y = p.y + center[1];\n                layoutNodes.push(cnode);\n            });\n            if (assign) layoutNodes.forEach((node)=>graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                }));\n            const result = {\n                nodes: layoutNodes,\n                edges: edges\n            };\n            return result;\n        });\n    }\n    run(maxIteration, positions, weights, idealDistances, radii, focusIndex) {\n        for(let i = 0; i <= maxIteration; i++){\n            const param = i / maxIteration;\n            this.oneIteration(param, positions, radii, idealDistances, weights, focusIndex);\n        }\n    }\n    oneIteration(param, positions, radii, distances, weights, focusIndex) {\n        const vparam = 1 - param;\n        positions.forEach((v, i)=>{\n            // v\n            const originDis = (0, $e4d865a10babc9da$export$58ff206e6557f2f0)(v, {\n                x: 0,\n                y: 0\n            });\n            const reciODis = originDis === 0 ? 0 : 1 / originDis;\n            if (i === focusIndex) return;\n            let xMolecule = 0;\n            let yMolecule = 0;\n            let denominator = 0;\n            positions.forEach((u, j)=>{\n                // u\n                if (i === j) return;\n                // the euclidean distance between v and u\n                const edis = (0, $e4d865a10babc9da$export$58ff206e6557f2f0)(v, u);\n                const reciEdis = edis === 0 ? 0 : 1 / edis;\n                const idealDis = distances[j][i];\n                // same for x and y\n                denominator += weights[i][j];\n                // x\n                xMolecule += weights[i][j] * (u.x + idealDis * (v.x - u.x) * reciEdis);\n                // y\n                yMolecule += weights[i][j] * (u.y + idealDis * (v.y - u.y) * reciEdis);\n            });\n            const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n            denominator *= vparam;\n            denominator += param * reciR * reciR;\n            // x\n            xMolecule *= vparam;\n            xMolecule += param * reciR * v.x * reciODis;\n            v.x = xMolecule / denominator;\n            // y\n            yMolecule *= vparam;\n            yMolecule += param * reciR * v.y * reciODis;\n            v.y = yMolecule / denominator;\n        });\n    }\n}\nconst $a372b9cc25c90c6c$var$eIdealDisMatrix = (nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength)=>{\n    if (!nodes) return [];\n    const result = [];\n    if (distances) {\n        // cache the value of field sortBy for nodes to avoid dupliate calculation\n        const sortValueCache = {};\n        distances.forEach((row, i)=>{\n            const newRow = [];\n            row.forEach((v, j)=>{\n                var _a, _b;\n                if (i === j) newRow.push(0);\n                else if (radii[i] === radii[j]) {\n                    // i and j are on the same circle\n                    if (sortBy === 'data') // sort the nodes on the same circle according to the ordering of the data\n                    newRow.push(v * (Math.abs(i - j) * sortStrength) / (radii[i] / unitRadius));\n                    else if (sortBy) {\n                        // sort the nodes on the same circle according to the attributes\n                        let iValue;\n                        let jValue;\n                        if (sortValueCache[nodes[i].id]) iValue = sortValueCache[nodes[i].id];\n                        else {\n                            const value = (sortBy === 'id' ? nodes[i].id : (_a = nodes[i].data) === null || _a === void 0 ? void 0 : _a[sortBy]) || 0;\n                            if ((0, $7545a33aa1e40079$export$2e2bcd8739ae039)(value)) iValue = value.charCodeAt(0);\n                            else iValue = value;\n                            sortValueCache[nodes[i].id] = iValue;\n                        }\n                        if (sortValueCache[nodes[j].id]) jValue = sortValueCache[nodes[j].id];\n                        else {\n                            const value = (sortBy === 'id' ? nodes[j].id : (_b = nodes[j].data) === null || _b === void 0 ? void 0 : _b[sortBy]) || 0;\n                            if ((0, $7545a33aa1e40079$export$2e2bcd8739ae039)(value)) jValue = value.charCodeAt(0);\n                            else jValue = value;\n                            sortValueCache[nodes[j].id] = jValue;\n                        }\n                        newRow.push(v * (Math.abs(iValue - jValue) * sortStrength) / (radii[i] / unitRadius));\n                    } else newRow.push(v * linkDistance / (radii[i] / unitRadius));\n                } else {\n                    // i and j are on different circles\n                    const link = (linkDistance + unitRadius) / 2;\n                    newRow.push(v * link);\n                }\n            });\n            result.push(newRow);\n        });\n    }\n    return result;\n};\nconst $a372b9cc25c90c6c$var$getWeightMatrix = (idealDistances)=>{\n    const rows = idealDistances.length;\n    const cols = idealDistances[0].length;\n    const result = [];\n    for(let i = 0; i < rows; i++){\n        const row = [];\n        for(let j = 0; j < cols; j++)if (idealDistances[i][j] !== 0) row.push(1 / (idealDistances[i][j] * idealDistances[i][j]));\n        else row.push(0);\n        result.push(row);\n    }\n    return result;\n};\nconst $a372b9cc25c90c6c$var$getIndexById = (array, id)=>{\n    let index = -1;\n    array.forEach((a, i)=>{\n        if (a.id === id) index = i;\n    });\n    return Math.max(index, 0);\n};\nconst $a372b9cc25c90c6c$var$handleInfinity = (matrix, focusIndex, step)=>{\n    const length = matrix.length;\n    // 遍历 matrix 中遍历 focus 对应行\n    for(let i = 0; i < length; i++)// matrix 关注点对应行的 Inf 项\n    if (matrix[focusIndex][i] === Infinity) {\n        matrix[focusIndex][i] = step;\n        matrix[i][focusIndex] = step;\n        // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n        for(let j = 0; j < length; j++)if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n            matrix[focusIndex][j] = step + matrix[i][j];\n            matrix[j][focusIndex] = step + matrix[i][j];\n        }\n    }\n    // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n    for(let i = 0; i < length; i++){\n        if (i === focusIndex) continue;\n        for(let j = 0; j < length; j++)if (matrix[i][j] === Infinity) {\n            let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n            minus = minus === 0 ? 1 : minus;\n            matrix[i][j] = minus;\n        }\n    }\n};\nconst $a372b9cc25c90c6c$var$maxToFocus = (matrix, focusIndex)=>{\n    let max = 0;\n    for(let i = 0; i < matrix[focusIndex].length; i++){\n        if (matrix[focusIndex][i] === Infinity) continue;\n        max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n    }\n    return max;\n};\n\n\n\nconst $13c6e781d6b0b74c$var$DEFAULTS_LAYOUT_OPTIONS = {\n    center: [\n        0,\n        0\n    ],\n    width: 300,\n    height: 300\n};\nclass $13c6e781d6b0b74c$export$db32c96a7bc2e53e {\n    constructor(options = {}){\n        this.options = options;\n        this.id = 'random';\n        this.options = Object.assign(Object.assign({}, $13c6e781d6b0b74c$var$DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */ execute(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            return this.genericRandomLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */ assign(graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            yield this.genericRandomLayout(true, graph, options);\n        });\n    }\n    genericRandomLayout(assign, graph, options) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center: propsCenter, width: propsWidth, height: propsHeight } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const layoutScale = 0.9;\n            const width = !propsWidth && typeof window !== 'undefined' ? window.innerWidth : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined' ? window.innerHeight : propsHeight;\n            const center = !propsCenter ? [\n                width / 2,\n                height / 2\n            ] : propsCenter;\n            const layoutNodes = [];\n            if (nodes) nodes.forEach((node)=>{\n                layoutNodes.push({\n                    id: node.id,\n                    data: {\n                        x: (Math.random() - 0.5) * layoutScale * width + center[0],\n                        y: (Math.random() - 0.5) * layoutScale * height + center[1]\n                    }\n                });\n            });\n            if (assign) layoutNodes.forEach((node)=>graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y\n                }));\n            const result = {\n                nodes: layoutNodes,\n                edges: graph.getAllEdges()\n            };\n            return result;\n        });\n    }\n}\n\n\nconst $10d7fd9d474c2b3f$export$4bb7493d241fd8a5 = {\n    circular: (0, $aa34fcd309b753d3$export$59c1a03c0095767a),\n    concentric: (0, $960ff972045b2e6c$export$9347783c4f7c1005),\n    mds: (0, $b3ade54c9d7b6e23$export$6b075c289f9d9aa8),\n    random: (0, $13c6e781d6b0b74c$export$db32c96a7bc2e53e),\n    grid: (0, $901ae2dc3d3ba2b6$export$7d2b12578154a735),\n    radial: (0, $a372b9cc25c90c6c$export$e305311e38386ec3),\n    force: (0, $92cd346d3bd9f938$export$9a500154086f6247),\n    d3force: (0, $465548e1faf77560$export$8ff17a5dd8c72f61),\n    'd3-force-3d': (0, $f96c471f81bf7e93$export$db0fc25040afae38),\n    fruchterman: (0, $0957c668a07db458$export$407f4cf112ef23b2),\n    forceAtlas2: (0, $4c1ed8fdef031a27$export$c10edd245dbf6143),\n    dagre: (0, $4c0edf0487870c01$export$248f0a26949d24d9),\n    antvDagre: (0, $df440d22cac5c475$export$37faa137668b7035),\n    comboCombined: (0, $ec66f2af978f3a33$export$a8b67f22f5576612)\n};\n\n\n\nlet $7041f28448bd7176$var$currentLayout;\nconst $7041f28448bd7176$var$obj = {\n    stopLayout () {\n        if ($7041f28448bd7176$var$currentLayout === null || $7041f28448bd7176$var$currentLayout === void 0 ? void 0 : $7041f28448bd7176$var$currentLayout.stop) $7041f28448bd7176$var$currentLayout.stop();\n    },\n    calculateLayout (payload, transferables) {\n        return (0, $4ce669c46e60ac46$export$1050f835b63b671e)(this, void 0, void 0, function*() {\n            const { layout: { id: id, options: options, iterations: iterations }, nodes: nodes, edges: edges } = payload;\n            // Sync graph on the worker side.\n            // TODO: Use transferable objects like ArrayBuffer for nodes & edges,\n            // in which case we don't need the whole graph.\n            // @see https://github.com/graphology/graphology/blob/master/src/layout-noverlap/webworker.tpl.js#L32\n            const graph = new (0, $49867c5a46937b53$export$614db49f3febe941)({\n                nodes: nodes,\n                edges: edges\n            });\n            /**\n             * Create layout instance on the worker side.\n             */ const layoutCtor = (0, $10d7fd9d474c2b3f$export$4bb7493d241fd8a5)[id];\n            if (layoutCtor) $7041f28448bd7176$var$currentLayout = new layoutCtor(options);\n            else throw new Error(`Unknown layout id: ${id}`);\n            let positions = yield $7041f28448bd7176$var$currentLayout.execute(graph);\n            if ((0, $5c9f98f9b91eed31$export$6db3e338b9f8fea2)($7041f28448bd7176$var$currentLayout)) {\n                $7041f28448bd7176$var$currentLayout.stop();\n                positions = $7041f28448bd7176$var$currentLayout.tick(iterations);\n            }\n            return [\n                positions,\n                transferables\n            ];\n        });\n    }\n};\n$9d65ffd50b68f22a$export$9b7f6e342a8cbd38($7041f28448bd7176$var$obj);\n\n})();\n//# sourceMappingURL=worker.1c31f1cd.js.map\n","/* global window */\n\nvar graphlib;\n\nif (typeof require === \"function\") {\n  try {\n    graphlib = require(\"graphlib\");\n  } catch (e) {\n    // continue regardless of error\n  }\n}\n\nif (!graphlib) {\n  graphlib = window.graphlib;\n}\n\nmodule.exports = graphlib;\n","/**\n * Copyright (c) 2014, Chris Pettitt\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n * list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar lib = require(\"./lib\");\n\nmodule.exports = {\n  Graph: lib.Graph,\n  json: require(\"./lib/json\"),\n  alg: require(\"./lib/alg\"),\n  version: lib.version\n};\n","// Includes only the \"core\" of graphlib\nmodule.exports = {\n  Graph: require(\"./graph\"),\n  version: require(\"./version\")\n};\n","\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = Graph;\n\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nfunction Graph(opts) {\n  this._isDirected = _.has(opts, \"directed\") ? opts.directed : true;\n  this._isMultigraph = _.has(opts, \"multigraph\") ? opts.multigraph : false;\n  this._isCompound = _.has(opts, \"compound\") ? opts.compound : false;\n\n  // Label for the graph itself\n  this._label = undefined;\n\n  // Defaults to be set when creating a new node\n  this._defaultNodeLabelFn = _.constant(undefined);\n\n  // Defaults to be set when creating a new edge\n  this._defaultEdgeLabelFn = _.constant(undefined);\n\n  // v -> label\n  this._nodes = {};\n\n  if (this._isCompound) {\n    // v -> parent\n    this._parent = {};\n\n    // v -> children\n    this._children = {};\n    this._children[GRAPH_NODE] = {};\n  }\n\n  // v -> edgeObj\n  this._in = {};\n\n  // u -> v -> Number\n  this._preds = {};\n\n  // v -> edgeObj\n  this._out = {};\n\n  // v -> w -> Number\n  this._sucs = {};\n\n  // e -> edgeObj\n  this._edgeObjs = {};\n\n  // e -> label\n  this._edgeLabels = {};\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\n\n/* === Graph functions ========= */\n\nGraph.prototype.isDirected = function() {\n  return this._isDirected;\n};\n\nGraph.prototype.isMultigraph = function() {\n  return this._isMultigraph;\n};\n\nGraph.prototype.isCompound = function() {\n  return this._isCompound;\n};\n\nGraph.prototype.setGraph = function(label) {\n  this._label = label;\n  return this;\n};\n\nGraph.prototype.graph = function() {\n  return this._label;\n};\n\n\n/* === Node functions ========== */\n\nGraph.prototype.setDefaultNodeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultNodeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.nodeCount = function() {\n  return this._nodeCount;\n};\n\nGraph.prototype.nodes = function() {\n  return _.keys(this._nodes);\n};\n\nGraph.prototype.sources = function() {\n  var self = this;\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(self._in[v]);\n  });\n};\n\nGraph.prototype.sinks = function() {\n  var self = this;\n  return _.filter(this.nodes(), function(v) {\n    return _.isEmpty(self._out[v]);\n  });\n};\n\nGraph.prototype.setNodes = function(vs, value) {\n  var args = arguments;\n  var self = this;\n  _.each(vs, function(v) {\n    if (args.length > 1) {\n      self.setNode(v, value);\n    } else {\n      self.setNode(v);\n    }\n  });\n  return this;\n};\n\nGraph.prototype.setNode = function(v, value) {\n  if (_.has(this._nodes, v)) {\n    if (arguments.length > 1) {\n      this._nodes[v] = value;\n    }\n    return this;\n  }\n\n  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n  if (this._isCompound) {\n    this._parent[v] = GRAPH_NODE;\n    this._children[v] = {};\n    this._children[GRAPH_NODE][v] = true;\n  }\n  this._in[v] = {};\n  this._preds[v] = {};\n  this._out[v] = {};\n  this._sucs[v] = {};\n  ++this._nodeCount;\n  return this;\n};\n\nGraph.prototype.node = function(v) {\n  return this._nodes[v];\n};\n\nGraph.prototype.hasNode = function(v) {\n  return _.has(this._nodes, v);\n};\n\nGraph.prototype.removeNode =  function(v) {\n  var self = this;\n  if (_.has(this._nodes, v)) {\n    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };\n    delete this._nodes[v];\n    if (this._isCompound) {\n      this._removeFromParentsChildList(v);\n      delete this._parent[v];\n      _.each(this.children(v), function(child) {\n        self.setParent(child);\n      });\n      delete this._children[v];\n    }\n    _.each(_.keys(this._in[v]), removeEdge);\n    delete this._in[v];\n    delete this._preds[v];\n    _.each(_.keys(this._out[v]), removeEdge);\n    delete this._out[v];\n    delete this._sucs[v];\n    --this._nodeCount;\n  }\n  return this;\n};\n\nGraph.prototype.setParent = function(v, parent) {\n  if (!this._isCompound) {\n    throw new Error(\"Cannot set parent in a non-compound graph\");\n  }\n\n  if (_.isUndefined(parent)) {\n    parent = GRAPH_NODE;\n  } else {\n    // Coerce parent to string\n    parent += \"\";\n    for (var ancestor = parent;\n      !_.isUndefined(ancestor);\n      ancestor = this.parent(ancestor)) {\n      if (ancestor === v) {\n        throw new Error(\"Setting \" + parent+ \" as parent of \" + v +\n                        \" would create a cycle\");\n      }\n    }\n\n    this.setNode(parent);\n  }\n\n  this.setNode(v);\n  this._removeFromParentsChildList(v);\n  this._parent[v] = parent;\n  this._children[parent][v] = true;\n  return this;\n};\n\nGraph.prototype._removeFromParentsChildList = function(v) {\n  delete this._children[this._parent[v]][v];\n};\n\nGraph.prototype.parent = function(v) {\n  if (this._isCompound) {\n    var parent = this._parent[v];\n    if (parent !== GRAPH_NODE) {\n      return parent;\n    }\n  }\n};\n\nGraph.prototype.children = function(v) {\n  if (_.isUndefined(v)) {\n    v = GRAPH_NODE;\n  }\n\n  if (this._isCompound) {\n    var children = this._children[v];\n    if (children) {\n      return _.keys(children);\n    }\n  } else if (v === GRAPH_NODE) {\n    return this.nodes();\n  } else if (this.hasNode(v)) {\n    return [];\n  }\n};\n\nGraph.prototype.predecessors = function(v) {\n  var predsV = this._preds[v];\n  if (predsV) {\n    return _.keys(predsV);\n  }\n};\n\nGraph.prototype.successors = function(v) {\n  var sucsV = this._sucs[v];\n  if (sucsV) {\n    return _.keys(sucsV);\n  }\n};\n\nGraph.prototype.neighbors = function(v) {\n  var preds = this.predecessors(v);\n  if (preds) {\n    return _.union(preds, this.successors(v));\n  }\n};\n\nGraph.prototype.isLeaf = function (v) {\n  var neighbors;\n  if (this.isDirected()) {\n    neighbors = this.successors(v);\n  } else {\n    neighbors = this.neighbors(v);\n  }\n  return neighbors.length === 0;\n};\n\nGraph.prototype.filterNodes = function(filter) {\n  var copy = new this.constructor({\n    directed: this._isDirected,\n    multigraph: this._isMultigraph,\n    compound: this._isCompound\n  });\n\n  copy.setGraph(this.graph());\n\n  var self = this;\n  _.each(this._nodes, function(value, v) {\n    if (filter(v)) {\n      copy.setNode(v, value);\n    }\n  });\n\n  _.each(this._edgeObjs, function(e) {\n    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n      copy.setEdge(e, self.edge(e));\n    }\n  });\n\n  var parents = {};\n  function findParent(v) {\n    var parent = self.parent(v);\n    if (parent === undefined || copy.hasNode(parent)) {\n      parents[v] = parent;\n      return parent;\n    } else if (parent in parents) {\n      return parents[parent];\n    } else {\n      return findParent(parent);\n    }\n  }\n\n  if (this._isCompound) {\n    _.each(copy.nodes(), function(v) {\n      copy.setParent(v, findParent(v));\n    });\n  }\n\n  return copy;\n};\n\n/* === Edge functions ========== */\n\nGraph.prototype.setDefaultEdgeLabel = function(newDefault) {\n  if (!_.isFunction(newDefault)) {\n    newDefault = _.constant(newDefault);\n  }\n  this._defaultEdgeLabelFn = newDefault;\n  return this;\n};\n\nGraph.prototype.edgeCount = function() {\n  return this._edgeCount;\n};\n\nGraph.prototype.edges = function() {\n  return _.values(this._edgeObjs);\n};\n\nGraph.prototype.setPath = function(vs, value) {\n  var self = this;\n  var args = arguments;\n  _.reduce(vs, function(v, w) {\n    if (args.length > 1) {\n      self.setEdge(v, w, value);\n    } else {\n      self.setEdge(v, w);\n    }\n    return w;\n  });\n  return this;\n};\n\n/*\n * setEdge(v, w, [value, [name]])\n * setEdge({ v, w, [name] }, [value])\n */\nGraph.prototype.setEdge = function() {\n  var v, w, name, value;\n  var valueSpecified = false;\n  var arg0 = arguments[0];\n\n  if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n    v = arg0.v;\n    w = arg0.w;\n    name = arg0.name;\n    if (arguments.length === 2) {\n      value = arguments[1];\n      valueSpecified = true;\n    }\n  } else {\n    v = arg0;\n    w = arguments[1];\n    name = arguments[3];\n    if (arguments.length > 2) {\n      value = arguments[2];\n      valueSpecified = true;\n    }\n  }\n\n  v = \"\" + v;\n  w = \"\" + w;\n  if (!_.isUndefined(name)) {\n    name = \"\" + name;\n  }\n\n  var e = edgeArgsToId(this._isDirected, v, w, name);\n  if (_.has(this._edgeLabels, e)) {\n    if (valueSpecified) {\n      this._edgeLabels[e] = value;\n    }\n    return this;\n  }\n\n  if (!_.isUndefined(name) && !this._isMultigraph) {\n    throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n  }\n\n  // It didn't exist, so we need to create it.\n  // First ensure the nodes exist.\n  this.setNode(v);\n  this.setNode(w);\n\n  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n  // Ensure we add undirected edges in a consistent way.\n  v = edgeObj.v;\n  w = edgeObj.w;\n\n  Object.freeze(edgeObj);\n  this._edgeObjs[e] = edgeObj;\n  incrementOrInitEntry(this._preds[w], v);\n  incrementOrInitEntry(this._sucs[v], w);\n  this._in[w][e] = edgeObj;\n  this._out[v][e] = edgeObj;\n  this._edgeCount++;\n  return this;\n};\n\nGraph.prototype.edge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  return this._edgeLabels[e];\n};\n\nGraph.prototype.hasEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  return _.has(this._edgeLabels, e);\n};\n\nGraph.prototype.removeEdge = function(v, w, name) {\n  var e = (arguments.length === 1\n    ? edgeObjToId(this._isDirected, arguments[0])\n    : edgeArgsToId(this._isDirected, v, w, name));\n  var edge = this._edgeObjs[e];\n  if (edge) {\n    v = edge.v;\n    w = edge.w;\n    delete this._edgeLabels[e];\n    delete this._edgeObjs[e];\n    decrementOrRemoveEntry(this._preds[w], v);\n    decrementOrRemoveEntry(this._sucs[v], w);\n    delete this._in[w][e];\n    delete this._out[v][e];\n    this._edgeCount--;\n  }\n  return this;\n};\n\nGraph.prototype.inEdges = function(v, u) {\n  var inV = this._in[v];\n  if (inV) {\n    var edges = _.values(inV);\n    if (!u) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.v === u; });\n  }\n};\n\nGraph.prototype.outEdges = function(v, w) {\n  var outV = this._out[v];\n  if (outV) {\n    var edges = _.values(outV);\n    if (!w) {\n      return edges;\n    }\n    return _.filter(edges, function(edge) { return edge.w === w; });\n  }\n};\n\nGraph.prototype.nodeEdges = function(v, w) {\n  var inEdges = this.inEdges(v, w);\n  if (inEdges) {\n    return inEdges.concat(this.outEdges(v, w));\n  }\n};\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) { delete map[k]; }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +\n             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj =  { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","/* global window */\n\nvar lodash;\n\nif (typeof require === \"function\") {\n  try {\n    lodash = {\n      clone: require(\"lodash/clone\"),\n      constant: require(\"lodash/constant\"),\n      each: require(\"lodash/each\"),\n      filter: require(\"lodash/filter\"),\n      has:  require(\"lodash/has\"),\n      isArray: require(\"lodash/isArray\"),\n      isEmpty: require(\"lodash/isEmpty\"),\n      isFunction: require(\"lodash/isFunction\"),\n      isUndefined: require(\"lodash/isUndefined\"),\n      keys: require(\"lodash/keys\"),\n      map: require(\"lodash/map\"),\n      reduce: require(\"lodash/reduce\"),\n      size: require(\"lodash/size\"),\n      transform: require(\"lodash/transform\"),\n      union: require(\"lodash/union\"),\n      values: require(\"lodash/values\")\n    };\n  } catch (e) {\n    // continue regardless of error\n  }\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","module.exports = require('./forEach');\n","var arrayEach = require('./_arrayEach'),\n    baseEach = require('./_baseEach'),\n    castFunction = require('./_castFunction'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEach;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * **Note:** Unlike `_.remove`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.reject\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': true },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * _.filter(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.filter(users, { 'age': 36, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.filter(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.filter(users, 'active');\n * // => objects for ['barney']\n *\n * // Combining several predicates using `_.overEvery` or `_.overSome`.\n * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n * // => objects for ['fred', 'barney']\n */\nfunction filter(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nmodule.exports = filter;\n","var baseEach = require('./_baseEach');\n\n/**\n * The base implementation of `_.filter` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction baseFilter(collection, predicate) {\n  var result = [];\n  baseEach(collection, function(value, index, collection) {\n    if (predicate(value, index, collection)) {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFilter;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","var baseHas = require('./_baseHas'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nmodule.exports = has;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nmodule.exports = baseHas;\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var arrayReduce = require('./_arrayReduce'),\n    baseEach = require('./_baseEach'),\n    baseIteratee = require('./_baseIteratee'),\n    baseReduce = require('./_baseReduce'),\n    isArray = require('./isArray');\n\n/**\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see _.reduceRight\n * @example\n *\n * _.reduce([1, 2], function(sum, n) {\n *   return sum + n;\n * }, 0);\n * // => 3\n *\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n *   return result;\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n */\nfunction reduce(collection, iteratee, accumulator) {\n  var func = isArray(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n}\n\nmodule.exports = reduce;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","/**\n * The base implementation of `_.reduce` and `_.reduceRight`, without support\n * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} accumulator The initial value.\n * @param {boolean} initAccum Specify using the first or last element of\n *  `collection` as the initial value.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the accumulated value.\n */\nfunction baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n  eachFunc(collection, function(value, index, collection) {\n    accumulator = initAccum\n      ? (initAccum = false, value)\n      : iteratee(accumulator, value, index, collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseReduce;\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    stringSize = require('./_stringSize');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/**\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * _.size([1, 2, 3]);\n * // => 3\n *\n * _.size({ 'a': 1, 'b': 2 });\n * // => 2\n *\n * _.size('pebbles');\n * // => 7\n */\nfunction size(collection) {\n  if (collection == null) {\n    return 0;\n  }\n  if (isArrayLike(collection)) {\n    return isString(collection) ? stringSize(collection) : collection.length;\n  }\n  var tag = getTag(collection);\n  if (tag == mapTag || tag == setTag) {\n    return collection.size;\n  }\n  return baseKeys(collection).length;\n}\n\nmodule.exports = size;\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var asciiSize = require('./_asciiSize'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeSize = require('./_unicodeSize');\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\nmodule.exports = stringSize;\n","var baseProperty = require('./_baseProperty');\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nmodule.exports = asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nmodule.exports = unicodeSize;\n","var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n","var baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    baseUniq = require('./_baseUniq'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.union([2], [1, 2]);\n * // => [2, 1]\n */\nvar union = baseRest(function(arrays) {\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));\n});\n\nmodule.exports = union;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","module.exports = '2.1.8';\n","var _ = require(\"./lodash\");\nvar Graph = require(\"./graph\");\n\nmodule.exports = {\n  write: write,\n  read: read\n};\n\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound()\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g)\n  };\n  if (!_.isUndefined(g.graph())) {\n    json.value = _.clone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return _.map(g.nodes(), function(v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (!_.isUndefined(nodeValue)) {\n      node.value = nodeValue;\n    }\n    if (!_.isUndefined(parent)) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return _.map(g.edges(), function(e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (!_.isUndefined(e.name)) {\n      edge.name = e.name;\n    }\n    if (!_.isUndefined(edgeValue)) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  _.each(json.nodes, function(entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  _.each(json.edges, function(entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n","module.exports = {\n  components: require(\"./components\"),\n  dijkstra: require(\"./dijkstra\"),\n  dijkstraAll: require(\"./dijkstra-all\"),\n  findCycles: require(\"./find-cycles\"),\n  floydWarshall: require(\"./floyd-warshall\"),\n  isAcyclic: require(\"./is-acyclic\"),\n  postorder: require(\"./postorder\"),\n  preorder: require(\"./preorder\"),\n  prim: require(\"./prim\"),\n  tarjan: require(\"./tarjan\"),\n  topsort: require(\"./topsort\")\n};\n","var _ = require(\"../lodash\");\n\nmodule.exports = components;\n\nfunction components(g) {\n  var visited = {};\n  var cmpts = [];\n  var cmpt;\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    cmpt.push(v);\n    _.each(g.successors(v), dfs);\n    _.each(g.predecessors(v), dfs);\n  }\n\n  _.each(g.nodes(), function(v) {\n    cmpt = [];\n    dfs(v);\n    if (cmpt.length) {\n      cmpts.push(cmpt);\n    }\n  });\n\n  return cmpts;\n}\n","var _ = require(\"../lodash\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = PriorityQueue;\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nfunction PriorityQueue() {\n  this._arr = [];\n  this._keyIndices = {};\n}\n\n/**\n * Returns the number of elements in the queue. Takes `O(1)` time.\n */\nPriorityQueue.prototype.size = function() {\n  return this._arr.length;\n};\n\n/**\n * Returns the keys that are in the queue. Takes `O(n)` time.\n */\nPriorityQueue.prototype.keys = function() {\n  return this._arr.map(function(x) { return x.key; });\n};\n\n/**\n * Returns `true` if **key** is in the queue and `false` if not.\n */\nPriorityQueue.prototype.has = function(key) {\n  return _.has(this._keyIndices, key);\n};\n\n/**\n * Returns the priority for **key**. If **key** is not present in the queue\n * then this function returns `undefined`. Takes `O(1)` time.\n *\n * @param {Object} key\n */\nPriorityQueue.prototype.priority = function(key) {\n  var index = this._keyIndices[key];\n  if (index !== undefined) {\n    return this._arr[index].priority;\n  }\n};\n\n/**\n * Returns the key for the minimum element in this queue. If the queue is\n * empty this function throws an Error. Takes `O(1)` time.\n */\nPriorityQueue.prototype.min = function() {\n  if (this.size() === 0) {\n    throw new Error(\"Queue underflow\");\n  }\n  return this._arr[0].key;\n};\n\n/**\n * Inserts a new key into the priority queue. If the key already exists in\n * the queue this function returns `false`; otherwise it will return `true`.\n * Takes `O(n)` time.\n *\n * @param {Object} key the key to add\n * @param {Number} priority the initial priority for the key\n */\nPriorityQueue.prototype.add = function(key, priority) {\n  var keyIndices = this._keyIndices;\n  key = String(key);\n  if (!_.has(keyIndices, key)) {\n    var arr = this._arr;\n    var index = arr.length;\n    keyIndices[key] = index;\n    arr.push({key: key, priority: priority});\n    this._decrease(index);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n */\nPriorityQueue.prototype.removeMin = function() {\n  this._swap(0, this._arr.length - 1);\n  var min = this._arr.pop();\n  delete this._keyIndices[min.key];\n  this._heapify(0);\n  return min.key;\n};\n\n/**\n * Decreases the priority for **key** to **priority**. If the new priority is\n * greater than the previous priority, this function will throw an Error.\n *\n * @param {Object} key the key for which to raise priority\n * @param {Number} priority the new priority for the key\n */\nPriorityQueue.prototype.decrease = function(key, priority) {\n  var index = this._keyIndices[key];\n  if (priority > this._arr[index].priority) {\n    throw new Error(\"New priority is greater than current priority. \" +\n        \"Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\n  }\n  this._arr[index].priority = priority;\n  this._decrease(index);\n};\n\nPriorityQueue.prototype._heapify = function(i) {\n  var arr = this._arr;\n  var l = 2 * i;\n  var r = l + 1;\n  var largest = i;\n  if (l < arr.length) {\n    largest = arr[l].priority < arr[largest].priority ? l : largest;\n    if (r < arr.length) {\n      largest = arr[r].priority < arr[largest].priority ? r : largest;\n    }\n    if (largest !== i) {\n      this._swap(i, largest);\n      this._heapify(largest);\n    }\n  }\n};\n\nPriorityQueue.prototype._decrease = function(index) {\n  var arr = this._arr;\n  var priority = arr[index].priority;\n  var parent;\n  while (index !== 0) {\n    parent = index >> 1;\n    if (arr[parent].priority < priority) {\n      break;\n    }\n    this._swap(index, parent);\n    index = parent;\n  }\n};\n\nPriorityQueue.prototype._swap = function(i, j) {\n  var arr = this._arr;\n  var keyIndices = this._keyIndices;\n  var origArrI = arr[i];\n  var origArrJ = arr[j];\n  arr[i] = origArrJ;\n  arr[j] = origArrI;\n  keyIndices[origArrJ.key] = i;\n  keyIndices[origArrI.key] = j;\n};\n","var dijkstra = require(\"./dijkstra\");\nvar _ = require(\"../lodash\");\n\nmodule.exports = dijkstraAll;\n\nfunction dijkstraAll(g, weightFunc, edgeFunc) {\n  return _.transform(g.nodes(), function(acc, v) {\n    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);\n  }, {});\n}\n","var _ = require(\"../lodash\");\nvar tarjan = require(\"./tarjan\");\n\nmodule.exports = findCycles;\n\nfunction findCycles(g) {\n  return _.filter(tarjan(g), function(cmpt) {\n    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));\n  });\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = tarjan;\n\nfunction tarjan(g) {\n  var index = 0;\n  var stack = [];\n  var visited = {}; // node id -> { onStack, lowlink, index }\n  var results = [];\n\n  function dfs(v) {\n    var entry = visited[v] = {\n      onStack: true,\n      lowlink: index,\n      index: index++\n    };\n    stack.push(v);\n\n    g.successors(v).forEach(function(w) {\n      if (!_.has(visited, w)) {\n        dfs(w);\n        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);\n      } else if (visited[w].onStack) {\n        entry.lowlink = Math.min(entry.lowlink, visited[w].index);\n      }\n    });\n\n    if (entry.lowlink === entry.index) {\n      var cmpt = [];\n      var w;\n      do {\n        w = stack.pop();\n        visited[w].onStack = false;\n        cmpt.push(w);\n      } while (v !== w);\n      results.push(cmpt);\n    }\n  }\n\n  g.nodes().forEach(function(v) {\n    if (!_.has(visited, v)) {\n      dfs(v);\n    }\n  });\n\n  return results;\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","var topsort = require(\"./topsort\");\n\nmodule.exports = isAcyclic;\n\nfunction isAcyclic(g) {\n  try {\n    topsort(g);\n  } catch (e) {\n    if (e instanceof topsort.CycleException) {\n      return false;\n    }\n    throw e;\n  }\n  return true;\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = topsort;\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing","var dfs = require(\"./dfs\");\n\nmodule.exports = postorder;\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, \"post\");\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = dfs;\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function(v) {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n\n    doDfs(g, v, order === \"post\", visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) { acc.push(v); }\n    _.each(navigation(v), function(w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) { acc.push(v); }\n  }\n}\n","var dfs = require(\"./dfs\");\n\nmodule.exports = preorder;\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, \"pre\");\n}\n","var _ = require(\"../lodash\");\nvar Graph = require(\"../graph\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function(v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar acyclic = require(\"./acyclic\");\nvar normalize = require(\"./normalize\");\nvar rank = require(\"./rank\");\nvar normalizeRanks = require(\"./util\").normalizeRanks;\nvar parentDummyChains = require(\"./parent-dummy-chains\");\nvar removeEmptyRanks = require(\"./util\").removeEmptyRanks;\nvar nestingGraph = require(\"./nesting-graph\");\nvar addBorderSegments = require(\"./add-border-segments\");\nvar coordinateSystem = require(\"./coordinate-system\");\nvar order = require(\"./order\");\nvar position = require(\"./position\");\nvar util = require(\"./util\");\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = layout;\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", function() {\n    var layoutGraph = \n      time(\"  buildLayoutGraph\", function() { return buildLayoutGraph(g); });\n    time(\"  runLayout\",        function() { runLayout(layoutGraph, time); });\n    time(\"  updateInputGraph\", function() { updateInputGraph(g, layoutGraph); });\n  });\n}\n\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", function() { makeSpaceForEdgeLabels(g); });\n  time(\"    removeSelfEdges\",        function() { removeSelfEdges(g); });\n  time(\"    acyclic\",                function() { acyclic.run(g); });\n  time(\"    nestingGraph.run\",       function() { nestingGraph.run(g); });\n  time(\"    rank\",                   function() { rank(util.asNonCompoundGraph(g)); });\n  time(\"    injectEdgeLabelProxies\", function() { injectEdgeLabelProxies(g); });\n  time(\"    removeEmptyRanks\",       function() { removeEmptyRanks(g); });\n  time(\"    nestingGraph.cleanup\",   function() { nestingGraph.cleanup(g); });\n  time(\"    normalizeRanks\",         function() { normalizeRanks(g); });\n  time(\"    assignRankMinMax\",       function() { assignRankMinMax(g); });\n  time(\"    removeEdgeLabelProxies\", function() { removeEdgeLabelProxies(g); });\n  time(\"    normalize.run\",          function() { normalize.run(g); });\n  time(\"    parentDummyChains\",      function() { parentDummyChains(g); });\n  time(\"    addBorderSegments\",      function() { addBorderSegments(g); });\n  time(\"    order\",                  function() { order(g); });\n  time(\"    insertSelfEdges\",        function() { insertSelfEdges(g); });\n  time(\"    adjustCoordinateSystem\", function() { coordinateSystem.adjust(g); });\n  time(\"    position\",               function() { position(g); });\n  time(\"    positionSelfEdges\",      function() { positionSelfEdges(g); });\n  time(\"    removeBorderNodes\",      function() { removeBorderNodes(g); });\n  time(\"    normalize.undo\",         function() { normalize.undo(g); });\n  time(\"    fixupEdgeLabelCoords\",   function() { fixupEdgeLabelCoords(g); });\n  time(\"    undoCoordinateSystem\",   function() { coordinateSystem.undo(g); });\n  time(\"    translateGraph\",         function() { translateGraph(g); });\n  time(\"    assignNodeIntersects\",   function() { assignNodeIntersects(g); });\n  time(\"    reversePoints\",          function() { reversePointsForReversedEdges(g); });\n  time(\"    acyclic.undo\",           function() { acyclic.undo(g); });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function(v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function(e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, \"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\nvar graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nvar nodeNumAttrs = [\"width\", \"height\"];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nvar edgeDefaults = {\n  minlen: 1, weight: 1, width: 0, height: 0,\n  labeloffset: 10, labelpos: \"r\"\n};\nvar edgeAttrs = [\"labelpos\"];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(_.merge({},\n    graphDefaults,\n    selectNumberAttrs(graph, graphNumAttrs),\n    _.pick(graph, graphAttrs)));\n\n  _.forEach(inputGraph.nodes(), function(v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function(e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(e, _.merge({},\n      edgeDefaults,\n      selectNumberAttrs(edge, edgeNumAttrs),\n      _.pick(edge, edgeAttrs)));\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function(p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, \"x\")) { edge.x -= minX; }\n    if (_.has(edge, \"y\")) { edge.y -= minY; }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (_.has(edge, \"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n      case \"l\": edge.x -= edge.width / 2 + edge.labeloffset; break;\n      case \"r\": edge.x += edge.width / 2 + edge.labeloffset; break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function(v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function(v) {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function(e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function(layer) {\n    var orderShift = 0;\n    _.forEach(layer, function(v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function(selfEdge) {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + (++orderShift),\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + 2 * dx / 3, y: y - dy },\n        { x: x + 5 * dx / 6, y: y - dy },\n        { x: x +     dx    , y: y },\n        { x: x + 5 * dx / 6, y: y + dy },\n        { x: x + 2 * dx / 3, y: y + dy }\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function(v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","/* global window */\n\nvar lodash;\n\nif (typeof require === \"function\") {\n  try {\n    lodash = {\n      cloneDeep: require(\"lodash/cloneDeep\"),\n      constant: require(\"lodash/constant\"),\n      defaults: require(\"lodash/defaults\"),\n      each: require(\"lodash/each\"),\n      filter: require(\"lodash/filter\"),\n      find: require(\"lodash/find\"),\n      flatten: require(\"lodash/flatten\"),\n      forEach: require(\"lodash/forEach\"),\n      forIn: require(\"lodash/forIn\"),\n      has:  require(\"lodash/has\"),\n      isUndefined: require(\"lodash/isUndefined\"),\n      last: require(\"lodash/last\"),\n      map: require(\"lodash/map\"),\n      mapValues: require(\"lodash/mapValues\"),\n      max: require(\"lodash/max\"),\n      merge: require(\"lodash/merge\"),\n      min: require(\"lodash/min\"),\n      minBy: require(\"lodash/minBy\"),\n      now: require(\"lodash/now\"),\n      pick: require(\"lodash/pick\"),\n      range: require(\"lodash/range\"),\n      reduce: require(\"lodash/reduce\"),\n      sortBy: require(\"lodash/sortBy\"),\n      uniqueId: require(\"lodash/uniqueId\"),\n      values: require(\"lodash/values\"),\n      zipObject: require(\"lodash/zipObject\"),\n    };\n  } catch (e) {\n    // continue regardless of error\n  }\n}\n\nif (!lodash) {\n  lodash = window._;\n}\n\nmodule.exports = lodash;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","var baseRest = require('./_baseRest'),\n    eq = require('./eq'),\n    isIterateeCall = require('./_isIterateeCall'),\n    keysIn = require('./keysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nmodule.exports = defaults;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","var baseFor = require('./_baseFor'),\n    castFunction = require('./_castFunction'),\n    keysIn = require('./keysIn');\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nmodule.exports = forIn;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n","var baseMerge = require('./_baseMerge'),\n    createAssigner = require('./_createAssigner');\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n","var Stack = require('./_Stack'),\n    assignMergeValue = require('./_assignMergeValue'),\n    baseFor = require('./_baseFor'),\n    baseMergeDeep = require('./_baseMergeDeep'),\n    isObject = require('./isObject'),\n    keysIn = require('./keysIn'),\n    safeGet = require('./_safeGet');\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    stack || (stack = new Stack);\n    if (isObject(srcValue)) {\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n","var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n","var baseGetTag = require('./_baseGetTag'),\n    getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n","/**\n * Gets the value at `key`, unless `key` is \"__proto__\" or \"constructor\".\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction safeGet(object, key) {\n  if (key === 'constructor' && typeof object[key] === 'function') {\n    return;\n  }\n\n  if (key == '__proto__') {\n    return;\n  }\n\n  return object[key];\n}\n\nmodule.exports = safeGet;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var baseExtremum = require('./_baseExtremum'),\n    baseLt = require('./_baseLt'),\n    identity = require('./identity');\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nmodule.exports = min;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nmodule.exports = baseLt;\n","var baseExtremum = require('./_baseExtremum'),\n    baseIteratee = require('./_baseIteratee'),\n    baseLt = require('./_baseLt');\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nmodule.exports = minBy;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var basePick = require('./_basePick'),\n    flatRest = require('./_flatRest');\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n","var basePickBy = require('./_basePickBy'),\n    hasIn = require('./hasIn');\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n","var baseGet = require('./_baseGet'),\n    baseSet = require('./_baseSet'),\n    castPath = require('./_castPath');\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","var flatten = require('./flatten'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nmodule.exports = flatRest;\n","var createRange = require('./_createRange');\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nmodule.exports = range;\n","var baseRange = require('./_baseRange'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toFinite = require('./toFinite');\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nmodule.exports = createRange;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nmodule.exports = baseRange;\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","var toString = require('./toString');\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","var assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n","\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar greedyFAS = require(\"./greedy-fas\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\nfunction run(g) {\n  var fas = (g.graph().acyclicer === \"greedy\"\n    ? greedyFAS(g, weightFn(g))\n    : dfsFAS(g));\n  _.forEach(fas, function(e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId(\"rev\"));\n  });\n\n  function weightFn(g) {\n    return function(e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function(e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function(e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","var _ = require(\"./lodash\");\nvar Graph = require(\"./graphlib\").Graph;\nvar List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(_.map(results, function(e) {\n    return g.outEdges(e.v, e.w);\n  }), true);\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }\n    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function(v) {\n    fasGraph.setNode(v, { v: v, \"in\": 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function(e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)[\"in\"]  += weight);\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function(v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\n","/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nmodule.exports = List;\n\nfunction List() {\n  var sentinel = {};\n  sentinel._next = sentinel._prev = sentinel;\n  this._sentinel = sentinel;\n}\n\nList.prototype.dequeue = function() {\n  var sentinel = this._sentinel;\n  var entry = sentinel._prev;\n  if (entry !== sentinel) {\n    unlink(entry);\n    return entry;\n  }\n};\n\nList.prototype.enqueue = function(entry) {\n  var sentinel = this._sentinel;\n  if (entry._prev && entry._next) {\n    unlink(entry);\n  }\n  entry._next = sentinel._next;\n  sentinel._next._prev = entry;\n  sentinel._next = entry;\n  entry._prev = sentinel;\n};\n\nList.prototype.toString = function() {\n  var strs = [];\n  var sentinel = this._sentinel;\n  var curr = sentinel._prev;\n  while (curr !== sentinel) {\n    strs.push(JSON.stringify(curr, filterOutLinks));\n    curr = curr._prev;\n  }\n  return \"[\" + strs.join(\", \") + \"]\";\n};\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0, height: 0,\n      edgeLabel: edgeLabel, edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","/* eslint \"no-console\": off */\n\n\"use strict\";\n\nvar _ = require(\"./lodash\");\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  addDummyNode: addDummyNode,\n  simplify: simplify,\n  asNonCompoundGraph: asNonCompoundGraph,\n  successorWeights: successorWeights,\n  predecessorWeights: predecessorWeights,\n  intersectRect: intersectRect,\n  buildLayerMatrix: buildLayerMatrix,\n  normalizeRanks: normalizeRanks,\n  removeEmptyRanks: removeEmptyRanks,\n  addBorderNode: addBorderNode,\n  maxRank: maxRank,\n  partition: partition,\n  time: time,\n  notime: notime\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });\n  _.forEach(g.edges(), function(e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function(v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function(e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function(e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function(v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function(e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (_.has(node, \"rank\")) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));\n\n  var layers = [];\n  _.forEach(g.nodes(), function(v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function(vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function(v) { g.node(v).rank += delta; });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, \"border\", node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(_.map(g.nodes(), function(v) {\n    var rank = g.node(v).rank;\n    if (!_.isUndefined(rank)) {\n      return rank;\n    }\n  }));\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function(value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + \" time: \" + (_.now() - start) + \"ms\");\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","\"use strict\";\n\nvar rankUtil = require(\"./util\");\nvar longestPath = rankUtil.longestPath;\nvar feasibleTree = require(\"./feasible-tree\");\nvar networkSimplex = require(\"./network-simplex\");\n\nmodule.exports = rank;\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch(g.graph().ranker) {\n  case \"network-simplex\": networkSimplexRanker(g); break;\n  case \"tight-tree\": tightTreeRanker(g); break;\n  case \"longest-path\": longestPathRanker(g); break;\n  default: networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(_.map(g.outEdges(v), function(e) {\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n        rank === undefined || // return value of _.map([]) for Lodash 4\n        rank === null) { // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function(e) {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar feasibleTree = require(\"./feasible-tree\");\nvar slack = require(\"./util\").slack;\nvar initRank = require(\"./util\").longestPath;\nvar preorder = require(\"../graphlib\").alg.preorder;\nvar postorder = require(\"../graphlib\").alg.postorder;\nvar simplify = require(\"../util\").simplify;\n\nmodule.exports = networkSimplex;\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  initRank(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function(v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function(e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function(w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function(e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function(edge) {\n    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n           flip !== isDescendant(t, t.node(edge.w), tailLabel);\n  });\n\n  return _.minBy(candidates, function(edge) { return slack(g, edge); });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function(v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","var _ = require(\"./lodash\");\n\nmodule.exports = parentDummyChains;\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca &&\n               g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 &&\n               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent &&\n           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","var _ = require(\"./lodash\");\nvar util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  cleanup: cleanup\n};\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, \"_bt\");\n  var bottom = util.addBorderNode(g, \"_bb\");\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function(child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function(v) { dfs(v, 1); });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(g.edges(), function(acc, e) {\n    return acc + g.edge(e).weight;\n  }, 0);\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","var _ = require(\"./lodash\");\nvar util = require(\"./util\");\n\nmodule.exports = addBorderSegments;\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, \"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1;\n        rank < maxRank;\n        ++rank) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","\"use strict\";\n\nvar _ = require(\"./lodash\");\n\nmodule.exports = {\n  adjust: adjust,\n  undo: undo\n};\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"bt\" || rankDir === \"rl\") {\n    reverseY(g);\n  }\n\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });\n  _.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });\n\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, \"y\")) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });\n\n  _.forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, \"x\")) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar initOrder = require(\"./init-order\");\nvar crossCount = require(\"./cross-count\");\nvar sortSubgraph = require(\"./sort-subgraph\");\nvar buildLayerGraph = require(\"./build-layer-graph\");\nvar addSubgraphConstraints = require(\"./add-subgraph-constraints\");\nvar Graph = require(\"../graphlib\").Graph;\nvar util = require(\"../util\");\n\nmodule.exports = order;\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), \"inEdges\"),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), \"outEdges\");\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function(rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function(lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function(v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = initOrder;\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function(v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));\n  var layers = _.map(_.range(maxRank + 1), function() { return []; });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = crossCount;\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(southLayer,\n    _.map(southLayer, function (v, i) { return i; }));\n  var southEntries = _.flatten(_.map(northLayer, function(v) {\n    return _.sortBy(_.map(g.outEdges(v), function(e) {\n      return { pos: southPos[e.w], weight: g.edge(e).weight };\n    }), \"pos\");\n  }), true);\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function() { return 0; });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(southEntries.forEach(function(entry) {\n    var index = entry.pos + firstIndex;\n    tree[index] += entry.weight;\n    var weightSum = 0;\n    while (index > 0) {\n      if (index % 2) {\n        weightSum += tree[index + 1];\n      }\n      index = (index - 1) >> 1;\n      tree[index] += entry.weight;\n    }\n    cc += entry.weight * weightSum;\n  }));\n\n  return cc;\n}\n","var _ = require(\"../lodash\");\nvar barycenter = require(\"./barycenter\");\nvar resolveConflicts = require(\"./resolve-conflicts\");\nvar sort = require(\"./sort\");\n\nmodule.exports = sortSubgraph;\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight: undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function(w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function(entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, \"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br], true);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, \"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter = (result.barycenter * result.weight +\n                           blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function(entry) {\n    entry.vs = _.flatten(entry.vs.map(function(v) {\n      if (subgraphs[v]) {\n        return subgraphs[v].vs;\n      }\n      return v;\n    }), true);\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter = (target.barycenter * target.weight +\n                         other.barycenter * other.weight) /\n                        (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = barycenter;\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function(v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(inV, function(acc, e) {\n        var edge = g.edge(e),\n          nodeU = g.node(e.v);\n        return {\n          sum: acc.sum + (edge.weight * nodeU.order),\n          weight: acc.weight + edge.weight\n        };\n      }, { sum: 0, weight: 0 });\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight\n      };\n    }\n  });\n}\n\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\n\nmodule.exports = resolveConflicts;\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function(entry, i) {\n    var tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v],\n      i: i\n    };\n    if (!_.isUndefined(entry.barycenter)) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function(e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function(entry) {\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function(uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (_.isUndefined(uEntry.barycenter) ||\n          _.isUndefined(vEntry.barycenter) ||\n          uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function(wEntry) {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry[\"in\"].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(_.filter(entries, function(entry) { return !entry.merged; }),\n    function(entry) {\n      return _.pick(entry, [\"vs\", \"i\", \"barycenter\", \"weight\"]);\n    });\n\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","var _ = require(\"../lodash\");\nvar util = require(\"../util\");\n\nmodule.exports = sort;\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function(entry) {\n    return _.has(entry, \"barycenter\");\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs, true) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function(entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","var _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\n\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true }).setGraph({ root: root })\n      .setDefaultNodeLabel(function(v) { return g.node(v); });\n\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function(e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, \"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId(\"_root\"))));\n  return v;\n}\n","var _ = require(\"../lodash\");\n\nmodule.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function(v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar util = require(\"../util\");\nvar positionX = require(\"./bk\").positionX;\n\nmodule.exports = position;\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forEach(positionX(g), function(x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function(layer) {\n    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));\n    _.forEach(layer, function(v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n\n","\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {\n          _.forEach(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function(layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function(acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function(layer) {\n    var u;\n    _.forEach(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach([\"u\", \"d\"], function(vert) {\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === \"l\" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : _.values(layering).reverse();\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = _.map(adjustedLayering, function(inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = _.mapValues(xs, function(x) { return -x; });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","var _ = require(\"./lodash\");\nvar util = require(\"./util\");\nvar Graph = require(\"./graphlib\").Graph;\n\nmodule.exports = {\n  debugOrdering: debugOrdering\n};\n\n/* istanbul ignore next */\nfunction debugOrdering(g) {\n  var layerMatrix = util.buildLayerMatrix(g);\n\n  var h = new Graph({ compound: true, multigraph: true }).setGraph({});\n\n  _.forEach(g.nodes(), function(v) {\n    h.setNode(v, { label: v });\n    h.setParent(v, \"layer\" + g.node(v).rank);\n  });\n\n  _.forEach(g.edges(), function(e) {\n    h.setEdge(e.v, e.w, {}, e.name);\n  });\n\n  _.forEach(layerMatrix, function(layer, i) {\n    var layerV = \"layer\" + i;\n    h.setNode(layerV, { rank: \"same\" });\n    _.reduce(layer, function(u, v) {\n      h.setEdge(u, v, { style: \"invis\" });\n      return v;\n    });\n  });\n\n  return h;\n}\n","module.exports = \"0.8.5\";\n","import { __awaiter } from \"tslib\";\nimport { Graph } from \"@antv/graphlib\";\nimport * as Comlink from \"comlink\";\nimport { registry } from \"./registry\";\nimport { isLayoutWithIterations } from \"./types\";\nlet currentLayout;\nconst obj = {\n    stopLayout() {\n        if (currentLayout === null || currentLayout === void 0 ? void 0 : currentLayout.stop) {\n            currentLayout.stop();\n        }\n    },\n    calculateLayout(payload, transferables) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { layout: { id, options, iterations }, nodes, edges, } = payload;\n            // Sync graph on the worker side.\n            // TODO: Use transferable objects like ArrayBuffer for nodes & edges,\n            // in which case we don't need the whole graph.\n            // @see https://github.com/graphology/graphology/blob/master/src/layout-noverlap/webworker.tpl.js#L32\n            const graph = new Graph({\n                nodes,\n                edges,\n            });\n            /**\n             * Create layout instance on the worker side.\n             */\n            const layoutCtor = registry[id];\n            if (layoutCtor) {\n                currentLayout = new layoutCtor(options);\n            }\n            else {\n                throw new Error(`Unknown layout id: ${id}`);\n            }\n            let positions = yield currentLayout.execute(graph);\n            if (isLayoutWithIterations(currentLayout)) {\n                currentLayout.stop();\n                positions = currentLayout.tick(iterations);\n            }\n            return [positions, transferables];\n        });\n    },\n};\nComlink.expose(obj);\n//# sourceMappingURL=worker.js.map",null,"/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n    return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nvar ownKeys = function(o) {\r\n    ownKeys = Object.getOwnPropertyNames || function (o) {\r\n        var ar = [];\r\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n        return ar;\r\n    };\r\n    return ownKeys(o);\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose, inner;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n            if (async) inner = dispose;\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    var r, s = 0;\r\n    function next() {\r\n        while (r = env.stack.pop()) {\r\n            try {\r\n                if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                if (r.dispose) {\r\n                    var result = r.dispose.call(r.value);\r\n                    if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                }\r\n                else s |= 1;\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\r\n    if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n        return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n            return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n        });\r\n    }\r\n    return path;\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n};\r\n","import EventEmitter from '@antv/event-emitter';\nimport { GraphView } from './graphView';\nimport { doBFS, doDFS } from './utils/traverse';\nexport class Graph extends EventEmitter {\n    nodeMap = new Map();\n    edgeMap = new Map();\n    inEdgesMap = new Map();\n    outEdgesMap = new Map();\n    bothEdgesMap = new Map();\n    treeIndices = new Map();\n    changes = [];\n    batchCount = 0;\n    /**\n     * This function is called with a {@link GraphChangedEvent} each time a graph change happened.\n     *\n     * `event.changes` contains all the graph changes in order since last `onChanged`.\n     */\n    onChanged = () => {\n        // Do nothing.\n    };\n    /**\n     * Create a new Graph instance.\n     * @param options - The options to initialize a graph. See {@link GraphOptions}.\n     *\n     * ```ts\n     * const graph = new Graph({\n     *   // Optional, initial nodes.\n     *   nodes: [\n     *     // Each node has a unique ID.\n     *     { id: 'A', foo: 1 },\n     *     { id: 'B', foo: 1 },\n     *   ],\n     *   // Optional, initial edges.\n     *   edges: [\n     *     { id: 'C', source: 'B', target: 'B', weight: 1 },\n     *   ],\n     *   // Optional, called with a GraphChangedEvent.\n     *   onChanged: (event) => {\n     *     console.log(event);\n     *   }\n     * });\n     * ```\n     */\n    constructor(options) {\n        super();\n        if (!options)\n            return;\n        if (options.nodes)\n            this.addNodes(options.nodes);\n        if (options.edges)\n            this.addEdges(options.edges);\n        if (options.tree)\n            this.addTree(options.tree);\n        if (options.onChanged)\n            this.onChanged = options.onChanged;\n    }\n    /**\n     * Batch several graph changes into one.\n     *\n     * Make several changes, but dispatch only one ChangedEvent at the end of batch:\n     * ```ts\n     * graph.batch(() => {\n     *   graph.addNodes([]);\n     *   graph.addEdges([]);\n     * });\n     * ```\n     *\n     * Batches can be nested. Only the outermost batch will dispatch a ChangedEvent:\n     * ```ts\n     * graph.batch(() => {\n     *   graph.addNodes([]);\n     *   graph.batch(() => {\n     *     graph.addEdges([]);\n     *   });\n     * });\n     * ```\n     */\n    batch = (fn) => {\n        this.batchCount += 1;\n        fn();\n        this.batchCount -= 1;\n        if (!this.batchCount) {\n            this.commit();\n        }\n    };\n    /**\n     * Reset changes and dispatch a ChangedEvent.\n     */\n    commit() {\n        const changes = this.changes;\n        this.changes = [];\n        const event = {\n            graph: this,\n            changes,\n        };\n        this.emit('changed', event);\n        this.onChanged(event);\n    }\n    /**\n     * Reduce the number of ordered graph changes by dropping or merging unnecessary changes.\n     *\n     * For example, if we update a node and remove it in a batch:\n     *\n     * ```ts\n     * graph.batch(() => {\n     *   graph.updateNodeData('A', 'foo', 2);\n     *   graph.removeNode('A');\n     * });\n     * ```\n     *\n     * We get 2 atomic graph changes like\n     *\n     * ```ts\n     * [\n     *   { type: 'NodeDataUpdated', id: 'A', propertyName: 'foo', oldValue: 1, newValue: 2 },\n     *   { type: 'NodeRemoved', value: { id: 'A', data: { foo: 2 } },\n     * ]\n     * ```\n     *\n     * Since node 'A' has been removed, we actually have no need to handle with NodeDataUpdated change.\n     *\n     * `reduceChanges()` here helps us remove such changes.\n     */\n    reduceChanges(changes) {\n        let mergedChanges = [];\n        changes.forEach((change) => {\n            switch (change.type) {\n                case 'NodeRemoved': {\n                    // NodeAdded: A added.\n                    // NodeDataUpdated: A changed.\n                    // TreeStructureChanged: A's parent changed.\n                    // NodeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n                    let isNewlyAdded = false;\n                    mergedChanges = mergedChanges.filter((pastChange) => {\n                        if (pastChange.type === 'NodeAdded') {\n                            const sameId = pastChange.value.id === change.value.id;\n                            if (sameId) {\n                                isNewlyAdded = true;\n                            }\n                            return !sameId;\n                        }\n                        else if (pastChange.type === 'NodeDataUpdated') {\n                            return pastChange.id !== change.value.id;\n                        }\n                        else if (pastChange.type === 'TreeStructureChanged') {\n                            return pastChange.nodeId !== change.value.id;\n                        }\n                        return true;\n                    });\n                    if (!isNewlyAdded) {\n                        mergedChanges.push(change);\n                    }\n                    break;\n                }\n                case 'EdgeRemoved': {\n                    // EdgeAdded: A added.\n                    // EdgeDataUpdated: A changed.\n                    // EdgeDataUpdated: A's source/target changed.\n                    // EdgeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n                    let isNewlyAdded = false;\n                    mergedChanges = mergedChanges.filter((pastChange) => {\n                        if (pastChange.type === 'EdgeAdded') {\n                            const sameId = pastChange.value.id === change.value.id;\n                            if (sameId) {\n                                isNewlyAdded = true;\n                            }\n                            return !sameId;\n                        }\n                        else if (pastChange.type === 'EdgeDataUpdated' ||\n                            pastChange.type === 'EdgeUpdated') {\n                            return pastChange.id !== change.value.id;\n                        }\n                        return true;\n                    });\n                    if (!isNewlyAdded) {\n                        mergedChanges.push(change);\n                    }\n                    break;\n                }\n                case 'NodeDataUpdated':\n                case 'EdgeDataUpdated':\n                case 'EdgeUpdated': {\n                    // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 1, newValue: 2 }.\n                    // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 2, newValue: 3 }.\n                    // 👆 Could be merged as { id: A, propertyName: 'foo', oldValue: 1, newValue: 3 }.\n                    const index = mergedChanges.findIndex((pastChange) => {\n                        return (pastChange.type === change.type &&\n                            pastChange.id === change.id &&\n                            (change.propertyName === undefined ||\n                                pastChange.propertyName === change.propertyName));\n                    });\n                    const existingChange = mergedChanges[index];\n                    if (existingChange) {\n                        if (change.propertyName !== undefined) {\n                            // The incoming change is of the same property of existing change.\n                            existingChange.newValue = change.newValue;\n                        }\n                        else {\n                            // The incoming change is a whole data override.\n                            mergedChanges.splice(index, 1);\n                            mergedChanges.push(change);\n                        }\n                    }\n                    else {\n                        mergedChanges.push(change);\n                    }\n                    break;\n                }\n                case 'TreeStructureDetached': {\n                    // TreeStructureAttached\n                    // TreeStructureChanged\n                    // TreeStructureDetached 👈🏻 Since the tree struct was detached, above 2 changes may be ignored.\n                    mergedChanges = mergedChanges.filter((pastChange) => {\n                        if (pastChange.type === 'TreeStructureAttached') {\n                            return pastChange.treeKey !== change.treeKey;\n                        }\n                        else if (pastChange.type === 'TreeStructureChanged') {\n                            return pastChange.treeKey !== change.treeKey;\n                        }\n                        return true;\n                    });\n                    mergedChanges.push(change);\n                    break;\n                }\n                case 'TreeStructureChanged': {\n                    const existingChange = mergedChanges.find((pastChange) => {\n                        return (pastChange.type === 'TreeStructureChanged' &&\n                            pastChange.treeKey === change.treeKey &&\n                            pastChange.nodeId === change.nodeId);\n                    });\n                    if (existingChange) {\n                        existingChange.newParentId =\n                            change.newParentId;\n                    }\n                    else {\n                        mergedChanges.push(change);\n                    }\n                    break;\n                }\n                default:\n                    mergedChanges.push(change);\n                    break;\n            }\n        });\n        return mergedChanges;\n    }\n    // ================= Node =================\n    checkNodeExistence(id) {\n        this.getNode(id);\n    }\n    /**\n     * Check if a node exists in the graph.\n     * @group NodeMethods\n     */\n    hasNode(id) {\n        return this.nodeMap.has(id);\n    }\n    /**\n     * Tell if two nodes are neighbors.\n     * @group NodeMethods\n     */\n    areNeighbors(firstNodeId, secondNodeId) {\n        return this.getNeighbors(secondNodeId).some((neighbor) => neighbor.id === firstNodeId);\n    }\n    /**\n     * Get the node data with given ID.\n     * @group NodeMethods\n     */\n    getNode(id) {\n        const node = this.nodeMap.get(id);\n        if (!node) {\n            throw new Error('Node not found for id: ' + id);\n        }\n        return node;\n    }\n    /**\n     * Given a node ID, find all edges of the node.\n     * @param id - ID of the node\n     * @param direction - Edge direction, defaults to 'both'.\n     * @group NodeMethods\n     */\n    getRelatedEdges(id, direction) {\n        this.checkNodeExistence(id);\n        if (direction === 'in') {\n            const inEdges = this.inEdgesMap.get(id);\n            return Array.from(inEdges);\n        }\n        else if (direction === 'out') {\n            const outEdges = this.outEdgesMap.get(id);\n            return Array.from(outEdges);\n        }\n        else {\n            const bothEdges = this.bothEdgesMap.get(id);\n            return Array.from(bothEdges);\n        }\n    }\n    /**\n     * Get the degree of the given node.\n     * @group NodeMethods\n     */\n    getDegree(id, direction) {\n        return this.getRelatedEdges(id, direction).length;\n    }\n    /**\n     * Get all successors of the given node.\n     */\n    getSuccessors(id) {\n        const outEdges = this.getRelatedEdges(id, 'out');\n        const targets = outEdges.map((edge) => this.getNode(edge.target));\n        return Array.from(new Set(targets));\n    }\n    /**\n     * Get all predecessors of the given node.\n     */\n    getPredecessors(id) {\n        const inEdges = this.getRelatedEdges(id, 'in');\n        const sources = inEdges.map((edge) => this.getNode(edge.source));\n        return Array.from(new Set(sources));\n    }\n    /**\n     * Given a node ID, find its neighbors.\n     * @param id - ID of the node\n     * @group NodeMethods\n     */\n    getNeighbors(id) {\n        const predecessors = this.getPredecessors(id);\n        const successors = this.getSuccessors(id);\n        return Array.from(new Set([...predecessors, ...successors]));\n    }\n    doAddNode(node) {\n        if (this.hasNode(node.id)) {\n            throw new Error('Node already exists: ' + node.id);\n        }\n        this.nodeMap.set(node.id, node);\n        this.inEdgesMap.set(node.id, new Set());\n        this.outEdgesMap.set(node.id, new Set());\n        this.bothEdgesMap.set(node.id, new Set());\n        this.treeIndices.forEach((tree) => {\n            tree.childrenMap.set(node.id, new Set());\n        });\n        this.changes.push({ type: 'NodeAdded', value: node });\n    }\n    /**\n     * Add all nodes of the given array, or iterable, into the graph.\n     * @group NodeMethods\n     */\n    addNodes(nodes) {\n        this.batch(() => {\n            for (const node of nodes) {\n                this.doAddNode(node);\n            }\n        });\n    }\n    /**\n     * Add a single node into the graph.\n     * @group NodeMethods\n     */\n    addNode(node) {\n        this.addNodes([node]);\n    }\n    doRemoveNode(id) {\n        const node = this.getNode(id);\n        const bothEdges = this.bothEdgesMap.get(id);\n        bothEdges?.forEach((edge) => this.doRemoveEdge(edge.id));\n        this.nodeMap.delete(id);\n        this.treeIndices.forEach((tree) => {\n            tree.childrenMap.get(id)?.forEach((child) => {\n                tree.parentMap.delete(child.id);\n            });\n            const parent = tree.parentMap.get(id);\n            if (parent)\n                tree.childrenMap.get(parent.id)?.delete(node);\n            tree.parentMap.delete(id);\n            tree.childrenMap.delete(id);\n        });\n        this.bothEdgesMap.delete(id);\n        this.inEdgesMap.delete(id);\n        this.outEdgesMap.delete(id);\n        this.changes.push({ type: 'NodeRemoved', value: node });\n    }\n    /**\n     * Remove nodes and their attached edges from the graph.\n     * @group NodeMethods\n     */\n    removeNodes(idList) {\n        this.batch(() => {\n            idList.forEach((id) => this.doRemoveNode(id));\n        });\n    }\n    /**\n     * Remove a single node and its attached edges from the graph.\n     * @group NodeMethods\n     */\n    removeNode(id) {\n        this.removeNodes([id]);\n    }\n    updateNodeDataProperty(id, propertyName, value) {\n        const node = this.getNode(id);\n        this.batch(() => {\n            const oldValue = node.data[propertyName];\n            const newValue = value;\n            node.data[propertyName] = newValue;\n            this.changes.push({\n                type: 'NodeDataUpdated',\n                id,\n                propertyName,\n                oldValue,\n                newValue,\n            });\n        });\n    }\n    /**\n     * Like Object.assign, merge all properties of `path` to the node data.\n     * @param id Node ID.\n     * @param patch A data object to merge.\n     */\n    mergeNodeData(id, patch) {\n        this.batch(() => {\n            Object.entries(patch).forEach(([propertyName, value]) => {\n                this.updateNodeDataProperty(id, propertyName, value);\n            });\n        });\n    }\n    updateNodeData(...args) {\n        const id = args[0];\n        const node = this.getNode(id);\n        if (typeof args[1] === 'string') {\n            // id, propertyName, value\n            this.updateNodeDataProperty(id, args[1], args[2]);\n            return;\n        }\n        let data;\n        if (typeof args[1] === 'function') {\n            // id, update\n            const update = args[1];\n            data = update(node.data);\n        }\n        else if (typeof args[1] === 'object') {\n            // id, data\n            data = args[1];\n        }\n        this.batch(() => {\n            const oldValue = node.data;\n            const newValue = data;\n            node.data = data;\n            this.changes.push({\n                type: 'NodeDataUpdated',\n                id,\n                oldValue,\n                newValue,\n            });\n        });\n    }\n    // ================= Edge =================\n    checkEdgeExistence(id) {\n        if (!this.hasEdge(id)) {\n            throw new Error('Edge not found for id: ' + id);\n        }\n    }\n    /**\n     * Check if an edge exists in the graph.\n     * @group NodeMethods\n     */\n    hasEdge(id) {\n        return this.edgeMap.has(id);\n    }\n    /**\n     * Get the edge data with given ID.\n     * @group EdgeMethods\n     */\n    getEdge(id) {\n        this.checkEdgeExistence(id);\n        return this.edgeMap.get(id);\n    }\n    /**\n     * Get the edge, the source node, and the target node by an edge ID.\n     * @group EdgeMethods\n     */\n    getEdgeDetail(id) {\n        const edge = this.getEdge(id);\n        return {\n            edge,\n            source: this.getNode(edge.source),\n            target: this.getNode(edge.target),\n        };\n    }\n    doAddEdge(edge) {\n        if (this.hasEdge(edge.id)) {\n            throw new Error('Edge already exists: ' + edge.id);\n        }\n        this.checkNodeExistence(edge.source);\n        this.checkNodeExistence(edge.target);\n        this.edgeMap.set(edge.id, edge);\n        const inEdges = this.inEdgesMap.get(edge.target);\n        const outEdges = this.outEdgesMap.get(edge.source);\n        const bothEdgesOfSource = this.bothEdgesMap.get(edge.source);\n        const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target);\n        inEdges.add(edge);\n        outEdges.add(edge);\n        bothEdgesOfSource.add(edge);\n        bothEdgesOfTarget.add(edge);\n        this.changes.push({ type: 'EdgeAdded', value: edge });\n    }\n    /**\n     * Add all edges of the given iterable(an array, a set, etc.) into the graph.\n     * @group EdgeMethods\n     */\n    addEdges(edges) {\n        this.batch(() => {\n            for (const edge of edges) {\n                this.doAddEdge(edge);\n            }\n        });\n    }\n    /**\n     * Add a single edge pointing from `source` to `target` into the graph.\n     *\n     * ```ts\n     * graph.addNode({ id: 'NodeA' });\n     * graph.addNode({ id: 'NodeB' });\n     * graph.addEdge({ id: 'EdgeA', source: 'NodeA', target: 'NodeB' });\n     * ```\n     *\n     * If `source` or `target` were not found in the current graph, it throws an Error.\n     * @group EdgeMethods\n     */\n    addEdge(edge) {\n        this.addEdges([edge]);\n    }\n    doRemoveEdge(id) {\n        const edge = this.getEdge(id);\n        const outEdges = this.outEdgesMap.get(edge.source);\n        const inEdges = this.inEdgesMap.get(edge.target);\n        const bothEdgesOfSource = this.bothEdgesMap.get(edge.source);\n        const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target);\n        outEdges.delete(edge);\n        inEdges.delete(edge);\n        bothEdgesOfSource.delete(edge);\n        bothEdgesOfTarget.delete(edge);\n        this.edgeMap.delete(id);\n        this.changes.push({ type: 'EdgeRemoved', value: edge });\n    }\n    /**\n     * Remove edges whose id was included in the given id list.\n     * @group EdgeMethods\n     */\n    removeEdges(idList) {\n        this.batch(() => {\n            idList.forEach((id) => this.doRemoveEdge(id));\n        });\n    }\n    /**\n     * Remove a single edge of the given id.\n     * @group EdgeMethods\n     */\n    removeEdge(id) {\n        this.removeEdges([id]);\n    }\n    /**\n     * Change the source of an edge. The source must be found in current graph.\n     * @group EdgeMethods\n     */\n    updateEdgeSource(id, source) {\n        const edge = this.getEdge(id);\n        this.checkNodeExistence(source);\n        const oldSource = edge.source;\n        const newSource = source;\n        this.outEdgesMap.get(oldSource).delete(edge);\n        this.bothEdgesMap.get(oldSource).delete(edge);\n        this.outEdgesMap.get(newSource).add(edge);\n        this.bothEdgesMap.get(newSource).add(edge);\n        edge.source = source;\n        this.batch(() => {\n            this.changes.push({\n                type: 'EdgeUpdated',\n                id,\n                propertyName: 'source',\n                oldValue: oldSource,\n                newValue: newSource,\n            });\n        });\n    }\n    /**\n     * Change the target of an edge. The target must be found in current graph.\n     * @group EdgeMethods\n     */\n    updateEdgeTarget(id, target) {\n        const edge = this.getEdge(id);\n        this.checkNodeExistence(target);\n        const oldTarget = edge.target;\n        const newTarget = target;\n        this.inEdgesMap.get(oldTarget).delete(edge);\n        this.bothEdgesMap.get(oldTarget).delete(edge);\n        this.inEdgesMap.get(newTarget).add(edge);\n        this.bothEdgesMap.get(newTarget).add(edge);\n        edge.target = target;\n        this.batch(() => {\n            this.changes.push({\n                type: 'EdgeUpdated',\n                id,\n                propertyName: 'target',\n                oldValue: oldTarget,\n                newValue: newTarget,\n            });\n        });\n    }\n    updateEdgeDataProperty(id, propertyName, value) {\n        const edge = this.getEdge(id);\n        this.batch(() => {\n            const oldValue = edge.data[propertyName];\n            const newValue = value;\n            edge.data[propertyName] = newValue;\n            this.changes.push({\n                type: 'EdgeDataUpdated',\n                id,\n                propertyName,\n                oldValue,\n                newValue,\n            });\n        });\n    }\n    updateEdgeData(...args) {\n        const id = args[0];\n        const edge = this.getEdge(id);\n        if (typeof args[1] === 'string') {\n            // id, propertyName, value\n            this.updateEdgeDataProperty(id, args[1], args[2]);\n            return;\n        }\n        let data;\n        if (typeof args[1] === 'function') {\n            // id, update\n            const update = args[1];\n            data = update(edge.data);\n        }\n        else if (typeof args[1] === 'object') {\n            // id, data\n            data = args[1];\n        }\n        this.batch(() => {\n            const oldValue = edge.data;\n            const newValue = data;\n            edge.data = data;\n            this.changes.push({\n                type: 'EdgeDataUpdated',\n                id,\n                oldValue,\n                newValue,\n            });\n        });\n    }\n    /**\n     * @group EdgeMethods\n     */\n    mergeEdgeData(id, patch) {\n        this.batch(() => {\n            Object.entries(patch).forEach(([propertyName, value]) => {\n                this.updateEdgeDataProperty(id, propertyName, value);\n            });\n        });\n    }\n    // ================= Tree =================\n    checkTreeExistence(treeKey) {\n        if (!this.hasTreeStructure(treeKey)) {\n            throw new Error('Tree structure not found for treeKey: ' + treeKey);\n        }\n    }\n    hasTreeStructure(treeKey) {\n        return this.treeIndices.has(treeKey);\n    }\n    /**\n     * Attach a new tree structure representing the hierarchy of all nodes in the graph.\n     * @param treeKey A unique key of the tree structure. You can attach multiple tree structures with different keys.\n     *\n     * ```ts\n     * const graph = new Graph({\n     *   nodes: [{ id: 1 }, { id: 2 }, { id: 3 }],\n     * });\n     * graph.attachTreeStructure('Inheritance');\n     * graph.setParent(2, 1, 'Inheritance');\n     * graph.setParent(3, 1, 'Inheritance');\n     * graph.getRoots('Inheritance'); // [1]\n     * graph.getChildren(1, 'Inheritance'); // [2,3]\n     * ```\n     * @group TreeMethods\n     */\n    attachTreeStructure(treeKey) {\n        if (this.treeIndices.has(treeKey)) {\n            // Already attached.\n            return;\n        }\n        this.treeIndices.set(treeKey, {\n            parentMap: new Map(),\n            childrenMap: new Map(),\n        });\n        this.batch(() => {\n            this.changes.push({\n                type: 'TreeStructureAttached',\n                treeKey,\n            });\n        });\n    }\n    /**\n     * Detach the tree structure of the given tree key from the graph.\n     *\n     * ```ts\n     * graph.detachTreeStructure('Inheritance');\n     * graph.getRoots('Inheritance'); // Error!\n     * ```\n     * @group TreeMethods\n     */\n    detachTreeStructure(treeKey) {\n        this.checkTreeExistence(treeKey);\n        this.treeIndices.delete(treeKey);\n        this.batch(() => {\n            this.changes.push({\n                type: 'TreeStructureDetached',\n                treeKey,\n            });\n        });\n    }\n    /**\n     * Traverse the given tree data, add each node into the graph, then attach the tree structure.\n     *\n     * ```ts\n     * graph.addTree({\n     *   id: 1,\n     *   children: [\n     *     { id: 2 },\n     *     { id: 3 },\n     *   ],\n     * }, 'Inheritance');\n     * graph.getRoots('Inheritance'); // [1]\n     * graph.getChildren(1, 'Inheritance'); // [2, 3]\n     * graph.getAllNodes(); // [1, 2, 3]\n     * graph.getAllEdges(); // []\n     * ```\n     * @group TreeMethods\n     */\n    addTree(tree, treeKey) {\n        this.batch(() => {\n            this.attachTreeStructure(treeKey);\n            // Add Nodes\n            const nodes = [];\n            const stack = Array.isArray(tree) ? tree : [tree];\n            while (stack.length) {\n                const node = stack.shift();\n                nodes.push(node);\n                if (node.children) {\n                    stack.push(...node.children);\n                }\n            }\n            this.addNodes(nodes);\n            // Set parent for each child node.\n            nodes.forEach((parent) => {\n                parent.children?.forEach((child) => {\n                    this.setParent(child.id, parent.id, treeKey);\n                });\n            });\n        });\n    }\n    /**\n     * Get the root nodes of an attached tree structure.\n     *\n     * Consider a graph with the following tree structure attached:\n     * ```\n     * Tree structure:\n     *    O     3\n     *   / \\    |\n     *  1   2   4\n     * ```\n     * `graph.getRoots()` takes all nodes without a parent, therefore [0, 3] was returned.\n     *\n     * Newly added nodes are also unparented. So they are counted as roots.\n     * ```ts\n     * graph.addNode({ id: 5 });\n     * graph.getRoots(); // [0, 3, 5]\n     * ```\n     *\n     * Here is how the tree structure looks like:\n     * ```\n     * Tree structure:\n     *    O     3  5\n     *   / \\    |\n     *  1   2   4\n     * ```\n     *\n     * By setting a parent, a root node no more be a root.\n     * ```ts\n     * graph.setParent(5, 2);\n     * graph.getRoots(); // [0, 3]\n     * ```\n     *\n     * The tree structure now becomes:\n     * ```\n     * Tree structure:\n     *    O     3\n     *   / \\    |\n     *  1   2   4\n     *      |\n     *      5\n     * ```\n     *\n     * Removing a node forces its children to be unparented, or roots.\n     * ```ts\n     * graph.removeNode(0);\n     * graph.getRoots(); // [1, 2, 3]\n     * ```\n     *\n     * You might draw the the structure as follow:\n     * ```\n     * Tree structure:\n     *  1   2  3\n     *      |  |\n     *      5  4\n     * ```\n     * @group TreeMethods\n     */\n    getRoots(treeKey) {\n        this.checkTreeExistence(treeKey);\n        return this.getAllNodes().filter((node) => !this.getParent(node.id, treeKey));\n    }\n    /**\n     * Given a node ID and an optional tree key, get the children of the node in the specified tree structure.\n     * @group TreeMethods\n     */\n    getChildren(id, treeKey) {\n        this.checkNodeExistence(id);\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        const children = tree.childrenMap.get(id);\n        return Array.from(children || []);\n    }\n    /**\n     * Given a node ID and an optional tree key, get the parent of the node in the specified tree structure.\n     * If the given node is one of the tree roots, this returns null.\n     * @group TreeMethods\n     */\n    getParent(id, treeKey) {\n        this.checkNodeExistence(id);\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        return tree.parentMap.get(id) || null;\n    }\n    /**\n     * Returns an array of all the ancestor nodes, staring from the parent to the root.\n     */\n    getAncestors(id, treeKey) {\n        const ancestors = [];\n        let current = this.getNode(id);\n        let parent;\n        // eslint-disable-next-line no-cond-assign\n        while ((parent = this.getParent(current.id, treeKey))) {\n            ancestors.push(parent);\n            current = parent;\n        }\n        return ancestors;\n    }\n    /**\n     * Set node parent. If this operation causes a circle, it fails with an error.\n     * @param id - ID of the child node.\n     * @param parent - ID of the parent node. If it is undefined, means unset parent for node with id.\n     * @param treeKey - Which tree structure the relation is applied to.\n     * @group TreeMethods\n     */\n    setParent(id, parent, treeKey) {\n        this.checkTreeExistence(treeKey);\n        const tree = this.treeIndices.get(treeKey);\n        const node = this.getNode(id);\n        const oldParent = tree.parentMap.get(id);\n        // Same parent id as old one, skip\n        if (oldParent?.id === parent)\n            return;\n        // New parent is undefined, unset parent for the node\n        if (parent === undefined) {\n            if (oldParent) {\n                tree.childrenMap.get(oldParent.id)?.delete(node);\n            }\n            tree.parentMap.delete(id);\n            return;\n        }\n        const newParent = this.getNode(parent);\n        // Set parent\n        tree.parentMap.set(id, newParent);\n        // Set children\n        if (oldParent) {\n            tree.childrenMap.get(oldParent.id)?.delete(node);\n        }\n        let children = tree.childrenMap.get(newParent.id);\n        if (!children) {\n            children = new Set();\n            tree.childrenMap.set(newParent.id, children);\n        }\n        children.add(node);\n        this.batch(() => {\n            this.changes.push({\n                type: 'TreeStructureChanged',\n                treeKey,\n                nodeId: id,\n                oldParentId: oldParent?.id,\n                newParentId: newParent.id,\n            });\n        });\n    }\n    dfsTree(id, fn, treeKey) {\n        const navigator = (nodeId) => this.getChildren(nodeId, treeKey);\n        return doDFS(this.getNode(id), new Set(), fn, navigator);\n    }\n    bfsTree(id, fn, treeKey) {\n        const navigator = (nodeId) => this.getChildren(nodeId, treeKey);\n        return doBFS([this.getNode(id)], new Set(), fn, navigator);\n    }\n    // ================= Graph =================\n    /**\n     * Get all nodes in the graph as an array.\n     */\n    getAllNodes() {\n        return Array.from(this.nodeMap.values());\n    }\n    /**\n     * Get all edges in the graph as an array.\n     */\n    getAllEdges() {\n        return Array.from(this.edgeMap.values());\n    }\n    bfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this),\n        }[direction];\n        return doBFS([this.getNode(id)], new Set(), fn, navigator);\n    }\n    dfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this),\n        }[direction];\n        return doDFS(this.getNode(id), new Set(), fn, navigator);\n    }\n    clone() {\n        // Make a shallow copy of nodes and edges.\n        const newNodes = this.getAllNodes().map((oldNode) => {\n            return { ...oldNode, data: { ...oldNode.data } };\n        });\n        const newEdges = this.getAllEdges().map((oldEdge) => {\n            return { ...oldEdge, data: { ...oldEdge.data } };\n        });\n        // Create a new graph with shallow copied nodes and edges.\n        const newGraph = new Graph({\n            nodes: newNodes,\n            edges: newEdges,\n        });\n        // Add tree indices.\n        this.treeIndices.forEach(({ parentMap: oldParentMap, childrenMap: oldChildrenMap }, treeKey) => {\n            const parentMap = new Map();\n            oldParentMap.forEach((parent, key) => {\n                parentMap.set(key, newGraph.getNode(parent.id));\n            });\n            const childrenMap = new Map();\n            oldChildrenMap.forEach((children, key) => {\n                childrenMap.set(key, new Set(Array.from(children).map((n) => newGraph.getNode(n.id))));\n            });\n            newGraph.treeIndices.set(treeKey, {\n                parentMap: parentMap,\n                childrenMap: childrenMap,\n            });\n        });\n        return newGraph;\n    }\n    toJSON() {\n        return JSON.stringify({\n            nodes: this.getAllNodes(),\n            edges: this.getAllEdges(),\n            // FIXME: And tree structures?\n        });\n    }\n    createView(options) {\n        return new GraphView({\n            graph: this,\n            ...options,\n        });\n    }\n}\n//# sourceMappingURL=graph.js.map","import EventEmitter from '@antv/event-emitter';\nimport { GraphView } from './graphView';\nimport {\n  Node,\n  Edge,\n  GraphChange,\n  GraphChangedEvent,\n  GraphOptions,\n  ID,\n  TreeData,\n  PlainObject,\n  TreeIndices,\n  NodeDataUpdated,\n  TreeStructureChanged,\n  GraphViewOptions,\n} from './types';\nimport { doBFS, doDFS } from './utils/traverse';\n\nexport class Graph<\n  N extends PlainObject,\n  E extends PlainObject,\n> extends EventEmitter {\n  private nodeMap: Map<ID, Node<N>> = new Map();\n  private edgeMap: Map<ID, Edge<E>> = new Map();\n  private inEdgesMap: Map<ID, Set<Edge<E>>> = new Map();\n  private outEdgesMap: Map<ID, Set<Edge<E>>> = new Map();\n  private bothEdgesMap: Map<ID, Set<Edge<E>>> = new Map();\n  private treeIndices: TreeIndices<Node<N>> = new Map();\n\n  private changes: GraphChange<N, E>[] = [];\n  private batchCount = 0;\n\n  /**\n   * This function is called with a {@link GraphChangedEvent} each time a graph change happened.\n   *\n   * `event.changes` contains all the graph changes in order since last `onChanged`.\n   */\n  public onChanged: (event: GraphChangedEvent<N, E>) => void = () => {\n    // Do nothing.\n  };\n\n  /**\n   * Create a new Graph instance.\n   * @param options - The options to initialize a graph. See {@link GraphOptions}.\n   *\n   * ```ts\n   * const graph = new Graph({\n   *   // Optional, initial nodes.\n   *   nodes: [\n   *     // Each node has a unique ID.\n   *     { id: 'A', foo: 1 },\n   *     { id: 'B', foo: 1 },\n   *   ],\n   *   // Optional, initial edges.\n   *   edges: [\n   *     { id: 'C', source: 'B', target: 'B', weight: 1 },\n   *   ],\n   *   // Optional, called with a GraphChangedEvent.\n   *   onChanged: (event) => {\n   *     console.log(event);\n   *   }\n   * });\n   * ```\n   */\n  constructor(options?: GraphOptions<N, E>) {\n    super();\n    if (!options) return;\n    if (options.nodes) this.addNodes(options.nodes);\n    if (options.edges) this.addEdges(options.edges);\n    if (options.tree) this.addTree(options.tree);\n    if (options.onChanged) this.onChanged = options.onChanged;\n  }\n\n  /**\n   * Batch several graph changes into one.\n   *\n   * Make several changes, but dispatch only one ChangedEvent at the end of batch:\n   * ```ts\n   * graph.batch(() => {\n   *   graph.addNodes([]);\n   *   graph.addEdges([]);\n   * });\n   * ```\n   *\n   * Batches can be nested. Only the outermost batch will dispatch a ChangedEvent:\n   * ```ts\n   * graph.batch(() => {\n   *   graph.addNodes([]);\n   *   graph.batch(() => {\n   *     graph.addEdges([]);\n   *   });\n   * });\n   * ```\n   */\n  public batch = (fn: () => void): void => {\n    this.batchCount += 1;\n    fn();\n    this.batchCount -= 1;\n    if (!this.batchCount) {\n      this.commit();\n    }\n  };\n\n  /**\n   * Reset changes and dispatch a ChangedEvent.\n   */\n  private commit(): void {\n    const changes = this.changes;\n    this.changes = [];\n    const event = {\n      graph: this,\n      changes,\n    };\n    this.emit('changed', event);\n    this.onChanged(event);\n  }\n\n  /**\n   * Reduce the number of ordered graph changes by dropping or merging unnecessary changes.\n   *\n   * For example, if we update a node and remove it in a batch:\n   *\n   * ```ts\n   * graph.batch(() => {\n   *   graph.updateNodeData('A', 'foo', 2);\n   *   graph.removeNode('A');\n   * });\n   * ```\n   *\n   * We get 2 atomic graph changes like\n   *\n   * ```ts\n   * [\n   *   { type: 'NodeDataUpdated', id: 'A', propertyName: 'foo', oldValue: 1, newValue: 2 },\n   *   { type: 'NodeRemoved', value: { id: 'A', data: { foo: 2 } },\n   * ]\n   * ```\n   *\n   * Since node 'A' has been removed, we actually have no need to handle with NodeDataUpdated change.\n   *\n   * `reduceChanges()` here helps us remove such changes.\n   */\n  public reduceChanges(changes: GraphChange<N, E>[]): GraphChange<N, E>[] {\n    let mergedChanges: GraphChange<N, E>[] = [];\n    changes.forEach((change) => {\n      switch (change.type) {\n        case 'NodeRemoved': {\n          // NodeAdded: A added.\n          // NodeDataUpdated: A changed.\n          // TreeStructureChanged: A's parent changed.\n          // NodeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n          let isNewlyAdded = false;\n          mergedChanges = mergedChanges.filter((pastChange) => {\n            if (pastChange.type === 'NodeAdded') {\n              const sameId = pastChange.value.id === change.value.id;\n              if (sameId) {\n                isNewlyAdded = true;\n              }\n              return !sameId;\n            } else if (pastChange.type === 'NodeDataUpdated') {\n              return pastChange.id !== change.value.id;\n            } else if (pastChange.type === 'TreeStructureChanged') {\n              return pastChange.nodeId !== change.value.id;\n            }\n            return true;\n          });\n          if (!isNewlyAdded) {\n            mergedChanges.push(change);\n          }\n          break;\n        }\n        case 'EdgeRemoved': {\n          // EdgeAdded: A added.\n          // EdgeDataUpdated: A changed.\n          // EdgeDataUpdated: A's source/target changed.\n          // EdgeRemoved: A removed. 👈🏻 Since A was removed, above three changes may be ignored.\n          let isNewlyAdded = false;\n          mergedChanges = mergedChanges.filter((pastChange) => {\n            if (pastChange.type === 'EdgeAdded') {\n              const sameId = pastChange.value.id === change.value.id;\n              if (sameId) {\n                isNewlyAdded = true;\n              }\n              return !sameId;\n            } else if (\n              pastChange.type === 'EdgeDataUpdated' ||\n              pastChange.type === 'EdgeUpdated'\n            ) {\n              return pastChange.id !== change.value.id;\n            }\n            return true;\n          });\n          if (!isNewlyAdded) {\n            mergedChanges.push(change);\n          }\n          break;\n        }\n        case 'NodeDataUpdated':\n        case 'EdgeDataUpdated':\n        case 'EdgeUpdated': {\n          // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 1, newValue: 2 }.\n          // NodeDataUpdated: { id: A, propertyName: 'foo', oldValue: 2, newValue: 3 }.\n          // 👆 Could be merged as { id: A, propertyName: 'foo', oldValue: 1, newValue: 3 }.\n          const index = mergedChanges.findIndex((pastChange) => {\n            return (\n              pastChange.type === change.type &&\n              pastChange.id === change.id &&\n              (change.propertyName === undefined ||\n                pastChange.propertyName === change.propertyName)\n            );\n          });\n          const existingChange = mergedChanges[index];\n          if (existingChange) {\n            if (change.propertyName !== undefined) {\n              // The incoming change is of the same property of existing change.\n              (existingChange as NodeDataUpdated<N>).newValue = change.newValue;\n            } else {\n              // The incoming change is a whole data override.\n              mergedChanges.splice(index, 1);\n              mergedChanges.push(change);\n            }\n          } else {\n            mergedChanges.push(change);\n          }\n          break;\n        }\n        case 'TreeStructureDetached': {\n          // TreeStructureAttached\n          // TreeStructureChanged\n          // TreeStructureDetached 👈🏻 Since the tree struct was detached, above 2 changes may be ignored.\n          mergedChanges = mergedChanges.filter((pastChange) => {\n            if (pastChange.type === 'TreeStructureAttached') {\n              return pastChange.treeKey !== change.treeKey;\n            } else if (pastChange.type === 'TreeStructureChanged') {\n              return pastChange.treeKey !== change.treeKey;\n            }\n            return true;\n          });\n          mergedChanges.push(change);\n          break;\n        }\n        case 'TreeStructureChanged': {\n          const existingChange = mergedChanges.find((pastChange) => {\n            return (\n              pastChange.type === 'TreeStructureChanged' &&\n              pastChange.treeKey === change.treeKey &&\n              pastChange.nodeId === change.nodeId\n            );\n          });\n          if (existingChange) {\n            (existingChange as TreeStructureChanged).newParentId =\n              change.newParentId;\n          } else {\n            mergedChanges.push(change);\n          }\n          break;\n        }\n        default:\n          mergedChanges.push(change);\n          break;\n      }\n    });\n    return mergedChanges;\n  }\n\n  // ================= Node =================\n  private checkNodeExistence(id: ID): void {\n    this.getNode(id);\n  }\n\n  /**\n   * Check if a node exists in the graph.\n   * @group NodeMethods\n   */\n  public hasNode(id: ID): boolean {\n    return this.nodeMap.has(id);\n  }\n\n  /**\n   * Tell if two nodes are neighbors.\n   * @group NodeMethods\n   */\n  public areNeighbors(firstNodeId: ID, secondNodeId: ID): boolean {\n    return this.getNeighbors(secondNodeId).some(\n      (neighbor) => neighbor.id === firstNodeId,\n    );\n  }\n\n  /**\n   * Get the node data with given ID.\n   * @group NodeMethods\n   */\n  public getNode(id: ID): Node<N> {\n    const node = this.nodeMap.get(id);\n    if (!node) {\n      throw new Error('Node not found for id: ' + id);\n    }\n    return node;\n  }\n\n  /**\n   * Given a node ID, find all edges of the node.\n   * @param id - ID of the node\n   * @param direction - Edge direction, defaults to 'both'.\n   * @group NodeMethods\n   */\n  public getRelatedEdges(id: ID, direction?: 'in' | 'out' | 'both'): Edge<E>[] {\n    this.checkNodeExistence(id);\n\n    if (direction === 'in') {\n      const inEdges = this.inEdgesMap.get(id)!;\n      return Array.from(inEdges);\n    } else if (direction === 'out') {\n      const outEdges = this.outEdgesMap.get(id)!;\n      return Array.from(outEdges);\n    } else {\n      const bothEdges = this.bothEdgesMap.get(id)!;\n      return Array.from(bothEdges);\n    }\n  }\n\n  /**\n   * Get the degree of the given node.\n   * @group NodeMethods\n   */\n  public getDegree(id: ID, direction?: 'in' | 'out' | 'both'): number {\n    return this.getRelatedEdges(id, direction).length;\n  }\n\n  /**\n   * Get all successors of the given node.\n   */\n  public getSuccessors(id: ID): Node<N>[] {\n    const outEdges = this.getRelatedEdges(id, 'out');\n    const targets = outEdges.map((edge) => this.getNode(edge.target));\n    return Array.from(new Set(targets));\n  }\n\n  /**\n   * Get all predecessors of the given node.\n   */\n  public getPredecessors(id: ID): Node<N>[] {\n    const inEdges = this.getRelatedEdges(id, 'in');\n    const sources = inEdges.map((edge) => this.getNode(edge.source));\n    return Array.from(new Set(sources));\n  }\n\n  /**\n   * Given a node ID, find its neighbors.\n   * @param id - ID of the node\n   * @group NodeMethods\n   */\n  public getNeighbors(id: ID): Node<N>[] {\n    const predecessors = this.getPredecessors(id);\n    const successors = this.getSuccessors(id);\n    return Array.from(new Set([...predecessors, ...successors]));\n  }\n\n  private doAddNode(node: Node<N>): void {\n    if (this.hasNode(node.id)) {\n      throw new Error('Node already exists: ' + node.id);\n    }\n    this.nodeMap.set(node.id, node);\n    this.inEdgesMap.set(node.id, new Set());\n    this.outEdgesMap.set(node.id, new Set());\n    this.bothEdgesMap.set(node.id, new Set());\n    this.treeIndices.forEach((tree) => {\n      tree.childrenMap.set(node.id, new Set());\n    });\n    this.changes.push({ type: 'NodeAdded', value: node });\n  }\n\n  /**\n   * Add all nodes of the given array, or iterable, into the graph.\n   * @group NodeMethods\n   */\n  public addNodes(nodes: Iterable<Node<N>>) {\n    this.batch(() => {\n      for (const node of nodes) {\n        this.doAddNode(node);\n      }\n    });\n  }\n\n  /**\n   * Add a single node into the graph.\n   * @group NodeMethods\n   */\n  public addNode(node: Node<N>): void {\n    this.addNodes([node]);\n  }\n\n  private doRemoveNode(id: ID): void {\n    const node = this.getNode(id);\n    const bothEdges = this.bothEdgesMap.get(id);\n    bothEdges?.forEach((edge) => this.doRemoveEdge(edge.id));\n    this.nodeMap.delete(id);\n    this.treeIndices.forEach((tree) => {\n      tree.childrenMap.get(id)?.forEach((child) => {\n        tree.parentMap.delete(child.id);\n      });\n\n      const parent = tree.parentMap.get(id);\n      if (parent) tree.childrenMap.get(parent.id)?.delete(node);\n\n      tree.parentMap.delete(id);\n      tree.childrenMap.delete(id);\n    });\n    this.bothEdgesMap.delete(id);\n    this.inEdgesMap.delete(id);\n    this.outEdgesMap.delete(id);\n    this.changes.push({ type: 'NodeRemoved', value: node });\n  }\n\n  /**\n   * Remove nodes and their attached edges from the graph.\n   * @group NodeMethods\n   */\n  public removeNodes(idList: ID[]): void {\n    this.batch(() => {\n      idList.forEach((id) => this.doRemoveNode(id));\n    });\n  }\n\n  /**\n   * Remove a single node and its attached edges from the graph.\n   * @group NodeMethods\n   */\n  public removeNode(id: ID): void {\n    this.removeNodes([id]);\n  }\n\n  private updateNodeDataProperty<P extends keyof N>(\n    id: ID,\n    propertyName: P,\n    value: N[P],\n  ): void {\n    const node = this.getNode(id);\n    this.batch(() => {\n      const oldValue = node.data[propertyName];\n      const newValue = value;\n      node.data[propertyName] = newValue;\n      this.changes.push({\n        type: 'NodeDataUpdated',\n        id,\n        propertyName,\n        oldValue,\n        newValue,\n      });\n    });\n  }\n\n  /**\n   * Like Object.assign, merge all properties of `path` to the node data.\n   * @param id Node ID.\n   * @param patch A data object to merge.\n   */\n  public mergeNodeData(id: ID, patch: Partial<N>): void {\n    this.batch(() => {\n      Object.entries(patch).forEach(([propertyName, value]) => {\n        this.updateNodeDataProperty(id, propertyName, value);\n      });\n    });\n  }\n\n  /**\n   * Update node data. This will replace the whole data object.\n   *\n   * ```ts\n   * updateNodeData(id, data); // Works like `node.data = data`\n   * ```\n   *\n   * @group NodeMethods\n   */\n  public updateNodeData(id: ID, data: N): void;\n  /**\n   * Update a single property on the node data.\n   *\n   * To update multiple properties, you could {@link Graph.batch batch} several updates or use {@link Graph.mergeNodeData mergeNodeData}.\n   *\n   * ```ts\n   * updateNodeData(id, key, value); // Works like `node.data[key] = value`\n   * ```\n   *\n   * @group NodeMethods\n   */\n  public updateNodeData<P extends keyof N>(\n    id: ID,\n    propertyName: P,\n    value: N[P],\n  ): void;\n  /**\n   * Update node data by a update function.\n   *\n   * ```ts\n   * updateNodeData(id, oldData => newData);\n   * ```\n   * @group NodeMethods\n   */\n  public updateNodeData(id: ID, update: (data: N) => N): void;\n  public updateNodeData(...args: any[]): void {\n    const id: ID = args[0];\n    const node = this.getNode(id);\n    if (typeof args[1] === 'string') {\n      // id, propertyName, value\n      this.updateNodeDataProperty(id, args[1], args[2]);\n      return;\n    }\n    let data: N;\n    if (typeof args[1] === 'function') {\n      // id, update\n      const update = args[1];\n      data = update(node.data);\n    } else if (typeof args[1] === 'object') {\n      // id, data\n      data = args[1];\n    }\n    this.batch(() => {\n      const oldValue = node.data;\n      const newValue = data;\n      node.data = data;\n      this.changes.push({\n        type: 'NodeDataUpdated',\n        id,\n        oldValue,\n        newValue,\n      });\n    });\n  }\n\n  // ================= Edge =================\n  private checkEdgeExistence(id: ID): void {\n    if (!this.hasEdge(id)) {\n      throw new Error('Edge not found for id: ' + id);\n    }\n  }\n\n  /**\n   * Check if an edge exists in the graph.\n   * @group NodeMethods\n   */\n  public hasEdge(id: ID): boolean {\n    return this.edgeMap.has(id);\n  }\n\n  /**\n   * Get the edge data with given ID.\n   * @group EdgeMethods\n   */\n  public getEdge(id: ID): Edge<E> {\n    this.checkEdgeExistence(id);\n    return this.edgeMap.get(id)!;\n  }\n\n  /**\n   * Get the edge, the source node, and the target node by an edge ID.\n   * @group EdgeMethods\n   */\n  public getEdgeDetail(id: ID): {\n    edge: Edge<E>;\n    source: Node<N>;\n    target: Node<N>;\n  } {\n    const edge = this.getEdge(id);\n    return {\n      edge,\n      source: this.getNode(edge.source),\n      target: this.getNode(edge.target),\n    };\n  }\n\n  private doAddEdge(edge: Edge<E>): void {\n    if (this.hasEdge(edge.id)) {\n      throw new Error('Edge already exists: ' + edge.id);\n    }\n    this.checkNodeExistence(edge.source);\n    this.checkNodeExistence(edge.target);\n\n    this.edgeMap.set(edge.id, edge);\n    const inEdges = this.inEdgesMap.get(edge.target)!;\n    const outEdges = this.outEdgesMap.get(edge.source)!;\n    const bothEdgesOfSource = this.bothEdgesMap.get(edge.source)!;\n    const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target)!;\n    inEdges.add(edge);\n    outEdges.add(edge);\n    bothEdgesOfSource.add(edge);\n    bothEdgesOfTarget.add(edge);\n\n    this.changes.push({ type: 'EdgeAdded', value: edge });\n  }\n\n  /**\n   * Add all edges of the given iterable(an array, a set, etc.) into the graph.\n   * @group EdgeMethods\n   */\n  public addEdges(edges: Iterable<Edge<E>>): void {\n    this.batch(() => {\n      for (const edge of edges) {\n        this.doAddEdge(edge);\n      }\n    });\n  }\n\n  /**\n   * Add a single edge pointing from `source` to `target` into the graph.\n   *\n   * ```ts\n   * graph.addNode({ id: 'NodeA' });\n   * graph.addNode({ id: 'NodeB' });\n   * graph.addEdge({ id: 'EdgeA', source: 'NodeA', target: 'NodeB' });\n   * ```\n   *\n   * If `source` or `target` were not found in the current graph, it throws an Error.\n   * @group EdgeMethods\n   */\n  public addEdge(edge: Edge<E>): void {\n    this.addEdges([edge]);\n  }\n\n  private doRemoveEdge(id: ID): void {\n    const edge = this.getEdge(id);\n    const outEdges = this.outEdgesMap.get(edge.source)!;\n    const inEdges = this.inEdgesMap.get(edge.target)!;\n    const bothEdgesOfSource = this.bothEdgesMap.get(edge.source)!;\n    const bothEdgesOfTarget = this.bothEdgesMap.get(edge.target)!;\n    outEdges.delete(edge);\n    inEdges.delete(edge);\n    bothEdgesOfSource.delete(edge);\n    bothEdgesOfTarget.delete(edge);\n    this.edgeMap.delete(id);\n    this.changes.push({ type: 'EdgeRemoved', value: edge });\n  }\n\n  /**\n   * Remove edges whose id was included in the given id list.\n   * @group EdgeMethods\n   */\n  public removeEdges(idList: ID[]): void {\n    this.batch(() => {\n      idList.forEach((id) => this.doRemoveEdge(id));\n    });\n  }\n\n  /**\n   * Remove a single edge of the given id.\n   * @group EdgeMethods\n   */\n  public removeEdge(id: ID): void {\n    this.removeEdges([id]);\n  }\n\n  /**\n   * Change the source of an edge. The source must be found in current graph.\n   * @group EdgeMethods\n   */\n  public updateEdgeSource(id: ID, source: ID): void {\n    const edge = this.getEdge(id);\n    this.checkNodeExistence(source);\n    const oldSource = edge.source;\n    const newSource = source;\n    this.outEdgesMap.get(oldSource)!.delete(edge);\n    this.bothEdgesMap.get(oldSource)!.delete(edge);\n    this.outEdgesMap.get(newSource)!.add(edge);\n    this.bothEdgesMap.get(newSource)!.add(edge);\n    edge.source = source;\n    this.batch(() => {\n      this.changes.push({\n        type: 'EdgeUpdated',\n        id,\n        propertyName: 'source',\n        oldValue: oldSource,\n        newValue: newSource,\n      });\n    });\n  }\n\n  /**\n   * Change the target of an edge. The target must be found in current graph.\n   * @group EdgeMethods\n   */\n  public updateEdgeTarget(id: ID, target: ID): void {\n    const edge = this.getEdge(id);\n    this.checkNodeExistence(target);\n    const oldTarget = edge.target;\n    const newTarget = target;\n    this.inEdgesMap.get(oldTarget)!.delete(edge);\n    this.bothEdgesMap.get(oldTarget)!.delete(edge);\n    this.inEdgesMap.get(newTarget)!.add(edge);\n    this.bothEdgesMap.get(newTarget)!.add(edge);\n    edge.target = target;\n    this.batch(() => {\n      this.changes.push({\n        type: 'EdgeUpdated',\n        id,\n        propertyName: 'target',\n        oldValue: oldTarget,\n        newValue: newTarget,\n      });\n    });\n  }\n\n  private updateEdgeDataProperty<P extends keyof E>(\n    id: ID,\n    propertyName: P,\n    value: E[P],\n  ): void {\n    const edge = this.getEdge(id);\n    this.batch(() => {\n      const oldValue = edge.data[propertyName];\n      const newValue = value;\n      edge.data[propertyName] = newValue;\n      this.changes.push({\n        type: 'EdgeDataUpdated',\n        id,\n        propertyName,\n        oldValue,\n        newValue,\n      });\n    });\n  }\n\n  /**\n   * Update edge data. This will replace the whole data object.\n   *\n   * ```ts\n   * updateEdgeData(id, data); // Works like `edge.data = data`\n   * ```\n   *\n   * @group EdgeMethods\n   */\n  public updateEdgeData(id: ID, data: E): void;\n  /**\n   * Update a single property on the edge data.\n   *\n   * To update multiple properties, you could {@link Graph.batch batch} several updates or use {@link Graph.mergeEdgeData mergeNodeData}.\n   *\n   * ```ts\n   * updateEdgeData(id, key, value); // Works like `edge.data[key] = value`\n   * ```\n   *\n   * @group EdgeMethods\n   */\n  public updateEdgeData<P extends keyof E>(\n    id: ID,\n    propertyName: P,\n    value: E[P],\n  ): void;\n  /**\n   * Update edge data by a update function.\n   *\n   * ```ts\n   * updateEdgeData(id, oldData => newData);\n   * ```\n   * @group EdgeMethods\n   */\n  public updateEdgeData(id: ID, update: (data: E) => E): void;\n  public updateEdgeData(...args: any[]): void {\n    const id: ID = args[0];\n    const edge = this.getEdge(id);\n    if (typeof args[1] === 'string') {\n      // id, propertyName, value\n      this.updateEdgeDataProperty(id, args[1], args[2]);\n      return;\n    }\n    let data: E;\n    if (typeof args[1] === 'function') {\n      // id, update\n      const update = args[1];\n      data = update(edge.data);\n    } else if (typeof args[1] === 'object') {\n      // id, data\n      data = args[1];\n    }\n    this.batch(() => {\n      const oldValue = edge.data;\n      const newValue = data;\n      edge.data = data;\n      this.changes.push({\n        type: 'EdgeDataUpdated',\n        id,\n        oldValue,\n        newValue,\n      });\n    });\n  }\n\n  /**\n   * @group EdgeMethods\n   */\n  public mergeEdgeData(id: ID, patch: Partial<E>): void {\n    this.batch(() => {\n      Object.entries(patch).forEach(([propertyName, value]) => {\n        this.updateEdgeDataProperty(id, propertyName, value);\n      });\n    });\n  }\n\n  // ================= Tree =================\n  private checkTreeExistence(treeKey: string | undefined): void {\n    if (!this.hasTreeStructure(treeKey)) {\n      throw new Error('Tree structure not found for treeKey: ' + treeKey);\n    }\n  }\n\n  public hasTreeStructure(treeKey: string | undefined): boolean {\n    return this.treeIndices.has(treeKey);\n  }\n\n  /**\n   * Attach a new tree structure representing the hierarchy of all nodes in the graph.\n   * @param treeKey A unique key of the tree structure. You can attach multiple tree structures with different keys.\n   *\n   * ```ts\n   * const graph = new Graph({\n   *   nodes: [{ id: 1 }, { id: 2 }, { id: 3 }],\n   * });\n   * graph.attachTreeStructure('Inheritance');\n   * graph.setParent(2, 1, 'Inheritance');\n   * graph.setParent(3, 1, 'Inheritance');\n   * graph.getRoots('Inheritance'); // [1]\n   * graph.getChildren(1, 'Inheritance'); // [2,3]\n   * ```\n   * @group TreeMethods\n   */\n  public attachTreeStructure(treeKey?: string): void {\n    if (this.treeIndices.has(treeKey)) {\n      // Already attached.\n      return;\n    }\n    this.treeIndices.set(treeKey, {\n      parentMap: new Map(),\n      childrenMap: new Map(),\n    });\n    this.batch(() => {\n      this.changes.push({\n        type: 'TreeStructureAttached',\n        treeKey,\n      });\n    });\n  }\n\n  /**\n   * Detach the tree structure of the given tree key from the graph.\n   *\n   * ```ts\n   * graph.detachTreeStructure('Inheritance');\n   * graph.getRoots('Inheritance'); // Error!\n   * ```\n   * @group TreeMethods\n   */\n  public detachTreeStructure(treeKey?: string): void {\n    this.checkTreeExistence(treeKey);\n    this.treeIndices.delete(treeKey);\n    this.batch(() => {\n      this.changes.push({\n        type: 'TreeStructureDetached',\n        treeKey,\n      });\n    });\n  }\n\n  /**\n   * Traverse the given tree data, add each node into the graph, then attach the tree structure.\n   *\n   * ```ts\n   * graph.addTree({\n   *   id: 1,\n   *   children: [\n   *     { id: 2 },\n   *     { id: 3 },\n   *   ],\n   * }, 'Inheritance');\n   * graph.getRoots('Inheritance'); // [1]\n   * graph.getChildren(1, 'Inheritance'); // [2, 3]\n   * graph.getAllNodes(); // [1, 2, 3]\n   * graph.getAllEdges(); // []\n   * ```\n   * @group TreeMethods\n   */\n  public addTree(tree: TreeData<N> | TreeData<N>[], treeKey?: string): void {\n    this.batch(() => {\n      this.attachTreeStructure(treeKey);\n\n      // Add Nodes\n      const nodes: TreeData<N>[] = [];\n      const stack = Array.isArray(tree) ? tree : [tree];\n      while (stack.length) {\n        const node = stack.shift()!;\n        nodes.push(node);\n        if (node.children) {\n          stack.push(...node.children);\n        }\n      }\n      this.addNodes(nodes);\n\n      // Set parent for each child node.\n      nodes.forEach((parent) => {\n        parent.children?.forEach((child) => {\n          this.setParent(child.id, parent.id, treeKey);\n        });\n      });\n    });\n  }\n\n  /**\n   * Get the root nodes of an attached tree structure.\n   *\n   * Consider a graph with the following tree structure attached:\n   * ```\n   * Tree structure:\n   *    O     3\n   *   / \\    |\n   *  1   2   4\n   * ```\n   * `graph.getRoots()` takes all nodes without a parent, therefore [0, 3] was returned.\n   *\n   * Newly added nodes are also unparented. So they are counted as roots.\n   * ```ts\n   * graph.addNode({ id: 5 });\n   * graph.getRoots(); // [0, 3, 5]\n   * ```\n   *\n   * Here is how the tree structure looks like:\n   * ```\n   * Tree structure:\n   *    O     3  5\n   *   / \\    |\n   *  1   2   4\n   * ```\n   *\n   * By setting a parent, a root node no more be a root.\n   * ```ts\n   * graph.setParent(5, 2);\n   * graph.getRoots(); // [0, 3]\n   * ```\n   *\n   * The tree structure now becomes:\n   * ```\n   * Tree structure:\n   *    O     3\n   *   / \\    |\n   *  1   2   4\n   *      |\n   *      5\n   * ```\n   *\n   * Removing a node forces its children to be unparented, or roots.\n   * ```ts\n   * graph.removeNode(0);\n   * graph.getRoots(); // [1, 2, 3]\n   * ```\n   *\n   * You might draw the the structure as follow:\n   * ```\n   * Tree structure:\n   *  1   2  3\n   *      |  |\n   *      5  4\n   * ```\n   * @group TreeMethods\n   */\n  public getRoots(treeKey?: string): Node<N>[] {\n    this.checkTreeExistence(treeKey);\n    return this.getAllNodes().filter(\n      (node) => !this.getParent(node.id, treeKey),\n    );\n  }\n\n  /**\n   * Given a node ID and an optional tree key, get the children of the node in the specified tree structure.\n   * @group TreeMethods\n   */\n  public getChildren(id: ID, treeKey?: string): Node<N>[] {\n    this.checkNodeExistence(id);\n    this.checkTreeExistence(treeKey);\n    const tree = this.treeIndices.get(treeKey)!;\n    const children = tree.childrenMap.get(id);\n    return Array.from(children || []);\n  }\n\n  /**\n   * Given a node ID and an optional tree key, get the parent of the node in the specified tree structure.\n   * If the given node is one of the tree roots, this returns null.\n   * @group TreeMethods\n   */\n  public getParent(id: ID, treeKey?: string): Node<N> | null {\n    this.checkNodeExistence(id);\n    this.checkTreeExistence(treeKey);\n    const tree = this.treeIndices.get(treeKey)!;\n    return tree.parentMap.get(id) || null;\n  }\n\n  /**\n   * Returns an array of all the ancestor nodes, staring from the parent to the root.\n   */\n  public getAncestors(id: ID, treeKey?: string): Node<N>[] {\n    const ancestors: Node<N>[] = [];\n    let current = this.getNode(id);\n    let parent: Node<N> | null;\n    // eslint-disable-next-line no-cond-assign\n    while ((parent = this.getParent(current.id, treeKey))) {\n      ancestors.push(parent);\n      current = parent;\n    }\n    return ancestors;\n  }\n\n  /**\n   * Set node parent. If this operation causes a circle, it fails with an error.\n   * @param id - ID of the child node.\n   * @param parent - ID of the parent node. If it is undefined, means unset parent for node with id.\n   * @param treeKey - Which tree structure the relation is applied to.\n   * @group TreeMethods\n   */\n  public setParent(id: ID, parent?: ID, treeKey?: string) {\n    this.checkTreeExistence(treeKey);\n\n    const tree = this.treeIndices.get(treeKey)!;\n    const node = this.getNode(id);\n    const oldParent = tree.parentMap.get(id);\n\n    // Same parent id as old one, skip\n    if (oldParent?.id === parent) return;\n\n    // New parent is undefined, unset parent for the node\n    if (parent === undefined) {\n      if (oldParent) {\n        tree.childrenMap.get(oldParent.id)?.delete(node);\n      }\n      tree.parentMap.delete(id);\n      return;\n    }\n\n    const newParent = this.getNode(parent);\n\n    // Set parent\n    tree.parentMap.set(id, newParent);\n\n    // Set children\n    if (oldParent) {\n      tree.childrenMap.get(oldParent.id)?.delete(node);\n    }\n    let children = tree.childrenMap.get(newParent.id);\n    if (!children) {\n      children = new Set();\n      tree.childrenMap.set(newParent.id, children);\n    }\n    children.add(node);\n\n    this.batch(() => {\n      this.changes.push({\n        type: 'TreeStructureChanged',\n        treeKey,\n        nodeId: id,\n        oldParentId: oldParent?.id,\n        newParentId: newParent.id,\n      });\n    });\n  }\n\n  dfsTree(id: ID, fn: (node: Node<N>) => boolean | void, treeKey?: string) {\n    const navigator = (nodeId: ID) => this.getChildren(nodeId, treeKey);\n    return doDFS(this.getNode(id), new Set(), fn, navigator);\n  }\n\n  bfsTree(id: ID, fn: (node: Node<N>) => boolean | void, treeKey?: string) {\n    const navigator = (nodeId: ID) => this.getChildren(nodeId, treeKey);\n    return doBFS([this.getNode(id)], new Set(), fn, navigator);\n  }\n\n  // ================= Graph =================\n  /**\n   * Get all nodes in the graph as an array.\n   */\n  public getAllNodes(): Node<N>[] {\n    return Array.from(this.nodeMap.values());\n  }\n\n  /**\n   * Get all edges in the graph as an array.\n   */\n  public getAllEdges(): Edge<E>[] {\n    return Array.from(this.edgeMap.values());\n  }\n\n  public bfs(\n    id: ID,\n    fn: (node: Node<N>) => boolean | void,\n    direction: 'in' | 'out' | 'both' = 'out',\n  ): boolean {\n    const navigator = {\n      in: this.getPredecessors.bind(this),\n      out: this.getSuccessors.bind(this),\n      both: this.getNeighbors.bind(this),\n    }[direction];\n    return doBFS([this.getNode(id)], new Set(), fn, navigator);\n  }\n\n  public dfs(\n    id: ID,\n    fn: (node: Node<N>) => boolean | void,\n    direction: 'in' | 'out' | 'both' = 'out',\n  ): boolean {\n    const navigator = {\n      in: this.getPredecessors.bind(this),\n      out: this.getSuccessors.bind(this),\n      both: this.getNeighbors.bind(this),\n    }[direction];\n    return doDFS(this.getNode(id), new Set(), fn, navigator);\n  }\n\n  public clone(): Graph<N, E> {\n    // Make a shallow copy of nodes and edges.\n    const newNodes = this.getAllNodes().map((oldNode) => {\n      return { ...oldNode, data: { ...oldNode.data } };\n    });\n    const newEdges = this.getAllEdges().map((oldEdge) => {\n      return { ...oldEdge, data: { ...oldEdge.data } };\n    });\n\n    // Create a new graph with shallow copied nodes and edges.\n    const newGraph = new Graph<N, E>({\n      nodes: newNodes,\n      edges: newEdges,\n    });\n\n    // Add tree indices.\n    this.treeIndices.forEach(\n      ({ parentMap: oldParentMap, childrenMap: oldChildrenMap }, treeKey) => {\n        const parentMap = new Map<ID, Node<N>>();\n        oldParentMap.forEach((parent, key) => {\n          parentMap.set(key, newGraph.getNode(parent.id));\n        });\n\n        const childrenMap = new Map<ID, Set<Node<N>>>();\n        oldChildrenMap.forEach((children, key) => {\n          childrenMap.set(\n            key,\n            new Set(Array.from(children).map((n) => newGraph.getNode(n.id))),\n          );\n        });\n\n        newGraph.treeIndices.set(treeKey, {\n          parentMap: parentMap,\n          childrenMap: childrenMap,\n        });\n      },\n    );\n\n    return newGraph;\n  }\n\n  public toJSON(): string {\n    return JSON.stringify({\n      nodes: this.getAllNodes(),\n      edges: this.getAllEdges(),\n      // FIXME: And tree structures?\n    });\n  }\n\n  public createView(\n    options: Omit<GraphViewOptions<N, E>, 'graph'>,\n  ): GraphView<N, E> {\n    return new GraphView({\n      graph: this,\n      ...options,\n    });\n  }\n}\n","var WILDCARD = '*';\n/* event-emitter */\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this._events = {};\n    }\n    /**\n     * 监听一个事件\n     * @param evt\n     * @param callback\n     * @param once\n     */\n    EventEmitter.prototype.on = function (evt, callback, once) {\n        if (!this._events[evt]) {\n            this._events[evt] = [];\n        }\n        this._events[evt].push({\n            callback: callback,\n            once: !!once,\n        });\n        return this;\n    };\n    /**\n     * 监听一个事件一次\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.once = function (evt, callback) {\n        return this.on(evt, callback, true);\n    };\n    /**\n     * 触发一个事件\n     * @param evt\n     * @param args\n     */\n    EventEmitter.prototype.emit = function (evt) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var events = this._events[evt] || [];\n        var wildcardEvents = this._events[WILDCARD] || [];\n        // 实际的处理 emit 方法\n        var doEmit = function (es) {\n            var length = es.length;\n            for (var i = 0; i < length; i++) {\n                if (!es[i]) {\n                    continue;\n                }\n                var _a = es[i], callback = _a.callback, once = _a.once;\n                if (once) {\n                    es.splice(i, 1);\n                    if (es.length === 0) {\n                        delete _this._events[evt];\n                    }\n                    length--;\n                    i--;\n                }\n                callback.apply(_this, args);\n            }\n        };\n        doEmit(events);\n        doEmit(wildcardEvents);\n    };\n    /**\n     * 取消监听一个事件，或者一个channel\n     * @param evt\n     * @param callback\n     */\n    EventEmitter.prototype.off = function (evt, callback) {\n        if (!evt) {\n            // evt 为空全部清除\n            this._events = {};\n        }\n        else {\n            if (!callback) {\n                // evt 存在，callback 为空，清除事件所有方法\n                delete this._events[evt];\n            }\n            else {\n                // evt 存在，callback 存在，清除匹配的\n                var events = this._events[evt] || [];\n                var length_1 = events.length;\n                for (var i = 0; i < length_1; i++) {\n                    if (events[i].callback === callback) {\n                        events.splice(i, 1);\n                        length_1--;\n                        i--;\n                    }\n                }\n                if (events.length === 0) {\n                    delete this._events[evt];\n                }\n            }\n        }\n        return this;\n    };\n    /* 当前所有的事件 */\n    EventEmitter.prototype.getEvents = function () {\n        return this._events;\n    };\n    return EventEmitter;\n}());\nexport default EventEmitter;\n//# sourceMappingURL=index.js.map","interface EventType {\n  readonly callback: Function;\n  readonly once: boolean;\n}\n\ntype EventsType = Record<string, EventType[]>;\n\nconst WILDCARD = '*';\n\n/* event-emitter */\nexport default class EventEmitter {\n  private _events: EventsType = {};\n\n  /**\n   * 监听一个事件\n   * @param evt\n   * @param callback\n   * @param once\n   */\n  on(evt: string, callback: Function, once?: boolean) {\n    if (!this._events[evt]) {\n      this._events[evt] = [];\n    }\n    this._events[evt].push({\n      callback,\n      once: !!once,\n    });\n    return this;\n  }\n\n  /**\n   * 监听一个事件一次\n   * @param evt\n   * @param callback\n   */\n  once(evt: string, callback: Function) {\n    return this.on(evt, callback, true);\n  }\n\n  /**\n   * 触发一个事件\n   * @param evt\n   * @param args\n   */\n  emit(evt: string, ...args: any[]) {\n    const events = this._events[evt] || [];\n    const wildcardEvents = this._events[WILDCARD] || [];\n\n    // 实际的处理 emit 方法\n    const doEmit = (es: EventType[]) => {\n      let length = es.length;\n      for (let i = 0; i < length; i++) {\n        if (!es[i]) {\n          continue;\n        }\n        const { callback, once } = es[i];\n\n        if (once) {\n          es.splice(i, 1);\n\n          if (es.length === 0) {\n            delete this._events[evt];\n          }\n\n          length--;\n          i--;\n        }\n\n        callback.apply(this, args);\n      }\n    };\n\n    doEmit(events);\n    doEmit(wildcardEvents);\n  }\n\n  /**\n   * 取消监听一个事件，或者一个channel\n   * @param evt\n   * @param callback\n   */\n  off(evt?: string, callback?: Function) {\n    if (!evt) {\n      // evt 为空全部清除\n      this._events = {};\n    } else {\n      if (!callback) {\n        // evt 存在，callback 为空，清除事件所有方法\n        delete this._events[evt];\n      } else {\n        // evt 存在，callback 存在，清除匹配的\n        const events = this._events[evt] || [];\n\n        let length = events.length;\n        for (let i = 0; i < length; i++) {\n          if (events[i].callback === callback) {\n            events.splice(i, 1);\n            length--;\n            i--;\n          }\n        }\n\n        if (events.length === 0) {\n          delete this._events[evt];\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /* 当前所有的事件 */\n  getEvents() {\n    return this._events;\n  }\n}\n","import { doBFS, doDFS } from './utils/traverse';\nconst defaultFilter = () => true;\nexport class GraphView {\n    graph;\n    nodeFilter;\n    edgeFilter;\n    // caches\n    cacheEnabled;\n    inEdgesMap = new Map();\n    outEdgesMap = new Map();\n    bothEdgesMap = new Map();\n    allNodesMap = new Map();\n    allEdgesMap = new Map();\n    constructor(options) {\n        this.graph = options.graph;\n        const nodeFilter = options.nodeFilter || defaultFilter;\n        const edgeFilter = options.edgeFilter || defaultFilter;\n        this.nodeFilter = nodeFilter;\n        this.edgeFilter = (edge) => {\n            const { source, target } = this.graph.getEdgeDetail(edge.id);\n            if (!nodeFilter(source) || !nodeFilter(target)) {\n                return false;\n            }\n            return edgeFilter(edge, source, target);\n        };\n        if (options.cache === 'auto') {\n            this.cacheEnabled = true;\n            this.startAutoCache();\n        }\n        else if (options.cache === 'manual') {\n            this.cacheEnabled = true;\n        }\n        else {\n            this.cacheEnabled = false;\n        }\n    }\n    /**\n     * Clear all cache data. Therefore `getAllNodes()` will return `[]`.\n     * If you want to disable caching, use `graphView.cacheEnabled = false` instead.\n     */\n    clearCache = () => {\n        this.inEdgesMap.clear();\n        this.outEdgesMap.clear();\n        this.bothEdgesMap.clear();\n        this.allNodesMap.clear();\n        this.allEdgesMap.clear();\n    };\n    /**\n     * Fully refresh all cache data to the current graph state.\n     */\n    refreshCache = () => {\n        this.clearCache();\n        this.updateCache(this.graph.getAllNodes().map((node) => node.id));\n    };\n    /**\n     * Instead of a fully refreshment, this method partially update the cache data by specifying\n     * involved(added, removed, updated) nodes. It's more efficient when handling small changes\n     * on a large graph.\n     */\n    updateCache = (involvedNodeIds) => {\n        const involvedEdgeIds = new Set();\n        involvedNodeIds.forEach((id) => {\n            // Collect all involved old edges.\n            const oldEdgesSet = this.bothEdgesMap.get(id);\n            if (oldEdgesSet) {\n                oldEdgesSet.forEach((edge) => involvedEdgeIds.add(edge.id));\n            }\n            if (!this.hasNode(id)) {\n                // When an involved node becomes unvisitable:\n                // 1. Delete its related edges cache.\n                this.inEdgesMap.delete(id);\n                this.outEdgesMap.delete(id);\n                this.bothEdgesMap.delete(id);\n                // 2. Delete it from the allNodesMap.\n                this.allNodesMap.delete(id);\n            }\n            else {\n                // When an involved node becomes or stays visitable:\n                // 1. Collect its new edges.\n                const inEdges = this.graph\n                    .getRelatedEdges(id, 'in')\n                    .filter(this.edgeFilter);\n                const outEdges = this.graph\n                    .getRelatedEdges(id, 'out')\n                    .filter(this.edgeFilter);\n                const bothEdges = Array.from(new Set([...inEdges, ...outEdges]));\n                bothEdges.forEach((edge) => involvedEdgeIds.add(edge.id));\n                // 2. Update its related edges cache.\n                this.inEdgesMap.set(id, inEdges);\n                this.outEdgesMap.set(id, outEdges);\n                this.bothEdgesMap.set(id, bothEdges);\n                // 3. Add to allNodesMap.\n                this.allNodesMap.set(id, this.graph.getNode(id));\n            }\n        });\n        // Update allEdgesMap.\n        involvedEdgeIds.forEach((id) => {\n            if (this.hasEdge(id)) {\n                this.allEdgesMap.set(id, this.graph.getEdge(id));\n            }\n            else {\n                this.allEdgesMap.delete(id);\n            }\n        });\n    };\n    startAutoCache() {\n        this.refreshCache();\n        this.graph.on('changed', this.handleGraphChanged);\n    }\n    stopAutoCache() {\n        this.graph.off('changed', this.handleGraphChanged);\n    }\n    handleGraphChanged = (event) => {\n        // Collect all involved nodes.\n        const involvedNodeIds = new Set();\n        event.changes.forEach((change) => {\n            switch (change.type) {\n                case 'NodeAdded':\n                    involvedNodeIds.add(change.value.id);\n                    break;\n                case 'NodeDataUpdated':\n                    involvedNodeIds.add(change.id);\n                    break;\n                case 'EdgeAdded':\n                    involvedNodeIds.add(change.value.source);\n                    involvedNodeIds.add(change.value.target);\n                    break;\n                case 'EdgeUpdated':\n                    if (change.propertyName === 'source' ||\n                        change.propertyName === 'target') {\n                        involvedNodeIds.add(change.oldValue);\n                        involvedNodeIds.add(change.newValue);\n                    }\n                    break;\n                case 'EdgeDataUpdated':\n                    if (event.graph.hasEdge(change.id)) {\n                        const edge = event.graph.getEdge(change.id);\n                        involvedNodeIds.add(edge.source);\n                        involvedNodeIds.add(edge.target);\n                    }\n                    break;\n                case 'EdgeRemoved':\n                    involvedNodeIds.add(change.value.source);\n                    involvedNodeIds.add(change.value.target);\n                    break;\n                case 'NodeRemoved':\n                    involvedNodeIds.add(change.value.id);\n                    break;\n                default:\n                    break;\n            }\n        });\n        // Update their caches.\n        this.updateCache(involvedNodeIds);\n    };\n    // ================= Node =================\n    checkNodeExistence(id) {\n        this.getNode(id);\n    }\n    hasNode(id) {\n        if (!this.graph.hasNode(id))\n            return false;\n        const node = this.graph.getNode(id);\n        return this.nodeFilter(node);\n    }\n    areNeighbors(firstNodeId, secondNodeId) {\n        this.checkNodeExistence(firstNodeId);\n        return this.getNeighbors(secondNodeId).some((neighbor) => neighbor.id === firstNodeId);\n    }\n    getNode(id) {\n        const node = this.graph.getNode(id);\n        if (!this.nodeFilter(node)) {\n            throw new Error('Node not found for id: ' + id);\n        }\n        return node;\n    }\n    getRelatedEdges(id, direction) {\n        this.checkNodeExistence(id);\n        if (this.cacheEnabled) {\n            if (direction === 'in') {\n                return this.inEdgesMap.get(id);\n            }\n            else if (direction === 'out') {\n                return this.outEdgesMap.get(id);\n            }\n            else {\n                return this.bothEdgesMap.get(id);\n            }\n        }\n        const edges = this.graph.getRelatedEdges(id, direction);\n        return edges.filter(this.edgeFilter);\n    }\n    getDegree(id, direction) {\n        return this.getRelatedEdges(id, direction).length;\n    }\n    getSuccessors(id) {\n        const outEdges = this.getRelatedEdges(id, 'out');\n        const targets = outEdges.map((edge) => this.getNode(edge.target));\n        return Array.from(new Set(targets));\n    }\n    getPredecessors(id) {\n        const inEdges = this.getRelatedEdges(id, 'in');\n        const sources = inEdges.map((edge) => this.getNode(edge.source));\n        return Array.from(new Set(sources));\n    }\n    getNeighbors(id) {\n        const predecessors = this.getPredecessors(id);\n        const successors = this.getSuccessors(id);\n        return Array.from(new Set([...predecessors, ...successors]));\n    }\n    // ================= Edge =================\n    hasEdge(id) {\n        if (!this.graph.hasEdge(id))\n            return false;\n        const edge = this.graph.getEdge(id);\n        return this.edgeFilter(edge);\n    }\n    getEdge(id) {\n        const edge = this.graph.getEdge(id);\n        if (!this.edgeFilter(edge)) {\n            throw new Error('Edge not found for id: ' + id);\n        }\n        return edge;\n    }\n    getEdgeDetail(id) {\n        const edge = this.getEdge(id);\n        return {\n            edge,\n            source: this.getNode(edge.source),\n            target: this.getNode(edge.target),\n        };\n    }\n    // ================= Tree =================\n    hasTreeStructure(treeKey) {\n        return this.graph.hasTreeStructure(treeKey);\n    }\n    getRoots(treeKey) {\n        return this.graph.getRoots(treeKey).filter(this.nodeFilter);\n    }\n    getChildren(id, treeKey) {\n        this.checkNodeExistence(id);\n        return this.graph.getChildren(id, treeKey).filter(this.nodeFilter);\n    }\n    getParent(id, treeKey) {\n        this.checkNodeExistence(id);\n        const parent = this.graph.getParent(id, treeKey);\n        if (!parent || !this.nodeFilter(parent))\n            return null;\n        return parent;\n    }\n    // ================= Graph =================\n    getAllNodes() {\n        if (this.cacheEnabled) {\n            return Array.from(this.allNodesMap.values());\n        }\n        return this.graph.getAllNodes().filter(this.nodeFilter);\n    }\n    getAllEdges() {\n        if (this.cacheEnabled) {\n            return Array.from(this.allEdgesMap.values());\n        }\n        return this.graph.getAllEdges().filter(this.edgeFilter);\n    }\n    bfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this),\n        }[direction];\n        doBFS([this.getNode(id)], new Set(), fn, navigator);\n    }\n    dfs(id, fn, direction = 'out') {\n        const navigator = {\n            in: this.getPredecessors.bind(this),\n            out: this.getSuccessors.bind(this),\n            both: this.getNeighbors.bind(this),\n        }[direction];\n        doDFS(this.getNode(id), new Set(), fn, navigator);\n    }\n}\n//# sourceMappingURL=graphView.js.map","import { Graph } from './graph';\nimport {\n  Edge,\n  GraphChangedEvent,\n  GraphViewOptions,\n  ID,\n  Node,\n  PlainObject,\n} from './types';\nimport { doBFS, doDFS } from './utils/traverse';\n\nconst defaultFilter = () => true;\n\nexport class GraphView<N extends PlainObject, E extends PlainObject> {\n  private graph: Graph<N, E>;\n  private nodeFilter: (node: Node<N>) => boolean;\n  private edgeFilter: (edge: Edge<E>) => boolean;\n\n  // caches\n  public cacheEnabled: boolean;\n  private inEdgesMap: Map<ID, Array<Edge<E>>> = new Map();\n  private outEdgesMap: Map<ID, Array<Edge<E>>> = new Map();\n  private bothEdgesMap: Map<ID, Array<Edge<E>>> = new Map();\n  private allNodesMap: Map<ID, Node<N>> = new Map();\n  private allEdgesMap: Map<ID, Edge<E>> = new Map();\n\n  constructor(options: GraphViewOptions<N, E>) {\n    this.graph = options.graph;\n    const nodeFilter = options.nodeFilter || defaultFilter;\n    const edgeFilter = options.edgeFilter || defaultFilter;\n\n    this.nodeFilter = nodeFilter;\n    this.edgeFilter = (edge) => {\n      const { source, target } = this.graph.getEdgeDetail(edge.id);\n      if (!nodeFilter(source) || !nodeFilter(target)) {\n        return false;\n      }\n      return edgeFilter(edge, source, target);\n    };\n\n    if (options.cache === 'auto') {\n      this.cacheEnabled = true;\n      this.startAutoCache();\n    } else if (options.cache === 'manual') {\n      this.cacheEnabled = true;\n    } else {\n      this.cacheEnabled = false;\n    }\n  }\n\n  /**\n   * Clear all cache data. Therefore `getAllNodes()` will return `[]`.\n   * If you want to disable caching, use `graphView.cacheEnabled = false` instead.\n   */\n  public clearCache = (): void => {\n    this.inEdgesMap.clear();\n    this.outEdgesMap.clear();\n    this.bothEdgesMap.clear();\n    this.allNodesMap.clear();\n    this.allEdgesMap.clear();\n  };\n\n  /**\n   * Fully refresh all cache data to the current graph state.\n   */\n  public refreshCache = (): void => {\n    this.clearCache();\n    this.updateCache(this.graph.getAllNodes().map((node) => node.id));\n  };\n\n  /**\n   * Instead of a fully refreshment, this method partially update the cache data by specifying\n   * involved(added, removed, updated) nodes. It's more efficient when handling small changes\n   * on a large graph.\n   */\n  public updateCache = (involvedNodeIds: Set<ID> | Array<ID>): void => {\n    const involvedEdgeIds = new Set<ID>();\n    involvedNodeIds.forEach((id) => {\n      // Collect all involved old edges.\n      const oldEdgesSet = this.bothEdgesMap.get(id);\n      if (oldEdgesSet) {\n        oldEdgesSet.forEach((edge) => involvedEdgeIds.add(edge.id));\n      }\n\n      if (!this.hasNode(id)) {\n        // When an involved node becomes unvisitable:\n        // 1. Delete its related edges cache.\n        this.inEdgesMap.delete(id);\n        this.outEdgesMap.delete(id);\n        this.bothEdgesMap.delete(id);\n        // 2. Delete it from the allNodesMap.\n        this.allNodesMap.delete(id);\n      } else {\n        // When an involved node becomes or stays visitable:\n        // 1. Collect its new edges.\n        const inEdges = this.graph\n          .getRelatedEdges(id, 'in')\n          .filter(this.edgeFilter);\n        const outEdges = this.graph\n          .getRelatedEdges(id, 'out')\n          .filter(this.edgeFilter);\n        const bothEdges = Array.from(new Set([...inEdges, ...outEdges]));\n        bothEdges.forEach((edge) => involvedEdgeIds.add(edge.id));\n\n        // 2. Update its related edges cache.\n        this.inEdgesMap.set(id, inEdges);\n        this.outEdgesMap.set(id, outEdges);\n        this.bothEdgesMap.set(id, bothEdges);\n\n        // 3. Add to allNodesMap.\n        this.allNodesMap.set(id, this.graph.getNode(id));\n      }\n    });\n\n    // Update allEdgesMap.\n    involvedEdgeIds.forEach((id) => {\n      if (this.hasEdge(id)) {\n        this.allEdgesMap.set(id, this.graph.getEdge(id));\n      } else {\n        this.allEdgesMap.delete(id);\n      }\n    });\n  };\n\n  public startAutoCache() {\n    this.refreshCache();\n    this.graph.on('changed', this.handleGraphChanged);\n  }\n\n  public stopAutoCache() {\n    this.graph.off('changed', this.handleGraphChanged);\n  }\n\n  private handleGraphChanged = (event: GraphChangedEvent<N, E>) => {\n    // Collect all involved nodes.\n    const involvedNodeIds: Set<ID> = new Set();\n    event.changes.forEach((change) => {\n      switch (change.type) {\n        case 'NodeAdded':\n          involvedNodeIds.add(change.value.id);\n          break;\n        case 'NodeDataUpdated':\n          involvedNodeIds.add(change.id);\n          break;\n        case 'EdgeAdded':\n          involvedNodeIds.add(change.value.source);\n          involvedNodeIds.add(change.value.target);\n          break;\n        case 'EdgeUpdated':\n          if (\n            change.propertyName === 'source' ||\n            change.propertyName === 'target'\n          ) {\n            involvedNodeIds.add(change.oldValue);\n            involvedNodeIds.add(change.newValue);\n          }\n          break;\n        case 'EdgeDataUpdated':\n          if (event.graph.hasEdge(change.id)) {\n            const edge = event.graph.getEdge(change.id);\n            involvedNodeIds.add(edge.source);\n            involvedNodeIds.add(edge.target);\n          }\n          break;\n        case 'EdgeRemoved':\n          involvedNodeIds.add(change.value.source);\n          involvedNodeIds.add(change.value.target);\n          break;\n        case 'NodeRemoved':\n          involvedNodeIds.add(change.value.id);\n          break;\n        default:\n          break;\n      }\n    });\n    // Update their caches.\n    this.updateCache(involvedNodeIds);\n  };\n\n  // ================= Node =================\n  private checkNodeExistence(id: ID): void {\n    this.getNode(id);\n  }\n\n  hasNode(id: ID): boolean {\n    if (!this.graph.hasNode(id)) return false;\n    const node = this.graph.getNode(id);\n    return this.nodeFilter(node);\n  }\n\n  public areNeighbors(firstNodeId: ID, secondNodeId: ID): boolean {\n    this.checkNodeExistence(firstNodeId);\n    return this.getNeighbors(secondNodeId).some(\n      (neighbor) => neighbor.id === firstNodeId,\n    );\n  }\n\n  public getNode(id: ID): Node<N> {\n    const node = this.graph.getNode(id);\n    if (!this.nodeFilter(node)) {\n      throw new Error('Node not found for id: ' + id);\n    }\n    return node;\n  }\n\n  public getRelatedEdges(id: ID, direction?: 'in' | 'out' | 'both'): Edge<E>[] {\n    this.checkNodeExistence(id);\n    if (this.cacheEnabled) {\n      if (direction === 'in') {\n        return this.inEdgesMap.get(id)!;\n      } else if (direction === 'out') {\n        return this.outEdgesMap.get(id)!;\n      } else {\n        return this.bothEdgesMap.get(id)!;\n      }\n    }\n    const edges = this.graph.getRelatedEdges(id, direction);\n    return edges.filter(this.edgeFilter);\n  }\n\n  public getDegree(id: ID, direction?: 'in' | 'out' | 'both'): number {\n    return this.getRelatedEdges(id, direction).length;\n  }\n\n  public getSuccessors(id: ID): Node<N>[] {\n    const outEdges = this.getRelatedEdges(id, 'out');\n    const targets = outEdges.map((edge) => this.getNode(edge.target));\n    return Array.from(new Set(targets));\n  }\n\n  public getPredecessors(id: ID): Node<N>[] {\n    const inEdges = this.getRelatedEdges(id, 'in');\n    const sources = inEdges.map((edge) => this.getNode(edge.source));\n    return Array.from(new Set(sources));\n  }\n\n  public getNeighbors(id: ID): Node<N>[] {\n    const predecessors = this.getPredecessors(id);\n    const successors = this.getSuccessors(id);\n    return Array.from(new Set([...predecessors, ...successors]));\n  }\n\n  // ================= Edge =================\n  public hasEdge(id: ID): boolean {\n    if (!this.graph.hasEdge(id)) return false;\n    const edge = this.graph.getEdge(id);\n    return this.edgeFilter(edge);\n  }\n\n  public getEdge(id: ID): Edge<E> {\n    const edge = this.graph.getEdge(id);\n    if (!this.edgeFilter(edge)) {\n      throw new Error('Edge not found for id: ' + id);\n    }\n    return edge;\n  }\n\n  public getEdgeDetail(id: ID): {\n    edge: Edge<E>;\n    source: Node<N>;\n    target: Node<N>;\n  } {\n    const edge = this.getEdge(id);\n    return {\n      edge,\n      source: this.getNode(edge.source),\n      target: this.getNode(edge.target),\n    };\n  }\n\n  // ================= Tree =================\n  public hasTreeStructure(treeKey: string | undefined): boolean {\n    return this.graph.hasTreeStructure(treeKey);\n  }\n\n  public getRoots(treeKey?: string): Node<N>[] {\n    return this.graph.getRoots(treeKey).filter(this.nodeFilter);\n  }\n\n  public getChildren(id: ID, treeKey?: string): Node<N>[] {\n    this.checkNodeExistence(id);\n    return this.graph.getChildren(id, treeKey).filter(this.nodeFilter);\n  }\n\n  public getParent(id: ID, treeKey?: string): Node<N> | null {\n    this.checkNodeExistence(id);\n    const parent = this.graph.getParent(id, treeKey);\n    if (!parent || !this.nodeFilter(parent)) return null;\n    return parent;\n  }\n\n  // ================= Graph =================\n  public getAllNodes(): Node<N>[] {\n    if (this.cacheEnabled) {\n      return Array.from(this.allNodesMap.values());\n    }\n    return this.graph.getAllNodes().filter(this.nodeFilter);\n  }\n\n  public getAllEdges(): Edge<E>[] {\n    if (this.cacheEnabled) {\n      return Array.from(this.allEdgesMap.values());\n    }\n    return this.graph.getAllEdges().filter(this.edgeFilter);\n  }\n\n  public bfs(\n    id: ID,\n    fn: (node: Node<N>) => void,\n    direction: 'in' | 'out' | 'both' = 'out',\n  ): void {\n    const navigator = {\n      in: this.getPredecessors.bind(this),\n      out: this.getSuccessors.bind(this),\n      both: this.getNeighbors.bind(this),\n    }[direction];\n    doBFS([this.getNode(id)], new Set(), fn, navigator);\n  }\n\n  public dfs(\n    id: ID,\n    fn: (node: Node<N>) => void,\n    direction: 'in' | 'out' | 'both' = 'out',\n  ): void {\n    const navigator = {\n      in: this.getPredecessors.bind(this),\n      out: this.getSuccessors.bind(this),\n      both: this.getNeighbors.bind(this),\n    }[direction];\n    doDFS(this.getNode(id), new Set(), fn, navigator);\n  }\n}\n","export function doBFS(queue, visited, fn, navigator) {\n    while (queue.length) {\n        const node = queue.shift();\n        const abort = fn(node);\n        if (abort) {\n            return true;\n        }\n        visited.add(node.id);\n        navigator(node.id).forEach((n) => {\n            if (!visited.has(n.id)) {\n                visited.add(n.id);\n                queue.push(n);\n            }\n        });\n    }\n    return false;\n}\nexport function doDFS(node, visited, fn, navigator) {\n    const abort = fn(node);\n    if (abort) {\n        return true;\n    }\n    visited.add(node.id);\n    for (const n of navigator(node.id)) {\n        if (!visited.has(n.id)) {\n            if (doDFS(n, visited, fn, navigator)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=traverse.js.map","import { ID, Node, PlainObject } from '../types';\n\nexport function doBFS<N extends PlainObject>(\n  queue: Node<N>[],\n  visited: Set<ID>,\n  fn: (node: Node<N>) => boolean | void,\n  navigator: (id: ID) => Node<N>[],\n): boolean {\n  while (queue.length) {\n    const node = queue.shift()!;\n    const abort = fn(node);\n    if (abort) {\n      return true;\n    }\n    visited.add(node.id);\n    navigator(node.id).forEach((n) => {\n      if (!visited.has(n.id)) {\n        visited.add(n.id);\n        queue.push(n);\n      }\n    });\n  }\n  return false;\n}\n\nexport function doDFS<N extends PlainObject>(\n  node: Node<N>,\n  visited: Set<ID>,\n  fn: (node: Node<N>) => boolean | void,\n  navigator: (id: ID) => Node<N>[],\n): boolean {\n  const abort = fn(node);\n  if (abort) {\n    return true;\n  }\n\n  visited.add(node.id);\n  for (const n of navigator(node.id)) {\n    if (!visited.has(n.id)) {\n      if (doDFS(n, visited, fn, navigator)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport type { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\nexport const finalizer = Symbol(\"Comlink.finalizer\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\ntype PendingListenersMap = Map<\n  string,\n  (value: WireValue | PromiseLike<WireValue>) => void\n>;\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nfunction isAllowedOrigin(\n  allowedOrigins: (string | RegExp)[],\n  origin: string\n): boolean {\n  for (const allowedOrigin of allowedOrigins) {\n    if (origin === allowedOrigin || allowedOrigin === \"*\") {\n      return true;\n    }\n    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function expose(\n  obj: any,\n  ep: Endpoint = globalThis as any,\n  allowedOrigins: (string | RegExp)[] = [\"*\"]\n) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n          if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n            obj[finalizer]();\n          }\n        }\n      })\n      .catch((error) => {\n        // Send Serialization Error To Caller\n        const [wireValue, transferables] = toWireValue({\n          value: new TypeError(\"Unserializable return value\"),\n          [throwMarker]: 0,\n        });\n        ep.postMessage({ ...wireValue, id }, transferables);\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  const pendingListeners : PendingListenersMap = new Map();\n\n  ep.addEventListener(\"message\", function handleMessage(ev: Event) {\n    const { data } = ev as MessageEvent;\n    if (!data || !data.id) {\n      return;\n    }\n    const resolver = pendingListeners.get(data.id);\n    if (!resolver) {\n      return;\n    }\n\n    try {\n      resolver(data);\n    } finally {\n      pendingListeners.delete(data.id);\n    }\n  });\n\n  return createProxy<T>(ep, pendingListeners, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction releaseEndpoint(ep: Endpoint) {\n  return requestResponseMessage(ep, new Map(), {\n    type: MessageType.RELEASE,\n  }).then(() => {\n    closeEndPoint(ep);\n  });\n}\n\ninterface FinalizationRegistry<T> {\n  new (cb: (heldValue: T) => void): FinalizationRegistry<T>;\n  register(\n    weakItem: object,\n    heldValue: T,\n    unregisterToken?: object | undefined\n  ): void;\n  unregister(unregisterToken: object): void;\n}\ndeclare var FinalizationRegistry: FinalizationRegistry<Endpoint>;\n\nconst proxyCounter = new WeakMap<Endpoint, number>();\nconst proxyFinalizers =\n  \"FinalizationRegistry\" in globalThis &&\n  new FinalizationRegistry((ep: Endpoint) => {\n    const newCount = (proxyCounter.get(ep) || 0) - 1;\n    proxyCounter.set(ep, newCount);\n    if (newCount === 0) {\n      releaseEndpoint(ep);\n    }\n  });\n\nfunction registerProxy(proxy: object, ep: Endpoint) {\n  const newCount = (proxyCounter.get(ep) || 0) + 1;\n  proxyCounter.set(ep, newCount);\n  if (proxyFinalizers) {\n    proxyFinalizers.register(proxy, ep, proxy);\n  }\n}\n\nfunction unregisterProxy(proxy: object) {\n  if (proxyFinalizers) {\n    proxyFinalizers.unregister(proxy);\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  pendingListeners: PendingListenersMap,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          unregisterProxy(proxy);\n          releaseEndpoint(ep);\n          pendingListeners.clear();\n          isProxyReleased = true;\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, pendingListeners, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, pendingListeners, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, pendingListeners, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, pendingListeners, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        pendingListeners,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  registerProxy(proxy, ep);\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T extends {}>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = globalThis,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  pendingListeners: PendingListenersMap,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    pendingListeners.set(id, resolve);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n});\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import { AntVDagreLayout } from './antv-dagre';\nimport { CircularLayout } from './circular';\nimport { ComboCombinedLayout } from './combo-combined';\nimport { ConcentricLayout } from './concentric';\nimport { D3ForceLayout } from './d3-force';\nimport { D3Force3DLayout } from './d3-force-3d';\nimport { DagreLayout } from './dagre';\nimport { ForceLayout } from './force';\nimport { ForceAtlas2Layout } from './force-atlas2';\nimport { FruchtermanLayout } from './fruchterman';\nimport { GridLayout } from './grid';\nimport { MDSLayout } from './mds';\nimport { RadialLayout } from './radial';\nimport { RandomLayout } from './random';\nexport const registry = {\n    circular: CircularLayout,\n    concentric: ConcentricLayout,\n    mds: MDSLayout,\n    random: RandomLayout,\n    grid: GridLayout,\n    radial: RadialLayout,\n    force: ForceLayout,\n    d3force: D3ForceLayout,\n    'd3-force-3d': D3Force3DLayout,\n    fruchterman: FruchtermanLayout,\n    forceAtlas2: ForceAtlas2Layout,\n    dagre: DagreLayout,\n    antvDagre: AntVDagreLayout,\n    comboCombined: ComboCombinedLayout,\n};\n//# sourceMappingURL=registry.js.map",null,"import { __awaiter } from \"tslib\";\nimport { Graph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { layout } from './antv-dagre/layout';\nimport { cloneFormatData, formatNumberFn, formatSizeFn } from './util';\nimport { parseSize } from './util/size';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    rankdir: 'TB',\n    nodesep: 50,\n    ranksep: 50,\n    edgeLabelSpace: true,\n    ranker: 'tight-tree',\n    controlPoints: false,\n    radial: false,\n    focusNode: null, // radial 为 true 时生效，关注的节点\n};\n/**\n * <zh/> AntV 实现的 Dagre 布局\n *\n * <en/> AntV implementation of Dagre layout\n */\nexport class AntVDagreLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'antv-dagre';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericDagreLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericDagreLayout(true, graph, options);\n        });\n    }\n    genericDagreLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { nodeSize, align, rankdir = 'TB', ranksep, nodesep, ranksepFunc, nodesepFunc, edgeLabelSpace, ranker, nodeOrder, begin, controlPoints, radial, sortByCombo, \n            // focusNode,\n            preset, } = mergedOptions;\n            const g = new Graph({\n                tree: [],\n            });\n            const ranksepfunc = formatNumberFn(ranksep || 50, ranksepFunc);\n            const nodesepfunc = formatNumberFn(nodesep || 50, nodesepFunc);\n            let horisep = nodesepfunc;\n            let vertisep = ranksepfunc;\n            if (rankdir === 'LR' || rankdir === 'RL') {\n                horisep = ranksepfunc;\n                vertisep = nodesepfunc;\n            }\n            const nodeSizeFunc = formatSizeFn(10, nodeSize, false);\n            // copy graph to g\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            nodes.forEach((node) => {\n                const size = parseSize(nodeSizeFunc(node));\n                const verti = vertisep(node);\n                const hori = horisep(node);\n                const width = size[0] + 2 * hori;\n                const height = size[1] + 2 * verti;\n                const layer = node.data.layer;\n                if (isNumber(layer)) {\n                    // 如果有layer属性，加入到node的label中\n                    g.addNode({\n                        id: node.id,\n                        data: { width, height, layer },\n                    });\n                }\n                else {\n                    g.addNode({\n                        id: node.id,\n                        data: { width, height },\n                    });\n                }\n            });\n            if (sortByCombo) {\n                g.attachTreeStructure('combo');\n                nodes.forEach((node) => {\n                    const { parentId } = node.data;\n                    if (parentId === undefined)\n                        return;\n                    if (g.hasNode(parentId)) {\n                        g.setParent(node.id, parentId, 'combo');\n                    }\n                });\n            }\n            edges.forEach((edge) => {\n                // dagrejs Wiki https://github.com/dagrejs/dagre/wiki#configuring-the-layout\n                g.addEdge({\n                    id: edge.id,\n                    source: edge.source,\n                    target: edge.target,\n                    data: {\n                        weight: edge.data.weight || 1,\n                    },\n                });\n            });\n            let prevGraph = undefined;\n            if (preset === null || preset === void 0 ? void 0 : preset.length) {\n                prevGraph = new Graph({\n                    nodes: preset,\n                });\n            }\n            layout(g, {\n                prevGraph,\n                edgeLabelSpace,\n                keepNodeOrder: !!nodeOrder,\n                nodeOrder: nodeOrder || [],\n                acyclicer: 'greedy',\n                ranker,\n                rankdir,\n                nodesep,\n                align,\n            });\n            const layoutTopLeft = [0, 0];\n            if (begin) {\n                let minX = Infinity;\n                let minY = Infinity;\n                g.getAllNodes().forEach((node) => {\n                    if (minX > node.data.x)\n                        minX = node.data.x;\n                    if (minY > node.data.y)\n                        minY = node.data.y;\n                });\n                g.getAllEdges().forEach((edge) => {\n                    var _a;\n                    (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.forEach((point) => {\n                        if (minX > point.x)\n                            minX = point.x;\n                        if (minY > point.y)\n                            minY = point.y;\n                    });\n                });\n                layoutTopLeft[0] = begin[0] - minX;\n                layoutTopLeft[1] = begin[1] - minY;\n            }\n            const isHorizontal = rankdir === 'LR' || rankdir === 'RL';\n            if (radial) {\n                // const focusId = (isString(focusNode) ? focusNode : focusNode?.id) as ID;\n                // const focusLayer = focusId ? g.getNode(focusId)?.data._rank as number : 0;\n                // const layers: any[] = [];\n                // const dim = isHorizontal ? \"y\" : \"x\";\n                // const sizeDim = isHorizontal ? \"height\" : \"width\";\n                // // 找到整个图作为环的坐标维度（dim）的最大、最小值，考虑节点宽度\n                // let min = Infinity;\n                // let max = -Infinity;\n                // g.getAllNodes().forEach((node) => {\n                //   const currentNodesep = nodesepfunc(node);\n                //   if (focusLayer === 0) {\n                //     if (!layers[node.data._rank!]) {\n                //       layers[node.data._rank!] = {\n                //         nodes: [],\n                //         totalWidth: 0,\n                //         maxSize: -Infinity,\n                //       };\n                //     }\n                //     layers[node.data._rank!].nodes.push(node);\n                //     layers[node.data._rank!].totalWidth += currentNodesep * 2 + node.data[sizeDim]!;\n                //     if (\n                //       layers[node.data._rank!].maxSize < Math.max(node.data.width!, node.data.height!)\n                //     ) {\n                //       layers[node.data._rank!].maxSize = Math.max(node.data.width!, node.data.height!);\n                //     }\n                //   } else {\n                //     const diffLayer = node.data._rank! - focusLayer!;\n                //     if (diffLayer === 0) {\n                //       if (!layers[diffLayer]) {\n                //         layers[diffLayer] = {\n                //           nodes: [],\n                //           totalWidth: 0,\n                //           maxSize: -Infinity,\n                //         };\n                //       }\n                //       layers[diffLayer].nodes.push(node);\n                //       layers[diffLayer].totalWidth += currentNodesep * 2 + node.data[sizeDim]!;\n                //       if (\n                //         layers[diffLayer].maxSize < Math.max(node.data.width!, node.data.height!)\n                //       ) {\n                //         layers[diffLayer].maxSize = Math.max(node.data.width!, node.data.height!);\n                //       }\n                //     } else {\n                //       const diffLayerAbs = Math.abs(diffLayer);\n                //       if (!layers[diffLayerAbs]) {\n                //         layers[diffLayerAbs] = {\n                //           left: [],\n                //           right: [],\n                //           totalWidth: 0,\n                //           maxSize: -Infinity,\n                //         };\n                //       }\n                //       layers[diffLayerAbs].totalWidth +=\n                //         currentNodesep * 2 + node.data[sizeDim]!;\n                //       if (\n                //         layers[diffLayerAbs].maxSize < Math.max(node.data.width!, node.data.height!)\n                //       ) {\n                //         layers[diffLayerAbs].maxSize = Math.max(\n                //           node.data.width!,\n                //           node.data.height!\n                //         );\n                //       }\n                //       if (diffLayer < 0) {\n                //         layers[diffLayerAbs].left.push(node);\n                //       } else {\n                //         layers[diffLayerAbs].right.push(node);\n                //       }\n                //     }\n                //   }\n                //   const leftPos = node.data[dim]! - node.data[sizeDim]! / 2 - currentNodesep;\n                //   const rightPos = node.data[dim]! + node.data[sizeDim]! / 2 + currentNodesep;\n                //   if (leftPos < min) min = leftPos;\n                //   if (rightPos > max) max = rightPos;\n                // });\n                // // const padding = (max - min) * 0.1; // TODO\n                // // 初始化为第一圈的半径，后面根据每层 ranksep 叠加\n                // let radius = ranksep || 50; // TODO;\n                // const radiusMap: any = {};\n                // // 扩大最大最小值范围，以便为环上留出接缝处的空隙\n                // const rangeLength = (max - min) / 0.9;\n                // const range = [\n                //   (min + max - rangeLength) * 0.5,\n                //   (min + max + rangeLength) * 0.5,\n                // ];\n                // // 根据半径、分布比例，计算节点在环上的位置，并返回该组节点中最大的 ranksep 值\n                // const processNodes = (\n                //   layerNodes: any,\n                //   radius: number,\n                //   propsMaxRanksep = -Infinity,\n                //   arcRange = [0, 1]\n                // ) => {\n                //   let maxRanksep = propsMaxRanksep;\n                //   layerNodes.forEach((node: any) => {\n                //     const coord = g.node(node);\n                //     radiusMap[node] = radius;\n                //     // 获取变形为 radial 后的直角坐标系坐标\n                //     const { x: newX, y: newY } = getRadialPos(\n                //       coord![dim]!,\n                //       range,\n                //       rangeLength,\n                //       radius,\n                //       arcRange\n                //     );\n                //     // 将新坐标写入源数据\n                //     const i = nodes.findIndex((it) => it.id === node);\n                //     if (!nodes[i]) return;\n                //     nodes[i].x = newX + dBegin[0];\n                //     nodes[i].y = newY + dBegin[1];\n                //     // @ts-ignore: pass layer order to data for increment layout use\n                //     nodes[i]._order = coord._order;\n                //     // 找到本层最大的一个 ranksep，作为下一层与本层的间隙，叠加到下一层的半径上\n                //     const currentNodeRanksep = ranksepfunc(nodes[i]);\n                //     if (maxRanksep < currentNodeRanksep) maxRanksep = currentNodeRanksep;\n                //   });\n                //   return maxRanksep;\n                // };\n                // let isFirstLevel = true;\n                // const lastLayerMaxNodeSize = 0;\n                // layers.forEach((layerNodes) => {\n                //   if (\n                //     !layerNodes?.nodes?.length &&\n                //     !layerNodes?.left?.length &&\n                //     !layerNodes?.right?.length\n                //   ) {\n                //     return;\n                //   }\n                //   // 第一层只有一个节点，直接放在圆心，初始半径设定为 0\n                //   if (isFirstLevel && layerNodes.nodes.length === 1) {\n                //     // 将新坐标写入源数据\n                //     const i = nodes.findIndex((it) => it.id === layerNodes.nodes[0]);\n                //     if (i <= -1) return;\n                //     nodes[i].x = dBegin[0];\n                //     nodes[i].y = dBegin[1];\n                //     radiusMap[layerNodes.nodes[0]] = 0;\n                //     radius = ranksepfunc(nodes[i]);\n                //     isFirstLevel = false;\n                //     return;\n                //   }\n                //   // 为接缝留出空隙，半径也需要扩大\n                //   radius = Math.max(radius, layerNodes.totalWidth / (2 * Math.PI)); // / 0.9;\n                //   let maxRanksep = -Infinity;\n                //   if (focusLayer === 0 || layerNodes.nodes?.length) {\n                //     maxRanksep = processNodes(\n                //       layerNodes.nodes,\n                //       radius,\n                //       maxRanksep,\n                //       [0, 1]\n                //     ); // 0.8\n                //   } else {\n                //     const leftRatio =\n                //       layerNodes.left?.length /\n                //       (layerNodes.left?.length + layerNodes.right?.length);\n                //     maxRanksep = processNodes(layerNodes.left, radius, maxRanksep, [\n                //       0,\n                //       leftRatio,\n                //     ]); // 接缝留出 0.05 的缝隙\n                //     maxRanksep = processNodes(layerNodes.right, radius, maxRanksep, [\n                //       leftRatio + 0.05,\n                //       1,\n                //     ]); // 接缝留出 0.05 的缝隙\n                //   }\n                //   radius += maxRanksep;\n                //   isFirstLevel = false;\n                //   lastLayerMaxNodeSize - layerNodes.maxSize;\n                // });\n                // g.edges().forEach((edge: any) => {\n                //   const coord = g.edge(edge);\n                //   const i = edges.findIndex((it) => {\n                //     const source = getEdgeTerminal(it, \"source\");\n                //     const target = getEdgeTerminal(it, \"target\");\n                //     return source === edge.v && target === edge.w;\n                //   });\n                //   if (i <= -1) return;\n                //   if (\n                //     self.edgeLabelSpace &&\n                //     self.controlPoints &&\n                //     edges[i].type !== \"loop\"\n                //   ) {\n                //     const otherDim = dim === \"x\" ? \"y\" : \"x\";\n                //     const controlPoints = coord?.points?.slice(\n                //       1,\n                //       coord.points.length - 1\n                //     );\n                //     const newControlPoints: Point[] = [];\n                //     const sourceOtherDimValue = g.node(edge.v)?.[otherDim]!;\n                //     const otherDimDist =\n                //       sourceOtherDimValue - g.node(edge.w)?.[otherDim]!;\n                //     const sourceRadius = radiusMap[edge.v];\n                //     const radiusDist = sourceRadius - radiusMap[edge.w];\n                //     controlPoints?.forEach((point: any) => {\n                //       // 根据该边的起点、终点半径，及起点、终点、控制点位置关系，确定该控制点的半径\n                //       const cRadius =\n                //         ((point[otherDim] - sourceOtherDimValue) / otherDimDist) *\n                //           radiusDist +\n                //         sourceRadius;\n                //       // 获取变形为 radial 后的直角坐标系坐标\n                //       const newPos = getRadialPos(\n                //         point[dim],\n                //         range,\n                //         rangeLength,\n                //         cRadius\n                //       );\n                //       newControlPoints.push({\n                //         x: newPos.x + dBegin[0],\n                //         y: newPos.y + dBegin[1],\n                //       });\n                //     });\n                //     edges[i].controlPoints = newControlPoints;\n                //   }\n                // });\n            }\n            else {\n                const layerCoords = new Set();\n                const isInvert = rankdir === 'BT' || rankdir === 'RL';\n                const layerCoordSort = isInvert\n                    ? (a, b) => b - a\n                    : (a, b) => a - b;\n                g.getAllNodes().forEach((node) => {\n                    // let ndata: any = this.nodeMap[node];\n                    // if (!ndata) {\n                    //   ndata = combos?.find((it) => it.id === node);\n                    // }\n                    // if (!ndata) return;\n                    // ndata.x = node.data.x! + dBegin[0];\n                    // ndata.y = node.data.y! + dBegin[1];\n                    // //  pass layer order to data for increment layout use\n                    // ndata._order = node.data._order;\n                    // layerCoords.add(isHorizontal ? ndata.x : ndata.y);\n                    node.data.x = node.data.x + layoutTopLeft[0];\n                    node.data.y = node.data.y + layoutTopLeft[1];\n                    layerCoords.add(isHorizontal ? node.data.x : node.data.y);\n                });\n                const layerCoordsArr = Array.from(layerCoords).sort(layerCoordSort);\n                // pre-define the isHorizontal related functions to avoid redundant calc in interations\n                const isDifferentLayer = isHorizontal\n                    ? (point1, point2) => point1.x !== point2.x\n                    : (point1, point2) => point1.y !== point2.y;\n                const filterControlPointsOutOfBoundary = isHorizontal\n                    ? (ps, point1, point2) => {\n                        const max = Math.max(point1.y, point2.y);\n                        const min = Math.min(point1.y, point2.y);\n                        return ps.filter((point) => point.y <= max && point.y >= min);\n                    }\n                    : (ps, point1, point2) => {\n                        const max = Math.max(point1.x, point2.x);\n                        const min = Math.min(point1.x, point2.x);\n                        return ps.filter((point) => point.x <= max && point.x >= min);\n                    };\n                g.getAllEdges().forEach((edge, i) => {\n                    var _a;\n                    // const i = edges.findIndex((it) => {\n                    //   return it.source === edge.source && it.target === edge.target;\n                    // });\n                    // if (i <= -1) return;\n                    if (edgeLabelSpace && controlPoints && edge.data.type !== 'loop') {\n                        edge.data.controlPoints = getControlPoints((_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.map(({ x, y }) => ({\n                            x: x + layoutTopLeft[0],\n                            y: y + layoutTopLeft[1],\n                        })), g.getNode(edge.source), g.getNode(edge.target), layerCoordsArr, isHorizontal, isDifferentLayer, filterControlPointsOutOfBoundary);\n                    }\n                });\n            }\n            // calculated nodes as temporary result\n            let layoutNodes = [];\n            // layout according to the original order in the data.nodes\n            layoutNodes = g\n                .getAllNodes()\n                .map((node) => cloneFormatData(node));\n            const layoutEdges = g.getAllEdges();\n            if (assign) {\n                layoutNodes.forEach((node) => {\n                    graph.mergeNodeData(node.id, {\n                        x: node.data.x,\n                        y: node.data.y,\n                    });\n                });\n                layoutEdges.forEach((edge) => {\n                    graph.mergeEdgeData(edge.id, {\n                        controlPoints: edge.data.controlPoints,\n                    });\n                });\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges: layoutEdges,\n            };\n            return result;\n        });\n    }\n}\n/**\n * Format controlPoints to avoid polylines crossing nodes\n * @param points\n * @param sourceNode\n * @param targetNode\n * @param layerCoordsArr\n * @param isHorizontal\n * @returns\n */\nconst getControlPoints = (points, sourceNode, targetNode, layerCoordsArr, isHorizontal, isDifferentLayer, filterControlPointsOutOfBoundary) => {\n    let controlPoints = (points === null || points === void 0 ? void 0 : points.slice(1, points.length - 1)) || []; // 去掉头尾\n    // 酌情增加控制点，使折线不穿过跨层的节点\n    if (sourceNode && targetNode) {\n        let { x: sourceX, y: sourceY } = sourceNode.data;\n        let { x: targetX, y: targetY } = targetNode.data;\n        if (isHorizontal) {\n            sourceX = sourceNode.data.y;\n            sourceY = sourceNode.data.x;\n            targetX = targetNode.data.y;\n            targetY = targetNode.data.x;\n        }\n        // 为跨层级的边增加第一个控制点。忽略垂直的/横向的边。\n        // 新控制点 = {\n        //   x: 终点x,\n        //   y: (起点y + 下一层y) / 2,   #下一层y可能不等于终点y\n        // }\n        if (targetY !== sourceY && sourceX !== targetX) {\n            const sourceLayer = layerCoordsArr.indexOf(sourceY);\n            const sourceNextLayerCoord = layerCoordsArr[sourceLayer + 1];\n            if (sourceNextLayerCoord) {\n                const firstControlPoint = controlPoints[0];\n                const insertStartControlPoint = (isHorizontal\n                    ? {\n                        x: (sourceY + sourceNextLayerCoord) / 2,\n                        y: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.y) || targetX,\n                    }\n                    : {\n                        x: (firstControlPoint === null || firstControlPoint === void 0 ? void 0 : firstControlPoint.x) || targetX,\n                        y: (sourceY + sourceNextLayerCoord) / 2,\n                    });\n                // 当新增的控制点不存在（!=当前第一个控制点）时添加\n                if (!firstControlPoint ||\n                    isDifferentLayer(firstControlPoint, insertStartControlPoint)) {\n                    controlPoints.unshift(insertStartControlPoint);\n                }\n            }\n            const targetLayer = layerCoordsArr.indexOf(targetY);\n            const layerDiff = Math.abs(targetLayer - sourceLayer);\n            if (layerDiff === 1) {\n                controlPoints = filterControlPointsOutOfBoundary(controlPoints, sourceNode.data, targetNode.data);\n                // one controlPoint at least\n                if (!controlPoints.length) {\n                    controlPoints.push((isHorizontal\n                        ? {\n                            x: (sourceY + targetY) / 2,\n                            y: sourceX,\n                        }\n                        : {\n                            x: sourceX,\n                            y: (sourceY + targetY) / 2,\n                        }));\n                }\n            }\n            else if (layerDiff > 1) {\n                const targetLastLayerCoord = layerCoordsArr[targetLayer - 1];\n                if (targetLastLayerCoord) {\n                    const lastControlPoints = controlPoints[controlPoints.length - 1];\n                    const insertEndControlPoint = (isHorizontal\n                        ? {\n                            x: (targetY + targetLastLayerCoord) / 2,\n                            y: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.y) || targetX,\n                        }\n                        : {\n                            x: (lastControlPoints === null || lastControlPoints === void 0 ? void 0 : lastControlPoints.x) || sourceX,\n                            y: (targetY + targetLastLayerCoord) / 2,\n                        });\n                    // 当新增的控制点不存在（!=当前最后一个控制点）时添加\n                    if (!lastControlPoints ||\n                        isDifferentLayer(lastControlPoints, insertEndControlPoint)) {\n                        controlPoints.push(insertEndControlPoint);\n                    }\n                }\n            }\n        }\n    }\n    return controlPoints;\n};\n//# sourceMappingURL=antv-dagre.js.map",null,"/**\n * 判断值是否为数字\n * @return 是否为数字\n */\nexport default function isNumber(value) {\n    return typeof value === 'number';\n}\n//# sourceMappingURL=is-number.js.map",null,"import { Graph } from '@antv/graphlib';\nimport { isNil } from '@antv/util';\nimport { run as runAcyclic, undo as undoAcyclic } from './acyclic';\nimport { addBorderSegments } from './add-border-segments';\nimport { adjust as adjustCoordinateSystem, undo as undoCoordinateSystem, } from './coordinate-system';\nimport { cleanup as cleanupNestingGraph, run as runNestingGraph, } from './nesting-graph';\nimport { run as runNormalize, undo as undoNormalize } from './normalize';\nimport { order } from './order';\nimport { initDataOrder } from './order/init-data-order';\nimport { parentDummyChains } from './parent-dummy-chains';\nimport { position } from './position';\nimport { rank } from './rank';\nimport { addDummyNode, asNonCompoundGraph, buildLayerMatrix, intersectRect, normalizeRanks, removeEmptyRanks, } from './util';\n// const graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\n// const graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\n// const graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nexport const layout = (g, options) => {\n    const { edgeLabelSpace, keepNodeOrder, prevGraph, rankdir, ranksep } = options;\n    // 如果在原图基础上修改，继承原图的order结果\n    if (!keepNodeOrder && prevGraph) {\n        inheritOrder(g, prevGraph);\n    }\n    const layoutGraph = buildLayoutGraph(g);\n    // 控制是否为边的label留位置（这会影响是否在边中间添加dummy node）\n    if (!!edgeLabelSpace) {\n        options.ranksep = makeSpaceForEdgeLabels(layoutGraph, {\n            rankdir,\n            ranksep,\n        });\n    }\n    let dimension;\n    // TODO: 暂时处理层级设置不正确时的异常报错，提示设置正确的层级\n    try {\n        dimension = runLayout(layoutGraph, options);\n    }\n    catch (e) {\n        if (e.message === 'Not possible to find intersection inside of the rectangle') {\n            console.error(\"The following error may be caused by improper layer setting, please make sure your manual layer setting does not violate the graph's structure:\\n\", e);\n            return;\n        }\n        throw e;\n    }\n    updateInputGraph(g, layoutGraph);\n    return dimension;\n};\nconst runLayout = (g, options) => {\n    const { acyclicer, ranker, rankdir = 'tb', nodeOrder, keepNodeOrder, align, nodesep = 50, edgesep = 20, ranksep = 50, } = options;\n    removeSelfEdges(g);\n    runAcyclic(g, acyclicer);\n    const { nestingRoot, nodeRankFactor } = runNestingGraph(g);\n    rank(asNonCompoundGraph(g), ranker);\n    injectEdgeLabelProxies(g);\n    removeEmptyRanks(g, nodeRankFactor);\n    cleanupNestingGraph(g, nestingRoot);\n    normalizeRanks(g);\n    assignRankMinMax(g);\n    removeEdgeLabelProxies(g);\n    const dummyChains = [];\n    runNormalize(g, dummyChains);\n    parentDummyChains(g, dummyChains);\n    addBorderSegments(g);\n    if (keepNodeOrder) {\n        initDataOrder(g, nodeOrder);\n    }\n    order(g, keepNodeOrder);\n    insertSelfEdges(g);\n    adjustCoordinateSystem(g, rankdir);\n    position(g, {\n        align,\n        nodesep,\n        edgesep,\n        ranksep,\n    });\n    positionSelfEdges(g);\n    removeBorderNodes(g);\n    undoNormalize(g, dummyChains);\n    fixupEdgeLabelCoords(g);\n    undoCoordinateSystem(g, rankdir);\n    const { width, height } = translateGraph(g);\n    assignNodeIntersects(g);\n    reversePointsForReversedEdges(g);\n    undoAcyclic(g);\n    return { width, height };\n};\n/**\n * 继承上一个布局中的order，防止翻转\n * TODO: 暂时没有考虑涉及层级变动的布局，只保证原来布局层级和相对顺序不变\n */\nconst inheritOrder = (currG, prevG) => {\n    currG.getAllNodes().forEach((n) => {\n        const node = currG.getNode(n.id);\n        if (prevG.hasNode(n.id)) {\n            const prevNode = prevG.getNode(n.id);\n            node.data.fixorder = prevNode.data._order;\n            delete prevNode.data._order;\n        }\n        else {\n            delete node.data.fixorder;\n        }\n    });\n};\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nconst updateInputGraph = (inputGraph, layoutGraph) => {\n    inputGraph.getAllNodes().forEach((v) => {\n        var _a;\n        const inputLabel = inputGraph.getNode(v.id);\n        if (inputLabel) {\n            const layoutLabel = layoutGraph.getNode(v.id);\n            inputLabel.data.x = layoutLabel.data.x;\n            inputLabel.data.y = layoutLabel.data.y;\n            inputLabel.data._order = layoutLabel.data.order;\n            inputLabel.data._rank = layoutLabel.data.rank;\n            if ((_a = layoutGraph.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n                inputLabel.data.width = layoutLabel.data.width;\n                inputLabel.data.height = layoutLabel.data.height;\n            }\n        }\n    });\n    inputGraph.getAllEdges().forEach((e) => {\n        const inputLabel = inputGraph.getEdge(e.id);\n        const layoutLabel = layoutGraph.getEdge(e.id);\n        inputLabel.data.points = layoutLabel ? layoutLabel.data.points : [];\n        if (layoutLabel && layoutLabel.data.hasOwnProperty('x')) {\n            inputLabel.data.x = layoutLabel.data.x;\n            inputLabel.data.y = layoutLabel.data.y;\n        }\n    });\n    // inputGraph.graph().width = layoutGraph.graph().width;\n    // inputGraph.graph().height = layoutGraph.graph().height;\n};\nconst nodeNumAttrs = ['width', 'height', 'layer', 'fixorder']; // 需要传入layer, fixOrder作为参数参考\nconst nodeDefaults = { width: 0, height: 0 };\nconst edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nconst edgeDefaults = {\n    minlen: 1,\n    weight: 1,\n    width: 0,\n    height: 0,\n    labeloffset: 10,\n    labelpos: 'r',\n};\nconst edgeAttrs = ['labelpos'];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nconst buildLayoutGraph = (inputGraph) => {\n    const g = new Graph({ tree: [] });\n    inputGraph.getAllNodes().forEach((v) => {\n        const node = canonicalize(inputGraph.getNode(v.id).data);\n        const defaultNode = Object.assign(Object.assign({}, nodeDefaults), node);\n        const defaultAttrs = selectNumberAttrs(defaultNode, nodeNumAttrs);\n        if (!g.hasNode(v.id)) {\n            g.addNode({\n                id: v.id,\n                data: Object.assign({}, defaultAttrs),\n            });\n        }\n        const parent = inputGraph.hasTreeStructure('combo')\n            ? inputGraph.getParent(v.id, 'combo')\n            : inputGraph.getParent(v.id);\n        if (!isNil(parent)) {\n            if (!g.hasNode(parent.id)) {\n                g.addNode(Object.assign({}, parent));\n            }\n            g.setParent(v.id, parent.id);\n        }\n    });\n    inputGraph.getAllEdges().forEach((e) => {\n        const edge = canonicalize(inputGraph.getEdge(e.id).data);\n        const pickedProperties = {};\n        edgeAttrs === null || edgeAttrs === void 0 ? void 0 : edgeAttrs.forEach((key) => {\n            if (edge[key] !== undefined)\n                pickedProperties[key] = edge[key];\n        });\n        g.addEdge({\n            id: e.id,\n            source: e.source,\n            target: e.target,\n            data: Object.assign({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), pickedProperties),\n        });\n    });\n    return g;\n};\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nconst makeSpaceForEdgeLabels = (g, options) => {\n    const { ranksep = 0, rankdir } = options;\n    g.getAllNodes().forEach((node) => {\n        if (!isNaN(node.data.layer)) {\n            if (!node.data.layer)\n                node.data.layer = 0;\n        }\n    });\n    g.getAllEdges().forEach((edge) => {\n        var _a;\n        edge.data.minlen *= 2;\n        if (((_a = edge.data.labelpos) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'c') {\n            if (rankdir === 'TB' || rankdir === 'BT') {\n                edge.data.width += edge.data.labeloffset;\n            }\n            else {\n                edge.data.height += edge.data.labeloffset;\n            }\n        }\n    });\n    return ranksep / 2;\n};\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nconst injectEdgeLabelProxies = (g) => {\n    g.getAllEdges().forEach((e) => {\n        if (e.data.width && e.data.height) {\n            const v = g.getNode(e.source);\n            const w = g.getNode(e.target);\n            const label = {\n                e,\n                rank: (w.data.rank - v.data.rank) / 2 + v.data.rank,\n            };\n            addDummyNode(g, 'edge-proxy', label, '_ep');\n        }\n    });\n};\nconst assignRankMinMax = (g) => {\n    let maxRank = 0;\n    g.getAllNodes().forEach((node) => {\n        var _a, _b;\n        if (node.data.borderTop) {\n            node.data.minRank = (_a = g.getNode(node.data.borderTop)) === null || _a === void 0 ? void 0 : _a.data.rank;\n            node.data.maxRank = (_b = g.getNode(node.data.borderBottom)) === null || _b === void 0 ? void 0 : _b.data.rank;\n            maxRank = Math.max(maxRank, node.data.maxRank || -Infinity);\n        }\n    });\n    return maxRank;\n};\nconst removeEdgeLabelProxies = (g) => {\n    g.getAllNodes().forEach((node) => {\n        if (node.data.dummy === 'edge-proxy') {\n            g.getEdge(node.data.e.id).data.labelRank = node.data.rank;\n            g.removeNode(node.id);\n        }\n    });\n};\nconst translateGraph = (g, options) => {\n    let minX;\n    let maxX = 0;\n    let minY;\n    let maxY = 0;\n    const { marginx: marginX = 0, marginy: marginY = 0 } = options || {};\n    const getExtremes = (attrs) => {\n        if (!attrs.data)\n            return;\n        const x = attrs.data.x;\n        const y = attrs.data.y;\n        const w = attrs.data.width;\n        const h = attrs.data.height;\n        if (!isNaN(x) && !isNaN(w)) {\n            if (minX === undefined) {\n                minX = x - w / 2;\n            }\n            minX = Math.min(minX, x - w / 2);\n            maxX = Math.max(maxX, x + w / 2);\n        }\n        if (!isNaN(y) && !isNaN(h)) {\n            if (minY === undefined) {\n                minY = y - h / 2;\n            }\n            minY = Math.min(minY, y - h / 2);\n            maxY = Math.max(maxY, y + h / 2);\n        }\n    };\n    g.getAllNodes().forEach((v) => {\n        getExtremes(v);\n    });\n    g.getAllEdges().forEach((e) => {\n        if (e === null || e === void 0 ? void 0 : e.data.hasOwnProperty('x')) {\n            getExtremes(e);\n        }\n    });\n    minX -= marginX;\n    minY -= marginY;\n    g.getAllNodes().forEach((node) => {\n        node.data.x -= minX;\n        node.data.y -= minY;\n    });\n    g.getAllEdges().forEach((edge) => {\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\n            p.x -= minX;\n            p.y -= minY;\n        });\n        if (edge.data.hasOwnProperty('x')) {\n            edge.data.x -= minX;\n        }\n        if (edge.data.hasOwnProperty('y')) {\n            edge.data.y -= minY;\n        }\n    });\n    return {\n        width: maxX - minX + marginX,\n        height: maxY - minY + marginY,\n    };\n};\nconst assignNodeIntersects = (g) => {\n    g.getAllEdges().forEach((e) => {\n        const nodeV = g.getNode(e.source);\n        const nodeW = g.getNode(e.target);\n        let p1;\n        let p2;\n        if (!e.data.points) {\n            e.data.points = [];\n            p1 = { x: nodeW.data.x, y: nodeW.data.y };\n            p2 = { x: nodeV.data.x, y: nodeV.data.y };\n        }\n        else {\n            p1 = e.data.points[0];\n            p2 = e.data.points[e.data.points.length - 1];\n        }\n        e.data.points.unshift(intersectRect(nodeV.data, p1));\n        e.data.points.push(intersectRect(nodeW.data, p2));\n    });\n};\nconst fixupEdgeLabelCoords = (g) => {\n    g.getAllEdges().forEach((edge) => {\n        if (edge.data.hasOwnProperty('x')) {\n            if (edge.data.labelpos === 'l' || edge.data.labelpos === 'r') {\n                edge.data.width -= edge.data.labeloffset;\n            }\n            switch (edge.data.labelpos) {\n                case 'l':\n                    edge.data.x -= edge.data.width / 2 + edge.data.labeloffset;\n                    break;\n                case 'r':\n                    edge.data.x += edge.data.width / 2 + edge.data.labeloffset;\n                    break;\n            }\n        }\n    });\n};\nconst reversePointsForReversedEdges = (g) => {\n    g.getAllEdges().forEach((edge) => {\n        var _a;\n        if (edge.data.reversed) {\n            (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.reverse();\n        }\n    });\n};\nconst removeBorderNodes = (g) => {\n    g.getAllNodes().forEach((v) => {\n        var _a, _b, _c;\n        if ((_a = g.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length) {\n            const node = g.getNode(v.id);\n            const t = g.getNode(node.data.borderTop);\n            const b = g.getNode(node.data.borderBottom);\n            const l = g.getNode(node.data.borderLeft[((_b = node.data.borderLeft) === null || _b === void 0 ? void 0 : _b.length) - 1]);\n            const r = g.getNode(node.data.borderRight[((_c = node.data.borderRight) === null || _c === void 0 ? void 0 : _c.length) - 1]);\n            node.data.width = Math.abs((r === null || r === void 0 ? void 0 : r.data.x) - (l === null || l === void 0 ? void 0 : l.data.x)) || 10;\n            node.data.height = Math.abs((b === null || b === void 0 ? void 0 : b.data.y) - (t === null || t === void 0 ? void 0 : t.data.y)) || 10;\n            node.data.x = ((l === null || l === void 0 ? void 0 : l.data.x) || 0) + node.data.width / 2;\n            node.data.y = ((t === null || t === void 0 ? void 0 : t.data.y) || 0) + node.data.height / 2;\n        }\n    });\n    g.getAllNodes().forEach((n) => {\n        if (n.data.dummy === 'border') {\n            g.removeNode(n.id);\n        }\n    });\n};\nconst removeSelfEdges = (g) => {\n    g.getAllEdges().forEach((e) => {\n        if (e.source === e.target) {\n            const node = g.getNode(e.source);\n            if (!node.data.selfEdges) {\n                node.data.selfEdges = [];\n            }\n            node.data.selfEdges.push(e);\n            g.removeEdge(e.id);\n        }\n    });\n};\nconst insertSelfEdges = (g) => {\n    const layers = buildLayerMatrix(g);\n    layers === null || layers === void 0 ? void 0 : layers.forEach((layer) => {\n        let orderShift = 0;\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n            var _a;\n            const node = g.getNode(v);\n            node.data.order = i + orderShift;\n            (_a = node.data.selfEdges) === null || _a === void 0 ? void 0 : _a.forEach((selfEdge) => {\n                addDummyNode(g, 'selfedge', {\n                    width: selfEdge.data.width,\n                    height: selfEdge.data.height,\n                    rank: node.data.rank,\n                    order: i + ++orderShift,\n                    e: selfEdge,\n                }, '_se');\n            });\n            delete node.data.selfEdges;\n        });\n    });\n};\nconst positionSelfEdges = (g) => {\n    g.getAllNodes().forEach((v) => {\n        const node = g.getNode(v.id);\n        if (node.data.dummy === 'selfedge') {\n            const selfNode = g.getNode(node.data.e.source);\n            const x = selfNode.data.x + selfNode.data.width / 2;\n            const y = selfNode.data.y;\n            const dx = node.data.x - x;\n            const dy = selfNode.data.height / 2;\n            if (g.hasEdge(node.data.e.id)) {\n                g.updateEdgeData(node.data.e.id, node.data.e.data);\n            }\n            else {\n                g.addEdge({\n                    id: node.data.e.id,\n                    source: node.data.e.source,\n                    target: node.data.e.target,\n                    data: node.data.e.data,\n                });\n            }\n            g.removeNode(v.id);\n            node.data.e.data.points = [\n                { x: x + (2 * dx) / 3, y: y - dy },\n                { x: x + (5 * dx) / 6, y: y - dy },\n                { y, x: x + dx },\n                { x: x + (5 * dx) / 6, y: y + dy },\n                { x: x + (2 * dx) / 3, y: y + dy },\n            ];\n            node.data.e.data.x = node.data.x;\n            node.data.e.data.y = node.data.y;\n        }\n    });\n};\nconst selectNumberAttrs = (obj, attrs) => {\n    const pickedProperties = {};\n    attrs === null || attrs === void 0 ? void 0 : attrs.forEach((key) => {\n        if (obj[key] === undefined)\n            return;\n        pickedProperties[key] = +obj[key];\n    });\n    return pickedProperties;\n};\nconst canonicalize = (attrs = {}) => {\n    const newAttrs = {};\n    Object.keys(attrs).forEach((k) => {\n        newAttrs[k.toLowerCase()] = attrs[k];\n    });\n    return newAttrs;\n};\n//# sourceMappingURL=layout.js.map",null,"/**\n * 判断值是否为 null 或 undefined\n * @return 是否为 null 或 undefined\n */\nexport default function isNil(value) {\n    return value === null || value === undefined;\n}\n//# sourceMappingURL=is-nil.js.map",null,"import { greedyFAS } from './greedy-fas';\nconst run = (g, acyclicer) => {\n    const weightFn = (g) => {\n        return (e) => e.data.weight || 1;\n    };\n    const fas = acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n    fas === null || fas === void 0 ? void 0 : fas.forEach((e) => {\n        const label = e.data;\n        g.removeEdge(e.id);\n        label.forwardName = e.data.name;\n        label.reversed = true;\n        g.addEdge({\n            id: e.id,\n            source: e.target,\n            target: e.source,\n            data: Object.assign({}, label),\n        });\n    });\n};\nconst dfsFAS = (g) => {\n    const fas = [];\n    const stack = {};\n    const visited = {};\n    const dfs = (v) => {\n        if (visited[v]) {\n            return;\n        }\n        visited[v] = true;\n        stack[v] = true;\n        g.getRelatedEdges(v, 'out').forEach((e) => {\n            if (stack[e.target]) {\n                fas.push(e);\n            }\n            else {\n                dfs(e.target);\n            }\n        });\n        delete stack[v];\n    };\n    g.getAllNodes().forEach((n) => dfs(n.id));\n    return fas;\n};\nconst undo = (g) => {\n    g.getAllEdges().forEach((e) => {\n        const label = e.data;\n        if (label.reversed) {\n            g.removeEdge(e.id);\n            const forwardName = label.forwardName;\n            delete label.reversed;\n            delete label.forwardName;\n            g.addEdge({\n                id: e.id,\n                source: e.target,\n                target: e.source,\n                data: Object.assign(Object.assign({}, label), { forwardName }),\n            });\n        }\n    });\n};\nexport { run, undo };\n//# sourceMappingURL=acyclic.js.map",null,"/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n *\n * @see https://github.com/dagrejs/dagre/blob/master/lib/greedy-fas.js\n */\nimport { Graph } from '@antv/graphlib';\nimport RawList from './data/list';\nclass List extends RawList {\n}\nconst DEFAULT_WEIGHT_FN = () => 1;\nexport const greedyFAS = (g, weightFn) => {\n    var _a;\n    if (g.getAllNodes().length <= 1)\n        return [];\n    const state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n    const results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n    return (_a = results\n        .map((e) => g.getRelatedEdges(e.v, 'out').filter(({ target }) => target === e.w))) === null || _a === void 0 ? void 0 : _a.flat();\n};\nconst doGreedyFAS = (g, buckets, zeroIdx) => {\n    let results = [];\n    const sources = buckets[buckets.length - 1];\n    const sinks = buckets[0];\n    let entry;\n    while (g.getAllNodes().length) {\n        while ((entry = sinks.dequeue())) {\n            removeNode(g, buckets, zeroIdx, entry);\n        }\n        while ((entry = sources.dequeue())) {\n            removeNode(g, buckets, zeroIdx, entry);\n        }\n        if (g.getAllNodes().length) {\n            for (let i = buckets.length - 2; i > 0; --i) {\n                entry = buckets[i].dequeue();\n                if (entry) {\n                    results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n                    break;\n                }\n            }\n        }\n    }\n    return results;\n};\nconst removeNode = (g, buckets, zeroIdx, entry, collectPredecessors) => {\n    var _a, _b;\n    const results = [];\n    if (g.hasNode(entry.v)) {\n        (_a = g.getRelatedEdges(entry.v, 'in')) === null || _a === void 0 ? void 0 : _a.forEach((edge) => {\n            const weight = edge.data.weight;\n            const uEntry = g.getNode(edge.source);\n            if (collectPredecessors) {\n                // this result not really care about in or out\n                results.push({ v: edge.source, w: edge.target, in: 0, out: 0 });\n            }\n            if (uEntry.data.out === undefined)\n                uEntry.data.out = 0;\n            // @ts-ignore\n            uEntry.data.out -= weight;\n            assignBucket(buckets, zeroIdx, Object.assign({ v: uEntry.id }, uEntry.data));\n        });\n        (_b = g.getRelatedEdges(entry.v, 'out')) === null || _b === void 0 ? void 0 : _b.forEach((edge) => {\n            const weight = edge.data.weight;\n            const w = edge.target;\n            const wEntry = g.getNode(w);\n            if (wEntry.data.in === undefined)\n                wEntry.data.in = 0;\n            // @ts-ignore\n            wEntry.data.in -= weight;\n            assignBucket(buckets, zeroIdx, Object.assign({ v: wEntry.id }, wEntry.data));\n        });\n        g.removeNode(entry.v);\n    }\n    return collectPredecessors ? results : undefined;\n};\nconst buildState = (g, weightFn) => {\n    const fasGraph = new Graph();\n    let maxIn = 0;\n    let maxOut = 0;\n    g.getAllNodes().forEach((v) => {\n        fasGraph.addNode({\n            id: v.id,\n            data: { v: v.id, in: 0, out: 0 },\n        });\n    });\n    // Aggregate weights on nodes, but also sum the weights across multi-edges\n    // into a single edge for the fasGraph.\n    g.getAllEdges().forEach((e) => {\n        const edge = fasGraph\n            .getRelatedEdges(e.source, 'out')\n            .find((edge) => edge.target === e.target);\n        const weight = (weightFn === null || weightFn === void 0 ? void 0 : weightFn(e)) || 1;\n        if (!edge) {\n            fasGraph.addEdge({\n                id: e.id,\n                source: e.source,\n                target: e.target,\n                data: {\n                    weight,\n                },\n            });\n        }\n        else {\n            fasGraph.updateEdgeData(edge === null || edge === void 0 ? void 0 : edge.id, Object.assign(Object.assign({}, edge.data), { weight: edge.data.weight + weight }));\n        }\n        // @ts-ignore\n        maxOut = Math.max(maxOut, (fasGraph.getNode(e.source).data.out += weight));\n        // @ts-ignore\n        maxIn = Math.max(maxIn, (fasGraph.getNode(e.target).data.in += weight));\n    });\n    const buckets = [];\n    const rangeMax = maxOut + maxIn + 3;\n    for (let i = 0; i < rangeMax; i++) {\n        buckets.push(new List());\n    }\n    const zeroIdx = maxIn + 1;\n    fasGraph.getAllNodes().forEach((v) => {\n        assignBucket(buckets, zeroIdx, Object.assign({ v: v.id }, fasGraph.getNode(v.id).data));\n    });\n    return { buckets, zeroIdx, graph: fasGraph };\n};\nconst assignBucket = (buckets, zeroIdx, entry) => {\n    if (!entry.out) {\n        buckets[0].enqueue(entry);\n    }\n    else if (!entry['in']) {\n        buckets[buckets.length - 1].enqueue(entry);\n    }\n    else {\n        buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n    }\n};\n//# sourceMappingURL=greedy-fas.js.map",null,"const filterOutLinks = (k, v) => {\n    if (k !== 'next' && k !== 'prev') {\n        return v;\n    }\n};\nconst unlink = (entry) => {\n    entry.prev.next = entry.next;\n    entry.next.prev = entry.prev;\n    delete entry.next;\n    delete entry.prev;\n};\nexport default class List {\n    constructor() {\n        const shortcut = {};\n        shortcut.prev = shortcut;\n        shortcut.next = shortcut.prev;\n        this.shortcut = shortcut;\n    }\n    dequeue() {\n        const shortcut = this.shortcut;\n        const entry = shortcut.prev;\n        if (entry && entry !== shortcut) {\n            unlink(entry);\n            return entry;\n        }\n    }\n    enqueue(entry) {\n        const shortcut = this.shortcut;\n        if (entry.prev && entry.next) {\n            unlink(entry);\n        }\n        entry.next = shortcut.next;\n        shortcut.next.prev = entry;\n        shortcut.next = entry;\n        entry.prev = shortcut;\n    }\n    toString() {\n        const strs = [];\n        const sentinel = this.shortcut;\n        let curr = sentinel.prev;\n        while (curr !== sentinel) {\n            strs.push(JSON.stringify(curr, filterOutLinks));\n            curr = curr === null || curr === void 0 ? void 0 : curr.prev;\n        }\n        return `[${strs.join(', ')}]`;\n    }\n}\n//# sourceMappingURL=list.js.map",null,"import { addDummyNode } from './util';\nexport const addBorderSegments = (g) => {\n    const dfs = (v) => {\n        const children = g.getChildren(v);\n        const node = g.getNode(v);\n        if (children === null || children === void 0 ? void 0 : children.length) {\n            children.forEach((child) => dfs(child.id));\n        }\n        if (node.data.hasOwnProperty('minRank')) {\n            node.data.borderLeft = [];\n            node.data.borderRight = [];\n            for (let rank = node.data.minRank, maxRank = node.data.maxRank + 1; rank < maxRank; rank += 1) {\n                addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n                addBorderNode(g, 'borderRight', '_br', v, node, rank);\n            }\n        }\n    };\n    g.getRoots().forEach((child) => dfs(child.id));\n};\nconst addBorderNode = (g, prop, prefix, sg, sgNode, rank) => {\n    const label = { rank, borderType: prop, width: 0, height: 0 };\n    // @ts-ignore\n    const prev = sgNode.data[prop][rank - 1];\n    const curr = addDummyNode(g, 'border', label, prefix);\n    // @ts-ignore\n    sgNode.data[prop][rank] = curr;\n    g.setParent(curr, sg);\n    if (prev) {\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: prev,\n            target: curr,\n            data: { weight: 1 },\n        });\n    }\n};\n//# sourceMappingURL=add-border-segments.js.map",null,"import { Graph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nconst safeSort = (valueA, valueB) => {\n    return Number(valueA) - Number(valueB);\n};\n/*\n * Adds a dummy node to the graph and return v.\n */\nexport const addDummyNode = (g, type, data, name) => {\n    let v;\n    do {\n        v = `${name}${Math.random()}`;\n    } while (g.hasNode(v));\n    data.dummy = type;\n    g.addNode({\n        id: v,\n        data,\n    });\n    return v;\n};\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nexport const simplify = (g) => {\n    const simplified = new Graph();\n    g.getAllNodes().forEach((v) => {\n        simplified.addNode(Object.assign({}, v));\n    });\n    g.getAllEdges().forEach((e) => {\n        const edge = simplified\n            .getRelatedEdges(e.source, 'out')\n            .find((edge) => edge.target === e.target);\n        if (!edge) {\n            simplified.addEdge({\n                id: e.id,\n                source: e.source,\n                target: e.target,\n                data: {\n                    weight: e.data.weight || 0,\n                    minlen: e.data.minlen || 1,\n                },\n            });\n        }\n        else {\n            simplified.updateEdgeData(edge === null || edge === void 0 ? void 0 : edge.id, Object.assign(Object.assign({}, edge.data), { weight: edge.data.weight + e.data.weight || 0, minlen: Math.max(edge.data.minlen, e.data.minlen || 1) }));\n        }\n    });\n    return simplified;\n};\nexport const asNonCompoundGraph = (g) => {\n    const simplified = new Graph();\n    g.getAllNodes().forEach((node) => {\n        if (!g.getChildren(node.id).length) {\n            simplified.addNode(Object.assign({}, node));\n        }\n    });\n    g.getAllEdges().forEach((edge) => {\n        simplified.addEdge(edge);\n    });\n    return simplified;\n};\nexport const zipObject = (keys, values) => {\n    return keys === null || keys === void 0 ? void 0 : keys.reduce((obj, key, i) => {\n        obj[key] = values[i];\n        return obj;\n    }, {});\n};\nexport const successorWeights = (g) => {\n    const weightsMap = {};\n    g.getAllNodes().forEach((node) => {\n        const sucs = {};\n        g.getRelatedEdges(node.id, 'out').forEach((e) => {\n            sucs[e.target] = (sucs[e.target] || 0) + (e.data.weight || 0);\n        });\n        weightsMap[node.id] = sucs;\n    });\n    return weightsMap;\n};\nexport const predecessorWeights = (g) => {\n    const nodes = g.getAllNodes();\n    const weightMap = nodes.map((v) => {\n        const preds = {};\n        g.getRelatedEdges(v.id, 'in').forEach((e) => {\n            preds[e.source] = (preds[e.source] || 0) + e.data.weight;\n        });\n        return preds;\n    });\n    return zipObject(nodes.map((n) => n.id), weightMap);\n};\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nexport const intersectRect = (rect, point) => {\n    const x = Number(rect.x);\n    const y = Number(rect.y);\n    // Rectangle intersection algorithm from:\n    // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n    const dx = Number(point.x) - x;\n    const dy = Number(point.y) - y;\n    let w = Number(rect.width) / 2;\n    let h = Number(rect.height) / 2;\n    if (!dx && !dy) {\n        // completely overlapped directly, then return points its self\n        return { x: 0, y: 0 };\n    }\n    let sx;\n    let sy;\n    if (Math.abs(dy) * w > Math.abs(dx) * h) {\n        // Intersection is top or bottom of rect.\n        if (dy < 0) {\n            h = -h;\n        }\n        sx = (h * dx) / dy;\n        sy = h;\n    }\n    else {\n        // Intersection is left or right of rect.\n        if (dx < 0) {\n            w = -w;\n        }\n        sx = w;\n        sy = (w * dy) / dx;\n    }\n    return { x: x + sx, y: y + sy };\n};\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * const will produce a matrix with the ids of each node.\n */\nexport const buildLayerMatrix = (g) => {\n    const layeringNodes = [];\n    const rankMax = maxRank(g) + 1;\n    for (let i = 0; i < rankMax; i++) {\n        layeringNodes.push([]);\n    }\n    // const layering = _.map(_.range(maxRank(g) + 1), function() { return []; });\n    g.getAllNodes().forEach((node) => {\n        const rank = node.data.rank;\n        if (rank !== undefined && layeringNodes[rank]) {\n            layeringNodes[rank].push(node.id);\n        }\n    });\n    for (let i = 0; i < rankMax; i++) {\n        layeringNodes[i] = layeringNodes[i].sort((va, vb) => safeSort(g.getNode(va).data.order, g.getNode(vb).data.order));\n    }\n    return layeringNodes;\n};\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nexport const normalizeRanks = (g) => {\n    const nodeRanks = g\n        .getAllNodes()\n        .filter((v) => v.data.rank !== undefined)\n        .map((v) => v.data.rank);\n    const min = Math.min(...nodeRanks);\n    g.getAllNodes().forEach((v) => {\n        if (v.data.hasOwnProperty('rank') && min !== Infinity) {\n            v.data.rank -= min;\n        }\n    });\n};\nexport const removeEmptyRanks = (g, nodeRankFactor = 0) => {\n    // Ranks may not start at 0, so we need to offset them\n    const nodes = g.getAllNodes();\n    const nodeRanks = nodes\n        .filter((v) => v.data.rank !== undefined)\n        .map((v) => v.data.rank);\n    const offset = Math.min(...nodeRanks);\n    const layers = [];\n    nodes.forEach((v) => {\n        const rank = (v.data.rank || 0) - offset;\n        if (!layers[rank]) {\n            layers[rank] = [];\n        }\n        layers[rank].push(v.id);\n    });\n    let delta = 0;\n    for (let i = 0; i < layers.length; i++) {\n        const vs = layers[i];\n        if (vs === undefined) {\n            if (i % nodeRankFactor !== 0) {\n                delta -= 1;\n            }\n        }\n        else if (delta) {\n            vs === null || vs === void 0 ? void 0 : vs.forEach((v) => {\n                const node = g.getNode(v);\n                if (node) {\n                    node.data.rank = node.data.rank || 0;\n                    node.data.rank += delta;\n                }\n            });\n        }\n    }\n};\nexport const addBorderNode = (g, prefix, rank, order) => {\n    const node = {\n        width: 0,\n        height: 0,\n    };\n    if (isNumber(rank) && isNumber(order)) {\n        node.rank = rank;\n        node.order = order;\n    }\n    return addDummyNode(g, 'border', node, prefix);\n};\nexport const maxRank = (g) => {\n    let maxRank;\n    g.getAllNodes().forEach((v) => {\n        const rank = v.data.rank;\n        if (rank !== undefined) {\n            if (maxRank === undefined || rank > maxRank) {\n                maxRank = rank;\n            }\n        }\n    });\n    if (!maxRank) {\n        maxRank = 0;\n    }\n    return maxRank;\n};\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * const returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nexport const partition = (collection, fn) => {\n    const result = { lhs: [], rhs: [] };\n    collection === null || collection === void 0 ? void 0 : collection.forEach((value) => {\n        if (fn(value)) {\n            result.lhs.push(value);\n        }\n        else {\n            result.rhs.push(value);\n        }\n    });\n    return result;\n};\nexport const minBy = (array, func) => {\n    return array.reduce((a, b) => {\n        const valA = func(a);\n        const valB = func(b);\n        return valA > valB ? b : a;\n    });\n};\nconst doDFS = (graph, node, postorder, visited, navigator, result) => {\n    if (!visited.includes(node.id)) {\n        visited.push(node.id);\n        if (!postorder) {\n            result.push(node.id);\n        }\n        navigator(node.id).forEach((n) => doDFS(graph, n, postorder, visited, navigator, result));\n        if (postorder) {\n            result.push(node.id);\n        }\n    }\n};\n/**\n * @description DFS traversal.\n * @description.zh-CN DFS 遍历。\n */\nexport const dfs = (graph, node, order, isDirected) => {\n    const nodes = Array.isArray(node) ? node : [node];\n    const navigator = (n) => (isDirected ? graph.getSuccessors(n) : graph.getNeighbors(n));\n    const results = [];\n    const visited = [];\n    nodes.forEach((node) => {\n        if (!graph.hasNode(node.id)) {\n            throw new Error(`Graph does not have node: ${node}`);\n        }\n        else {\n            doDFS(graph, node, order === 'post', visited, navigator, results);\n        }\n    });\n    return results;\n};\n//# sourceMappingURL=util.js.map",null,"const adjust = (g, rankdir) => {\n    const rd = rankdir.toLowerCase();\n    if (rd === 'lr' || rd === 'rl') {\n        swapWidthHeight(g);\n    }\n};\nconst undo = (g, rankdir) => {\n    const rd = rankdir.toLowerCase();\n    if (rd === 'bt' || rd === 'rl') {\n        reverseY(g);\n    }\n    if (rd === 'lr' || rd === 'rl') {\n        swapXY(g);\n        swapWidthHeight(g);\n    }\n};\nconst swapWidthHeight = (g) => {\n    g.getAllNodes().forEach((v) => {\n        swapWidthHeightOne(v);\n    });\n    g.getAllEdges().forEach((e) => {\n        swapWidthHeightOne(e);\n    });\n};\nconst swapWidthHeightOne = (node) => {\n    const w = node.data.width;\n    node.data.width = node.data.height;\n    node.data.height = w;\n};\nconst reverseY = (g) => {\n    g.getAllNodes().forEach((v) => {\n        reverseYOne(v.data);\n    });\n    g.getAllEdges().forEach((edge) => {\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.forEach((point) => reverseYOne(point));\n        if (edge.data.hasOwnProperty('y')) {\n            reverseYOne(edge.data);\n        }\n    });\n};\nconst reverseYOne = (node) => {\n    if (node === null || node === void 0 ? void 0 : node.y) {\n        node.y = -node.y;\n    }\n};\nconst swapXY = (g) => {\n    g.getAllNodes().forEach((v) => {\n        swapXYOne(v.data);\n    });\n    g.getAllEdges().forEach((edge) => {\n        var _a;\n        (_a = edge.data.points) === null || _a === void 0 ? void 0 : _a.forEach((point) => swapXYOne(point));\n        if (edge.data.hasOwnProperty('x')) {\n            swapXYOne(edge.data);\n        }\n    });\n};\nconst swapXYOne = (node) => {\n    const x = node.x;\n    node.x = node.y;\n    node.y = x;\n};\nexport { adjust, undo };\n//# sourceMappingURL=coordinate-system.js.map",null,"import { addBorderNode, addDummyNode } from './util';\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nconst run = (g) => {\n    const root = addDummyNode(g, 'root', {}, '_root');\n    const depths = treeDepths(g);\n    let maxDepth = Math.max(...Object.values(depths));\n    if (Math.abs(maxDepth) === Infinity) {\n        maxDepth = 1;\n    }\n    const height = maxDepth - 1; // Note: depths is an Object not an array\n    const nodeSep = 2 * height + 1;\n    // g.graph().nestingRoot = root;\n    // Multiply minlen by nodeSep to align nodes on non-border ranks.\n    g.getAllEdges().forEach((e) => {\n        e.data.minlen *= nodeSep;\n    });\n    // Calculate a weight that is sufficient to keep subgraphs vertically compact\n    const weight = sumWeights(g) + 1;\n    // Create border nodes and link them up\n    // g.children()?.forEach((child) => {\n    //   dfs(g, root, nodeSep, weight, height, depths, child);\n    // });\n    g.getRoots().forEach((child) => {\n        dfs(g, root, nodeSep, weight, height, depths, child.id);\n    });\n    // Save the multiplier for node layers for later removal of empty border\n    // layers.\n    // g.graph().nodeRankFactor = nodeSep;\n    return {\n        nestingRoot: root,\n        nodeRankFactor: nodeSep,\n    };\n};\nconst dfs = (g, root, nodeSep, weight, height, depths, v) => {\n    const children = g.getChildren(v);\n    if (!(children === null || children === void 0 ? void 0 : children.length)) {\n        if (v !== root) {\n            // g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n            g.addEdge({\n                id: `e${Math.random()}`,\n                source: root,\n                target: v,\n                data: { weight: 0, minlen: nodeSep },\n            });\n        }\n        return;\n    }\n    const top = addBorderNode(g, '_bt');\n    const bottom = addBorderNode(g, '_bb');\n    const label = g.getNode(v);\n    g.setParent(top, v);\n    label.data.borderTop = top;\n    g.setParent(bottom, v);\n    label.data.borderBottom = bottom;\n    children === null || children === void 0 ? void 0 : children.forEach((childNode) => {\n        dfs(g, root, nodeSep, weight, height, depths, childNode.id);\n        const childTop = childNode.data.borderTop\n            ? childNode.data.borderTop\n            : childNode.id;\n        const childBottom = childNode.data.borderBottom\n            ? childNode.data.borderBottom\n            : childNode.id;\n        const thisWeight = childNode.data.borderTop ? weight : 2 * weight;\n        const minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: top,\n            target: childTop,\n            data: {\n                minlen,\n                weight: thisWeight,\n                nestingEdge: true,\n            },\n        });\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: childBottom,\n            target: bottom,\n            data: {\n                minlen,\n                weight: thisWeight,\n                nestingEdge: true,\n            },\n        });\n    });\n    if (!g.getParent(v)) {\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: root,\n            target: top,\n            data: {\n                weight: 0,\n                minlen: height + depths[v],\n            },\n        });\n    }\n};\nconst treeDepths = (g) => {\n    const depths = {};\n    const dfs = (v, depth) => {\n        const children = g.getChildren(v);\n        children === null || children === void 0 ? void 0 : children.forEach((child) => dfs(child.id, depth + 1));\n        depths[v] = depth;\n    };\n    // g.children()?.forEach((v) => dfs(v, 1));\n    g.getRoots().forEach((v) => dfs(v.id, 1));\n    return depths;\n};\nconst sumWeights = (g) => {\n    let result = 0;\n    g.getAllEdges().forEach((e) => {\n        result += e.data.weight;\n    });\n    return result;\n};\nconst cleanup = (g, nestingRoot) => {\n    // const graphLabel = g.graph();\n    // graphLabel.nestingRoot && g.removeNode(graphLabel.nestingRoot);\n    // delete graphLabel.nestingRoot;\n    if (nestingRoot) {\n        g.removeNode(nestingRoot);\n    }\n    g.getAllEdges().forEach((e) => {\n        if (e.data.nestingEdge) {\n            g.removeEdge(e.id);\n        }\n    });\n};\nexport { run, cleanup };\n//# sourceMappingURL=nesting-graph.js.map",null,"import { addDummyNode } from './util';\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nconst DUMMY_NODE_EDGE = 'edge';\nconst DUMMY_NODE_EDGE_LABEL = 'edge-label';\nconst run = (g, dummyChains) => {\n    g.getAllEdges().forEach((edge) => normalizeEdge(g, edge, dummyChains));\n};\nconst normalizeEdge = (g, e, dummyChains) => {\n    let v = e.source;\n    let vRank = g.getNode(v).data.rank;\n    const w = e.target;\n    const wRank = g.getNode(w).data.rank;\n    const labelRank = e.data.labelRank;\n    if (wRank === vRank + 1)\n        return;\n    g.removeEdge(e.id);\n    let dummy;\n    let nodeData;\n    let i;\n    for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n        e.data.points = [];\n        nodeData = {\n            originalEdge: e,\n            width: 0,\n            height: 0,\n            rank: vRank,\n        };\n        dummy = addDummyNode(g, DUMMY_NODE_EDGE, nodeData, '_d');\n        if (vRank === labelRank) {\n            nodeData.width = e.data.width;\n            nodeData.height = e.data.height;\n            nodeData.dummy = DUMMY_NODE_EDGE_LABEL;\n            nodeData.labelpos = e.data.labelpos;\n        }\n        g.addEdge({\n            id: `e${Math.random()}`,\n            source: v,\n            target: dummy,\n            data: { weight: e.data.weight },\n        });\n        if (i === 0) {\n            dummyChains.push(dummy);\n        }\n        v = dummy;\n    }\n    g.addEdge({\n        id: `e${Math.random()}`,\n        source: v,\n        target: w,\n        data: { weight: e.data.weight },\n    });\n};\nconst undo = (g, dummyChains) => {\n    dummyChains.forEach((v) => {\n        let node = g.getNode(v);\n        const { data } = node;\n        const originalEdge = data.originalEdge;\n        let w;\n        // Restore original edge.\n        if (originalEdge) {\n            g.addEdge(originalEdge);\n        }\n        let currentV = v;\n        while (node.data.dummy) {\n            w = g.getSuccessors(currentV)[0];\n            g.removeNode(currentV);\n            originalEdge.data.points.push({\n                x: node.data.x,\n                y: node.data.y,\n            });\n            if (node.data.dummy === DUMMY_NODE_EDGE_LABEL) {\n                originalEdge.data.x = node.data.x;\n                originalEdge.data.y = node.data.y;\n                originalEdge.data.width = node.data.width;\n                originalEdge.data.height = node.data.height;\n            }\n            currentV = w.id;\n            node = g.getNode(currentV);\n        }\n    });\n};\nexport { run, undo };\n//# sourceMappingURL=normalize.js.map",null,"import { Graph } from '@antv/graphlib';\nimport { clone } from '@antv/util';\nimport { buildLayerMatrix, maxRank } from '../util';\nimport { addSubgraphConstraints } from './add-subgraph-constraints';\nimport { buildLayerGraph } from './build-layer-graph';\nimport { crossCount } from './cross-count';\nimport { initOrder } from './init-order';\nimport { sortSubgraph } from './sort-subgraph';\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nexport const order = (g, keepNodeOrder) => {\n    const mxRank = maxRank(g);\n    const range1 = [];\n    const range2 = [];\n    for (let i = 1; i < mxRank + 1; i++)\n        range1.push(i);\n    for (let i = mxRank - 1; i > -1; i--)\n        range2.push(i);\n    const downLayerGraphs = buildLayerGraphs(g, range1, 'in');\n    const upLayerGraphs = buildLayerGraphs(g, range2, 'out');\n    let layering = initOrder(g);\n    assignOrder(g, layering);\n    let bestCC = Number.POSITIVE_INFINITY;\n    let best;\n    for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, false, keepNodeOrder);\n        layering = buildLayerMatrix(g);\n        const cc = crossCount(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = clone(layering);\n            bestCC = cc;\n        }\n    }\n    // consider use previous result, maybe somewhat reduendant\n    layering = initOrder(g);\n    assignOrder(g, layering);\n    for (let i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n        sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2, true, keepNodeOrder);\n        layering = buildLayerMatrix(g);\n        const cc = crossCount(g, layering);\n        if (cc < bestCC) {\n            lastBest = 0;\n            best = clone(layering);\n            bestCC = cc;\n        }\n    }\n    assignOrder(g, best);\n};\nconst buildLayerGraphs = (g, ranks, direction) => {\n    return ranks.map((rank) => {\n        return buildLayerGraph(g, rank, direction);\n    });\n};\nconst sweepLayerGraphs = (layerGraphs, biasRight, usePrev, keepNodeOrder) => {\n    const cg = new Graph();\n    layerGraphs === null || layerGraphs === void 0 ? void 0 : layerGraphs.forEach((lg) => {\n        var _a;\n        // const root = lg.graph().root as string;\n        const root = lg.getRoots()[0].id;\n        const sorted = sortSubgraph(lg, root, cg, biasRight, usePrev, keepNodeOrder);\n        for (let i = 0; i < ((_a = sorted.vs) === null || _a === void 0 ? void 0 : _a.length) || 0; i++) {\n            const lnode = lg.getNode(sorted.vs[i]);\n            if (lnode) {\n                lnode.data.order = i;\n            }\n        }\n        addSubgraphConstraints(lg, cg, sorted.vs);\n    });\n};\nconst assignOrder = (g, layering) => {\n    layering === null || layering === void 0 ? void 0 : layering.forEach((layer) => {\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n            g.getNode(v).data.order = i;\n        });\n    });\n};\n//# sourceMappingURL=index.js.map",null,"import isArray from './is-array';\nvar clone = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return obj;\n    }\n    var rst;\n    if (isArray(obj)) {\n        rst = [];\n        for (var i = 0, l = obj.length; i < l; i++) {\n            if (typeof obj[i] === 'object' && obj[i] != null) {\n                rst[i] = clone(obj[i]);\n            }\n            else {\n                rst[i] = obj[i];\n            }\n        }\n    }\n    else {\n        rst = {};\n        for (var k in obj) {\n            if (typeof obj[k] === 'object' && obj[k] != null) {\n                rst[k] = clone(obj[k]);\n            }\n            else {\n                rst[k] = obj[k];\n            }\n        }\n    }\n    return rst;\n};\nexport default clone;\n//# sourceMappingURL=clone.js.map",null,"/**\n * 判断值是否为数组\n * @return 是否为数组\n */\nexport default function isArray(value) {\n    return Array.isArray(value);\n}\n//# sourceMappingURL=is-array.js.map",null,"export const addSubgraphConstraints = (g, cg, vs) => {\n    const prev = {};\n    let rootPrev;\n    vs === null || vs === void 0 ? void 0 : vs.forEach((v) => {\n        let child = g.getParent(v);\n        let parent;\n        let prevChild;\n        while (child) {\n            parent = g.getParent(child.id);\n            if (parent) {\n                prevChild = prev[parent.id];\n                prev[parent.id] = child.id;\n            }\n            else {\n                prevChild = rootPrev;\n                rootPrev = child.id;\n            }\n            if (prevChild && prevChild !== child.id) {\n                if (!cg.hasNode(prevChild)) {\n                    cg.addNode({\n                        id: prevChild,\n                        data: {},\n                    });\n                }\n                if (!cg.hasNode(child.id)) {\n                    cg.addNode({\n                        id: child.id,\n                        data: {},\n                    });\n                }\n                if (!cg.hasEdge(`e${prevChild}-${child.id}`)) {\n                    cg.addEdge({\n                        id: `e${prevChild}-${child.id}`,\n                        source: prevChild,\n                        target: child.id,\n                        data: {},\n                    });\n                }\n                return;\n            }\n            child = parent;\n        }\n    });\n};\n//# sourceMappingURL=add-subgraph-constraints.js.map",null,"import { Graph } from '@antv/graphlib';\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nexport const buildLayerGraph = (g, rank, direction) => {\n    const root = createRootNode(g);\n    const result = new Graph({\n        tree: [\n            {\n                id: root,\n                children: [],\n                data: {},\n            },\n        ],\n    });\n    g.getAllNodes().forEach((v) => {\n        const parent = g.getParent(v.id);\n        if (v.data.rank === rank ||\n            (v.data.minRank <= rank && rank <= v.data.maxRank)) {\n            if (!result.hasNode(v.id)) {\n                result.addNode(Object.assign({}, v));\n            }\n            if ((parent === null || parent === void 0 ? void 0 : parent.id) && !result.hasNode(parent === null || parent === void 0 ? void 0 : parent.id)) {\n                result.addNode(Object.assign({}, parent));\n            }\n            result.setParent(v.id, (parent === null || parent === void 0 ? void 0 : parent.id) || root);\n            // This assumes we have only short edges!\n            g.getRelatedEdges(v.id, direction).forEach((e) => {\n                const u = e.source === v.id ? e.target : e.source;\n                if (!result.hasNode(u)) {\n                    result.addNode(Object.assign({}, g.getNode(u)));\n                }\n                const edge = result\n                    .getRelatedEdges(u, 'out')\n                    .find(({ target }) => target === v.id);\n                const weight = edge !== undefined ? edge.data.weight : 0;\n                if (!edge) {\n                    result.addEdge({\n                        id: e.id,\n                        source: u,\n                        target: v.id,\n                        data: {\n                            weight: e.data.weight + weight,\n                        },\n                    });\n                }\n                else {\n                    result.updateEdgeData(edge.id, Object.assign(Object.assign({}, edge.data), { weight: e.data.weight + weight }));\n                }\n            });\n            // console.log(v);\n            if (v.data.hasOwnProperty('minRank')) {\n                result.updateNodeData(v.id, Object.assign(Object.assign({}, v.data), { borderLeft: v.data.borderLeft[rank], borderRight: v.data.borderRight[rank] }));\n            }\n        }\n    });\n    return result;\n};\nconst createRootNode = (g) => {\n    let v;\n    while (g.hasNode((v = `_root${Math.random()}`)))\n        ;\n    return v;\n};\n//# sourceMappingURL=build-layer-graph.js.map",null,"/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nimport { zipObject } from '../util';\nconst twoLayerCrossCount = (g, northLayer, southLayer) => {\n    // Sort all of the edges between the north and south layers by their position\n    // in the north layer and then the south. Map these edges to the position of\n    // their head in the south layer.\n    const southPos = zipObject(southLayer, southLayer.map((v, i) => i));\n    const unflat = northLayer.map((v) => {\n        const unsort = g.getRelatedEdges(v, 'out').map((e) => {\n            return { pos: southPos[e.target] || 0, weight: e.data.weight };\n        });\n        return unsort === null || unsort === void 0 ? void 0 : unsort.sort((a, b) => a.pos - b.pos);\n    });\n    const southEntries = unflat.flat().filter((entry) => entry !== undefined);\n    // Build the accumulator tree\n    let firstIndex = 1;\n    while (firstIndex < southLayer.length)\n        firstIndex <<= 1;\n    const treeSize = 2 * firstIndex - 1;\n    firstIndex -= 1;\n    const tree = Array(treeSize).fill(0, 0, treeSize);\n    // Calculate the weighted crossings\n    let cc = 0;\n    southEntries === null || southEntries === void 0 ? void 0 : southEntries.forEach((entry) => {\n        if (entry) {\n            let index = entry.pos + firstIndex;\n            tree[index] += entry.weight;\n            let weightSum = 0;\n            while (index > 0) {\n                if (index % 2) {\n                    weightSum += tree[index + 1];\n                }\n                index = (index - 1) >> 1;\n                tree[index] += entry.weight;\n            }\n            cc += entry.weight * weightSum;\n        }\n    });\n    return cc;\n};\nexport const crossCount = (g, layering) => {\n    let cc = 0;\n    for (let i = 1; i < (layering === null || layering === void 0 ? void 0 : layering.length); i += 1) {\n        cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n    }\n    return cc;\n};\n//# sourceMappingURL=cross-count.js.map",null,"/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nexport const initOrder = (g) => {\n    const visited = {};\n    // const simpleNodes = g.getAllNodes().filter((v) => {\n    //   return !g.getChildren(v.id)?.length;\n    // });\n    const simpleNodes = g.getAllNodes();\n    const nodeRanks = simpleNodes.map((v) => { var _a; return (_a = v.data.rank) !== null && _a !== void 0 ? _a : -Infinity; });\n    const maxRank = Math.max(...nodeRanks);\n    const layers = [];\n    for (let i = 0; i < maxRank + 1; i++) {\n        layers.push([]);\n    }\n    const orderedVs = simpleNodes.sort((a, b) => g.getNode(a.id).data.rank - g.getNode(b.id).data.rank);\n    // const orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v)!.rank; });\n    // 有fixOrder的，直接排序好放进去\n    const beforeSort = orderedVs.filter((n) => {\n        return g.getNode(n.id).data.fixorder !== undefined;\n    });\n    const fixOrderNodes = beforeSort.sort((a, b) => g.getNode(a.id).data.fixorder - g.getNode(b.id).data.fixorder);\n    fixOrderNodes === null || fixOrderNodes === void 0 ? void 0 : fixOrderNodes.forEach((n) => {\n        if (!isNaN(g.getNode(n.id).data.rank)) {\n            layers[g.getNode(n.id).data.rank].push(n.id);\n        }\n        visited[n.id] = true;\n    });\n    orderedVs === null || orderedVs === void 0 ? void 0 : orderedVs.forEach((n) => g.dfsTree(n.id, (node) => {\n        if (visited.hasOwnProperty(node.id))\n            return true;\n        visited[node.id] = true;\n        if (!isNaN(node.data.rank)) {\n            layers[node.data.rank].push(node.id);\n        }\n    }));\n    return layers;\n};\n//# sourceMappingURL=init-order.js.map",null,"import { barycenter } from './barycenter';\nimport resolveConflicts from './resolve-conflicts';\nimport { sort } from './sort';\nexport const sortSubgraph = (g, v, cg, biasRight, usePrev, keepNodeOrder) => {\n    var _a, _b, _c, _d;\n    let movable = g.getChildren(v).map((n) => n.id);\n    // fixorder的点不参与排序（这个方案不合适，只排了新增节点，和原来的分离）\n    const node = g.getNode(v);\n    const bl = node ? node.data.borderLeft : undefined;\n    const br = node ? node.data.borderRight : undefined;\n    const subgraphs = {};\n    if (bl) {\n        movable = movable === null || movable === void 0 ? void 0 : movable.filter((w) => {\n            return w !== bl && w !== br;\n        });\n    }\n    const barycenters = barycenter(g, movable || []);\n    barycenters === null || barycenters === void 0 ? void 0 : barycenters.forEach((entry) => {\n        var _a;\n        if ((_a = g.getChildren(entry.v)) === null || _a === void 0 ? void 0 : _a.length) {\n            const subgraphResult = sortSubgraph(g, entry.v, cg, biasRight, keepNodeOrder);\n            subgraphs[entry.v] = subgraphResult;\n            if (subgraphResult.hasOwnProperty('barycenter')) {\n                mergeBarycenters(entry, subgraphResult);\n            }\n        }\n    });\n    const entries = resolveConflicts(barycenters, cg);\n    expandSubgraphs(entries, subgraphs);\n    // 添加fixorder信息到entries里边\n    // TODO: 不考虑复合情况，只用第一个点的fixorder信息，后续考虑更完备的实现\n    (_a = entries\n        .filter((e) => e.vs.length > 0)) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n        const node = g.getNode(e.vs[0]);\n        if (node) {\n            e.fixorder = node.data.fixorder;\n            e.order = node.data.order;\n        }\n    });\n    const result = sort(entries, biasRight, usePrev, keepNodeOrder);\n    if (bl) {\n        result.vs = [bl, result.vs, br].flat();\n        if ((_b = g.getPredecessors(bl)) === null || _b === void 0 ? void 0 : _b.length) {\n            const blPred = g.getNode(((_c = g.getPredecessors(bl)) === null || _c === void 0 ? void 0 : _c[0].id) || '');\n            const brPred = g.getNode(((_d = g.getPredecessors(br)) === null || _d === void 0 ? void 0 : _d[0].id) || '');\n            if (!result.hasOwnProperty('barycenter')) {\n                result.barycenter = 0;\n                result.weight = 0;\n            }\n            result.barycenter =\n                (result.barycenter * result.weight +\n                    blPred.data.order +\n                    brPred.data.order) /\n                    (result.weight + 2);\n            result.weight += 2;\n        }\n    }\n    return result;\n};\nconst expandSubgraphs = (entries, subgraphs) => {\n    entries === null || entries === void 0 ? void 0 : entries.forEach((entry) => {\n        var _a;\n        const vss = (_a = entry.vs) === null || _a === void 0 ? void 0 : _a.map((v) => {\n            if (subgraphs[v]) {\n                return subgraphs[v].vs;\n            }\n            return v;\n        });\n        entry.vs = vss.flat();\n    });\n};\nconst mergeBarycenters = (target, other) => {\n    if (target.barycenter !== undefined) {\n        target.barycenter =\n            (target.barycenter * target.weight + other.barycenter * other.weight) /\n                (target.weight + other.weight);\n        target.weight += other.weight;\n    }\n    else {\n        target.barycenter = other.barycenter;\n        target.weight = other.weight;\n    }\n};\n//# sourceMappingURL=sort-subgraph.js.map",null,"/**\n * TODO: The median method consistently performs better than the barycenter method and has a slight theoretical advantage\n */\nexport const barycenter = (g, movable) => {\n    return movable.map((v) => {\n        const inV = g.getRelatedEdges(v, 'in');\n        if (!(inV === null || inV === void 0 ? void 0 : inV.length)) {\n            return { v };\n        }\n        const result = { sum: 0, weight: 0 };\n        inV === null || inV === void 0 ? void 0 : inV.forEach((e) => {\n            const nodeU = g.getNode(e.source);\n            result.sum += e.data.weight * nodeU.data.order;\n            result.weight += e.data.weight;\n        });\n        return {\n            v,\n            barycenter: result.sum / result.weight,\n            weight: result.weight,\n        };\n    });\n};\n//# sourceMappingURL=barycenter.js.map",null,"/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nconst resolveConflicts = (entries, cg) => {\n    var _a, _b, _c;\n    const mappedEntries = {};\n    entries === null || entries === void 0 ? void 0 : entries.forEach((entry, i) => {\n        mappedEntries[entry.v] = {\n            i,\n            indegree: 0,\n            in: [],\n            out: [],\n            vs: [entry.v],\n        };\n        const tmp = mappedEntries[entry.v];\n        if (entry.barycenter !== undefined) {\n            tmp.barycenter = entry.barycenter;\n            tmp.weight = entry.weight;\n        }\n    });\n    (_a = cg.getAllEdges()) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n        const entryV = mappedEntries[e.source];\n        const entryW = mappedEntries[e.target];\n        if (entryV !== undefined && entryW !== undefined) {\n            entryW.indegree++;\n            entryV.out.push(mappedEntries[e.target]);\n        }\n    });\n    const sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, (entry) => !entry.indegree);\n    return doResolveConflicts(sourceSet);\n};\nconst doResolveConflicts = (sourceSet) => {\n    var _a, _b;\n    const entries = [];\n    const handleIn = (vEntry) => {\n        return (uEntry) => {\n            if (uEntry.merged)\n                return;\n            if (uEntry.barycenter === undefined ||\n                vEntry.barycenter === undefined ||\n                uEntry.barycenter >= vEntry.barycenter) {\n                mergeEntries(vEntry, uEntry);\n            }\n        };\n    };\n    const handleOut = (vEntry) => {\n        return (wEntry) => {\n            wEntry['in'].push(vEntry);\n            if (--wEntry.indegree === 0) {\n                sourceSet.push(wEntry);\n            }\n        };\n    };\n    while (sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length) {\n        const entry = sourceSet.pop();\n        entries.push(entry);\n        (_a = entry['in'].reverse()) === null || _a === void 0 ? void 0 : _a.forEach((e) => handleIn(entry)(e));\n        (_b = entry.out) === null || _b === void 0 ? void 0 : _b.forEach((e) => handleOut(entry)(e));\n    }\n    const filtered = entries.filter((entry) => !entry.merged);\n    const keys = [\n        'vs',\n        'i',\n        'barycenter',\n        'weight',\n    ];\n    return filtered.map((entry) => {\n        const picked = {};\n        keys === null || keys === void 0 ? void 0 : keys.forEach((key) => {\n            if (entry[key] === undefined)\n                return;\n            picked[key] = entry[key];\n        });\n        return picked;\n    });\n};\nconst mergeEntries = (target, source) => {\n    var _a;\n    let sum = 0;\n    let weight = 0;\n    if (target.weight) {\n        sum += target.barycenter * target.weight;\n        weight += target.weight;\n    }\n    if (source.weight) {\n        sum += source.barycenter * source.weight;\n        weight += source.weight;\n    }\n    target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n    target.barycenter = sum / weight;\n    target.weight = weight;\n    target.i = Math.min(source.i, target.i);\n    source.merged = true;\n};\nexport default resolveConflicts;\n//# sourceMappingURL=resolve-conflicts.js.map",null,"import { partition } from '../util';\nexport const sort = (entries, biasRight, usePrev, keepNodeOrder) => {\n    const parts = partition(entries, (entry) => {\n        const hasFixOrder = entry.hasOwnProperty('fixorder') && !isNaN(entry.fixorder);\n        if (keepNodeOrder) {\n            return !hasFixOrder && entry.hasOwnProperty('barycenter');\n        }\n        // NOTE: 有fixorder的也可以排\n        return hasFixOrder || entry.hasOwnProperty('barycenter');\n    });\n    const sortable = parts.lhs;\n    const unsortable = parts.rhs.sort((a, b) => -a.i - -b.i);\n    const vs = [];\n    let sum = 0;\n    let weight = 0;\n    let vsIndex = 0;\n    sortable === null || sortable === void 0 ? void 0 : sortable.sort(compareWithBias(!!biasRight, !!usePrev));\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n    sortable === null || sortable === void 0 ? void 0 : sortable.forEach((entry) => {\n        var _a;\n        vsIndex += (_a = entry.vs) === null || _a === void 0 ? void 0 : _a.length;\n        vs.push(entry.vs);\n        sum += entry.barycenter * entry.weight;\n        weight += entry.weight;\n        vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n    });\n    const result = {\n        vs: vs.flat(),\n    };\n    if (weight) {\n        result.barycenter = sum / weight;\n        result.weight = weight;\n    }\n    return result;\n};\nconst consumeUnsortable = (vs, unsortable, index) => {\n    let iindex = index;\n    let last;\n    while (unsortable.length &&\n        (last = unsortable[unsortable.length - 1]).i <= iindex) {\n        unsortable.pop();\n        vs === null || vs === void 0 ? void 0 : vs.push(last.vs);\n        iindex++;\n    }\n    return iindex;\n};\n/**\n * 配置是否考虑使用之前的布局结果\n */\nconst compareWithBias = (bias, usePrev) => {\n    return (entryV, entryW) => {\n        // 排序的时候先判断fixorder，不行再判断重心\n        if (entryV.fixorder !== undefined && entryW.fixorder !== undefined) {\n            return entryV.fixorder - entryW.fixorder;\n        }\n        if (entryV.barycenter < entryW.barycenter) {\n            return -1;\n        }\n        if (entryV.barycenter > entryW.barycenter) {\n            return 1;\n        }\n        // 重心相同，考虑之前排好的顺序\n        if (usePrev && entryV.order !== undefined && entryW.order !== undefined) {\n            if (entryV.order < entryW.order) {\n                return -1;\n            }\n            if (entryV.order > entryW.order) {\n                return 1;\n            }\n        }\n        return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n    };\n};\n//# sourceMappingURL=sort.js.map",null,"/**\n * 按照数据中的结果设置fixorder\n */\nexport const initDataOrder = (g, nodeOrder) => {\n    const simpleNodes = g.getAllNodes().filter((v) => {\n        var _a;\n        return !((_a = g.getChildren(v.id)) === null || _a === void 0 ? void 0 : _a.length);\n    });\n    const ranks = simpleNodes.map((v) => v.data.rank);\n    const maxRank = Math.max(...ranks);\n    const layers = [];\n    for (let i = 0; i < maxRank + 1; i++) {\n        layers[i] = [];\n    }\n    nodeOrder === null || nodeOrder === void 0 ? void 0 : nodeOrder.forEach((n) => {\n        const node = g.getNode(n);\n        // 只考虑原有节点，dummy节点需要按照后续算法排出\n        if (!node || node.data.dummy) {\n            return;\n        }\n        if (!isNaN(node.data.rank)) {\n            node.data.fixorder = layers[node.data.rank].length; // 设置fixorder为当层的顺序\n            layers[node.data.rank].push(n);\n        }\n    });\n};\n//# sourceMappingURL=init-data-order.js.map",null,"// deep first search with both order low for pre, lim for post\nconst dfsBothOrder = (g) => {\n    const result = {};\n    let lim = 0;\n    const dfs = (v) => {\n        const low = lim;\n        g.getChildren(v).forEach((n) => dfs(n.id));\n        result[v] = { low, lim: lim++ };\n    };\n    g.getRoots().forEach((n) => dfs(n.id));\n    return result;\n};\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nconst findPath = (g, postorderNums, v, w) => {\n    var _a, _b;\n    const vPath = [];\n    const wPath = [];\n    const low = Math.min(postorderNums[v].low, postorderNums[w].low);\n    const lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n    let parent;\n    let lca;\n    // Traverse up from v to find the LCA\n    parent = v;\n    do {\n        parent = (_a = g.getParent(parent)) === null || _a === void 0 ? void 0 : _a.id;\n        vPath.push(parent);\n    } while (parent &&\n        (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n    lca = parent;\n    // Traverse from w to LCA\n    parent = w;\n    while (parent && parent !== lca) {\n        wPath.push(parent);\n        parent = (_b = g.getParent(parent)) === null || _b === void 0 ? void 0 : _b.id;\n    }\n    return { lca, path: vPath.concat(wPath.reverse()) };\n};\nexport const parentDummyChains = (g, dummyChains) => {\n    const postorderNums = dfsBothOrder(g);\n    dummyChains.forEach((startV) => {\n        var _a, _b;\n        let v = startV;\n        let node = g.getNode(v);\n        const originalEdge = node.data.originalEdge;\n        if (!originalEdge)\n            return;\n        const pathData = findPath(g, postorderNums, originalEdge.source, originalEdge.target);\n        const path = pathData.path;\n        const lca = pathData.lca;\n        let pathIdx = 0;\n        let pathV = path[pathIdx];\n        let ascending = true;\n        while (v !== originalEdge.target) {\n            node = g.getNode(v);\n            if (ascending) {\n                while (pathV !== lca &&\n                    ((_a = g.getNode(pathV)) === null || _a === void 0 ? void 0 : _a.data.maxRank) < node.data.rank) {\n                    pathIdx++;\n                    pathV = path[pathIdx];\n                }\n                if (pathV === lca) {\n                    ascending = false;\n                }\n            }\n            if (!ascending) {\n                while (pathIdx < path.length - 1 &&\n                    ((_b = g.getNode(path[pathIdx + 1])) === null || _b === void 0 ? void 0 : _b.data.minRank) <= node.data.rank) {\n                    pathIdx++;\n                }\n                pathV = path[pathIdx];\n            }\n            if (g.hasNode(pathV)) {\n                g.setParent(v, pathV);\n            }\n            v = g.getSuccessors(v)[0].id;\n        }\n    });\n};\n//# sourceMappingURL=parent-dummy-chains.js.map",null,"import { asNonCompoundGraph, buildLayerMatrix } from '../util';\nimport { alignCoordinates, balance, findSmallestWidthAlignment, findType1Conflicts, findType2Conflicts, horizontalCompaction, verticalAlignment, } from './bk';\nconst positionY = (g, options) => {\n    const { ranksep = 0 } = options || {};\n    const layering = buildLayerMatrix(g);\n    let prevY = 0;\n    layering === null || layering === void 0 ? void 0 : layering.forEach((layer) => {\n        const heights = layer.map((v) => g.getNode(v).data.height);\n        const maxHeight = Math.max(...heights, 0);\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v) => {\n            g.getNode(v).data.y = prevY + maxHeight / 2;\n        });\n        prevY += maxHeight + ranksep;\n    });\n};\nconst positionX = (g, options) => {\n    const { align: graphAlign, nodesep = 0, edgesep = 0 } = options || {};\n    const layering = buildLayerMatrix(g);\n    const conflicts = Object.assign(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n    const xss = {};\n    let adjustedLayering = [];\n    ['u', 'd'].forEach((vert) => {\n        adjustedLayering =\n            vert === 'u' ? layering : Object.values(layering).reverse();\n        ['l', 'r'].forEach((horiz) => {\n            if (horiz === 'r') {\n                adjustedLayering = adjustedLayering.map((inner) => Object.values(inner).reverse());\n            }\n            const neighborFn = (vert === 'u' ? g.getPredecessors : g.getSuccessors).bind(g);\n            const align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n            const xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, nodesep, edgesep, horiz === 'r');\n            if (horiz === 'r') {\n                Object.keys(xs).forEach((xsKey) => (xs[xsKey] = -xs[xsKey]));\n            }\n            xss[vert + horiz] = xs;\n        });\n    });\n    const smallestWidth = findSmallestWidthAlignment(g, xss);\n    smallestWidth && alignCoordinates(xss, smallestWidth);\n    return balance(xss, graphAlign);\n};\nexport const position = (g, options) => {\n    var _a;\n    const ng = asNonCompoundGraph(g);\n    positionY(ng, options);\n    const xs = positionX(ng, options);\n    (_a = Object.keys(xs)) === null || _a === void 0 ? void 0 : _a.forEach((key) => {\n        ng.getNode(key).data.x = xs[key];\n    });\n};\n//# sourceMappingURL=index.js.map",null,"/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\nimport { Graph } from '@antv/graphlib';\nimport { buildLayerMatrix, minBy } from '../util';\nexport const findType1Conflicts = (g, layering) => {\n    const conflicts = {};\n    const visitLayer = (prevLayer, layer) => {\n        // last visited node in the previous layer that is incident on an inner\n        // segment.\n        let k0 = 0;\n        // Tracks the last node in this layer scanned for crossings with a type-1\n        // segment.\n        let scanPos = 0;\n        const prevLayerLength = prevLayer.length;\n        const lastNode = layer === null || layer === void 0 ? void 0 : layer[(layer === null || layer === void 0 ? void 0 : layer.length) - 1];\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n            var _a;\n            const w = findOtherInnerSegmentNode(g, v);\n            const k1 = w ? g.getNode(w.id).data.order : prevLayerLength;\n            if (w || v === lastNode) {\n                (_a = layer.slice(scanPos, i + 1)) === null || _a === void 0 ? void 0 : _a.forEach((scanNode) => {\n                    var _a;\n                    (_a = g.getPredecessors(scanNode)) === null || _a === void 0 ? void 0 : _a.forEach((u) => {\n                        var _a;\n                        const uLabel = g.getNode(u.id);\n                        const uPos = uLabel.data.order;\n                        if ((uPos < k0 || k1 < uPos) &&\n                            !(uLabel.data.dummy && ((_a = g.getNode(scanNode)) === null || _a === void 0 ? void 0 : _a.data.dummy))) {\n                            addConflict(conflicts, u.id, scanNode);\n                        }\n                    });\n                });\n                scanPos = i + 1;\n                k0 = k1;\n            }\n        });\n        return layer;\n    };\n    if (layering === null || layering === void 0 ? void 0 : layering.length) {\n        layering.reduce(visitLayer);\n    }\n    return conflicts;\n};\nexport const findType2Conflicts = (g, layering) => {\n    const conflicts = {};\n    function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n        var _a, _b;\n        let v;\n        for (let i = southPos; i < southEnd; i++) {\n            v = south[i];\n            if ((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) {\n                (_b = g.getPredecessors(v)) === null || _b === void 0 ? void 0 : _b.forEach((u) => {\n                    const uNode = g.getNode(u.id);\n                    if (uNode.data.dummy &&\n                        (uNode.data.order < prevNorthBorder ||\n                            uNode.data.order > nextNorthBorder)) {\n                        addConflict(conflicts, u.id, v);\n                    }\n                });\n            }\n        }\n    }\n    function getScannedKey(params) {\n        // south数组可能很大，不适合做key\n        return JSON.stringify(params.slice(1));\n    }\n    function scanIfNeeded(params, scanCache) {\n        const cacheKey = getScannedKey(params);\n        if (scanCache.get(cacheKey))\n            return;\n        scan(...params);\n        scanCache.set(cacheKey, true);\n    }\n    const visitLayer = (north, south) => {\n        let prevNorthPos = -1;\n        let nextNorthPos;\n        let southPos = 0;\n        const scanned = new Map();\n        south === null || south === void 0 ? void 0 : south.forEach((v, southLookahead) => {\n            var _a;\n            if (((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) === 'border') {\n                const predecessors = g.getPredecessors(v) || [];\n                if (predecessors.length) {\n                    nextNorthPos = g.getNode(predecessors[0].id).data.order;\n                    scanIfNeeded([south, southPos, southLookahead, prevNorthPos, nextNorthPos], scanned);\n                    southPos = southLookahead;\n                    prevNorthPos = nextNorthPos;\n                }\n            }\n            scanIfNeeded([south, southPos, south.length, nextNorthPos, north.length], scanned);\n        });\n        return south;\n    };\n    if (layering === null || layering === void 0 ? void 0 : layering.length) {\n        layering.reduce(visitLayer);\n    }\n    return conflicts;\n};\nexport const findOtherInnerSegmentNode = (g, v) => {\n    var _a, _b;\n    if ((_a = g.getNode(v)) === null || _a === void 0 ? void 0 : _a.data.dummy) {\n        return (_b = g.getPredecessors(v)) === null || _b === void 0 ? void 0 : _b.find((u) => g.getNode(u.id).data.dummy);\n    }\n};\nexport const addConflict = (conflicts, v, w) => {\n    let vv = v;\n    let ww = w;\n    if (vv > ww) {\n        const tmp = vv;\n        vv = ww;\n        ww = tmp;\n    }\n    let conflictsV = conflicts[vv];\n    if (!conflictsV) {\n        conflicts[vv] = conflictsV = {};\n    }\n    conflictsV[ww] = true;\n};\nexport const hasConflict = (conflicts, v, w) => {\n    let vv = v;\n    let ww = w;\n    if (vv > ww) {\n        const tmp = v;\n        vv = ww;\n        ww = tmp;\n    }\n    return !!conflicts[vv];\n};\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nexport const verticalAlignment = (g, layering, conflicts, neighborFn) => {\n    const root = {};\n    const align = {};\n    const pos = {};\n    // We cache the position here based on the layering because the graph and\n    // layering may be out of sync. The layering matrix is manipulated to\n    // generate different extreme alignments.\n    layering === null || layering === void 0 ? void 0 : layering.forEach((layer) => {\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v, order) => {\n            root[v] = v;\n            align[v] = v;\n            pos[v] = order;\n        });\n    });\n    layering === null || layering === void 0 ? void 0 : layering.forEach((layer) => {\n        let prevIdx = -1;\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v) => {\n            let ws = neighborFn(v).map((n) => n.id);\n            if (ws.length) {\n                ws = ws.sort((a, b) => pos[a] - pos[b]);\n                const mp = (ws.length - 1) / 2;\n                for (let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n                    const w = ws[i];\n                    if (align[v] === v &&\n                        prevIdx < pos[w] &&\n                        !hasConflict(conflicts, v, w)) {\n                        align[w] = v;\n                        align[v] = root[v] = root[w];\n                        prevIdx = pos[w];\n                    }\n                }\n            }\n        });\n    });\n    return { root, align };\n};\nexport const horizontalCompaction = (g, layering, root, align, nodesep, edgesep, reverseSep) => {\n    var _a;\n    // This portion of the algorithm differs from BK due to a number of problems.\n    // Instead of their algorithm we construct a new block graph and do two\n    // sweeps. The first sweep places blocks with the smallest possible\n    // coordinates. The second sweep removes unused space by moving blocks to the\n    // greatest coordinates without violating separation.\n    const xs = {};\n    const blockG = buildBlockGraph(g, layering, root, nodesep, edgesep, reverseSep);\n    const borderType = reverseSep ? 'borderLeft' : 'borderRight';\n    const iterate = (setXsFunc, nextNodesFunc) => {\n        let stack = blockG.getAllNodes();\n        let elem = stack.pop();\n        const visited = {};\n        while (elem) {\n            if (visited[elem.id]) {\n                setXsFunc(elem.id);\n            }\n            else {\n                visited[elem.id] = true;\n                stack.push(elem);\n                stack = stack.concat(nextNodesFunc(elem.id));\n            }\n            elem = stack.pop();\n        }\n    };\n    // First pass, assign smallest coordinates\n    const pass1 = (elem) => {\n        xs[elem] = (blockG.getRelatedEdges(elem, 'in') || []).reduce((acc, e) => {\n            return Math.max(acc, (xs[e.source] || 0) + e.data.weight);\n        }, 0);\n    };\n    // Second pass, assign greatest coordinates\n    const pass2 = (elem) => {\n        const min = (blockG.getRelatedEdges(elem, 'out') || []).reduce((acc, e) => {\n            return Math.min(acc, (xs[e.target] || 0) - e.data.weight);\n        }, Number.POSITIVE_INFINITY);\n        const node = g.getNode(elem);\n        if (min !== Number.POSITIVE_INFINITY &&\n            node.data.borderType !== borderType) {\n            xs[elem] = Math.max(xs[elem], min);\n        }\n    };\n    iterate(pass1, blockG.getPredecessors.bind(blockG));\n    iterate(pass2, blockG.getSuccessors.bind(blockG));\n    // Assign x coordinates to all nodes\n    (_a = Object.values(align)) === null || _a === void 0 ? void 0 : _a.forEach((v) => {\n        xs[v] = xs[root[v]];\n    });\n    return xs;\n};\nexport const buildBlockGraph = (g, layering, root, nodesep, edgesep, reverseSep) => {\n    const blockGraph = new Graph();\n    const sepFn = sep(nodesep, edgesep, reverseSep);\n    layering === null || layering === void 0 ? void 0 : layering.forEach((layer) => {\n        let u;\n        layer === null || layer === void 0 ? void 0 : layer.forEach((v) => {\n            const vRoot = root[v];\n            if (!blockGraph.hasNode(vRoot)) {\n                blockGraph.addNode({\n                    id: vRoot,\n                    data: {},\n                });\n            }\n            if (u) {\n                const uRoot = root[u];\n                const edge = blockGraph\n                    .getRelatedEdges(uRoot, 'out')\n                    .find((edge) => edge.target === vRoot);\n                if (!edge) {\n                    blockGraph.addEdge({\n                        id: `e${Math.random()}`,\n                        source: uRoot,\n                        target: vRoot,\n                        data: {\n                            weight: Math.max(sepFn(g, v, u), 0),\n                        },\n                    });\n                }\n                else {\n                    blockGraph.updateEdgeData(edge.id, Object.assign(Object.assign({}, edge.data), { weight: Math.max(sepFn(g, v, u), edge.data.weight || 0) }));\n                }\n            }\n            u = v;\n        });\n    });\n    return blockGraph;\n};\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nexport const findSmallestWidthAlignment = (g, xss) => {\n    return minBy(Object.values(xss), (xs) => {\n        var _a;\n        let max = Number.NEGATIVE_INFINITY;\n        let min = Number.POSITIVE_INFINITY;\n        (_a = Object.keys(xs)) === null || _a === void 0 ? void 0 : _a.forEach((v) => {\n            const x = xs[v];\n            const halfWidth = width(g, v) / 2;\n            max = Math.max(x + halfWidth, max);\n            min = Math.min(x - halfWidth, min);\n        });\n        return max - min;\n    });\n};\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nexport function alignCoordinates(xss, alignTo) {\n    const alignToVals = Object.values(alignTo);\n    const alignToMin = Math.min(...alignToVals);\n    const alignToMax = Math.max(...alignToVals);\n    ['u', 'd'].forEach((vert) => {\n        ['l', 'r'].forEach((horiz) => {\n            const alignment = vert + horiz;\n            const xs = xss[alignment];\n            let delta;\n            if (xs === alignTo)\n                return;\n            const xsVals = Object.values(xs);\n            delta =\n                horiz === 'l'\n                    ? alignToMin - Math.min(...xsVals)\n                    : alignToMax - Math.max(...xsVals);\n            if (delta) {\n                xss[alignment] = {};\n                Object.keys(xs).forEach((key) => {\n                    xss[alignment][key] = xs[key] + delta;\n                });\n            }\n        });\n    });\n}\nexport const balance = (xss, align) => {\n    const result = {};\n    Object.keys(xss.ul).forEach((key) => {\n        if (align) {\n            result[key] = xss[align.toLowerCase()][key];\n        }\n        else {\n            const values = Object.values(xss).map((x) => x[key]);\n            result[key] = (values[0] + values[1]) / 2; // (ur + ul) / 2\n        }\n    });\n    return result;\n};\nexport const positionX = (g, options) => {\n    const { align: graphAlign, nodesep = 0, edgesep = 0 } = options || {};\n    const layering = buildLayerMatrix(g);\n    const conflicts = Object.assign(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n    const xss = {};\n    let adjustedLayering;\n    ['u', 'd'].forEach((vert) => {\n        adjustedLayering =\n            vert === 'u' ? layering : Object.values(layering).reverse();\n        ['l', 'r'].forEach((horiz) => {\n            if (horiz === 'r') {\n                adjustedLayering = adjustedLayering.map((inner) => Object.values(inner).reverse());\n            }\n            const neighborFn = (vert === 'u' ? g.getPredecessors : g.getSuccessors).bind(g);\n            const align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n            const xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, nodesep, edgesep, horiz === 'r');\n            if (horiz === 'r') {\n                Object.keys(xs).forEach((key) => {\n                    xs[key] = -xs[key];\n                });\n            }\n            xss[vert + horiz] = xs;\n        });\n    });\n    const smallestWidth = findSmallestWidthAlignment(g, xss);\n    alignCoordinates(xss, smallestWidth);\n    return balance(xss, graphAlign);\n};\nexport const sep = (nodeSep, edgeSep, reverseSep) => {\n    return (g, v, w) => {\n        const vLabel = g.getNode(v);\n        const wLabel = g.getNode(w);\n        let sum = 0;\n        let delta = 0;\n        sum += vLabel.data.width / 2;\n        if (vLabel.data.hasOwnProperty('labelpos')) {\n            switch ((vLabel.data.labelpos || '').toLowerCase()) {\n                case 'l':\n                    delta = -vLabel.data.width / 2;\n                    break;\n                case 'r':\n                    delta = vLabel.data.width / 2;\n                    break;\n            }\n        }\n        if (delta) {\n            sum += reverseSep ? delta : -delta;\n        }\n        delta = 0;\n        sum += (vLabel.data.dummy ? edgeSep : nodeSep) / 2;\n        sum += (wLabel.data.dummy ? edgeSep : nodeSep) / 2;\n        sum += wLabel.data.width / 2;\n        if (wLabel.data.labelpos) {\n            switch ((wLabel.data.labelpos || '').toLowerCase()) {\n                case 'l':\n                    delta = wLabel.data.width / 2;\n                    break;\n                case 'r':\n                    delta = -wLabel.data.width / 2;\n                    break;\n            }\n        }\n        if (delta) {\n            sum += reverseSep ? delta : -delta;\n        }\n        delta = 0;\n        return sum;\n    };\n};\nexport const width = (g, v) => g.getNode(v).data.width || 0;\n//# sourceMappingURL=bk.js.map",null,"import { feasibleTreeWithLayer as feasibleTree } from './feasible-tree';\nimport { networkSimplex } from './network-simplex';\nimport { longestPath, longestPathWithLayer } from './util';\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nexport const rank = (g, ranker) => {\n    switch (ranker) {\n        case 'network-simplex':\n            networkSimplexRanker(g);\n            break;\n        case 'tight-tree':\n            tightTreeRanker(g);\n            break;\n        case 'longest-path':\n            longestPathRanker(g);\n            break;\n        // default: networkSimplexRanker(g);\n        default:\n            tightTreeRanker(g);\n    }\n};\n// A fast and simple ranker, but results are far from optimal.\nconst longestPathRanker = longestPath;\nconst tightTreeRanker = (g) => {\n    longestPathWithLayer(g);\n    feasibleTree(g);\n};\nconst networkSimplexRanker = (g) => {\n    networkSimplex(g);\n};\n//# sourceMappingURL=index.js.map",null,"import { Graph } from '@antv/graphlib';\nimport { minBy } from '../util';\nimport { slack } from './util';\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nconst feasibleTree = (g) => {\n    const t = new Graph({\n        tree: [],\n    });\n    // Choose arbitrary node from which to start our tree\n    const start = g.getAllNodes()[0];\n    const size = g.getAllNodes().length;\n    t.addNode(start);\n    let edge;\n    let delta;\n    while (tightTree(t, g) < size) {\n        edge = findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.source) ? slack(g, edge) : -slack(g, edge);\n        shiftRanks(t, g, delta);\n    }\n    return t;\n};\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nconst tightTree = (t, g) => {\n    const dfs = (v) => {\n        g.getRelatedEdges(v, 'both').forEach((e) => {\n            const edgeV = e.source;\n            const w = v === edgeV ? e.target : edgeV;\n            if (!t.hasNode(w) && !slack(g, e)) {\n                t.addNode({\n                    id: w,\n                    data: {},\n                });\n                t.addEdge({\n                    id: e.id,\n                    source: v,\n                    target: w,\n                    data: {},\n                });\n                dfs(w);\n            }\n        });\n    };\n    t.getAllNodes().forEach((n) => dfs(n.id));\n    return t.getAllNodes().length;\n};\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nconst feasibleTreeWithLayer = (g) => {\n    const t = new Graph({ tree: [] });\n    // Choose arbitrary node from which to start our tree\n    const start = g.getAllNodes()[0];\n    const size = g.getAllNodes().length;\n    t.addNode(start);\n    let edge;\n    let delta;\n    while (tightTreeWithLayer(t, g) < size) {\n        edge = findMinSlackEdge(t, g);\n        delta = t.hasNode(edge.source) ? slack(g, edge) : -slack(g, edge);\n        shiftRanks(t, g, delta);\n    }\n    return t;\n};\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nconst tightTreeWithLayer = (t, g) => {\n    const dfs = (v) => {\n        var _a;\n        (_a = g.getRelatedEdges(v, 'both')) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n            const edgeV = e.source;\n            const w = v === edgeV ? e.target : edgeV;\n            // 对于指定layer的，直接加入tight-tree，不参与调整\n            if (!t.hasNode(w) &&\n                (g.getNode(w).data.layer !== undefined || !slack(g, e))) {\n                t.addNode({\n                    id: w,\n                    data: {},\n                });\n                t.addEdge({\n                    id: e.id,\n                    source: v,\n                    target: w,\n                    data: {},\n                });\n                dfs(w);\n            }\n        });\n    };\n    t.getAllNodes().forEach((n) => dfs(n.id));\n    return t.getAllNodes().length;\n};\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nconst findMinSlackEdge = (t, g) => {\n    return minBy(g.getAllEdges(), (e) => {\n        if (t.hasNode(e.source) !== t.hasNode(e.target)) {\n            return slack(g, e);\n        }\n        return Infinity;\n    });\n};\nconst shiftRanks = (t, g, delta) => {\n    t.getAllNodes().forEach((tn) => {\n        const v = g.getNode(tn.id);\n        if (!v.data.rank)\n            v.data.rank = 0;\n        v.data.rank += delta;\n    });\n};\nexport { feasibleTree, feasibleTreeWithLayer };\n//# sourceMappingURL=feasible-tree.js.map",null,"/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nconst longestPath = (g) => {\n    const visited = {};\n    const dfs = (v) => {\n        var _a;\n        const label = g.getNode(v);\n        if (!label)\n            return 0;\n        if (visited[v]) {\n            return label.data.rank;\n        }\n        visited[v] = true;\n        let rank;\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n            const wRank = dfs(e.target);\n            const minLen = e.data.minlen;\n            const r = wRank - minLen;\n            if (r) {\n                if (rank === undefined || r < rank) {\n                    rank = r;\n                }\n            }\n        });\n        if (!rank) {\n            rank = 0;\n        }\n        label.data.rank = rank;\n        return rank;\n    };\n    g.getAllNodes()\n        .filter((n) => g.getRelatedEdges(n.id, 'in').length === 0)\n        .forEach((source) => dfs(source.id));\n};\nconst longestPathWithLayer = (g) => {\n    // 用longest path，找出最深的点\n    const visited = {};\n    let minRank;\n    const dfs = (v) => {\n        var _a;\n        const label = g.getNode(v);\n        if (!label)\n            return 0;\n        if (visited[v]) {\n            return label.data.rank;\n        }\n        visited[v] = true;\n        let rank;\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n            const wRank = dfs(e.target);\n            const minLen = e.data.minlen;\n            const r = wRank - minLen;\n            if (r) {\n                if (rank === undefined || r < rank) {\n                    rank = r;\n                }\n            }\n        });\n        if (!rank) {\n            rank = 0;\n        }\n        if (minRank === undefined || rank < minRank) {\n            minRank = rank;\n        }\n        label.data.rank = rank;\n        return rank;\n    };\n    g.getAllNodes()\n        .filter((n) => g.getRelatedEdges(n.id, 'in').length === 0)\n        .forEach((source) => {\n        if (source)\n            dfs(source.id);\n    });\n    if (minRank === undefined) {\n        minRank = 0;\n    }\n    // minRank += 1; // NOTE: 最小的层级是dummy root，+1\n    // forward一遍，赋值层级\n    const forwardVisited = {};\n    const dfsForward = (v, nextRank) => {\n        var _a;\n        const label = g.getNode(v);\n        const currRank = !isNaN(label.data.layer) ? label.data.layer : nextRank;\n        // 没有指定，取最大值\n        if (label.data.rank === undefined || label.data.rank < currRank) {\n            label.data.rank = currRank;\n        }\n        if (forwardVisited[v])\n            return;\n        forwardVisited[v] = true;\n        // DFS遍历子节点\n        (_a = g.getRelatedEdges(v, 'out')) === null || _a === void 0 ? void 0 : _a.forEach((e) => {\n            dfsForward(e.target, currRank + e.data.minlen);\n        });\n    };\n    // 指定层级的，更新下游\n    g.getAllNodes().forEach((n) => {\n        const label = n.data;\n        if (!label)\n            return;\n        if (!isNaN(label.layer)) {\n            dfsForward(n.id, label.layer); // 默认的dummy root所在层的rank是-1\n        }\n        else {\n            label.rank -= minRank;\n        }\n    });\n};\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nconst slack = (g, e) => {\n    return (g.getNode(e.target).data.rank -\n        g.getNode(e.source).data.rank -\n        e.data.minlen);\n};\nexport { longestPath, longestPathWithLayer, slack };\n//# sourceMappingURL=util.js.map",null,"import { dfs, minBy, simplify } from '../util';\nimport { feasibleTree } from './feasible-tree';\nimport { longestPath as initRank, slack } from './util';\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nexport const networkSimplex = (og) => {\n    const g = simplify(og);\n    initRank(g);\n    const t = feasibleTree(g);\n    initLowLimValues(t);\n    initCutValues(t, g);\n    let e;\n    let f;\n    while ((e = leaveEdge(t))) {\n        f = enterEdge(t, g, e);\n        exchangeEdges(t, g, e, f);\n    }\n};\n/*\n * Initializes cut values for all edges in the tree.\n */\nexport const initCutValues = (t, g) => {\n    let vs = dfs(t, t.getAllNodes(), 'post', false);\n    vs = vs.slice(0, (vs === null || vs === void 0 ? void 0 : vs.length) - 1);\n    vs.forEach((v) => {\n        assignCutValue(t, g, v);\n    });\n};\nconst assignCutValue = (t, g, child) => {\n    const childLab = t.getNode(child);\n    const parent = childLab.data.parent;\n    // FIXME: use undirected edge?\n    const edge = t\n        .getRelatedEdges(child, 'both')\n        .find((e) => e.target === parent || e.source === parent);\n    edge.data.cutvalue = calcCutValue(t, g, child);\n};\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nexport const calcCutValue = (t, g, child) => {\n    const childLab = t.getNode(child);\n    const parent = childLab.data.parent;\n    // True if the child is on the tail end of the edge in the directed graph\n    let childIsTail = true;\n    // The graph's view of the tree edge we're inspecting\n    let graphEdge = g\n        .getRelatedEdges(child, 'out')\n        .find((e) => e.target === parent);\n    // The accumulated cut value for the edge between this node and its parent\n    let cutValue = 0;\n    if (!graphEdge) {\n        childIsTail = false;\n        graphEdge = g\n            .getRelatedEdges(parent, 'out')\n            .find((e) => e.target === child);\n    }\n    cutValue = graphEdge.data.weight;\n    g.getRelatedEdges(child, 'both').forEach((e) => {\n        const isOutEdge = e.source === child;\n        const other = isOutEdge ? e.target : e.source;\n        if (other !== parent) {\n            const pointsToHead = isOutEdge === childIsTail;\n            const otherWeight = e.data.weight;\n            cutValue += pointsToHead ? otherWeight : -otherWeight;\n            if (isTreeEdge(t, child, other)) {\n                // FIXME: use undirected edge?\n                const otherCutValue = t\n                    .getRelatedEdges(child, 'both')\n                    .find((e) => e.source === other || e.target === other).data\n                    .cutvalue;\n                cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n            }\n        }\n    });\n    return cutValue;\n};\nexport const initLowLimValues = (tree, root = tree.getAllNodes()[0].id) => {\n    dfsAssignLowLim(tree, {}, 1, root);\n};\nconst dfsAssignLowLim = (tree, visited, nextLim, v, parent) => {\n    var _a;\n    const low = nextLim;\n    let useNextLim = nextLim;\n    const label = tree.getNode(v);\n    visited[v] = true;\n    (_a = tree.getNeighbors(v)) === null || _a === void 0 ? void 0 : _a.forEach((w) => {\n        if (!visited[w.id]) {\n            useNextLim = dfsAssignLowLim(tree, visited, useNextLim, w.id, v);\n        }\n    });\n    label.data.low = low;\n    label.data.lim = useNextLim++;\n    if (parent) {\n        label.data.parent = parent;\n    }\n    else {\n        // TODO should be able to remove this when we incrementally update low lim\n        delete label.data.parent;\n    }\n    return useNextLim;\n};\nexport const leaveEdge = (tree) => {\n    return tree.getAllEdges().find((e) => {\n        return e.data.cutvalue < 0;\n    });\n};\nexport const enterEdge = (t, g, edge) => {\n    let v = edge.source;\n    let w = edge.target;\n    // For the rest of this function we assume that v is the tail and w is the\n    // head, so if we don't have this edge in the graph we should flip it to\n    // match the correct orientation.\n    if (!g.getRelatedEdges(v, 'out').find((e) => e.target === w)) {\n        v = edge.target;\n        w = edge.source;\n    }\n    const vLabel = t.getNode(v);\n    const wLabel = t.getNode(w);\n    let tailLabel = vLabel;\n    let flip = false;\n    // If the root is in the tail of the edge then we need to flip the logic that\n    // checks for the head and tail nodes in the candidates function below.\n    if (vLabel.data.lim > wLabel.data.lim) {\n        tailLabel = wLabel;\n        flip = true;\n    }\n    const candidates = g.getAllEdges().filter((edge) => {\n        return (flip === isDescendant(t.getNode(edge.source), tailLabel) &&\n            flip !== isDescendant(t.getNode(edge.target), tailLabel));\n    });\n    return minBy(candidates, (edge) => {\n        return slack(g, edge);\n    });\n};\n/**\n *\n * @param t\n * @param g\n * @param e edge to remove\n * @param f edge to add\n */\nexport const exchangeEdges = (t, g, e, f) => {\n    // FIXME: use undirected edge?\n    const existed = t\n        .getRelatedEdges(e.source, 'both')\n        .find((edge) => edge.source === e.target || edge.target === e.target);\n    if (existed) {\n        t.removeEdge(existed.id);\n    }\n    t.addEdge({\n        id: `e${Math.random()}`,\n        source: f.source,\n        target: f.target,\n        data: {},\n    });\n    initLowLimValues(t);\n    initCutValues(t, g);\n    updateRanks(t, g);\n};\nconst updateRanks = (t, g) => {\n    const root = t.getAllNodes().find((v) => {\n        return !v.data.parent;\n    });\n    let vs = dfs(t, root, 'pre', false);\n    vs = vs.slice(1);\n    vs.forEach((v) => {\n        const parent = t.getNode(v).data.parent;\n        let edge = g.getRelatedEdges(v, 'out').find((e) => e.target === parent);\n        // let edge = g.edgeFromArgs(v, parent);\n        let flipped = false;\n        if (!edge && g.hasNode(parent)) {\n            // edge = g.edgeFromArgs(parent, v)!;\n            edge = g.getRelatedEdges(parent, 'out').find((e) => e.target === v);\n            flipped = true;\n        }\n        g.getNode(v).data.rank =\n            ((g.hasNode(parent) && g.getNode(parent).data.rank) || 0) +\n                (flipped ? edge === null || edge === void 0 ? void 0 : edge.data.minlen : -(edge === null || edge === void 0 ? void 0 : edge.data.minlen));\n    });\n};\n/*\n * Returns true if the edge is in the tree.\n */\nconst isTreeEdge = (tree, u, v) => {\n    // FIXME: use undirected edge?\n    return tree\n        .getRelatedEdges(u, 'both')\n        .find((e) => e.source === v || e.target === v);\n};\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nconst isDescendant = (vLabel, rootLabel) => {\n    return (rootLabel.data.low <= vLabel.data.lim &&\n        vLabel.data.lim <= rootLabel.data.lim);\n};\n//# sourceMappingURL=network-simplex.js.map",null,"import { isNumber } from '@antv/util';\nexport const clone = (target) => {\n    if (target === null) {\n        return target;\n    }\n    if (target instanceof Date) {\n        return new Date(target.getTime());\n    }\n    if (target instanceof Array) {\n        const cp = [];\n        target.forEach((v) => {\n            cp.push(v);\n        });\n        return cp.map((n) => clone(n));\n    }\n    if (typeof target === 'object') {\n        const cp = {};\n        Object.keys(target).forEach((k) => {\n            cp[k] = clone(target[k]);\n        });\n        return cp;\n    }\n    return target;\n};\n/**\n * Clone node or edge data and format it\n * @param target node/edge to be cloned\n * @param initRange whether init the x and y in data with the range, which means [xRange, yRange]\n * @returns cloned node/edge\n */\nexport const cloneFormatData = (target, initRange) => {\n    const cloned = clone(target);\n    cloned.data = cloned.data || {};\n    if (initRange) {\n        if (!isNumber(cloned.data.x))\n            cloned.data.x = Math.random() * initRange[0];\n        if (!isNumber(cloned.data.y))\n            cloned.data.y = Math.random() * initRange[1];\n    }\n    return cloned;\n};\n//# sourceMappingURL=object.js.map",null,"import { isFunction, isNumber, isObject } from '@antv/util';\nimport { parseSize } from './size';\n/**\n * Format value with multiple types into a function returns number.\n * @param defaultValue default value when value is invalid\n * @param value value to be formatted\n * @returns formatted result, a function returns number\n */\nexport function formatNumberFn(defaultValue, value) {\n    let resultFunc;\n    if (isFunction(value)) {\n        resultFunc = value;\n    }\n    else if (isNumber(value)) {\n        // value is number\n        resultFunc = () => value;\n    }\n    else {\n        // value is not number and function\n        resultFunc = () => defaultValue;\n    }\n    return resultFunc;\n}\n/**\n * Format size config with multiple types into a function returns number\n * @param defaultValue default value when value is invalid\n * @param value value to be formatted\n * @param resultIsNumber whether returns number\n * @returns formatted result, a function returns number\n */\nexport function formatSizeFn(defaultValue, value, resultIsNumber = true) {\n    if (!value && value !== 0) {\n        return (d) => {\n            const { size } = d.data || {};\n            if (size) {\n                if (Array.isArray(size))\n                    return resultIsNumber ? Math.max(...size) || defaultValue : size;\n                if (isObject(size) &&\n                    size.width &&\n                    size.height) {\n                    return resultIsNumber\n                        ? Math.max(size.width, size.height) || defaultValue\n                        : [size.width, size.height];\n                }\n                return size;\n            }\n            return defaultValue;\n        };\n    }\n    if (isFunction(value))\n        return value;\n    if (isNumber(value))\n        return () => value;\n    if (Array.isArray(value)) {\n        return () => {\n            if (resultIsNumber)\n                return Math.max(...value) || defaultValue;\n            return value;\n        };\n    }\n    if (isObject(value) && value.width && value.height) {\n        return () => {\n            if (resultIsNumber)\n                return Math.max(value.width, value.height) || defaultValue;\n            return [value.width, value.height];\n        };\n    }\n    return () => defaultValue;\n}\n/**\n * format the props nodeSize and nodeSpacing to a function\n * @param nodeSize\n * @param nodeSpacing\n * @returns\n */\nexport const formatNodeSizeToNumber = (nodeSize, nodeSpacing, defaultNodeSize = 10) => {\n    let nodeSizeFunc;\n    const nodeSpacingFunc = typeof nodeSpacing === 'function' ? nodeSpacing : () => nodeSpacing || 0;\n    if (!nodeSize) {\n        nodeSizeFunc = (d) => {\n            var _a, _b, _c;\n            if ((_a = d.data) === null || _a === void 0 ? void 0 : _a.bboxSize)\n                return (_b = d.data) === null || _b === void 0 ? void 0 : _b.bboxSize;\n            if ((_c = d.data) === null || _c === void 0 ? void 0 : _c.size) {\n                const dataSize = d.data.size;\n                if (Array.isArray(dataSize))\n                    return dataSize;\n                if (isObject(dataSize))\n                    return [dataSize.width, dataSize.height];\n                return dataSize;\n            }\n            return defaultNodeSize;\n        };\n    }\n    else if (Array.isArray(nodeSize)) {\n        nodeSizeFunc = (d) => nodeSize;\n    }\n    else if (isFunction(nodeSize)) {\n        nodeSizeFunc = nodeSize;\n    }\n    else {\n        nodeSizeFunc = (d) => nodeSize;\n    }\n    const func = (d) => {\n        const nodeSize = nodeSizeFunc(d);\n        const nodeSpacing = nodeSpacingFunc(d);\n        return Math.max(...parseSize(nodeSize)) + nodeSpacing;\n    };\n    return func;\n};\n//# sourceMappingURL=function.js.map",null,"/**\n * 判断值是否为函数\n * @return 是否为函数\n */\nexport default function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=is-function.js.map",null,"export default (function (value) {\n    /**\n     * isObject({}) => true\n     * isObject([1, 2, 3]) => true\n     * isObject(Function) => true\n     * isObject(null) => false\n     */\n    var type = typeof value;\n    return (value !== null && type === 'object') || type === 'function';\n});\n//# sourceMappingURL=is-object.js.map",null,"import { isNumber } from '@antv/util';\nexport function parseSize(size) {\n    if (!size)\n        return [0, 0, 0];\n    if (isNumber(size))\n        return [size, size, size];\n    else if (size.length === 0)\n        return [0, 0, 0];\n    const [x, y = x, z = x] = size;\n    return [x, y, z];\n}\n//# sourceMappingURL=size.js.map",null,"import { __awaiter } from \"tslib\";\nimport { cloneFormatData, formatNumberFn, formatSizeFn } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    radius: null,\n    startRadius: null,\n    endRadius: null,\n    startAngle: 0,\n    endAngle: 2 * Math.PI,\n    clockwise: true,\n    divisions: 1,\n    ordering: null,\n    angleRatio: 1,\n};\n/**\n * <zh/> 环形布局\n *\n * <en/> Circular layout\n */\nexport class CircularLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'circular';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericCircularLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericCircularLayout(true, graph, options);\n        });\n    }\n    genericCircularLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { width, height, center, divisions, startAngle = 0, endAngle = 2 * Math.PI, angleRatio, ordering, clockwise, nodeSpacing: paramNodeSpacing, nodeSize: paramNodeSize, } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            // Calculate center according to `window` if not provided.\n            const [calculatedWidth, calculatedHeight, calculatedCenter] = calculateCenter(width, height, center);\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            if (!n || n === 1) {\n                return handleSingleNodeGraph(graph, assign, calculatedCenter);\n            }\n            const angleStep = (endAngle - startAngle) / n;\n            let { radius, startRadius, endRadius } = mergedOptions;\n            if (paramNodeSpacing) {\n                const nodeSpacing = formatNumberFn(10, paramNodeSpacing);\n                const nodeSize = formatSizeFn(10, paramNodeSize);\n                let maxNodeSize = -Infinity;\n                nodes.forEach((node) => {\n                    const nSize = nodeSize(node);\n                    if (maxNodeSize < nSize)\n                        maxNodeSize = nSize;\n                });\n                let perimeter = 0;\n                nodes.forEach((node, i) => {\n                    if (i === 0)\n                        perimeter += maxNodeSize || 10;\n                    else\n                        perimeter += (nodeSpacing(node) || 0) + (maxNodeSize || 10);\n                });\n                radius = perimeter / (2 * Math.PI);\n            }\n            else if (!radius && !startRadius && !endRadius) {\n                radius = Math.min(calculatedHeight, calculatedWidth) / 2;\n            }\n            else if (!startRadius && endRadius) {\n                startRadius = endRadius;\n            }\n            else if (startRadius && !endRadius) {\n                endRadius = startRadius;\n            }\n            const astep = angleStep * angleRatio;\n            // calculated nodes as temporary result\n            let layoutNodes = [];\n            if (ordering === 'topology') {\n                // layout according to the topology\n                layoutNodes = topologyOrdering(graph, nodes);\n            }\n            else if (ordering === 'topology-directed') {\n                // layout according to the topology\n                layoutNodes = topologyOrdering(graph, nodes, true);\n            }\n            else if (ordering === 'degree') {\n                // layout according to the descent order of degrees\n                layoutNodes = degreeOrdering(graph, nodes);\n            }\n            else {\n                // layout according to the original order in the data.nodes\n                layoutNodes = nodes.map((node) => cloneFormatData(node));\n            }\n            const divN = Math.ceil(n / divisions); // node number in each division\n            for (let i = 0; i < n; ++i) {\n                let r = radius;\n                if (!r && startRadius !== null && endRadius !== null) {\n                    r = startRadius + (i * (endRadius - startRadius)) / (n - 1);\n                }\n                if (!r) {\n                    r = 10 + (i * 100) / (n - 1);\n                }\n                let angle = startAngle +\n                    (i % divN) * astep +\n                    ((2 * Math.PI) / divisions) * Math.floor(i / divN);\n                if (!clockwise) {\n                    angle =\n                        endAngle -\n                            (i % divN) * astep -\n                            ((2 * Math.PI) / divisions) * Math.floor(i / divN);\n                }\n                layoutNodes[i].data.x = calculatedCenter[0] + Math.cos(angle) * r;\n                layoutNodes[i].data.y = calculatedCenter[1] + Math.sin(angle) * r;\n            }\n            if (assign) {\n                layoutNodes.forEach((node) => {\n                    graph.mergeNodeData(node.id, {\n                        x: node.data.x,\n                        y: node.data.y,\n                    });\n                });\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            return result;\n        });\n    }\n}\n/**\n * order the nodes acoording to the graph topology\n * @param graph\n * @param nodes\n * @param directed\n * @returns\n */\nconst topologyOrdering = (graph, nodes, directed = false) => {\n    const orderedCNodes = [cloneFormatData(nodes[0])];\n    const pickFlags = {};\n    const n = nodes.length;\n    pickFlags[nodes[0].id] = true;\n    // write children into cnodes\n    let k = 0;\n    nodes.forEach((node, i) => {\n        if (i !== 0) {\n            if ((i === n - 1 ||\n                graph.getDegree(node.id, 'both') !==\n                    graph.getDegree(nodes[i + 1].id, 'both') ||\n                graph.areNeighbors(orderedCNodes[k].id, node.id)) &&\n                !pickFlags[node.id]) {\n                orderedCNodes.push(cloneFormatData(node));\n                pickFlags[node.id] = true;\n                k++;\n            }\n            else {\n                const children = directed\n                    ? graph.getSuccessors(orderedCNodes[k].id)\n                    : graph.getNeighbors(orderedCNodes[k].id);\n                let foundChild = false;\n                for (let j = 0; j < children.length; j++) {\n                    const child = children[j];\n                    if (graph.getDegree(child.id) === graph.getDegree(node.id) &&\n                        !pickFlags[child.id]) {\n                        orderedCNodes.push(cloneFormatData(child));\n                        pickFlags[child.id] = true;\n                        foundChild = true;\n                        break;\n                    }\n                }\n                let ii = 0;\n                while (!foundChild) {\n                    if (!pickFlags[nodes[ii].id]) {\n                        orderedCNodes.push(cloneFormatData(nodes[ii]));\n                        pickFlags[nodes[ii].id] = true;\n                        foundChild = true;\n                    }\n                    ii++;\n                    if (ii === n) {\n                        break;\n                    }\n                }\n            }\n        }\n    });\n    return orderedCNodes;\n};\n/**\n * order the nodes according to their degree\n * @param graph\n * @param nodes\n * @returns\n */\nfunction degreeOrdering(graph, nodes) {\n    const orderedNodes = [];\n    nodes.forEach((node, i) => {\n        orderedNodes.push(cloneFormatData(node));\n    });\n    orderedNodes.sort((nodeA, nodeB) => graph.getDegree(nodeA.id, 'both') - graph.getDegree(nodeB.id, 'both'));\n    return orderedNodes;\n}\n/**\n * format the invalide width and height, and get the center position\n * @param width\n * @param height\n * @param center\n * @returns\n */\nconst calculateCenter = (width, height, center) => {\n    let calculatedWidth = width;\n    let calculatedHeight = height;\n    let calculatedCenter = center;\n    if (!calculatedWidth && typeof window !== 'undefined') {\n        calculatedWidth = window.innerWidth;\n    }\n    if (!calculatedHeight && typeof window !== 'undefined') {\n        calculatedHeight = window.innerHeight;\n    }\n    if (!calculatedCenter) {\n        calculatedCenter = [calculatedWidth / 2, calculatedHeight / 2];\n    }\n    return [calculatedWidth, calculatedHeight, calculatedCenter];\n};\n//# sourceMappingURL=circular.js.map",null,"/**\n * Assign or only return the result for the graph who has no nodes or only one node.\n * @param graph original graph\n * @param assign whether assign result to original graph\n * @param center the layout center\n * @returns\n */\nexport const handleSingleNodeGraph = (graph, assign, center) => {\n    const nodes = graph.getAllNodes();\n    const edges = graph.getAllEdges();\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n        const result = { nodes: [], edges };\n        return result;\n    }\n    if (nodes.length === 1) {\n        if (assign) {\n            graph.mergeNodeData(nodes[0].id, {\n                x: center[0],\n                y: center[1],\n            });\n        }\n        const result = {\n            nodes: [\n                Object.assign(Object.assign({}, nodes[0]), { data: Object.assign(Object.assign({}, nodes[0].data), { x: center[0], y: center[1] }) }),\n            ],\n            edges,\n        };\n        return result;\n    }\n};\n//# sourceMappingURL=common.js.map",null,"import { __awaiter } from \"tslib\";\nimport { Graph as GraphCore } from '@antv/graphlib';\nimport { isFunction, isNumber, isObject } from '@antv/util';\nimport { ConcentricLayout } from './concentric';\nimport { ForceLayout } from './force';\nimport { MDSLayout } from './mds';\nimport { isLayoutWithIterations } from './types';\nimport { getLayoutBBox, graphTreeDfs, isArray } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nconst FORCE_LAYOUT_TYPE_MAP = {\n    gForce: true,\n    force2: true,\n    d3force: true,\n    fruchterman: true,\n    forceAtlas2: true,\n    force: true,\n    'graphin-force': true,\n};\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    center: [0, 0],\n    comboPadding: 10,\n    treeKey: 'combo',\n};\n/**\n * <zh/> 组合布局\n *\n * <en/> Combo-Combined layout\n */\nexport class ComboCombinedLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'comboCombined';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericComboCombinedLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericComboCombinedLayout(true, graph, options);\n        });\n    }\n    genericComboCombinedLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = this.initVals(Object.assign(Object.assign({}, this.options), options));\n            const { center, treeKey, outerLayout: propsOuterLayout } = mergedOptions;\n            const nodes = graph\n                .getAllNodes()\n                .filter((node) => !node.data._isCombo);\n            const combos = graph\n                .getAllNodes()\n                .filter((node) => node.data._isCombo);\n            const edges = graph.getAllEdges();\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            if (!n || n === 1) {\n                return handleSingleNodeGraph(graph, assign, center);\n            }\n            // output nodes\n            const layoutNodes = [];\n            const nodeMap = new Map();\n            nodes.forEach((node) => {\n                nodeMap.set(node.id, node);\n            });\n            const comboMap = new Map();\n            combos.forEach((combo) => {\n                comboMap.set(combo.id, combo);\n            });\n            // each one in comboNodes is a combo contains the size and child nodes\n            // comboNodes includes the node who has no parent combo\n            const comboNodes = new Map();\n            // the inner layouts, the result positions are stored in comboNodes and their child nodes\n            const innerGraphLayoutPromises = this.getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, mergedOptions, comboNodes);\n            yield Promise.all(innerGraphLayoutPromises);\n            const outerNodeIds = new Map();\n            const outerLayoutNodes = [];\n            const nodeAncestorIdMap = new Map();\n            let allHaveNoPosition = true;\n            graph.getRoots(treeKey).forEach((root) => {\n                const combo = comboNodes.get(root.id);\n                const cacheCombo = comboMap.get(root.id) || nodeMap.get(root.id);\n                const comboLayoutNode = {\n                    id: root.id,\n                    data: Object.assign(Object.assign({}, root.data), { x: combo.data.x || cacheCombo.data.x, y: combo.data.y || cacheCombo.data.y, fx: combo.data.fx || cacheCombo.data.fx, fy: combo.data.fy || cacheCombo.data.fy, mass: combo.data.mass || cacheCombo.data.mass, size: combo.data.size }),\n                };\n                outerLayoutNodes.push(comboLayoutNode);\n                outerNodeIds.set(root.id, true);\n                if (!isNaN(comboLayoutNode.data.x) &&\n                    comboLayoutNode.data.x !== 0 &&\n                    !isNaN(comboLayoutNode.data.y) &&\n                    comboLayoutNode.data.y !== 0) {\n                    allHaveNoPosition = false;\n                }\n                else {\n                    comboLayoutNode.data.x = Math.random() * 100;\n                    comboLayoutNode.data.y = Math.random() * 100;\n                }\n                graphTreeDfs(graph, [root], (child) => {\n                    if (child.id !== root.id)\n                        nodeAncestorIdMap.set(child.id, root.id);\n                }, 'TB', treeKey);\n            });\n            const outerLayoutEdges = [];\n            edges.forEach((edge) => {\n                const sourceAncestorId = nodeAncestorIdMap.get(edge.source) || edge.source;\n                const targetAncestorId = nodeAncestorIdMap.get(edge.target) || edge.target;\n                // create an edge for outer layout if both source and target's ancestor combo is in outer layout nodes\n                if (sourceAncestorId !== targetAncestorId &&\n                    outerNodeIds.has(sourceAncestorId) &&\n                    outerNodeIds.has(targetAncestorId)) {\n                    outerLayoutEdges.push({\n                        id: edge.id,\n                        source: sourceAncestorId,\n                        target: targetAncestorId,\n                        data: {},\n                    });\n                }\n            });\n            // 若有需要最外层的 combo 或节点，则对最外层执行力导向\n            let outerPositions;\n            if (outerLayoutNodes === null || outerLayoutNodes === void 0 ? void 0 : outerLayoutNodes.length) {\n                if (outerLayoutNodes.length === 1) {\n                    outerLayoutNodes[0].data.x = center[0];\n                    outerLayoutNodes[0].data.y = center[1];\n                }\n                else {\n                    const outerLayoutGraph = new GraphCore({\n                        nodes: outerLayoutNodes,\n                        edges: outerLayoutEdges,\n                    });\n                    const outerLayout = propsOuterLayout || new ForceLayout();\n                    // preset the nodes if the outerLayout is a force family layout\n                    if (allHaveNoPosition && FORCE_LAYOUT_TYPE_MAP[outerLayout.id]) {\n                        const outerLayoutPreset = outerLayoutNodes.length < 100\n                            ? new MDSLayout()\n                            : new ConcentricLayout();\n                        yield outerLayoutPreset.assign(outerLayoutGraph);\n                    }\n                    const options = Object.assign({ center, kg: 5, preventOverlap: true, animate: false }, (outerLayout.id === 'force'\n                        ? {\n                            gravity: 1,\n                            factor: 4,\n                            linkDistance: (edge, source, target) => {\n                                const sourceSize = Math.max(...source.data.size) || 32;\n                                const targetSize = Math.max(...target.data.size) || 32;\n                                return sourceSize / 2 + targetSize / 2 + 200;\n                            },\n                        }\n                        : {}));\n                    outerPositions = yield executeLayout(outerLayout, outerLayoutGraph, options);\n                }\n                // move the combos and their child nodes\n                comboNodes.forEach((comboNode) => {\n                    var _a;\n                    const outerPosition = outerPositions.nodes.find((pos) => pos.id === comboNode.id);\n                    if (outerPosition) {\n                        // if it is one of the outer layout nodes, update the positions\n                        const { x, y } = outerPosition.data;\n                        comboNode.data.visited = true;\n                        comboNode.data.x = x;\n                        comboNode.data.y = y;\n                        layoutNodes.push({\n                            id: comboNode.id,\n                            data: { x, y },\n                        });\n                    }\n                    // move the child nodes\n                    const { x, y } = comboNode.data;\n                    (_a = comboNode.data.nodes) === null || _a === void 0 ? void 0 : _a.forEach((node) => {\n                        layoutNodes.push({\n                            id: node.id,\n                            data: { x: node.data.x + x, y: node.data.y + y },\n                        });\n                    });\n                });\n                // move the nodes from top to bottom\n                comboNodes.forEach(({ data }) => {\n                    const { x, y, visited, nodes } = data;\n                    nodes === null || nodes === void 0 ? void 0 : nodes.forEach((node) => {\n                        if (!visited) {\n                            const layoutNode = layoutNodes.find((n) => n.id === node.id);\n                            layoutNode.data.x += x || 0;\n                            layoutNode.data.y += y || 0;\n                        }\n                    });\n                });\n            }\n            if (assign) {\n                layoutNodes.forEach((node) => {\n                    graph.mergeNodeData(node.id, {\n                        x: node.data.x,\n                        y: node.data.y,\n                    });\n                });\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            return result;\n        });\n    }\n    initVals(options) {\n        const formattedOptions = Object.assign({}, options);\n        const { nodeSize, spacing, comboPadding } = options;\n        let nodeSizeFunc;\n        let spacingFunc;\n        // nodeSpacing to function\n        if (isNumber(spacing)) {\n            spacingFunc = () => spacing;\n        }\n        else if (isFunction(spacing)) {\n            spacingFunc = spacing;\n        }\n        else {\n            spacingFunc = () => 0;\n        }\n        formattedOptions.spacing = spacingFunc;\n        // nodeSize to function\n        if (!nodeSize) {\n            nodeSizeFunc = (d) => {\n                const spacing = spacingFunc(d);\n                if (d.size) {\n                    if (isArray(d.size)) {\n                        const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                        return (res + spacing) / 2;\n                    }\n                    if (isObject(d.size)) {\n                        const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n                        return (res + spacing) / 2;\n                    }\n                    return (d.size + spacing) / 2;\n                }\n                return 32 + spacing / 2;\n            };\n        }\n        else if (isFunction(nodeSize)) {\n            nodeSizeFunc = (d) => {\n                const size = nodeSize(d);\n                const spacing = spacingFunc(d);\n                if (isArray(d.size)) {\n                    const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n                    return (res + spacing) / 2;\n                }\n                return ((size || 32) + spacing) / 2;\n            };\n        }\n        else if (isArray(nodeSize)) {\n            const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n            const radius = larger / 2;\n            nodeSizeFunc = (d) => radius + spacingFunc(d) / 2;\n        }\n        else {\n            // number type\n            const radius = nodeSize / 2;\n            nodeSizeFunc = (d) => radius + spacingFunc(d) / 2;\n        }\n        formattedOptions.nodeSize = nodeSizeFunc;\n        // comboPadding to function\n        let comboPaddingFunc;\n        if (isNumber(comboPadding)) {\n            comboPaddingFunc = () => comboPadding;\n        }\n        else if (isArray(comboPadding)) {\n            comboPaddingFunc = () => Math.max.apply(null, comboPadding);\n        }\n        else if (isFunction(comboPadding)) {\n            comboPaddingFunc = comboPadding;\n        }\n        else {\n            // null type\n            comboPaddingFunc = () => 0;\n        }\n        formattedOptions.comboPadding = comboPaddingFunc;\n        return formattedOptions;\n    }\n    getInnerGraphs(graph, treeKey, nodeMap, comboMap, edges, options, comboNodes) {\n        const { nodeSize, comboPadding, spacing, innerLayout } = options;\n        const innerGraphLayout = innerLayout || new ConcentricLayout({});\n        const innerLayoutOptions = {\n            center: [0, 0],\n            preventOverlap: true,\n            nodeSpacing: spacing,\n        };\n        const innerLayoutPromises = [];\n        const getSize = (node) => {\n            // @ts-ignore\n            let padding = (comboPadding === null || comboPadding === void 0 ? void 0 : comboPadding(node)) || 10;\n            if (isArray(padding))\n                padding = Math.max(...padding);\n            return {\n                size: padding ? [padding * 2, padding * 2] : [30, 30],\n                padding,\n            };\n        };\n        graph.getRoots(treeKey).forEach((root) => {\n            // @ts-ignore\n            comboNodes.set(root.id, {\n                id: root.id,\n                data: {\n                    nodes: [],\n                    size: getSize(root).size,\n                },\n            });\n            let start = Promise.resolve();\n            // Regard the child nodes in one combo as a graph, and layout them from bottom to top\n            graphTreeDfs(graph, [root], (treeNode) => {\n                var _a;\n                if (!treeNode.data._isCombo)\n                    return;\n                const { size: nsize, padding } = getSize(treeNode);\n                if (!((_a = graph.getChildren(treeNode.id, treeKey)) === null || _a === void 0 ? void 0 : _a.length)) {\n                    // empty combo\n                    comboNodes.set(treeNode.id, {\n                        id: treeNode.id,\n                        data: Object.assign(Object.assign({}, treeNode.data), { size: nsize }),\n                    });\n                }\n                else {\n                    // combo not empty\n                    const comboNode = comboNodes.get(treeNode.id);\n                    comboNodes.set(treeNode.id, {\n                        id: treeNode.id,\n                        data: Object.assign({ nodes: [] }, comboNode === null || comboNode === void 0 ? void 0 : comboNode.data),\n                    });\n                    const innerLayoutNodeIds = new Map();\n                    const innerLayoutNodes = graph\n                        .getChildren(treeNode.id, treeKey)\n                        .map((child) => {\n                        if (child.data._isCombo) {\n                            if (!comboNodes.has(child.id)) {\n                                comboNodes.set(child.id, {\n                                    id: child.id,\n                                    data: Object.assign({}, child.data),\n                                });\n                            }\n                            innerLayoutNodeIds.set(child.id, true);\n                            return comboNodes.get(child.id);\n                        }\n                        const oriNode = nodeMap.get(child.id) || comboMap.get(child.id);\n                        innerLayoutNodeIds.set(child.id, true);\n                        return {\n                            id: child.id,\n                            data: Object.assign(Object.assign({}, oriNode.data), child.data),\n                        };\n                    });\n                    const innerGraphData = {\n                        nodes: innerLayoutNodes,\n                        edges: edges.filter((edge) => innerLayoutNodeIds.has(edge.source) &&\n                            innerLayoutNodeIds.has(edge.target)),\n                    };\n                    let minNodeSize = Infinity;\n                    innerLayoutNodes.forEach((node) => {\n                        var _a;\n                        let { size } = node.data;\n                        if (!size) {\n                            size = ((_a = comboNodes.get(node.id)) === null || _a === void 0 ? void 0 : _a.data.size) ||\n                                (nodeSize === null || nodeSize === void 0 ? void 0 : nodeSize(node)) || [30, 30];\n                        }\n                        if (isNumber(size))\n                            size = [size, size];\n                        const [size0, size1] = size;\n                        if (minNodeSize > size0)\n                            minNodeSize = size0;\n                        if (minNodeSize > size1)\n                            minNodeSize = size1;\n                        node.data.size = size;\n                    });\n                    // innerGraphLayout.assign(innerGraphCore, innerLayoutOptions);\n                    start = start.then(() => __awaiter(this, void 0, void 0, function* () {\n                        const innerGraphCore = new GraphCore(innerGraphData);\n                        yield executeLayout(innerGraphLayout, innerGraphCore, innerLayoutOptions, true);\n                        const { minX, minY, maxX, maxY } = getLayoutBBox(innerLayoutNodes);\n                        // move the innerGraph to [0, 0], for later controlled by parent layout\n                        const center = { x: (maxX + minX) / 2, y: (maxY + minY) / 2 };\n                        innerGraphData.nodes.forEach((node) => {\n                            node.data.x -= center.x;\n                            node.data.y -= center.y;\n                        });\n                        const size = [\n                            Math.max(maxX - minX, minNodeSize) + padding * 2,\n                            Math.max(maxY - minY, minNodeSize) + padding * 2,\n                        ];\n                        comboNodes.get(treeNode.id).data.size = size;\n                        comboNodes.get(treeNode.id).data.nodes = innerLayoutNodes;\n                    }));\n                }\n                return true;\n            }, 'BT', treeKey);\n            innerLayoutPromises.push(start);\n        });\n        return innerLayoutPromises;\n    }\n}\nfunction executeLayout(layout, graph, options, assign) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        if (isLayoutWithIterations(layout)) {\n            layout.execute(graph, options);\n            layout.stop();\n            return layout.tick((_a = options.iterations) !== null && _a !== void 0 ? _a : 300);\n        }\n        if (assign)\n            return yield layout.assign(graph, options);\n        return yield layout.execute(graph, options);\n    });\n}\n//# sourceMappingURL=combo-combined.js.map",null,"import { __awaiter } from \"tslib\";\nimport { isFunction, isNumber, isObject, isString } from '@antv/util';\nimport { cloneFormatData, isArray } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nimport { parseSize } from './util/size';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    nodeSize: 30,\n    nodeSpacing: 10,\n    preventOverlap: false,\n    sweep: undefined,\n    equidistant: false,\n    startAngle: (3 / 2) * Math.PI,\n    clockwise: true,\n    maxLevelDiff: undefined,\n    sortBy: 'degree',\n};\n/**\n * <zh/> 同心圆布局\n *\n * <en/> Concentric layout\n */\nexport class ConcentricLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'concentric';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericConcentricLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericConcentricLayout(true, graph, options);\n        });\n    }\n    genericConcentricLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center: propsCenter, width: propsWidth, height: propsHeight, sortBy: propsSortBy, maxLevelDiff: propsMaxLevelDiff, sweep: propsSweep, clockwise, equidistant, preventOverlap, startAngle = (3 / 2) * Math.PI, nodeSize, nodeSpacing, } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const width = !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n            const center = (!propsCenter ? [width / 2, height / 2] : propsCenter);\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n                return handleSingleNodeGraph(graph, assign, center);\n            }\n            const layoutNodes = [];\n            let maxNodeSize;\n            let maxNodeSpacing = 0;\n            if (isArray(nodeSize)) {\n                maxNodeSize = Math.max(nodeSize[0], nodeSize[1]);\n            }\n            else if (isFunction(nodeSize)) {\n                maxNodeSize = -Infinity;\n                nodes.forEach((node) => {\n                    const currentSize = Math.max(...parseSize(nodeSize(node)));\n                    if (currentSize > maxNodeSize)\n                        maxNodeSize = currentSize;\n                });\n            }\n            else {\n                maxNodeSize = nodeSize;\n            }\n            if (isArray(nodeSpacing)) {\n                maxNodeSpacing = Math.max(nodeSpacing[0], nodeSpacing[1]);\n            }\n            else if (isNumber(nodeSpacing)) {\n                maxNodeSpacing = nodeSpacing;\n            }\n            nodes.forEach((node) => {\n                const cnode = cloneFormatData(node);\n                layoutNodes.push(cnode);\n                let nodeSize = maxNodeSize;\n                const { data } = cnode;\n                if (isArray(data.size)) {\n                    nodeSize = Math.max(data.size[0], data.size[1]);\n                }\n                else if (isNumber(data.size)) {\n                    nodeSize = data.size;\n                }\n                else if (isObject(data.size)) {\n                    nodeSize = Math.max(data.size.width, data.size.height);\n                }\n                maxNodeSize = Math.max(maxNodeSize, nodeSize);\n                if (isFunction(nodeSpacing)) {\n                    maxNodeSpacing = Math.max(nodeSpacing(node), maxNodeSpacing);\n                }\n            });\n            // layout\n            const nodeIdxMap = {};\n            layoutNodes.forEach((node, i) => {\n                nodeIdxMap[node.id] = i;\n            });\n            // get the node degrees\n            let sortBy = propsSortBy;\n            if (!isString(sortBy) ||\n                layoutNodes[0].data[sortBy] === undefined) {\n                sortBy = 'degree';\n            }\n            if (sortBy === 'degree') {\n                layoutNodes.sort((n1, n2) => graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n            }\n            else {\n                // sort nodes by value\n                layoutNodes.sort((n1, n2) => n2.data[sortBy] - n1.data[sortBy]);\n            }\n            const maxValueNode = layoutNodes[0];\n            const maxLevelDiff = (propsMaxLevelDiff ||\n                (sortBy === 'degree'\n                    ? graph.getDegree(maxValueNode.id, 'both')\n                    : maxValueNode.data[sortBy])) / 4;\n            // put the values into levels\n            const levels = [{ nodes: [] }];\n            let currentLevel = levels[0];\n            layoutNodes.forEach((node) => {\n                if (currentLevel.nodes.length > 0) {\n                    const diff = sortBy === 'degree'\n                        ? Math.abs(graph.getDegree(currentLevel.nodes[0].id, 'both') -\n                            graph.getDegree(node.id, 'both'))\n                        : Math.abs(currentLevel.nodes[0].data[sortBy] -\n                            node.data[sortBy]);\n                    if (maxLevelDiff && diff >= maxLevelDiff) {\n                        currentLevel = { nodes: [] };\n                        levels.push(currentLevel);\n                    }\n                }\n                currentLevel.nodes.push(node);\n            });\n            // create positions for levels\n            let minDist = maxNodeSize + maxNodeSpacing; // min dist between nodes\n            if (!preventOverlap) {\n                // then strictly constrain to bb\n                const firstLvlHasMulti = levels.length > 0 && levels[0].nodes.length > 1;\n                const maxR = Math.min(width, height) / 2 - minDist;\n                const rStep = maxR / (levels.length + (firstLvlHasMulti ? 1 : 0));\n                minDist = Math.min(minDist, rStep);\n            }\n            // find the metrics for each level\n            let r = 0;\n            levels.forEach((level) => {\n                const sweep = propsSweep === undefined\n                    ? 2 * Math.PI - (2 * Math.PI) / level.nodes.length\n                    : propsSweep;\n                level.dTheta = sweep / Math.max(1, level.nodes.length - 1);\n                // calculate the radius\n                if (level.nodes.length > 1 && preventOverlap) {\n                    // but only if more than one node (can't overlap)\n                    const dcos = Math.cos(level.dTheta) - Math.cos(0);\n                    const dsin = Math.sin(level.dTheta) - Math.sin(0);\n                    const rMin = Math.sqrt((minDist * minDist) / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping\n                    r = Math.max(rMin, r);\n                }\n                level.r = r;\n                r += minDist;\n            });\n            if (equidistant) {\n                let rDeltaMax = 0;\n                let rr = 0;\n                for (let i = 0; i < levels.length; i++) {\n                    const level = levels[i];\n                    const rDelta = (level.r || 0) - rr;\n                    rDeltaMax = Math.max(rDeltaMax, rDelta);\n                }\n                rr = 0;\n                levels.forEach((level, i) => {\n                    if (i === 0) {\n                        rr = level.r || 0;\n                    }\n                    level.r = rr;\n                    rr += rDeltaMax;\n                });\n            }\n            // calculate the node positions\n            levels.forEach((level) => {\n                const dTheta = level.dTheta || 0;\n                const rr = level.r || 0;\n                level.nodes.forEach((node, j) => {\n                    const theta = startAngle + (clockwise ? 1 : -1) * dTheta * j;\n                    node.data.x = center[0] + rr * Math.cos(theta);\n                    node.data.y = center[1] + rr * Math.sin(theta);\n                });\n            });\n            if (assign) {\n                layoutNodes.forEach((node) => graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y,\n                }));\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            return result;\n        });\n    }\n}\n//# sourceMappingURL=concentric.js.map",null,"/**\n * 判断值是否为字符串\n * @return 是否为字符串\n */\nexport default function isString(value) {\n    return typeof value === 'string';\n}\n//# sourceMappingURL=is-string.js.map",null,"export const isArray = Array.isArray;\n//# sourceMappingURL=array.js.map",null,"import { __awaiter } from \"tslib\";\nimport { Graph as IGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { formatNodeSizeToNumber, formatNumberFn } from '../util';\nimport { forceNBody } from './force-n-body';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    dimensions: 2,\n    maxIteration: 500,\n    gravity: 10,\n    factor: 1,\n    edgeStrength: 50,\n    nodeStrength: 1000,\n    coulombDisScale: 0.005,\n    damping: 0.9,\n    maxSpeed: 200,\n    minMovement: 0.4,\n    interval: 0.02,\n    linkDistance: 200,\n    clusterNodeStrength: 20,\n    preventOverlap: true,\n    distanceThresholdMode: 'mean',\n};\n/**\n * <zh/> 力导向布局\n *\n * <en/> Force-directed layout\n */\nexport class ForceLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'force';\n        /**\n         * time interval for layout force animations\n         */\n        this.timeInterval = 0;\n        /**\n         * compare with minMovement to end the nodes' movement\n         */\n        this.judgingDistance = 0;\n        this.running = false;\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericForceLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericForceLayout(true, graph, options);\n        });\n    }\n    /**\n     * Stop simulation immediately.\n     */\n    stop() {\n        if (this.timeInterval && typeof window !== 'undefined') {\n            window.clearInterval(this.timeInterval);\n        }\n        this.running = false;\n    }\n    /**\n     * Manually steps the simulation by the specified number of iterations.\n     * @see https://github.com/d3/d3-force#simulation_tick\n     */\n    tick(iterations = this.options.maxIteration || 1) {\n        if (this.lastResult) {\n            return this.lastResult;\n        }\n        for (let i = 0; (this.judgingDistance > this.lastOptions.minMovement || i < 1) &&\n            i < iterations; i++) {\n            this.runOneStep(this.lastCalcGraph, this.lastGraph, i, this.lastVelMap, this.lastOptions);\n            this.updatePosition(this.lastGraph, this.lastCalcGraph, this.lastVelMap, this.lastOptions);\n        }\n        const result = {\n            nodes: this.lastLayoutNodes,\n            edges: this.lastLayoutEdges,\n        };\n        if (this.lastAssign) {\n            result.nodes.forEach((node) => this.lastGraph.mergeNodeData(node.id, {\n                x: node.data.x,\n                y: node.data.y,\n                z: this.options.dimensions === 3 ? node.data.z : undefined,\n            }));\n        }\n        return result;\n    }\n    genericForceLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const formattedOptions = this.formatOptions(mergedOptions, graph);\n            const { dimensions, width, height, nodeSize, getMass, nodeStrength, edgeStrength, linkDistance, } = formattedOptions;\n            // clones the original data and attaches calculation attributes for this layout algorithm\n            const layoutNodes = nodes.map((node, i) => {\n                return Object.assign(Object.assign({}, node), { data: Object.assign(Object.assign({}, node.data), { \n                        // ...randomDistribution(node, dimensions, 30, i),\n                        x: isNumber(node.data.x) ? node.data.x : Math.random() * width, y: isNumber(node.data.y) ? node.data.y : Math.random() * height, z: isNumber(node.data.z)\n                            ? node.data.z\n                            : Math.random() * Math.sqrt(width * height), size: nodeSize(node) || 30, mass: getMass(node), nodeStrength: nodeStrength(node) }) });\n            });\n            const layoutEdges = edges.map((edge) => (Object.assign(Object.assign({}, edge), { data: Object.assign(Object.assign({}, edge.data), { edgeStrength: edgeStrength(edge), linkDistance: linkDistance(edge, graph.getNode(edge.source), graph.getNode(edge.target)) }) })));\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n                this.lastResult = { nodes: [], edges };\n                return { nodes: [], edges };\n            }\n            const velMap = {};\n            nodes.forEach((node, i) => {\n                velMap[node.id] = {\n                    x: 0,\n                    y: 0,\n                    z: 0,\n                };\n            });\n            const calcGraph = new IGraph({\n                nodes: layoutNodes,\n                edges: layoutEdges,\n            });\n            this.formatCentripetal(formattedOptions, calcGraph);\n            const { maxIteration, minMovement, onTick } = formattedOptions;\n            // Use them later in `tick`.\n            this.lastLayoutNodes = layoutNodes;\n            this.lastLayoutEdges = layoutEdges;\n            this.lastAssign = assign;\n            this.lastGraph = graph;\n            this.lastCalcGraph = calcGraph;\n            this.lastOptions = formattedOptions;\n            this.lastVelMap = velMap;\n            if (typeof window === 'undefined')\n                return;\n            let iter = 0;\n            return new Promise((resolve) => {\n                // interval for render the result after each iteration\n                this.timeInterval = window.setInterval(() => {\n                    if (!nodes || !this.running) {\n                        resolve({\n                            nodes: formatOutNodes(graph, layoutNodes),\n                            edges,\n                        });\n                    }\n                    this.runOneStep(calcGraph, graph, iter, velMap, formattedOptions);\n                    this.updatePosition(graph, calcGraph, velMap, formattedOptions);\n                    if (assign) {\n                        layoutNodes.forEach((node) => graph.mergeNodeData(node.id, {\n                            x: node.data.x,\n                            y: node.data.y,\n                            z: dimensions === 3 ? node.data.z : undefined,\n                        }));\n                    }\n                    onTick === null || onTick === void 0 ? void 0 : onTick({\n                        nodes: formatOutNodes(graph, layoutNodes),\n                        edges,\n                    });\n                    iter++;\n                    if (iter >= maxIteration || this.judgingDistance < minMovement) {\n                        window.clearInterval(this.timeInterval);\n                        resolve({\n                            nodes: formatOutNodes(graph, layoutNodes),\n                            edges,\n                        });\n                    }\n                }, 0);\n                this.running = true;\n            });\n        });\n    }\n    /**\n     * Format merged layout options.\n     * @param options merged layout options\n     * @param graph original graph\n     * @returns\n     */\n    formatOptions(options, graph) {\n        const formattedOptions = Object.assign({}, options);\n        const { width: propsWidth, height: propsHeight, getMass } = options;\n        // === formating width, height, and center =====\n        formattedOptions.width =\n            !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n        formattedOptions.height =\n            !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n        if (!options.center) {\n            formattedOptions.center = [\n                formattedOptions.width / 2,\n                formattedOptions.height / 2,\n            ];\n        }\n        // === formating node mass =====\n        if (!getMass) {\n            formattedOptions.getMass = (d) => {\n                let massWeight = 1;\n                if (isNumber(d === null || d === void 0 ? void 0 : d.data.mass))\n                    massWeight = d === null || d === void 0 ? void 0 : d.data.mass;\n                const degree = graph.getDegree(d.id, 'both');\n                return !degree || degree < 5 ? massWeight : degree * 5 * massWeight;\n            };\n        }\n        // === formating node size =====\n        formattedOptions.nodeSize = formatNodeSizeToNumber(options.nodeSize, options.nodeSpacing);\n        // === formating node / edge strengths =====\n        const linkDistanceFn = options.linkDistance\n            ? formatNumberFn(1, options.linkDistance)\n            : (edge) => {\n                return (1 +\n                    formattedOptions.nodeSize(graph.getNode(edge.source)) +\n                    formattedOptions.nodeSize(graph.getNode(edge.target)));\n            };\n        formattedOptions.linkDistance = linkDistanceFn;\n        formattedOptions.nodeStrength = formatNumberFn(1, options.nodeStrength);\n        formattedOptions.edgeStrength = formatNumberFn(1, options.edgeStrength);\n        return formattedOptions;\n    }\n    /**\n     * Format centripetalOption in the option.\n     * @param options merged layout options\n     * @param calcGraph calculation graph\n     */\n    formatCentripetal(options, calcGraph) {\n        const { dimensions, centripetalOptions, center, clusterNodeStrength, leafCluster, clustering, nodeClusterBy, } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        // === formating centripetalOptions =====\n        const basicCentripetal = centripetalOptions || {\n            leaf: 2,\n            single: 2,\n            others: 1,\n            // eslint-disable-next-line\n            center: (n) => {\n                return {\n                    x: center[0],\n                    y: center[1],\n                    z: dimensions === 3 ? center[2] : undefined,\n                };\n            },\n        };\n        if (typeof clusterNodeStrength !== 'function') {\n            options.clusterNodeStrength = (node) => clusterNodeStrength;\n        }\n        let sameTypeLeafMap;\n        let clusters;\n        if (leafCluster && nodeClusterBy) {\n            sameTypeLeafMap = getSameTypeLeafMap(calcGraph, nodeClusterBy);\n            clusters =\n                Array.from(new Set(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.map((node) => node.data[nodeClusterBy]))) || [];\n            // @ts-ignore\n            options.centripetalOptions = Object.assign(basicCentripetal, {\n                single: 100,\n                leaf: (node) => {\n                    // 找出与它关联的边的起点或终点出发的所有一度节点中同类型的叶子节点\n                    const { siblingLeaves, sameTypeLeaves } = sameTypeLeafMap[node.id] || {};\n                    // 如果都是同一类型或者每种类型只有1个，则施加默认向心力\n                    if ((sameTypeLeaves === null || sameTypeLeaves === void 0 ? void 0 : sameTypeLeaves.length) === (siblingLeaves === null || siblingLeaves === void 0 ? void 0 : siblingLeaves.length) ||\n                        (clusters === null || clusters === void 0 ? void 0 : clusters.length) === 1) {\n                        return 1;\n                    }\n                    return options.clusterNodeStrength(node);\n                },\n                others: 1,\n                center: (node) => {\n                    const degree = calcGraph.getDegree(node.id, 'both');\n                    // 孤点默认给1个远离的中心点\n                    if (!degree) {\n                        return {\n                            x: 100,\n                            y: 100,\n                            z: 0,\n                        };\n                    }\n                    let centerPos;\n                    if (degree === 1) {\n                        // 如果为叶子节点\n                        // 找出与它关联的边的起点出发的所有一度节点中同类型的叶子节点\n                        const { sameTypeLeaves = [] } = sameTypeLeafMap[node.id] || {};\n                        if (sameTypeLeaves.length === 1) {\n                            // 如果同类型的叶子节点只有1个，中心位置为undefined\n                            centerPos = undefined;\n                        }\n                        else if (sameTypeLeaves.length > 1) {\n                            // 找出同类型节点平均位置作为中心\n                            centerPos = getAvgNodePosition(sameTypeLeaves);\n                        }\n                    }\n                    else {\n                        centerPos = undefined;\n                    }\n                    return {\n                        x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n                        y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n                        z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z,\n                    };\n                },\n            });\n        }\n        if (clustering && nodeClusterBy) {\n            if (!sameTypeLeafMap) {\n                sameTypeLeafMap = getSameTypeLeafMap(calcGraph, nodeClusterBy);\n            }\n            if (!clusters) {\n                clusters = Array.from(new Set(calcNodes.map((node) => node.data[nodeClusterBy])));\n            }\n            clusters = clusters.filter((item) => item !== undefined);\n            const centerInfo = {};\n            clusters.forEach((cluster) => {\n                const sameTypeNodes = calcNodes\n                    .filter((node) => node.data[nodeClusterBy] === cluster)\n                    .map((node) => calcGraph.getNode(node.id));\n                // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                centerInfo[cluster] = getAvgNodePosition(sameTypeNodes);\n            });\n            options.centripetalOptions = Object.assign(basicCentripetal, {\n                single: (node) => options.clusterNodeStrength(node),\n                leaf: (node) => options.clusterNodeStrength(node),\n                others: (node) => options.clusterNodeStrength(node),\n                center: (node) => {\n                    // 找出同类型节点平均位置节点的距离最近的节点作为中心节点\n                    const centerPos = centerInfo[node.data[nodeClusterBy]];\n                    return {\n                        x: centerPos === null || centerPos === void 0 ? void 0 : centerPos.x,\n                        y: centerPos === null || centerPos === void 0 ? void 0 : centerPos.y,\n                        z: centerPos === null || centerPos === void 0 ? void 0 : centerPos.z,\n                    };\n                },\n            });\n        }\n        const { leaf, single, others } = options.centripetalOptions || {};\n        if (leaf && typeof leaf !== 'function') {\n            options.centripetalOptions.leaf = () => leaf;\n        }\n        if (single && typeof single !== 'function') {\n            options.centripetalOptions.single = () => single;\n        }\n        if (others && typeof others !== 'function') {\n            options.centripetalOptions.others = () => others;\n        }\n    }\n    /**\n     * One iteration.\n     * @param calcGraph calculation graph\n     * @param graph origin graph\n     * @param iter current iteration index\n     * @param velMap nodes' velocity map\n     * @param options formatted layout options\n     * @returns\n     */\n    runOneStep(calcGraph, graph, iter, velMap, options) {\n        const accMap = {};\n        const calcNodes = calcGraph.getAllNodes();\n        const calcEdges = calcGraph.getAllEdges();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length))\n            return;\n        const { monitor } = options;\n        this.calRepulsive(calcGraph, accMap, options);\n        if (calcEdges)\n            this.calAttractive(calcGraph, accMap, options);\n        this.calGravity(calcGraph, graph, accMap, options);\n        this.updateVelocity(calcGraph, accMap, velMap, options);\n        /** 如果需要监控信息，则提供给用户 */\n        if (monitor) {\n            const energy = this.calTotalEnergy(accMap, calcNodes);\n            monitor({\n                energy,\n                nodes: graph.getAllNodes(),\n                edges: graph.getAllEdges(),\n                iterations: iter,\n            });\n        }\n    }\n    /**\n     * Calculate graph energy for monitoring convergence.\n     * @param accMap acceleration map\n     * @param nodes calculation nodes\n     * @returns energy\n     */\n    calTotalEnergy(accMap, nodes) {\n        if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n            return 0;\n        let energy = 0.0;\n        nodes.forEach((node, i) => {\n            const vx = accMap[node.id].x;\n            const vy = accMap[node.id].y;\n            const vz = this.options.dimensions === 3 ? accMap[node.id].z : 0;\n            const speed2 = vx * vx + vy * vy + vz * vz;\n            const { mass = 1 } = node.data;\n            energy += mass * speed2 * 0.5; // p = 1/2*(mv^2)\n        });\n        return energy;\n    }\n    /**\n     * Calculate the repulsive forces according to coulombs law.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     * @param options formatted layout options\n     */\n    calRepulsive(calcGraph, accMap, options) {\n        const { dimensions, factor, coulombDisScale } = options;\n        forceNBody(calcGraph, factor, coulombDisScale * coulombDisScale, accMap, dimensions);\n    }\n    /**\n     * Calculate the attractive forces according to hooks law.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     */\n    calAttractive(calcGraph, accMap, options) {\n        const { dimensions, nodeSize } = options;\n        calcGraph.getAllEdges().forEach((edge, i) => {\n            const { source, target } = edge;\n            const sourceNode = calcGraph.getNode(source);\n            const targetNode = calcGraph.getNode(target);\n            if (!sourceNode || !targetNode)\n                return;\n            let vecX = targetNode.data.x - sourceNode.data.x;\n            let vecY = targetNode.data.y - sourceNode.data.y;\n            let vecZ = dimensions === 3 ? targetNode.data.z - sourceNode.data.z : 0;\n            if (!vecX && !vecY) {\n                vecX = Math.random() * 0.01;\n                vecY = Math.random() * 0.01;\n                if (dimensions === 3 && !vecZ) {\n                    vecZ = Math.random() * 0.01;\n                }\n            }\n            const vecLength = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ);\n            if (vecLength < nodeSize(sourceNode) + nodeSize(targetNode))\n                return;\n            const direX = vecX / vecLength;\n            const direY = vecY / vecLength;\n            const direZ = vecZ / vecLength;\n            const { linkDistance = 200, edgeStrength = 200 } = edge.data || {};\n            const diff = linkDistance - vecLength;\n            const param = diff * edgeStrength;\n            const massSource = sourceNode.data.mass || 1;\n            const massTarget = targetNode.data.mass || 1;\n            // 质量占比越大，对另一端影响程度越大\n            const sourceMassRatio = 1 / massSource;\n            const targetMassRatio = 1 / massTarget;\n            const disX = direX * param;\n            const disY = direY * param;\n            const disZ = direZ * param;\n            accMap[source].x -= disX * sourceMassRatio;\n            accMap[source].y -= disY * sourceMassRatio;\n            accMap[source].z -= disZ * sourceMassRatio;\n            accMap[target].x += disX * targetMassRatio;\n            accMap[target].y += disY * targetMassRatio;\n            accMap[target].z += disZ * targetMassRatio;\n        });\n    }\n    /**\n     * Calculate the gravity forces toward center.\n     * @param calcGraph calculation graph\n     * @param graph origin graph\n     * @param accMap acceleration map\n     * @param options formatted layout options\n     */\n    calGravity(calcGraph, graph, accMap, options) {\n        const { getCenter } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        const nodes = graph.getAllNodes();\n        const edges = graph.getAllEdges();\n        const { width, height, center, gravity: defaultGravity, centripetalOptions, } = options;\n        if (!calcNodes)\n            return;\n        calcNodes.forEach((calcNode) => {\n            const { id, data } = calcNode;\n            const { mass, x, y, z } = data;\n            const node = graph.getNode(id);\n            let vecX = 0;\n            let vecY = 0;\n            let vecZ = 0;\n            let gravity = defaultGravity;\n            const inDegree = calcGraph.getDegree(id, 'in');\n            const outDegree = calcGraph.getDegree(id, 'out');\n            const degree = calcGraph.getDegree(id, 'both');\n            const forceCenter = getCenter === null || getCenter === void 0 ? void 0 : getCenter(node, degree);\n            if (forceCenter) {\n                const [centerX, centerY, strength] = forceCenter;\n                vecX = x - centerX;\n                vecY = y - centerY;\n                gravity = strength;\n            }\n            else {\n                vecX = x - center[0];\n                vecY = y - center[1];\n                vecZ = z - center[2];\n            }\n            if (gravity) {\n                accMap[id].x -= (gravity * vecX) / mass;\n                accMap[id].y -= (gravity * vecY) / mass;\n                accMap[id].z -= (gravity * vecZ) / mass;\n            }\n            if (centripetalOptions) {\n                const { leaf, single, others, center: centriCenter, } = centripetalOptions;\n                const { x: centriX, y: centriY, z: centriZ, centerStrength, } = (centriCenter === null || centriCenter === void 0 ? void 0 : centriCenter(node, nodes, edges, width, height)) || {\n                    x: 0,\n                    y: 0,\n                    z: 0,\n                    centerStrength: 0,\n                };\n                if (!isNumber(centriX) || !isNumber(centriY))\n                    return;\n                const vx = (x - centriX) / mass;\n                const vy = (y - centriY) / mass;\n                const vz = (z - centriZ) / mass;\n                if (centerStrength) {\n                    accMap[id].x -= centerStrength * vx;\n                    accMap[id].y -= centerStrength * vy;\n                    accMap[id].z -= centerStrength * vz;\n                }\n                // 孤点\n                if (degree === 0) {\n                    const singleStrength = single(node);\n                    if (!singleStrength)\n                        return;\n                    accMap[id].x -= singleStrength * vx;\n                    accMap[id].y -= singleStrength * vy;\n                    accMap[id].z -= singleStrength * vz;\n                    return;\n                }\n                // 没有出度或没有入度，都认为是叶子节点\n                if (inDegree === 0 || outDegree === 0) {\n                    const leafStrength = leaf(node, nodes, edges);\n                    if (!leafStrength)\n                        return;\n                    accMap[id].x -= leafStrength * vx;\n                    accMap[id].y -= leafStrength * vy;\n                    accMap[id].z -= leafStrength * vz;\n                    return;\n                }\n                /** others */\n                const othersStrength = others(node);\n                if (!othersStrength)\n                    return;\n                accMap[id].x -= othersStrength * vx;\n                accMap[id].y -= othersStrength * vy;\n                accMap[id].z -= othersStrength * vz;\n            }\n        });\n    }\n    /**\n     * Update the velocities for nodes.\n     * @param calcGraph calculation graph\n     * @param accMap acceleration map\n     * @param velMap velocity map\n     * @param options formatted layout options\n     * @returns\n     */\n    updateVelocity(calcGraph, accMap, velMap, options) {\n        const { damping, maxSpeed, interval, dimensions } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length))\n            return;\n        calcNodes.forEach((calcNode) => {\n            const { id } = calcNode;\n            let vx = (velMap[id].x + accMap[id].x * interval) * damping || 0.01;\n            let vy = (velMap[id].y + accMap[id].y * interval) * damping || 0.01;\n            let vz = dimensions === 3\n                ? (velMap[id].z + accMap[id].z * interval) * damping || 0.01\n                : 0.0;\n            const vLength = Math.sqrt(vx * vx + vy * vy + vz * vz);\n            if (vLength > maxSpeed) {\n                const param2 = maxSpeed / vLength;\n                vx = param2 * vx;\n                vy = param2 * vy;\n                vz = param2 * vz;\n            }\n            velMap[id] = {\n                x: vx,\n                y: vy,\n                z: vz,\n            };\n        });\n    }\n    /**\n     * Update nodes' positions.\n     * @param graph origin graph\n     * @param calcGraph calculatition graph\n     * @param velMap velocity map\n     * @param options formatted layou options\n     * @returns\n     */\n    updatePosition(graph, calcGraph, velMap, options) {\n        const { distanceThresholdMode, interval, dimensions } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length)) {\n            this.judgingDistance = 0;\n            return;\n        }\n        let sum = 0;\n        if (distanceThresholdMode === 'max')\n            this.judgingDistance = -Infinity;\n        else if (distanceThresholdMode === 'min')\n            this.judgingDistance = Infinity;\n        calcNodes.forEach((calcNode) => {\n            const { id } = calcNode;\n            const node = graph.getNode(id);\n            if (isNumber(node.data.fx) && isNumber(node.data.fy)) {\n                calcGraph.mergeNodeData(id, {\n                    x: node.data.fx,\n                    y: node.data.fy,\n                    z: dimensions === 3 ? node.data.fz : undefined,\n                });\n                return;\n            }\n            const distX = velMap[id].x * interval;\n            const distY = velMap[id].y * interval;\n            const distZ = dimensions === 3 ? velMap[id].z * interval : 0.0;\n            calcGraph.mergeNodeData(id, {\n                x: calcNode.data.x + distX,\n                y: calcNode.data.y + distY,\n                z: calcNode.data.z + distZ,\n            });\n            const distanceMagnitude = Math.sqrt(distX * distX + distY * distY + distZ * distZ);\n            switch (distanceThresholdMode) {\n                case 'max':\n                    if (this.judgingDistance < distanceMagnitude) {\n                        this.judgingDistance = distanceMagnitude;\n                    }\n                    break;\n                case 'min':\n                    if (this.judgingDistance > distanceMagnitude) {\n                        this.judgingDistance = distanceMagnitude;\n                    }\n                    break;\n                default:\n                    sum = sum + distanceMagnitude;\n                    break;\n            }\n        });\n        if (!distanceThresholdMode || distanceThresholdMode === 'mean') {\n            this.judgingDistance = sum / calcNodes.length;\n        }\n    }\n}\n/**\n * Group the leaf nodes according to nodeClusterBy field.\n * @param calcGraph calculation graph\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns related same group leaf nodes for each leaf node\n */\nconst getSameTypeLeafMap = (calcGraph, nodeClusterBy) => {\n    const calcNodes = calcGraph.getAllNodes();\n    if (!(calcNodes === null || calcNodes === void 0 ? void 0 : calcNodes.length))\n        return {};\n    const sameTypeLeafMap = {};\n    calcNodes.forEach((node, i) => {\n        const degree = calcGraph.getDegree(node.id, 'both');\n        if (degree === 1) {\n            sameTypeLeafMap[node.id] = getCoreNodeAndSiblingLeaves(calcGraph, 'leaf', node, nodeClusterBy);\n        }\n    });\n    return sameTypeLeafMap;\n};\n/**\n * Find the successor or predecessor of node as coreNode, the sibling leaf nodes\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param node the target node\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @returns coreNode, sibling leaf nodes, and grouped sibling leaf nodes\n */\nconst getCoreNodeAndSiblingLeaves = (calcGraph, type, node, nodeClusterBy) => {\n    const inDegree = calcGraph.getDegree(node.id, 'in');\n    const outDegree = calcGraph.getDegree(node.id, 'out');\n    // node is not a leaf, coreNode is itself, siblingLeaves is empty\n    let coreNode = node;\n    let siblingLeaves = [];\n    if (inDegree === 0) {\n        // node is a leaf node without out edges, its related(successor) node is coreNode, siblingLeaves is the neighbors of its related node\n        coreNode = calcGraph.getSuccessors(node.id)[0];\n        siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n    }\n    else if (outDegree === 0) {\n        // node is a leaf node without in edges, its related(predecessor) node is coreNode, siblingLeaves is the neighbors of its related node\n        coreNode = calcGraph.getPredecessors(node.id)[0];\n        siblingLeaves = calcGraph.getNeighbors(coreNode.id);\n    }\n    // siblingLeaves are leaf nodes\n    siblingLeaves = siblingLeaves.filter((node) => calcGraph.getDegree(node.id, 'in') === 0 ||\n        calcGraph.getDegree(node.id, 'out') === 0);\n    const sameTypeLeaves = getSameTypeNodes(calcGraph, type, nodeClusterBy, node, siblingLeaves);\n    return { coreNode, siblingLeaves, sameTypeLeaves };\n};\n/**\n * Find the same type (according to nodeClusterBy field) of node in relativeNodes.\n * @param calcGraph calculation graph\n * @param type ('all') filter out the not-same-cluster nodes, ('leaf') or filter out the not-leaf nodes in the same time\n * @param nodeClusterBy the field name in node.data to ditinguish different node clusters\n * @param node the target node\n * @param relativeNodes node's related ndoes to be filtered\n * @returns related nodes that meet the filtering conditions\n */\nconst getSameTypeNodes = (calcGraph, type, nodeClusterBy, node, relativeNodes) => {\n    const typeName = node.data[nodeClusterBy] || '';\n    let sameTypeNodes = (relativeNodes === null || relativeNodes === void 0 ? void 0 : relativeNodes.filter((item) => item.data[nodeClusterBy] === typeName)) ||\n        [];\n    if (type === 'leaf') {\n        sameTypeNodes = sameTypeNodes.filter((item) => calcGraph.getDegree(item.id, 'in') === 0 ||\n            calcGraph.getDegree(item.id, 'out') === 0);\n    }\n    return sameTypeNodes;\n};\n/**\n * Get the average position of nodes.\n * @param nodes nodes set\n * @returns average ppsition\n */\nconst getAvgNodePosition = (nodes) => {\n    const totalNodes = { x: 0, y: 0 };\n    nodes.forEach((node) => {\n        const { x, y } = node.data;\n        totalNodes.x += x || 0;\n        totalNodes.y += y || 0;\n    });\n    // 获取均值向量\n    const length = nodes.length || 1;\n    return {\n        x: totalNodes.x / length,\n        y: totalNodes.y / length,\n    };\n};\n/**\n * Format the output nodes from CalcNode[].\n * @param graph origin graph\n * @param layoutNodes calculation nodes\n * @returns output nodes\n */\nconst formatOutNodes = (graph, layoutNodes) => layoutNodes.map((calcNode) => {\n    const { id, data } = calcNode;\n    const node = graph.getNode(id);\n    return Object.assign(Object.assign({}, node), { data: Object.assign(Object.assign({}, node.data), { x: data.x, y: data.y, z: data.z }) });\n});\n//# sourceMappingURL=index.js.map",null,"import { quadtree } from 'd3-quadtree';\n// @ts-ignore\nimport { octree } from 'd3-octree';\nconst theta2 = 0.81; // Barnes-Hut approximation threshold\nconst epsilon = 0.1; // 为了防止出现除0的情况，加一个epsilon\nexport function forceNBody(calcGraph, factor, coulombDisScale2, accMap, dimensions = 2) {\n    const weightParam = factor / coulombDisScale2;\n    const calcNodes = calcGraph.getAllNodes();\n    const data = calcNodes.map((calcNode, i) => {\n        const { nodeStrength, x, y, z, size } = calcNode.data;\n        return {\n            x,\n            y,\n            z,\n            size,\n            index: i,\n            id: calcNode.id,\n            vx: 0,\n            vy: 0,\n            vz: 0,\n            weight: weightParam * nodeStrength,\n        };\n    });\n    const tree = (dimensions === 2\n        ? quadtree(data, (d) => d.x, (d) => d.y)\n        : octree(data, (d) => d.x, (d) => d.y, (d) => d.z)).visitAfter(accumulate); // init internal node\n    const nodeMap = new Map();\n    data.forEach((n) => {\n        nodeMap.set(n.id, n);\n        // @ts-ignore\n        computeForce(n, tree, dimensions);\n    });\n    data.map((n, i) => {\n        const { id, data } = calcNodes[i];\n        const { mass = 1 } = data;\n        // 从 0 开始，= 初始化 + 加斥力\n        accMap[id] = {\n            x: n.vx / mass,\n            y: n.vy / mass,\n            z: n.vz / mass,\n        };\n    });\n    return accMap;\n}\nfunction accumulate(treeNode) {\n    let accWeight = 0;\n    let accX = 0;\n    let accY = 0;\n    let accZ = 0;\n    let accSize = 0;\n    const numChildren = treeNode.length;\n    if (numChildren) {\n        // internal node, accumulate 4 child quads\n        for (let i = 0; i < numChildren; i++) {\n            const q = treeNode[i];\n            if (q && q.weight) {\n                accWeight += q.weight;\n                accX += q.x * q.weight;\n                accY += q.y * q.weight;\n                accZ += q.z * q.weight;\n                accSize += q.size * q.weight;\n            }\n        }\n        treeNode.x = accX / accWeight;\n        treeNode.y = accY / accWeight;\n        treeNode.z = accZ / accWeight;\n        treeNode.size = accSize / accWeight;\n        treeNode.weight = accWeight;\n    }\n    else {\n        // leaf node\n        const q = treeNode;\n        treeNode.x = q.data.x;\n        treeNode.y = q.data.y;\n        treeNode.z = q.data.z;\n        treeNode.size = q.data.size;\n        treeNode.weight = q.data.weight;\n    }\n}\nconst apply = (treeNode, x1, arg1, arg2, arg3, node, dimensions) => {\n    var _a;\n    if (((_a = treeNode.data) === null || _a === void 0 ? void 0 : _a.id) === node.id)\n        return;\n    const x2 = [arg1, arg2, arg3][dimensions - 1];\n    const dx = node.x - treeNode.x || epsilon;\n    const dy = node.y - treeNode.y || epsilon;\n    const dz = node.z - treeNode.z || epsilon;\n    const pos = [dx, dy, dz];\n    const width = x2 - x1;\n    let len2 = 0;\n    for (let i = 0; i < dimensions; i++) {\n        len2 += pos[i] * pos[i];\n    }\n    const len1 = Math.sqrt(len2);\n    const len3 = len1 * len2;\n    // far node, apply Barnes-Hut approximation\n    if (width * width * theta2 < len2) {\n        const param = treeNode.weight / len3;\n        node.vx += dx * param;\n        node.vy += dy * param;\n        node.vz += dz * param;\n        return true;\n    }\n    // near quad, compute force directly\n    if (treeNode.length)\n        return false; // internal node, visit children\n    // leaf node\n    if (treeNode.data !== node) {\n        const param = treeNode.data.weight / len3;\n        node.vx += dx * param;\n        node.vy += dy * param;\n        node.vz += dz * param;\n    }\n};\n// @ts-ignore\nfunction computeForce(node, tree, dimensions) {\n    // @ts-ignore\n    tree.visit((treeNode, x1, y1, x2, y2) => apply(treeNode, x1, y1, x2, y2, node, dimensions));\n}\n//# sourceMappingURL=force-n-body.js.map",null,"import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\nimport tree_z, {defaultZ} from \"./z.js\";\n\nexport default function octree(nodes, x, y, z) {\n  var tree = new Octree(x == null ? defaultX : x, y == null ? defaultY : y, z == null ? defaultZ : z, NaN, NaN, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Octree(x, y, z, x0, y0, z0, x1, y1, z1) {\n  this._x = x;\n  this._y = y;\n  this._z = z;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = octree.prototype = Octree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(8)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 8; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(8)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\ntreeProto.z = tree_z;\n","export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d),\n      z = +this._z.call(null, d);\n  return add(this.cover(x, y, z), x, y, z, d);\n}\n\nfunction add(tree, x, y, z, d) {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      z0 = tree._z0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      z1 = tree._z1,\n      xm,\n      ym,\n      zm,\n      xp,\n      yp,\n      zp,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (parent = node, !(node = node[i = deep << 2 | bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  zp = +tree._z.call(null, node.data);\n  if (x === xp && y === yp && z === zp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(8) : tree._root = new Array(8);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n  } while ((i = deep << 2 | bottom << 1 | right) === (j = (zp >= zm) << 2 | (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  if (!Array.isArray(data)) data = Array.from(data);\n  const n = data.length;\n  const xz = new Float64Array(n);\n  const yz = new Float64Array(n);\n  const zz = new Float64Array(n);\n  let x0 = Infinity,\n      y0 = Infinity,\n      z0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity,\n      z1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (let i = 0, d, x, y, z; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    zz[i] = z;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n    if (z < z0) z0 = z;\n    if (z > z1) z1 = z;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1 || z0 > z1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0, z0).cover(x1, y1, z1);\n\n  // Add the new points.\n  for (let i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], zz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1;\n\n  // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var t = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {\n      i = (z < z0) << 2 | (y < y0) << 1 | (x < x0);\n      parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n      switch (i) {\n        case 0: x1 = x0 + t, y1 = y0 + t, z1 = z0 + t; break;\n        case 1: x0 = x1 - t, y1 = y0 + t, z1 = z0 + t; break;\n        case 2: x1 = x0 + t, y0 = y1 - t, z1 = z0 + t; break;\n        case 3: x0 = x1 - t, y0 = y1 - t, z1 = z0 + t; break;\n        case 4: x1 = x0 + t, y1 = y0 + t, z0 = z1 - t; break;\n        case 5: x0 = x1 - t, y1 = y0 + t, z0 = z1 - t; break;\n        case 6: x1 = x0 + t, y0 = y1 - t, z0 = z1 - t; break;\n        case 7: x0 = x1 - t, y0 = y1 - t, z0 = z1 - t; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1], +_[0][2]).cover(+_[1][0], +_[1][1], +_[1][2])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];\n}\n","import Octant from \"./octant.js\";\n\nexport default function(x, y, z, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1,\n      y1,\n      z1,\n      x2,\n      y2,\n      z2,\n      x3 = this._x1,\n      y3 = this._y1,\n      z3 = this._z1,\n      octs = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) octs.push(new Octant(node, x0, y0, z0, x3, y3, z3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius, z0 = z - radius;\n    x3 = x + radius, y3 = y + radius, z3 = z + radius;\n    radius *= radius;\n  }\n\n  while (q = octs.pop()) {\n\n    // Stop searching if this octant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (z1 = q.z0) > z3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0\n        || (z2 = q.z1) < z0) continue;\n\n    // Bisect the current octant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2,\n          zm = (z1 + z2) / 2;\n\n      octs.push(\n        new Octant(node[7], xm, ym, zm, x2, y2, z2),\n        new Octant(node[6], x1, ym, zm, xm, y2, z2),\n        new Octant(node[5], xm, y1, zm, x2, ym, z2),\n        new Octant(node[4], x1, y1, zm, xm, ym, z2),\n        new Octant(node[3], xm, ym, z1, x2, y2, zm),\n        new Octant(node[2], x1, ym, z1, xm, y2, zm),\n        new Octant(node[1], xm, y1, z1, x2, ym, zm),\n        new Octant(node[0], x1, y1, z1, xm, ym, zm)\n      );\n\n      // Visit the closest octant first.\n      if (i = (z >= zm) << 2 | (y >= ym) << 1 | (x >= xm)) {\n        q = octs[octs.length - 1];\n        octs[octs.length - 1] = octs[octs.length - 1 - i];\n        octs[octs.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          dz = z - +this._z.call(null, node.data),\n          d2 = dx * dx + dy * dy + dz * dz;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d, z0 = z - d;\n        x3 = x + d, y3 = y + d, z3 = z + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(node, x0, y0, z0, x1, y1, z1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.z0 = z0;\n  this.x1 = x1;\n  this.y1 = y1;\n  this.z1 = z1;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)) || isNaN(z = +this._z.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1,\n      x,\n      y,\n      z,\n      xm,\n      ym,\n      zm,\n      right,\n      bottom,\n      deep,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (deep = z >= (zm = (z0 + z1) / 2)) z0 = zm; else z1 = zm;\n    if (!(parent = node, node = node[i = deep << 2 | bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 7] || parent[(i + 2) & 7] || parent[(i + 3) & 7] || parent[(i + 4) & 7] || parent[(i + 5) & 7] || parent[(i + 6) & 7] || parent[(i + 7) & 7]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3] || parent[4] || parent[5] || parent[6] || parent[7])\n      && node === (parent[7] || parent[6] || parent[5] || parent[4] || parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Octant from \"./octant.js\";\n\nexport default function(callback) {\n  var octs = [], q, node = this._root, child, x0, y0, z0, x1, y1, z1;\n  if (node) octs.push(new Octant(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n    }\n  }\n  return this;\n}\n","import Octant from \"./octant.js\";\n\nexport default function(callback) {\n  var octs = [], next = [], q;\n  if (this._root) octs.push(new Octant(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));\n  while (q = octs.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, z0 = q.z0, x1 = q.x1, y1 = q.y1, z1 = q.z1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2, zm = (z0 + z1) / 2;\n      if (child = node[0]) octs.push(new Octant(child, x0, y0, z0, xm, ym, zm));\n      if (child = node[1]) octs.push(new Octant(child, xm, y0, z0, x1, ym, zm));\n      if (child = node[2]) octs.push(new Octant(child, x0, ym, z0, xm, y1, zm));\n      if (child = node[3]) octs.push(new Octant(child, xm, ym, z0, x1, y1, zm));\n      if (child = node[4]) octs.push(new Octant(child, x0, y0, zm, xm, ym, z1));\n      if (child = node[5]) octs.push(new Octant(child, xm, y0, zm, x1, ym, z1));\n      if (child = node[6]) octs.push(new Octant(child, x0, ym, zm, xm, y1, z1));\n      if (child = node[7]) octs.push(new Octant(child, xm, ym, zm, x1, y1, z1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.z0, q.x1, q.y1, q.z1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","export function defaultZ(d) {\n  return d[2];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._z = _, this) : this._z;\n}\n","import { __awaiter } from \"tslib\";\nimport { Matrix as MLMatrix, SingularValueDecomposition } from 'ml-matrix';\nimport { cloneFormatData, floydWarshall, getAdjMatrix, scaleMatrix, } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    center: [0, 0],\n    linkDistance: 50,\n};\n/**\n * <zh/> 多维缩放算法布局\n *\n * <en/> Multidimensional scaling layout\n */\nexport class MDSLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'mds';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericMDSLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericMDSLayout(true, graph, options);\n        });\n    }\n    genericMDSLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center = [0, 0], linkDistance = 50 } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n                return handleSingleNodeGraph(graph, assign, center);\n            }\n            // the graph-theoretic distance (shortest path distance) matrix\n            const adjMatrix = getAdjMatrix({ nodes, edges }, false);\n            const distances = floydWarshall(adjMatrix);\n            handleInfinity(distances);\n            // scale the ideal edge length acoording to linkDistance\n            const scaledD = scaleMatrix(distances, linkDistance);\n            // get positions by MDS\n            const positions = runMDS(scaledD);\n            const layoutNodes = [];\n            positions.forEach((p, i) => {\n                const cnode = cloneFormatData(nodes[i]);\n                cnode.data.x = p[0] + center[0];\n                cnode.data.y = p[1] + center[1];\n                layoutNodes.push(cnode);\n            });\n            if (assign) {\n                layoutNodes.forEach((node) => graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y,\n                }));\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            return result;\n        });\n    }\n}\nconst handleInfinity = (distances) => {\n    let maxDistance = -999999;\n    distances.forEach((row) => {\n        row.forEach((value) => {\n            if (value === Infinity) {\n                return;\n            }\n            if (maxDistance < value) {\n                maxDistance = value;\n            }\n        });\n    });\n    distances.forEach((row, i) => {\n        row.forEach((value, j) => {\n            if (value === Infinity) {\n                distances[i][j] = maxDistance;\n            }\n        });\n    });\n};\n/**\n * mds 算法\n * @return {array} positions 计算后的节点位置数组\n */\nconst runMDS = (distances) => {\n    const dimension = 2;\n    // square distances\n    const M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5);\n    // double centre the rows/columns\n    const rowMeans = M.mean('row');\n    const colMeans = M.mean('column');\n    const totalMean = M.mean();\n    M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n    // take the SVD of the double centred matrix, and return the\n    // points from it\n    const ret = new SingularValueDecomposition(M);\n    const eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n    return ret.leftSingularVectors.toJSON().map((row) => {\n        return MLMatrix.mul([row], [eigenValues])\n            .toJSON()[0]\n            .splice(0, dimension);\n    });\n};\n//# sourceMappingURL=mds.js.map",null,"import { isAnyArray } from 'is-any-array';\nimport rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkNonEmpty,\n  checkRowIndices,\n  checkColumnIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isEmpty() {\n    return this.rows === 0 || this.columns === 0;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isDistance() {\n    if (!this.isSymmetric()) return false;\n\n    for (let i = 0; i < this.rows; i++) {\n      if (this.get(i, i) !== 0) return false;\n    }\n\n    return true;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    switch (by) {\n      case 'row': {\n        const max = new Array(this.rows).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[row]) {\n              max[row] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case 'column': {\n        const max = new Array(this.columns).fill(Number.NEGATIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max[column]) {\n              max[column] = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      case undefined: {\n        let max = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) > max) {\n              max = this.get(row, column);\n            }\n          }\n        }\n        return max;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  maxIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min(by) {\n    if (this.isEmpty()) {\n      return NaN;\n    }\n\n    switch (by) {\n      case 'row': {\n        const min = new Array(this.rows).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[row]) {\n              min[row] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case 'column': {\n        const min = new Array(this.columns).fill(Number.POSITIVE_INFINITY);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min[column]) {\n              min[column] = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      case undefined: {\n        let min = this.get(0, 0);\n        for (let row = 0; row < this.rows; row++) {\n          for (let column = 0; column < this.columns; column++) {\n            if (this.get(row, column) < min) {\n              min = this.get(row, column);\n            }\n          }\n        }\n        return min;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  minIndex() {\n    checkNonEmpty(this);\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    checkNonEmpty(this);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    if (this.isEmpty()) {\n      return NaN;\n    }\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    checkNonEmpty(this);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    switch (type) {\n      case 'max':\n        return this.max();\n      case 'frobenius':\n        return Math.sqrt(this.dot(this));\n      default:\n        throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  mpow(scalar) {\n    if (!this.isSquare()) {\n      throw new RangeError('Matrix must be square');\n    }\n    if (!Number.isInteger(scalar) || scalar < 0) {\n      throw new RangeError('Exponent must be a non-negative integer');\n    }\n    // Russian Peasant exponentiation, i.e. exponentiation by squaring\n    let result = Matrix.eye(this.rows);\n    let bb = this;\n    // Note: Don't bit shift. In JS, that would truncate at 32 bits\n    for (let e = scalar; e > 1; e /= 2) {\n      if ((e & 1) !== 0) {\n        result = result.mmul(bb);\n      }\n      bb = bb.mmul(bb);\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let result = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      result = result.setSubMatrix(c11, 0, 0);\n      result = result.setSubMatrix(c12, c11.rows, 0);\n      result = result.setSubMatrix(c21, 0, c11.columns);\n      result = result.setSubMatrix(c22, c11.rows, c11.columns);\n      return result.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      if (row.length > 0) {\n        rescale(row, { min, max, output: row });\n      }\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      if (column.length) {\n        rescale(column, {\n          min,\n          max,\n          output: column,\n        });\n      }\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  kroneckerSum(other) {\n    other = Matrix.checkMatrix(other);\n    if (!this.isSquare() || !other.isSquare()) {\n      throw new Error('Kronecker Sum needs two Square Matrices');\n    }\n    let m = this.rows;\n    let n = other.rows;\n    let AxI = this.kroneckerProduct(Matrix.eye(n, n));\n    let IxB = Matrix.eye(m, m).kroneckerProduct(other);\n    return AxI.add(IxB);\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (matrix.isEmpty()) {\n      return this;\n    }\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    checkRowIndices(this, rowIndices);\n    checkColumnIndices(this, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < rowIndices.length; i++) {\n      let rowIndex = rowIndices[i];\n      for (let j = 0; j < columnIndices.length; j++) {\n        let columnIndex = columnIndices[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    return this.constructor.copy(this, new Matrix(this.rows, this.columns));\n  }\n\n  /**\n   * @template {AbstractMatrix} M\n   * @param {AbstractMatrix} from\n   * @param {M} to\n   * @return {M}\n   */\n  static copy(from, to) {\n    for (const [row, column, value] of from.entries()) {\n      to.set(row, column, value);\n    }\n\n    return to;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!isAnyArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!isAnyArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!isAnyArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield [row, column, value]\n   * @returns {Generator<[number, number, number], void, void>}\n   */\n  *entries() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield [row, col, this.get(row, col)];\n      }\n    }\n  }\n\n  /**\n   * iterator from left to right, from top to bottom\n   * yield value\n   * @returns {Generator<number, void, void>}\n   */\n  *values() {\n    for (let row = 0; row < this.rows; row++) {\n      for (let col = 0; col < this.columns; col++) {\n        yield this.get(row, col);\n      }\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] =\n    inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction isArrayOfNumbers(array) {\n  return array.every((element) => {\n    return typeof element === 'number';\n  });\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  /**\n   * @type {Float64Array[]}\n   */\n  data;\n\n  /**\n   * Init an empty matrix\n   * @param {number} nRows\n   * @param {number} nColumns\n   */\n  #initData(nRows, nColumns) {\n    this.data = [];\n\n    if (Number.isInteger(nColumns) && nColumns >= 0) {\n      for (let i = 0; i < nRows; i++) {\n        this.data.push(new Float64Array(nColumns));\n      }\n    } else {\n      throw new TypeError('nColumns must be a positive integer');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      this.#initData(nRows.rows, nRows.columns);\n      Matrix.copy(nRows, this);\n    } else if (Number.isInteger(nRows) && nRows >= 0) {\n      this.#initData(nRows, nColumns);\n    } else if (isAnyArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = nRows ? arrayData[0].length : 0;\n      if (typeof nColumns !== 'number') {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        if (!isArrayOfNumbers(arrayData[i])) {\n          throw new TypeError('Input data contains non-numeric values');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n\n      this.rows = nRows;\n      this.columns = nColumns;\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value) {\n    const tag = toString.call(value);\n    return tag.endsWith('Array]') && !tag.includes('Big');\n}\n//# sourceMappingURL=index.js.map","// eslint-disable-next-line @typescript-eslint/unbound-method\nconst toString = Object.prototype.toString;\n\nexport type AnyArray =\n  | any[] // eslint-disable-line @typescript-eslint/no-explicit-any\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Checks if an object is an instance of an Array (array or typed array, except those that contain bigint values).\n *\n * @param value - Object to check.\n * @returns True if the object is an array or a typed array.\n */\nexport function isAnyArray(value: unknown): value is AnyArray {\n  const tag = toString.call(value);\n  return tag.endsWith('Array]') && !tag.includes('Big');\n}\n","import { isAnyArray } from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isAnyArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport { rescale as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n","import { isAnyArray } from 'is-any-array';\n\nfunction min(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var minValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport { min as default };\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\n/**\n * @this {Matrix}\n * @returns {string}\n */\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8,\n    padMinus = 'auto',\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize, padMinus) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  if (padMinus === 'auto') {\n    padMinus = false;\n    loop: for (let i = 0; i < maxI; i++) {\n      for (let j = 0; j < maxJ; j++) {\n        if (matrix.get(i, j) < 0) {\n          padMinus = true;\n          break loop;\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize, padMinus));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize, padMinus) {\n  return (\n    num >= 0 && padMinus\n      ? ` ${formatNumber2(num, maxNumSize - 1)}`\n      : formatNumber2(num, maxNumSize)\n  ).padEnd(maxNumSize);\n}\n\nfunction formatNumber2(num, len) {\n  // small.length numbers should be as is\n  let str = num.toString();\n  if (str.length <= len) return str;\n\n  // (7)'0.00123' is better then (7)'1.23e-2'\n  // (8)'0.000123' is worse then (7)'1.23e-3',\n  let fix = num.toFixed(len);\n  if (fix.length > len) {\n    fix = num.toFixed(Math.max(0, len - (fix.length - len)));\n  }\n  if (\n    fix.length <= len &&\n    !fix.startsWith('0.000') &&\n    !fix.startsWith('-0.000')\n  ) {\n    return fix;\n  }\n\n  // well, if it's still too long the user should've used longer numbers\n  let exp = num.toExponential(len);\n  if (exp.length > len) {\n    exp = num.toExponential(Math.max(0, len - (exp.length - len)));\n  }\n  return exp.slice(0);\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ** matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n}\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += matrix.get(i, j) ** 2 / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","import { isAnyArray } from 'is-any-array';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (!isAnyArray(rowIndices)) {\n    throw new TypeError('row indices must be an array');\n  }\n\n  for (let i = 0; i < rowIndices.length; i++) {\n    if (rowIndices[i] < 0 || rowIndices[i] >= matrix.rows) {\n      throw new RangeError('row indices are out of range');\n    }\n  }\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (!isAnyArray(columnIndices)) {\n    throw new TypeError('column indices must be an array');\n  }\n\n  for (let i = 0; i < columnIndices.length; i++) {\n    if (columnIndices[i] < 0 || columnIndices[i] >= matrix.columns) {\n      throw new RangeError('column indices are out of range');\n    }\n  }\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n\nexport function checkNonEmpty(matrix) {\n  if (matrix.isEmpty()) {\n    throw new Error('Empty matrix has no elements to index');\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    if (value.isEmpty()) {\n      throw new Error('Matrix must be non-empty');\n    }\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import { isNumber } from '@antv/util';\nimport { isArray } from './array';\nexport const floydWarshall = (adjMatrix) => {\n    // initialize\n    const dist = [];\n    const size = adjMatrix.length;\n    for (let i = 0; i < size; i += 1) {\n        dist[i] = [];\n        for (let j = 0; j < size; j += 1) {\n            if (i === j) {\n                dist[i][j] = 0;\n            }\n            else if (adjMatrix[i][j] === 0 || !adjMatrix[i][j]) {\n                dist[i][j] = Infinity;\n            }\n            else {\n                dist[i][j] = adjMatrix[i][j];\n            }\n        }\n    }\n    // floyd\n    for (let k = 0; k < size; k += 1) {\n        for (let i = 0; i < size; i += 1) {\n            for (let j = 0; j < size; j += 1) {\n                if (dist[i][j] > dist[i][k] + dist[k][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j];\n                }\n            }\n        }\n    }\n    return dist;\n};\nexport const getAdjMatrix = (data, directed) => {\n    const { nodes, edges } = data;\n    const matrix = [];\n    // map node with index in data.nodes\n    const nodeMap = {};\n    if (!nodes) {\n        throw new Error('invalid nodes data!');\n    }\n    if (nodes) {\n        nodes.forEach((node, i) => {\n            nodeMap[node.id] = i;\n            const row = [];\n            matrix.push(row);\n        });\n    }\n    edges === null || edges === void 0 ? void 0 : edges.forEach((e) => {\n        const { source, target } = e;\n        const sIndex = nodeMap[source];\n        const tIndex = nodeMap[target];\n        if (sIndex === undefined || tIndex === undefined)\n            return;\n        matrix[sIndex][tIndex] = 1;\n        if (!directed) {\n            matrix[tIndex][sIndex] = 1;\n        }\n    });\n    return matrix;\n};\n/**\n * scale matrix\n * @param matrix [ [], [], [] ]\n * @param ratio\n */\nexport const scaleMatrix = (matrix, ratio) => {\n    const result = [];\n    matrix.forEach((row) => {\n        const newRow = [];\n        row.forEach((v) => {\n            newRow.push(v * ratio);\n        });\n        result.push(newRow);\n    });\n    return result;\n};\n/**\n * calculate the bounding box for the nodes according to their x, y, and size\n * @param nodes nodes in the layout\n * @returns\n */\nexport const getLayoutBBox = (nodes) => {\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    nodes.forEach((node) => {\n        let size = node.data.size;\n        if (isArray(size)) {\n            if (size.length === 1)\n                size = [size[0], size[0]];\n        }\n        else if (isNumber(size)) {\n            size = [size, size];\n        }\n        else if (size === undefined || isNaN(size)) {\n            size = [30, 30];\n        }\n        const halfSize = [size[0] / 2, size[1] / 2];\n        const left = node.data.x - halfSize[0];\n        const right = node.data.x + halfSize[0];\n        const top = node.data.y - halfSize[1];\n        const bottom = node.data.y + halfSize[1];\n        if (minX > left)\n            minX = left;\n        if (minY > top)\n            minY = top;\n        if (maxX < right)\n            maxX = right;\n        if (maxY < bottom)\n            maxY = bottom;\n    });\n    return { minX, minY, maxX, maxY };\n};\n/**\n * calculate the euclidean distance form p1 to p2\n * @param p1\n * @param p2\n * @returns\n */\nexport const getEuclideanDistance = (p1, p2) => Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n/**\n * Depth first search begin from nodes in graphCore data.\n * @param graphCore graphlib data structure\n * @param nodes begin nodes\n * @param fn will be called while visiting each node\n * @param mode 'TB' - visit from top to bottom; 'BT' - visit from bottom to top;\n * @returns\n */\nexport const graphTreeDfs = (graph, nodes, fn, mode = 'TB', treeKey, stopFns = {}) => {\n    if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length))\n        return;\n    const { stopBranchFn, stopAllFn } = stopFns;\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        if (!graph.hasNode(node.id))\n            continue;\n        if (stopBranchFn === null || stopBranchFn === void 0 ? void 0 : stopBranchFn(node))\n            continue; // Stop this branch\n        if (stopAllFn === null || stopAllFn === void 0 ? void 0 : stopAllFn(node))\n            return; // Stop all\n        if (mode === 'TB')\n            fn(node); // Traverse from top to bottom\n        graphTreeDfs(graph, graph.getChildren(node.id, treeKey), fn, mode, treeKey, stopFns);\n        if (mode !== 'TB')\n            fn(node); // Traverse from bottom to top\n    }\n};\n//# sourceMappingURL=math.js.map",null,"export function isLayoutWithIterations(layout) {\n    return !!layout.tick && !!layout.stop;\n}\n//# sourceMappingURL=types.js.map",null,"import { __awaiter } from \"tslib\";\nimport { deepMix, pick } from '@antv/util';\nimport { forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY, } from 'd3-force';\nexport class D3ForceLayout {\n    constructor(options) {\n        this.id = 'd3-force';\n        this.config = {\n            inputNodeAttrs: ['x', 'y', 'vx', 'vy', 'fx', 'fy'],\n            outputNodeAttrs: ['x', 'y', 'vx', 'vy'],\n            simulationAttrs: [\n                'alpha',\n                'alphaMin',\n                'alphaDecay',\n                'alphaTarget',\n                'velocityDecay',\n                'randomSource',\n            ],\n        };\n        this.forceMap = {\n            link: forceLink,\n            manyBody: forceManyBody,\n            center: forceCenter,\n            collide: forceCollide,\n            radial: forceRadial,\n            x: forceX,\n            y: forceY,\n        };\n        // @ts-ignore\n        this.options = {\n            link: {\n                id: (edge) => edge.id,\n            },\n            manyBody: {},\n            center: {\n                x: 0,\n                y: 0,\n            },\n        };\n        this.context = {\n            options: {},\n            assign: false,\n            nodes: [],\n            edges: [],\n        };\n        deepMix(this.options, options);\n        if (this.options.forceSimulation) {\n            this.simulation = this.options.forceSimulation;\n        }\n    }\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericLayout(false, graph, options);\n        });\n    }\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericLayout(true, graph, options);\n        });\n    }\n    stop() {\n        this.simulation.stop();\n    }\n    tick(iterations) {\n        this.simulation.tick(iterations);\n        return this.getResult();\n    }\n    restart() {\n        this.simulation.restart();\n    }\n    setFixedPosition(id, position) {\n        const node = this.context.nodes.find((n) => n.id === id);\n        if (!node)\n            return;\n        position.forEach((value, index) => {\n            if (typeof value === 'number' || value === null) {\n                const key = ['fx', 'fy', 'fz'][index];\n                node[key] = value;\n            }\n        });\n    }\n    getOptions(options) {\n        var _a, _b;\n        const _ = deepMix({}, this.options, options);\n        // process nodeSize\n        if (_.collide && ((_a = _.collide) === null || _a === void 0 ? void 0 : _a.radius) === undefined) {\n            _.collide = _.collide || {};\n            // @ts-ignore\n            _.collide.radius = (_b = _.nodeSize) !== null && _b !== void 0 ? _b : 10;\n        }\n        // process iterations\n        if (_.iterations === undefined) {\n            if (_.link && _.link.iterations === undefined) {\n                _.iterations = _.link.iterations;\n            }\n            if (_.collide && _.collide.iterations === undefined) {\n                _.iterations = _.collide.iterations;\n            }\n        }\n        // assign to context\n        this.context.options = _;\n        return _;\n    }\n    genericLayout(assign, graph, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const _options = this.getOptions(options);\n            const nodes = graph.getAllNodes().map(({ id, data }) => (Object.assign(Object.assign({ id }, data), pick(data.data, this.config.inputNodeAttrs))));\n            const edges = graph.getAllEdges().map((edge) => (Object.assign({}, edge)));\n            Object.assign(this.context, { assign, nodes, edges, graph });\n            const promise = new Promise((resolver) => {\n                this.resolver = resolver;\n            });\n            const simulation = this.setSimulation(_options);\n            simulation.nodes(nodes);\n            (_a = simulation.force('link')) === null || _a === void 0 ? void 0 : _a.links(edges);\n            return promise;\n        });\n    }\n    getResult() {\n        const { assign, nodes, edges, graph } = this.context;\n        const nodesResult = nodes.map((node) => ({\n            id: node.id,\n            data: Object.assign(Object.assign({}, node.data), pick(node, this.config.outputNodeAttrs)),\n        }));\n        const edgeResult = edges.map(({ id, source, target, data }) => ({\n            id,\n            source: typeof source === 'object' ? source.id : source,\n            target: typeof target === 'object' ? target.id : target,\n            data,\n        }));\n        if (assign) {\n            nodesResult.forEach((node) => graph.mergeNodeData(node.id, node.data));\n        }\n        return { nodes: nodesResult, edges: edgeResult };\n    }\n    initSimulation() {\n        return forceSimulation();\n    }\n    setSimulation(options) {\n        const simulation = this.simulation || this.options.forceSimulation || this.initSimulation();\n        if (!this.simulation) {\n            this.simulation = simulation\n                .on('tick', () => { var _a; return (_a = options.onTick) === null || _a === void 0 ? void 0 : _a.call(options, this.getResult()); })\n                .on('end', () => { var _a; return (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.call(this, this.getResult()); });\n        }\n        apply(simulation, this.config.simulationAttrs.map((name) => [\n            name,\n            options[name],\n        ]));\n        Object.entries(this.forceMap).forEach(([name, Ctor]) => {\n            const forceName = name;\n            if (options[name]) {\n                let force = simulation.force(forceName);\n                if (!force) {\n                    force = Ctor();\n                    simulation.force(forceName, force);\n                }\n                apply(force, Object.entries(options[forceName]));\n            }\n            else\n                simulation.force(forceName, null);\n        });\n        return simulation;\n    }\n}\nconst apply = (target, params) => {\n    return params.reduce((acc, [method, param]) => {\n        if (!acc[method] || param === undefined)\n            return acc;\n        return acc[method].call(target, param);\n    }, target);\n};\n//# sourceMappingURL=index.js.map",null,"import isArray from './is-array';\nimport isPlainObject from './is-plain-object';\nvar MAX_MIX_LEVEL = 5;\nfunction hasOwn(object, property) {\n    if (Object.hasOwn) {\n        return Object.hasOwn(object, property);\n    }\n    if (object == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n    return Object.prototype.hasOwnProperty.call(Object(object), property);\n}\nfunction _deepMix(dist, src, level, maxLevel) {\n    level = level || 0;\n    maxLevel = maxLevel || MAX_MIX_LEVEL;\n    for (var key in src) {\n        if (hasOwn(src, key)) {\n            var value = src[key];\n            if (value !== null && isPlainObject(value)) {\n                if (!isPlainObject(dist[key])) {\n                    dist[key] = {};\n                }\n                if (level < maxLevel) {\n                    _deepMix(dist[key], value, level + 1, maxLevel);\n                }\n                else {\n                    dist[key] = src[key];\n                }\n            }\n            else if (isArray(value)) {\n                dist[key] = [];\n                dist[key] = dist[key].concat(value);\n            }\n            else if (value !== undefined) {\n                dist[key] = value;\n            }\n        }\n    }\n}\n// todo 重写\nvar deepMix = function (rst) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    for (var i = 0; i < args.length; i += 1) {\n        _deepMix(rst, args[i]);\n    }\n    return rst;\n};\nexport default deepMix;\n//# sourceMappingURL=deep-mix.js.map",null,"import isObjectLike from './is-object-like';\nimport isType from './is-type';\nvar isPlainObject = function (value) {\n    /**\n     * isObjectLike(new Foo) => false\n     * isObjectLike([1, 2, 3]) => false\n     * isObjectLike({ x: 0, y: 0 }) => true\n     * isObjectLike(Object.create(null)) => true\n     */\n    if (!isObjectLike(value) || !isType(value, 'Object')) {\n        return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n        return true;\n    }\n    var proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n};\nexport default isPlainObject;\n//# sourceMappingURL=is-plain-object.js.map",null,"var isObjectLike = function (value) {\n    /**\n     * isObjectLike({}) => true\n     * isObjectLike([1, 2, 3]) => true\n     * isObjectLike(Function) => false\n     * isObjectLike(null) => false\n     */\n    return typeof value === 'object' && value !== null;\n};\nexport default isObjectLike;\n//# sourceMappingURL=is-object-like.js.map",null,"var toString = {}.toString;\nvar isType = function (value, type) { return toString.call(value) === '[object ' + type + ']'; };\nexport default isType;\n//# sourceMappingURL=is-type.js.map",null,"import each from './each';\nimport isPlainObject from './is-plain-object';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport default (function (object, keys) {\n    if (object === null || !isPlainObject(object)) {\n        return {};\n    }\n    var result = {};\n    each(keys, function (key) {\n        if (hasOwnProperty.call(object, key)) {\n            result[key] = object[key];\n        }\n    });\n    return result;\n});\n//# sourceMappingURL=pick.js.map",null,"import isArray from './is-array';\nimport isObject from './is-object';\nfunction each(elements, func) {\n    if (!elements) {\n        return;\n    }\n    var rst;\n    if (isArray(elements)) {\n        for (var i = 0, len = elements.length; i < len; i++) {\n            rst = func(elements[i], i);\n            if (rst === false) {\n                break;\n            }\n        }\n    }\n    else if (isObject(elements)) {\n        for (var k in elements) {\n            if (elements.hasOwnProperty(k)) {\n                rst = func(elements[k], k);\n                if (rst === false) {\n                    break;\n                }\n            }\n        }\n    }\n}\nexport default each;\n//# sourceMappingURL=each.js.map",null,"export default function(x, y) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x, sy += node.y;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {\n      node = nodes[i], node.x -= sx, node.y -= sy;\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nexport default function(radius) {\n  var nodes,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree = quadtree(nodes, x, y).visitAfter(prepare);\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        yi = node.y + node.vy;\n        tree.visit(apply);\n      }\n    }\n\n    function apply(quad, x0, y0, x1, y1) {\n      var data = quad.data, rj = quad.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = yi - data.y - data.vy,\n              l = x * x + y * y;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (y === 0) y = jiggle(random), l += y * y;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            node.vy += (y *= l) * r;\n            data.vx -= x * (r = 1 - r);\n            data.vy -= y * r;\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;\n    }\n  }\n\n  function prepare(quad) {\n    if (quad.data) return quad.r = radii[quad.data.index];\n    for (var i = quad.r = 0; i < 4; ++i) {\n      if (quad[i] && quad[i].r > quad.r) {\n        quad.r = quad[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import constant from \"./constant.js\";\n\nexport default function(radius, x, y) {\n  var nodes,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = node.y - y || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      node.vy += dy * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _, initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n","import { forceCenter, forceCollide, forceLink, forceManyBody, forceRadial, forceSimulation, forceX, forceY, forceZ, } from 'd3-force-3d';\nimport { D3ForceLayout } from '../d3-force';\nexport class D3Force3DLayout extends D3ForceLayout {\n    constructor() {\n        super(...arguments);\n        this.id = 'd3-force-3d';\n        this.config = {\n            inputNodeAttrs: ['x', 'y', 'z', 'vx', 'vy', 'vz', 'fx', 'fy', 'fz'],\n            outputNodeAttrs: ['x', 'y', 'z', 'vx', 'vy', 'vz'],\n            simulationAttrs: [\n                'alpha',\n                'alphaMin',\n                'alphaDecay',\n                'alphaTarget',\n                'velocityDecay',\n                'randomSource',\n                'numDimensions',\n            ],\n        };\n        this.forceMap = {\n            link: forceLink,\n            manyBody: forceManyBody,\n            center: forceCenter,\n            collide: forceCollide,\n            radial: forceRadial,\n            x: forceX,\n            y: forceY,\n            z: forceZ,\n        };\n        this.options = {\n            numDimensions: 3,\n            link: {\n                id: (edge) => edge.id,\n            },\n            manyBody: {},\n            center: {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n        };\n    }\n    initSimulation() {\n        return forceSimulation();\n    }\n}\n//# sourceMappingURL=index.js.map",null,"export default function(x, y, z) {\n  var nodes, strength = 1;\n\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force() {\n    var i,\n        n = nodes.length,\n        node,\n        sx = 0,\n        sy = 0,\n        sz = 0;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i], sx += node.x || 0, sy += node.y || 0, sz += node.z || 0;\n    }\n\n    for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, sz = (sz / n - z) * strength, i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (sx) { node.x -= sx }\n      if (sy) { node.y -= sy; }\n      if (sz) { node.z -= sz; }\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  return force;\n}\n","import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction x(d) {\n  return d.x + d.vx;\n}\n\nfunction y(d) {\n  return d.y + d.vy;\n}\n\nfunction z(d) {\n  return d.z + d.vz;\n}\n\nexport default function(radius) {\n  var nodes,\n      nDim,\n      radii,\n      random,\n      strength = 1,\n      iterations = 1;\n\n  if (typeof radius !== \"function\") radius = constant(radius == null ? 1 : +radius);\n\n  function force() {\n    var i, n = nodes.length,\n        tree,\n        node,\n        xi,\n        yi,\n        zi,\n        ri,\n        ri2;\n\n    for (var k = 0; k < iterations; ++k) {\n      tree =\n          (nDim === 1 ? binarytree(nodes, x)\n          :(nDim === 2 ? quadtree(nodes, x, y)\n          :(nDim === 3 ? octree(nodes, x, y, z)\n          :null\n      ))).visitAfter(prepare);\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        ri = radii[node.index], ri2 = ri * ri;\n        xi = node.x + node.vx;\n        if (nDim > 1) { yi = node.y + node.vy; }\n        if (nDim > 2) { zi = node.z + node.vz; }\n        tree.visit(apply);\n      }\n    }\n\n    function apply(treeNode, arg1, arg2, arg3, arg4, arg5, arg6) {\n      var args = [arg1, arg2, arg3, arg4, arg5, arg6];\n      var x0 = args[0],\n          y0 = args[1],\n          z0 = args[2],\n          x1 = args[nDim],\n          y1 = args[nDim+1],\n          z1 = args[nDim+2];\n\n      var data = treeNode.data, rj = treeNode.r, r = ri + rj;\n      if (data) {\n        if (data.index > node.index) {\n          var x = xi - data.x - data.vx,\n              y = (nDim > 1 ? yi - data.y - data.vy : 0),\n              z = (nDim > 2 ? zi - data.z - data.vz : 0),\n              l = x * x + y * y + z * z;\n          if (l < r * r) {\n            if (x === 0) x = jiggle(random), l += x * x;\n            if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n            if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n            l = (r - (l = Math.sqrt(l))) / l * strength;\n\n            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));\n            if (nDim > 1) { node.vy += (y *= l) * r; }\n            if (nDim > 2) { node.vz += (z *= l) * r; }\n\n            data.vx -= x * (r = 1 - r);\n            if (nDim > 1) { data.vy -= y * r; }\n            if (nDim > 2) { data.vz -= z * r; }\n          }\n        }\n        return;\n      }\n      return x0 > xi + r || x1 < xi - r\n          || (nDim > 1 && (y0 > yi + r || y1 < yi - r))\n          || (nDim > 2 && (z0 > zi + r || z1 < zi - r));\n    }\n  }\n\n  function prepare(treeNode) {\n    if (treeNode.data) return treeNode.r = radii[treeNode.data.index];\n    for (var i = treeNode.r = 0; i < Math.pow(2, nDim); ++i) {\n      if (treeNode[i] && treeNode[i].r > treeNode.r) {\n        treeNode.r = treeNode[i].r;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    radii = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = +_, force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  return force;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\n\nexport default function binarytree(nodes, x) {\n  var tree = new Binarytree(x == null ? defaultX : x, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Binarytree(x, x0, x1) {\n  this._x = x;\n  this._x0 = x0;\n  this._x1 = x1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = binarytree.prototype = Binarytree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Binarytree(this._x, this._x0, this._x1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(2)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 2; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(2)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;","export default function(d) {\n  const x = +this._x.call(null, d);\n  return add(this.cover(x), x, d);\n}\n\nfunction add(tree, x, d) {\n  if (isNaN(x)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      x1 = tree._x1,\n      xm,\n      xp,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (parent = node, !(node = node[i = +right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  if (x === xp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(2) : tree._root = new Array(2);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n  } while ((i = +right) === (j = +(xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  if (!Array.isArray(data)) data = Array.from(data);\n  const n = data.length;\n  const xz = new Float64Array(n);\n  let x0 = Infinity,\n      x1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (let i = 0, x; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, data[i]))) continue;\n    xz[i] = x;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0).cover(x1);\n\n  // Add the new points.\n  for (let i = 0; i < n; ++i) {\n    add(this, xz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x) {\n  if (isNaN(x = +x)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      x1 = this._x1;\n\n  // If the binarytree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing half boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1) {\n      i = +(x < x0);\n      parent = new Array(2), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z; break;\n        case 1: x0 = x1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._x1 = x1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0]).cover(+_[1][0])\n      : isNaN(this._x0) ? undefined : [[this._x0], [this._x1]];\n}\n","import Half from \"./half.js\";\n\nexport default function(x, radius) {\n  var data,\n      x0 = this._x0,\n      x1,\n      x2,\n      x3 = this._x1,\n      halves = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) halves.push(new Half(node, x0, x3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius;\n    x3 = x + radius;\n  }\n\n  while (q = halves.pop()) {\n\n    // Stop searching if this half can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (x2 = q.x1) < x0) continue;\n\n    // Bisect the current half.\n    if (node.length) {\n      var xm = (x1 + x2) / 2;\n\n      halves.push(\n        new Half(node[1], xm, x2),\n        new Half(node[0], x1, xm)\n      );\n\n      // Visit the closest half first.\n      if (i = +(x >= xm)) {\n        q = halves[halves.length - 1];\n        halves[halves.length - 1] = halves[halves.length - 1 - i];\n        halves[halves.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var d = Math.abs(x - +this._x.call(null, node.data));\n      if (d < radius) {\n        radius = d;\n        x0 = x - d;\n        x3 = x + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(node, x0, x1) {\n  this.node = node;\n  this.x0 = x0;\n  this.x1 = x1;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      x1 = this._x1,\n      x,\n      xm,\n      right,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (!(parent = node, node = node[i = +right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 1]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1])\n      && node === (parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Half from \"./half.js\";\n\nexport default function(callback) {\n  var halves = [], q, node = this._root, child, x0, x1;\n  if (node) halves.push(new Half(node, this._x0, this._x1));\n  while (q = halves.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, x1 = q.x1) && node.length) {\n      var xm = (x0 + x1) / 2;\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n    }\n  }\n  return this;\n}\n","import Half from \"./half.js\";\n\nexport default function(callback) {\n  var halves = [], next = [], q;\n  if (this._root) halves.push(new Half(this._root, this._x0, this._x1));\n  while (q = halves.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, x1 = q.x1, xm = (x0 + x1) / 2;\n      if (child = node[0]) halves.push(new Half(child, x0, xm));\n      if (child = node[1]) halves.push(new Half(child, xm, x1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.x1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      nDim,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x = 0, y = 0, z = 0, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        if (nDim > 1) { y = target.y + target.vy - source.y - source.vy || jiggle(random); }\n        if (nDim > 2) { z = target.z + target.vz - source.z - source.vz || jiggle(random); }\n        l = Math.sqrt(x * x + y * y + z * z);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l, z *= l;\n\n        target.vx -= x * (b = bias[i]);\n        if (nDim > 1) { target.vy -= y * b; }\n        if (nDim > 2) { target.vz -= z * b; }\n\n        source.vx += x * (b = 1 - b);\n        if (nDim > 1) { source.vy += y * b; }\n        if (nDim > 2) { source.vz += z * b; }\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","import {binarytree} from \"d3-binarytree\";\nimport {quadtree} from \"d3-quadtree\";\nimport {octree} from \"d3-octree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y, z} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      nDim,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i,\n        n = nodes.length,\n        tree =\n            (nDim === 1 ? binarytree(nodes, x)\n            :(nDim === 2 ? quadtree(nodes, x, y)\n            :(nDim === 3 ? octree(nodes, x, y, z)\n            :null\n        ))).visitAfter(accumulate);\n\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(treeNode) {\n    var strength = 0, q, c, weight = 0, x, y, z, i;\n    var numChildren = treeNode.length;\n\n    // For internal nodes, accumulate forces from children.\n    if (numChildren) {\n      for (x = y = z = i = 0; i < numChildren; ++i) {\n        if ((q = treeNode[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * (q.x || 0), y += c * (q.y || 0), z += c * (q.z || 0);\n        }\n      }\n      strength *= Math.sqrt(4 / numChildren); // scale accumulated strength according to number of dimensions\n\n      treeNode.x = x / weight;\n      if (nDim > 1) { treeNode.y = y / weight; }\n      if (nDim > 2) { treeNode.z = z / weight; }\n    }\n\n    // For leaf nodes, accumulate forces from coincident nodes.\n    else {\n      q = treeNode;\n      q.x = q.data.x;\n      if (nDim > 1) { q.y = q.data.y; }\n      if (nDim > 2) { q.z = q.data.z; }\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    treeNode.value = strength;\n  }\n\n  function apply(treeNode, x1, arg1, arg2, arg3) {\n    if (!treeNode.value) return true;\n    var x2 = [arg1, arg2, arg3][nDim-1];\n\n    var x = treeNode.x - node.x,\n        y = (nDim > 1 ? treeNode.y - node.y : 0),\n        z = (nDim > 2 ? treeNode.z - node.z : 0),\n        w = x2 - x1,\n        l = x * x + y * y + z * z;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n        if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * treeNode.value * alpha / l;\n        if (nDim > 1) { node.vy += y * treeNode.value * alpha / l; }\n        if (nDim > 2) { node.vz += z * treeNode.value * alpha / l; }\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (treeNode.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (treeNode.data !== node || treeNode.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (nDim > 1 && y === 0) y = jiggle(random), l += y * y;\n      if (nDim > 2 && z === 0) z = jiggle(random), l += z * z;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (treeNode.data !== node) {\n      w = strengths[treeNode.data.index] * alpha / l;\n      node.vx += x * w;\n      if (nDim > 1) { node.vy += y * w; }\n      if (nDim > 2) { node.vz += z * w; }\n    } while (treeNode = treeNode.next);\n  }\n\n  force.initialize = function(_nodes, ...args) {\n    nodes = _nodes;\n    random = args.find(arg => typeof arg === 'function') || Math.random;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nvar MAX_DIMENSIONS = 3;\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nexport function z(d) {\n  return d.z;\n}\n\nvar initialRadius = 10,\n    initialAngleRoll = Math.PI * (3 - Math.sqrt(5)), // Golden ratio angle\n    initialAngleYaw = Math.PI * 20 / (9 + Math.sqrt(221)); // Markov irrational number\n\nexport default function(nodes, numDimensions) {\n  numDimensions = numDimensions || 2;\n\n  var nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(numDimensions))),\n      simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function (force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (nDim > 1) {\n          if (node.fy == null) node.y += node.vy *= velocityDecay;\n          else node.y = node.fy, node.vy = 0;\n        }\n        if (nDim > 2) {\n          if (node.fz == null) node.z += node.vz *= velocityDecay;\n          else node.z = node.fz, node.vz = 0;\n        }\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (node.fz != null) node.z = node.fz;\n      if (isNaN(node.x) || (nDim > 1 && isNaN(node.y)) || (nDim > 2 && isNaN(node.z))) {\n        var radius = initialRadius * (nDim > 2 ? Math.cbrt(0.5 + i) : (nDim > 1 ? Math.sqrt(0.5 + i) : i)),\n          rollAngle = i * initialAngleRoll,\n          yawAngle = i * initialAngleYaw;\n\n        if (nDim === 1) {\n          node.x = radius;\n        } else if (nDim === 2) {\n          node.x = radius * Math.cos(rollAngle);\n          node.y = radius * Math.sin(rollAngle);\n        } else { // 3 dimensions: use spherical distribution along 2 irrational number angles\n          node.x = radius * Math.sin(rollAngle) * Math.cos(yawAngle);\n          node.y = radius * Math.cos(rollAngle);\n          node.z = radius * Math.sin(rollAngle) * Math.sin(yawAngle);\n        }\n      }\n      if (isNaN(node.vx) || (nDim > 1 && isNaN(node.vy)) || (nDim > 2 && isNaN(node.vz))) {\n        node.vx = 0;\n        if (nDim > 1) { node.vy = 0; }\n        if (nDim > 2) { node.vz = 0; }\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random, nDim);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    numDimensions: function(_) {\n      return arguments.length\n          ? (nDim = Math.min(MAX_DIMENSIONS, Math.max(1, Math.round(_))), forces.forEach(initializeForce), simulation)\n          : nDim;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function() {\n      var args = Array.prototype.slice.call(arguments);\n      var x = args.shift() || 0,\n          y = (nDim > 1 ? args.shift() : null) || 0,\n          z = (nDim > 2 ? args.shift() : null) || 0,\n          radius = args.shift() || Infinity;\n\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          dz,\n          d2,\n          node,\n          closest;\n\n      radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - (node.y || 0);\n        dz = z - (node.z ||0);\n        d2 = dx * dx + dy * dy + dz * dz;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import constant from \"./constant.js\";\n\nexport default function(radius, x, y, z) {\n  var nodes,\n      nDim,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = (node.y || 0) - y || 1e-6,\n          dz = (node.z || 0) - z || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n      if (nDim>1) { node.vy += dy * k; }\n      if (nDim>2) { node.vz += dz * k; }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(initNodes, ...args) {\n    nodes = initNodes;\n    nDim = args.find(arg => [1, 2, 3].includes(arg)) || 2;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(z) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      zz;\n\n  if (typeof z !== \"function\") z = constant(z == null ? 0 : +z);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vz += (zz[i] - node.z) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    zz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(zz[i] = +z(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.z = function(_) {\n    return arguments.length ? (z = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : z;\n  };\n\n  return force;\n}\n","import { __awaiter, __rest } from \"tslib\";\nimport { isFunction, isNumber } from '@antv/util';\nimport dagre, { graphlib } from 'dagre';\nimport { parseSize } from './util/size';\n/**\n * <zh/> Dagre 布局\n *\n * <en/> Dagre layout\n */\nexport class DagreLayout {\n    constructor(options) {\n        this.id = 'dagre';\n        this.options = {};\n        Object.assign(this.options, DagreLayout.defaultOptions, options);\n    }\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericDagreLayout(false, graph, Object.assign(Object.assign({}, this.options), options));\n        });\n    }\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericDagreLayout(true, graph, Object.assign(Object.assign({}, this.options), options));\n        });\n    }\n    genericDagreLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { nodeSize } = options;\n            const g = new graphlib.Graph();\n            g.setGraph(options);\n            g.setDefaultEdgeLabel(() => ({}));\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if ([...nodes, ...edges].some(({ id }) => isNumber(id))) {\n                console.error('Dagre layout only support string id, it will convert number to string.');\n            }\n            graph.getAllNodes().forEach((node) => {\n                const { id } = node;\n                const data = Object.assign({}, node.data);\n                if (nodeSize !== undefined) {\n                    const [width, height] = parseSize(isFunction(nodeSize) ? nodeSize(node) : nodeSize);\n                    Object.assign(data, { width, height });\n                }\n                g.setNode(id.toString(), data);\n            });\n            graph.getAllEdges().forEach(({ id, source, target }) => {\n                g.setEdge(source.toString(), target.toString(), { id });\n            });\n            dagre.layout(g);\n            const mapping = { nodes: [], edges: [] };\n            g.nodes().forEach((id) => {\n                const data = g.node(id);\n                mapping.nodes.push({ id, data });\n                if (assign)\n                    graph.mergeNodeData(id, data);\n            });\n            g.edges().forEach((edge) => {\n                const _a = g.edge(edge), { id } = _a, data = __rest(_a, [\"id\"]);\n                const { v: source, w: target } = edge;\n                mapping.edges.push({ id, source, target, data });\n                if (assign)\n                    graph.mergeEdgeData(id, data);\n            });\n            return mapping;\n        });\n    }\n}\nDagreLayout.defaultOptions = {};\n//# sourceMappingURL=dagre.js.map",null,"/*\nCopyright (c) 2012-2014 Chris Pettitt\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\nmodule.exports = {\n  graphlib: require(\"./lib/graphlib\"),\n\n  layout: require(\"./lib/layout\"),\n  debug: require(\"./lib/debug\"),\n  util: {\n    time: require(\"./lib/util\").time,\n    notime: require(\"./lib/util\").notime\n  },\n  version: require(\"./lib/version\")\n};\n","import { __awaiter } from \"tslib\";\nimport { Graph as GGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { cloneFormatData, formatNodeSizeToNumber } from '../util';\nimport { handleSingleNodeGraph } from '../util/common';\nimport Body from './body';\nimport Quad from './quad';\nimport QuadTree from './quad-tree';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    center: [0, 0],\n    width: 300,\n    height: 300,\n    kr: 5,\n    kg: 1,\n    mode: 'normal',\n    preventOverlap: false,\n    dissuadeHubs: false,\n    maxIteration: 0,\n    ks: 0.1,\n    ksmax: 10,\n    tao: 0.1,\n};\n/**\n * <zh/> Atlas2 力导向布局\n *\n * <en/> Force Atlas 2 layout\n */\nexport class ForceAtlas2Layout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'forceAtlas2';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericForceAtlas2Layout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericForceAtlas2Layout(true, graph, options);\n        });\n    }\n    genericForceAtlas2Layout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const edges = graph.getAllEdges();\n            const nodes = graph.getAllNodes();\n            const mergedOptions = this.formatOptions(options, nodes.length);\n            const { width, height, prune, maxIteration, nodeSize, center } = mergedOptions;\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n                return handleSingleNodeGraph(graph, assign, center);\n            }\n            const calcNodes = nodes.map((node) => cloneFormatData(node, [width, height]));\n            const calcEdges = edges.filter((edge) => {\n                const { source, target } = edge;\n                return source !== target;\n            });\n            const calcGraph = new GGraph({\n                nodes: calcNodes,\n                edges: calcEdges,\n            });\n            const sizes = this.getSizes(calcGraph, nodeSize);\n            this.run(calcGraph, graph, maxIteration, sizes, assign, mergedOptions);\n            // if prune, place the leaves around their parents, and then re-layout for several iterations.\n            if (prune) {\n                for (let j = 0; j < calcEdges.length; j += 1) {\n                    const { source, target } = calcEdges[j];\n                    const sourceDegree = calcGraph.getDegree(source);\n                    const targetDegree = calcGraph.getDegree(source);\n                    if (sourceDegree <= 1) {\n                        const targetNode = calcGraph.getNode(target);\n                        calcGraph.mergeNodeData(source, {\n                            x: targetNode.data.x,\n                            y: targetNode.data.y,\n                        });\n                    }\n                    else if (targetDegree <= 1) {\n                        const sourceNode = calcGraph.getNode(source);\n                        calcGraph.mergeNodeData(target, {\n                            x: sourceNode.data.x,\n                            y: sourceNode.data.y,\n                        });\n                    }\n                }\n                const postOptions = Object.assign(Object.assign({}, mergedOptions), { prune: false, barnesHut: false });\n                this.run(calcGraph, graph, 100, sizes, assign, postOptions);\n            }\n            return {\n                nodes: calcNodes,\n                edges,\n            };\n        });\n    }\n    /**\n     * Init the node positions if there is no initial positions.\n     * And pre-calculate the size (max of width and height) for each node.\n     * @param calcGraph graph for calculation\n     * @param nodeSize node size config from layout options\n     * @returns {SizeMap} node'id mapped to max of its width and height\n     */\n    getSizes(calcGraph, nodeSize) {\n        const nodes = calcGraph.getAllNodes();\n        const sizes = {};\n        for (let i = 0; i < nodes.length; i += 1) {\n            const node = nodes[i];\n            sizes[node.id] = formatNodeSizeToNumber(nodeSize, undefined)(node);\n        }\n        return sizes;\n    }\n    /**\n     * Format the options.\n     * @param options input options\n     * @param nodeNum number of nodes\n     * @returns formatted options\n     */\n    formatOptions(options = {}, nodeNum) {\n        const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n        const { center, width, height, barnesHut, prune, maxIteration, kr, kg } = mergedOptions;\n        mergedOptions.width =\n            !width && typeof window !== 'undefined' ? window.innerWidth : width;\n        mergedOptions.height =\n            !height && typeof window !== 'undefined' ? window.innerHeight : height;\n        mergedOptions.center = !center\n            ? [mergedOptions.width / 2, mergedOptions.height / 2]\n            : center;\n        if (barnesHut === undefined && nodeNum > 250) {\n            mergedOptions.barnesHut = true;\n        }\n        if (prune === undefined && nodeNum > 100)\n            mergedOptions.prune = true;\n        if (maxIteration === 0 && !prune) {\n            mergedOptions.maxIteration = 250;\n            if (nodeNum <= 200 && nodeNum > 100)\n                mergedOptions.maxIteration = 1000;\n            else if (nodeNum > 200)\n                mergedOptions.maxIteration = 1200;\n        }\n        else if (maxIteration === 0 && prune) {\n            mergedOptions.maxIteration = 100;\n            if (nodeNum <= 200 && nodeNum > 100)\n                mergedOptions.maxIteration = 500;\n            else if (nodeNum > 200)\n                mergedOptions.maxIteration = 950;\n        }\n        if (!kr) {\n            mergedOptions.kr = 50;\n            if (nodeNum > 100 && nodeNum <= 500)\n                mergedOptions.kr = 20;\n            else if (nodeNum > 500)\n                mergedOptions.kr = 1;\n        }\n        if (!kg) {\n            mergedOptions.kg = 20;\n            if (nodeNum > 100 && nodeNum <= 500)\n                mergedOptions.kg = 10;\n            else if (nodeNum > 500)\n                mergedOptions.kg = 1;\n        }\n        return mergedOptions;\n    }\n    /**\n     * Loops for fa2.\n     * @param calcGraph graph for calculation\n     * @param graph original graph\n     * @param iteration iteration number\n     * @param sizes nodes' size\n     * @param options formatted layout options\n     * @returns\n     */\n    run(calcGraph, graph, iteration, sizes, assign, options) {\n        const { kr, barnesHut, onTick } = options;\n        const calcNodes = calcGraph.getAllNodes();\n        let sg = 0;\n        let iter = iteration;\n        const forces = {};\n        const preForces = {};\n        const bodies = {};\n        for (let i = 0; i < calcNodes.length; i += 1) {\n            const { data, id } = calcNodes[i];\n            forces[id] = [0, 0];\n            if (barnesHut) {\n                const params = {\n                    id: i,\n                    rx: data.x,\n                    ry: data.y,\n                    mass: 1,\n                    g: kr,\n                    degree: calcGraph.getDegree(id),\n                };\n                bodies[id] = new Body(params);\n            }\n        }\n        while (iter > 0) {\n            sg = this.oneStep(calcGraph, {\n                iter,\n                preventOverlapIters: 50,\n                krPrime: 100,\n                sg,\n                forces,\n                preForces,\n                bodies,\n                sizes,\n            }, options);\n            iter--;\n            onTick === null || onTick === void 0 ? void 0 : onTick({\n                nodes: calcNodes,\n                edges: graph.getAllEdges(),\n            });\n            // if (assign) {\n            //   calcNodes.forEach(({ id, data }) => graph.mergeNodeData(id, {\n            //     x: data.x,\n            //     y: data.y\n            //   }))\n            // }\n        }\n        return calcGraph;\n    }\n    /**\n     * One step for a loop.\n     * @param graph graph for calculation\n     * @param params parameters for a loop\n     * @param options formatted layout's input options\n     * @returns\n     */\n    oneStep(graph, params, options) {\n        const { iter, preventOverlapIters, krPrime, sg, preForces, bodies, sizes } = params;\n        let { forces } = params;\n        const { preventOverlap, barnesHut } = options;\n        const nodes = graph.getAllNodes();\n        for (let i = 0; i < nodes.length; i += 1) {\n            const { id } = nodes[i];\n            preForces[id] = [...forces[id]];\n            forces[id] = [0, 0];\n        }\n        // attractive forces, existing on every actual edge\n        forces = this.getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options);\n        // repulsive forces and Gravity, existing on every node pair\n        // if preventOverlap, using the no-optimized method in the last preventOverlapIters instead.\n        if (barnesHut &&\n            ((preventOverlap && iter > preventOverlapIters) || !preventOverlap)) {\n            forces = this.getOptRepGraForces(graph, forces, bodies, options);\n        }\n        else {\n            forces = this.getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options);\n        }\n        // update the positions\n        return this.updatePos(graph, forces, preForces, sg, options);\n    }\n    /**\n     * Calculate the attract forces for nodes.\n     * @param graph graph for calculation\n     * @param iter current iteration index\n     * @param preventOverlapIters the iteration number for preventing overlappings\n     * @param sizes nodes' sizes\n     * @param forces forces for nodes, which will be modified\n     * @param options formatted layout's input options\n     * @returns\n     */\n    getAttrForces(graph, iter, preventOverlapIters, sizes, forces, options) {\n        const { preventOverlap, dissuadeHubs, mode, prune } = options;\n        const edges = graph.getAllEdges();\n        for (let i = 0; i < edges.length; i += 1) {\n            const { source, target } = edges[i];\n            const sourceNode = graph.getNode(source);\n            const targetNode = graph.getNode(target);\n            const sourceDegree = graph.getDegree(source);\n            const targetDegree = graph.getDegree(target);\n            if (prune && (sourceDegree <= 1 || targetDegree <= 1))\n                continue;\n            const dir = [\n                targetNode.data.x - sourceNode.data.x,\n                targetNode.data.y - sourceNode.data.y,\n            ];\n            let eucliDis = Math.hypot(dir[0], dir[1]);\n            eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            if (preventOverlap && iter < preventOverlapIters) {\n                eucliDis = eucliDis - sizes[source] - sizes[target];\n            }\n            let fa1 = eucliDis;\n            let fa2 = fa1;\n            if (mode === 'linlog') {\n                fa1 = Math.log(1 + eucliDis);\n                fa2 = fa1;\n            }\n            if (dissuadeHubs) {\n                fa1 = eucliDis / sourceDegree;\n                fa2 = eucliDis / targetDegree;\n            }\n            if (preventOverlap && iter < preventOverlapIters && eucliDis <= 0) {\n                fa1 = 0;\n                fa2 = 0;\n            }\n            else if (preventOverlap && iter < preventOverlapIters && eucliDis > 0) {\n                fa1 = eucliDis;\n                fa2 = eucliDis;\n            }\n            forces[source][0] += fa1 * dir[0];\n            forces[target][0] -= fa2 * dir[0];\n            forces[source][1] += fa1 * dir[1];\n            forces[target][1] -= fa2 * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Calculate the repulsive forces for nodes under barnesHut mode.\n     * @param graph graph for calculatiion\n     * @param forces forces for nodes, which will be modified\n     * @param bodies force body map\n     * @param options formatted layout's input options\n     * @returns\n     */\n    getOptRepGraForces(graph, forces, bodies, options) {\n        const { kg, center, prune } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        let minx = 9e10;\n        let maxx = -9e10;\n        let miny = 9e10;\n        let maxy = -9e10;\n        for (let i = 0; i < nodeNum; i += 1) {\n            const { id, data } = nodes[i];\n            if (prune && graph.getDegree(id) <= 1)\n                continue;\n            bodies[id].setPos(data.x, data.y);\n            if (data.x >= maxx)\n                maxx = data.x;\n            if (data.x <= minx)\n                minx = data.x;\n            if (data.y >= maxy)\n                maxy = data.y;\n            if (data.y <= miny)\n                miny = data.y;\n        }\n        const width = Math.max(maxx - minx, maxy - miny);\n        const quadParams = {\n            xmid: (maxx + minx) / 2,\n            ymid: (maxy + miny) / 2,\n            length: width,\n            massCenter: center,\n            mass: nodeNum,\n        };\n        const quad = new Quad(quadParams);\n        const quadTree = new QuadTree(quad);\n        // build the tree, insert the nodes(quads) into the tree\n        for (let i = 0; i < nodeNum; i += 1) {\n            const { id } = nodes[i];\n            if (prune && graph.getDegree(id) <= 1)\n                continue;\n            if (bodies[id].in(quad))\n                quadTree.insert(bodies[id]);\n        }\n        // update the repulsive forces and the gravity.\n        for (let i = 0; i < nodeNum; i += 1) {\n            const { id, data } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1)\n                continue;\n            bodies[id].resetForce();\n            quadTree.updateForce(bodies[id]);\n            forces[id][0] -= bodies[id].fx;\n            forces[id][1] -= bodies[id].fy;\n            // gravity\n            const dir = [data.x - center[0], data.y - center[1]];\n            let eucliDis = Math.hypot(dir[0], dir[1]);\n            eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            const fg = kg * (degree + 1); // tslint:disable-line\n            forces[id][0] -= fg * dir[0];\n            forces[id][1] -= fg * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Calculate the repulsive forces for nodes.\n     * @param graph graph for calculatiion\n     * @param iter current iteration index\n     * @param preventOverlapIters the iteration number for preventing overlappings\n     * @param forces forces for nodes, which will be modified\n     * @param krPrime larger the krPrime, larger the repulsive force\n     * @param sizes nodes' sizes\n     * @param options formatted layout's input options\n     * @returns\n     */\n    getRepGraForces(graph, iter, preventOverlapIters, forces, krPrime, sizes, options) {\n        const { preventOverlap, kr, kg, center, prune } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        for (let i = 0; i < nodeNum; i += 1) {\n            const nodei = nodes[i];\n            const degreei = graph.getDegree(nodei.id);\n            for (let j = i + 1; j < nodeNum; j += 1) {\n                const nodej = nodes[j];\n                const degreej = graph.getDegree(nodej.id);\n                if (prune && (degreei <= 1 || degreej <= 1))\n                    continue;\n                const dir = [nodej.data.x - nodei.data.x, nodej.data.y - nodei.data.y];\n                let eucliDis = Math.hypot(dir[0], dir[1]);\n                eucliDis = eucliDis < 0.0001 ? 0.0001 : eucliDis;\n                dir[0] = dir[0] / eucliDis;\n                dir[1] = dir[1] / eucliDis;\n                if (preventOverlap && iter < preventOverlapIters) {\n                    eucliDis = eucliDis - sizes[nodei.id] - sizes[nodej.id];\n                }\n                let fr = (kr * (degreei + 1) * (degreej + 1)) / eucliDis;\n                if (preventOverlap && iter < preventOverlapIters && eucliDis < 0) {\n                    fr = krPrime * (degreei + 1) * (degreej + 1);\n                }\n                else if (preventOverlap &&\n                    iter < preventOverlapIters &&\n                    eucliDis === 0) {\n                    fr = 0;\n                }\n                else if (preventOverlap &&\n                    iter < preventOverlapIters &&\n                    eucliDis > 0) {\n                    fr = (kr * (degreei + 1) * (degreej + 1)) / eucliDis;\n                }\n                forces[nodei.id][0] -= fr * dir[0];\n                forces[nodej.id][0] += fr * dir[0];\n                forces[nodei.id][1] -= fr * dir[1];\n                forces[nodej.id][1] += fr * dir[1];\n            }\n            // gravity\n            const dir = [nodei.data.x - center[0], nodei.data.y - center[1]];\n            const eucliDis = Math.hypot(dir[0], dir[1]);\n            dir[0] = dir[0] / eucliDis;\n            dir[1] = dir[1] / eucliDis;\n            const fg = kg * (degreei + 1); // tslint:disable-line\n            forces[nodei.id][0] -= fg * dir[0];\n            forces[nodei.id][1] -= fg * dir[1];\n        }\n        return forces;\n    }\n    /**\n     * Update node positions.\n     * @param graph graph for calculatiion\n     * @param forces forces for nodes, which will be modified\n     * @param preForces previous forces for nodes, which will be modified\n     * @param sg constant for move distance of one step\n     * @param options formatted layout's input options\n     * @returns\n     */\n    updatePos(graph, forces, preForces, sg, options) {\n        const { ks, tao, prune, ksmax } = options;\n        const nodes = graph.getAllNodes();\n        const nodeNum = nodes.length;\n        const swgns = [];\n        const trans = [];\n        // swg(G) and tra(G)\n        let swgG = 0;\n        let traG = 0;\n        let usingSg = sg;\n        for (let i = 0; i < nodeNum; i += 1) {\n            const { id } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1)\n                continue;\n            const minus = [\n                forces[id][0] - preForces[id][0],\n                forces[id][1] - preForces[id][1],\n            ];\n            const minusNorm = Math.hypot(minus[0], minus[1]);\n            const add = [\n                forces[id][0] + preForces[id][0],\n                forces[id][1] + preForces[id][1],\n            ];\n            const addNorm = Math.hypot(add[0], add[1]);\n            swgns[i] = minusNorm;\n            trans[i] = addNorm / 2;\n            swgG += (degree + 1) * swgns[i];\n            traG += (degree + 1) * trans[i];\n        }\n        const preSG = usingSg;\n        usingSg = (tao * traG) / swgG;\n        if (preSG !== 0) {\n            usingSg = usingSg > 1.5 * preSG ? 1.5 * preSG : usingSg;\n        }\n        // update the node positions\n        for (let i = 0; i < nodeNum; i += 1) {\n            const { id, data } = nodes[i];\n            const degree = graph.getDegree(id);\n            if (prune && degree <= 1)\n                continue;\n            if (isNumber(data.fx) && isNumber(data.fy))\n                continue;\n            let sn = (ks * usingSg) / (1 + usingSg * Math.sqrt(swgns[i]));\n            let absForce = Math.hypot(forces[id][0], forces[id][1]);\n            absForce = absForce < 0.0001 ? 0.0001 : absForce;\n            const max = ksmax / absForce;\n            sn = sn > max ? max : sn;\n            const dnx = sn * forces[id][0];\n            const dny = sn * forces[id][1];\n            graph.mergeNodeData(id, {\n                x: data.x + dnx,\n                y: data.y + dny,\n            });\n        }\n        return usingSg;\n    }\n}\n//# sourceMappingURL=index.js.map",null,"// represents a body(a point mass) and its position\nexport default class Body {\n    constructor(params) {\n        /**\n         * the id of this body, the same with the node id\n         * @type  {number}\n         */\n        this.id = params.id || 0;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.rx = params.rx;\n        /**\n         * the position of this body\n         * @type  {number}\n         */\n        this.ry = params.ry;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fx = 0;\n        /**\n         * the force acting on this body\n         * @type  {number}\n         */\n        this.fy = 0;\n        /**\n         * the mass of this body, =1 for a node\n         * @type  {number}\n         */\n        this.mass = params.mass;\n        /**\n         * the degree of the node represented by this body\n         * @type  {number}\n         */\n        this.degree = params.degree;\n        /**\n         * the parameter for repulsive force, = kr\n         * @type  {number}\n         */\n        this.g = params.g || 0;\n    }\n    // returns the euclidean distance\n    distanceTo(bo) {\n        const dx = this.rx - bo.rx;\n        const dy = this.ry - bo.ry;\n        return Math.hypot(dx, dy);\n    }\n    setPos(x, y) {\n        this.rx = x;\n        this.ry = y;\n    }\n    // resets the forces\n    resetForce() {\n        this.fx = 0;\n        this.fy = 0;\n    }\n    addForce(b) {\n        const dx = b.rx - this.rx;\n        const dy = b.ry - this.ry;\n        let dist = Math.hypot(dx, dy);\n        dist = dist < 0.0001 ? 0.0001 : dist;\n        // the repulsive defined by force atlas 2\n        const F = (this.g * (this.degree + 1) * (b.degree + 1)) / dist;\n        this.fx += (F * dx) / dist;\n        this.fy += (F * dy) / dist;\n    }\n    // if quad contains this body\n    in(quad) {\n        return quad.contains(this.rx, this.ry);\n    }\n    // returns a new body\n    add(bo) {\n        const nenwMass = this.mass + bo.mass;\n        const x = (this.rx * this.mass + bo.rx * bo.mass) / nenwMass;\n        const y = (this.ry * this.mass + bo.ry * bo.mass) / nenwMass;\n        const dg = this.degree + bo.degree;\n        const params = {\n            rx: x,\n            ry: y,\n            mass: nenwMass,\n            degree: dg,\n        };\n        return new Body(params);\n    }\n}\n//# sourceMappingURL=body.js.map",null,"export default class Quad {\n    constructor(params) {\n        /**\n         * the center position of this quad\n         * @type  {number}\n         */\n        this.xmid = params.xmid;\n        /**\n         * the center position of this quad\n         * @type  {number}\n         */\n        this.ymid = params.ymid;\n        /**\n         * the length of this quad\n         * @type  {number}\n         */\n        this.length = params.length;\n        /**\n         * the mass center of this quad\n         * @type  {number}\n         */\n        this.massCenter = params.massCenter || [0, 0];\n        /**\n         * the mass of this quad\n         * @type  {number}\n         */\n        this.mass = params.mass || 1;\n    }\n    getLength() {\n        return this.length;\n    }\n    contains(x, y) {\n        const halfLen = this.length / 2;\n        return (x <= this.xmid + halfLen &&\n            x >= this.xmid - halfLen &&\n            y <= this.ymid + halfLen &&\n            y >= this.ymid - halfLen);\n    }\n    // northwest quadrant\n    // tslint:disable-next-line\n    NW() {\n        const x = this.xmid - this.length / 4;\n        const y = this.ymid + this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len,\n        };\n        const NW = new Quad(params);\n        return NW;\n    }\n    // northeast\n    // tslint:disable-next-line\n    NE() {\n        const x = this.xmid + this.length / 4;\n        const y = this.ymid + this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len,\n        };\n        const NE = new Quad(params);\n        return NE;\n    }\n    // southwest\n    // tslint:disable-next-line\n    SW() {\n        const x = this.xmid - this.length / 4;\n        const y = this.ymid - this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len,\n        };\n        const SW = new Quad(params);\n        return SW;\n    }\n    // southeast\n    // tslint:disable-next-line\n    SE() {\n        const x = this.xmid + this.length / 4;\n        const y = this.ymid - this.length / 4;\n        const len = this.length / 2;\n        const params = {\n            xmid: x,\n            ymid: y,\n            length: len,\n        };\n        const SE = new Quad(params);\n        return SE;\n    }\n}\n//# sourceMappingURL=quad.js.map",null,"/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\nexport default class QuadTree {\n    // each quadtree represents a quadrant and an aggregate body\n    // that represents all bodies inside the quadrant\n    constructor(param) {\n        /**\n         * (aggregated) body in this quad\n         * @type  {object}\n         */\n        this.body = null;\n        /**\n         * tree representing the northwest quadrant\n         * @type  {object}\n         */\n        this.quad = null;\n        this.NW = null;\n        this.NE = null;\n        this.SW = null;\n        this.SE = null;\n        /**\n         * threshold\n         * @type  {number}\n         */\n        this.theta = 0.5;\n        if (param != null)\n            this.quad = param;\n    }\n    // insert a body(node) into the tree\n    insert(bo) {\n        // if this node does not contain a body, put the new body bo here\n        if (this.body == null) {\n            this.body = bo;\n            return;\n        }\n        // internal node\n        if (!this._isExternal()) {\n            // update mass info\n            this.body = this.body.add(bo);\n            // insert body into quadrant\n            this._putBody(bo);\n        }\n        else {\n            // external node\n            // divide this region into four children\n            if (this.quad) {\n                this.NW = new QuadTree(this.quad.NW());\n                this.NE = new QuadTree(this.quad.NE());\n                this.SW = new QuadTree(this.quad.SW());\n                this.SE = new QuadTree(this.quad.SE());\n            }\n            // insert this body and bo\n            this._putBody(this.body);\n            this._putBody(bo);\n            // update the mass info\n            this.body = this.body.add(bo);\n        }\n    }\n    // inserts bo into a quad\n    // tslint:disable-next-line\n    _putBody(bo) {\n        if (!this.quad)\n            return;\n        if (bo.in(this.quad.NW()) && this.NW)\n            this.NW.insert(bo);\n        else if (bo.in(this.quad.NE()) && this.NE)\n            this.NE.insert(bo);\n        else if (bo.in(this.quad.SW()) && this.SW)\n            this.SW.insert(bo);\n        else if (bo.in(this.quad.SE()) && this.SE)\n            this.SE.insert(bo);\n    }\n    // tslint:disable-next-line\n    _isExternal() {\n        // four children are null\n        return (this.NW == null && this.NE == null && this.SW == null && this.SE == null);\n    }\n    // update the forces\n    updateForce(bo) {\n        if (this.body == null || bo === this.body) {\n            return;\n        }\n        // if the current node is external\n        if (this._isExternal())\n            bo.addForce(this.body);\n        // internal nodes\n        else {\n            const s = this.quad ? this.quad.getLength() : 0;\n            const d = this.body.distanceTo(bo);\n            // b is far enough\n            if (s / d < this.theta)\n                bo.addForce(this.body);\n            else {\n                this.NW && this.NW.updateForce(bo);\n                this.NE && this.NE.updateForce(bo);\n                this.SW && this.SW.updateForce(bo);\n                this.SE && this.SE.updateForce(bo);\n            }\n        }\n    }\n}\n//# sourceMappingURL=quad-tree.js.map",null,"import { __awaiter } from \"tslib\";\nimport { Graph as IGraph } from '@antv/graphlib';\nimport { isNumber } from '@antv/util';\nimport { cloneFormatData } from './util';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    maxIteration: 1000,\n    gravity: 10,\n    speed: 5,\n    clustering: false,\n    clusterGravity: 10,\n    width: 300,\n    height: 300,\n    nodeClusterBy: 'cluster',\n};\nconst SPEED_DIVISOR = 800;\n/**\n * <zh/> Fruchterman 力导向布局\n *\n * <en/> Fruchterman force-directed layout\n */\nexport class FruchtermanLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'fruchterman';\n        this.timeInterval = 0;\n        this.running = false;\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericFruchtermanLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericFruchtermanLayout(true, graph, options);\n        });\n    }\n    /**\n     * Stop simulation immediately.\n     */\n    stop() {\n        if (this.timeInterval && typeof window !== 'undefined') {\n            window.clearInterval(this.timeInterval);\n        }\n        this.running = false;\n    }\n    /**\n     * Manually steps the simulation by the specified number of iterations.\n     * @see https://github.com/d3/d3-force#simulation_tick\n     */\n    tick(iterations = this.options.maxIteration || 1) {\n        if (this.lastResult) {\n            return this.lastResult;\n        }\n        for (let i = 0; i < iterations; i++) {\n            this.runOneStep(this.lastGraph, this.lastClusterMap, this.lastOptions);\n        }\n        const result = {\n            nodes: this.lastLayoutNodes,\n            edges: this.lastLayoutEdges,\n        };\n        if (this.lastAssign) {\n            result.nodes.forEach((node) => this.lastGraph.mergeNodeData(node.id, {\n                x: node.data.x,\n                y: node.data.y,\n                z: this.options.dimensions === 3 ? node.data.z : undefined,\n            }));\n        }\n        return result;\n    }\n    genericFruchtermanLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.running)\n                return;\n            const formattedOptions = this.formatOptions(options);\n            const { dimensions, width, height, center, clustering, nodeClusterBy, maxIteration, onTick, } = formattedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n                const result = { nodes: [], edges };\n                this.lastResult = result;\n                return result;\n            }\n            if (nodes.length === 1) {\n                if (assign) {\n                    graph.mergeNodeData(nodes[0].id, {\n                        x: center[0],\n                        y: center[1],\n                        z: dimensions === 3 ? center[2] : undefined,\n                    });\n                }\n                const result = {\n                    nodes: [\n                        Object.assign(Object.assign({}, nodes[0]), { data: Object.assign(Object.assign({}, nodes[0].data), { x: center[0], y: center[1], z: dimensions === 3 ? center[2] : undefined }) }),\n                    ],\n                    edges,\n                };\n                this.lastResult = result;\n                return result;\n            }\n            const layoutNodes = nodes.map((node) => cloneFormatData(node, [width, height]));\n            const calcGraph = new IGraph({\n                nodes: layoutNodes,\n                edges,\n            });\n            // clustering info\n            const clusterMap = {};\n            if (clustering) {\n                layoutNodes.forEach((node) => {\n                    const clusterValue = node.data[nodeClusterBy];\n                    if (!clusterMap[clusterValue]) {\n                        clusterMap[clusterValue] = {\n                            name: clusterValue,\n                            cx: 0,\n                            cy: 0,\n                            count: 0,\n                        };\n                    }\n                });\n            }\n            // Use them later in `tick`.\n            this.lastLayoutNodes = layoutNodes;\n            this.lastLayoutEdges = edges;\n            this.lastAssign = assign;\n            this.lastGraph = calcGraph;\n            this.lastOptions = formattedOptions;\n            this.lastClusterMap = clusterMap;\n            if (typeof window === 'undefined')\n                return;\n            let iter = 0;\n            return new Promise((resolve) => {\n                // interval for render the result after each iteration\n                this.timeInterval = window.setInterval(() => {\n                    if (!this.running) {\n                        resolve({ nodes: layoutNodes, edges });\n                        return;\n                    }\n                    this.runOneStep(calcGraph, clusterMap, formattedOptions);\n                    if (assign) {\n                        layoutNodes.forEach(({ id, data }) => graph.mergeNodeData(id, {\n                            x: data.x,\n                            y: data.y,\n                            z: dimensions === 3 ? data.z : undefined,\n                        }));\n                    }\n                    onTick === null || onTick === void 0 ? void 0 : onTick({\n                        nodes: layoutNodes,\n                        edges,\n                    });\n                    iter++;\n                    if (iter >= maxIteration) {\n                        window.clearInterval(this.timeInterval);\n                        resolve({ nodes: layoutNodes, edges });\n                    }\n                }, 0);\n                this.running = true;\n            });\n        });\n    }\n    formatOptions(options = {}) {\n        const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n        const { clustering, nodeClusterBy } = mergedOptions;\n        const { center: propsCenter, width: propsWidth, height: propsHeight, } = mergedOptions;\n        mergedOptions.width =\n            !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n        mergedOptions.height =\n            !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n        mergedOptions.center = !propsCenter\n            ? [mergedOptions.width / 2, mergedOptions.height / 2]\n            : propsCenter;\n        mergedOptions.clustering = clustering && !!nodeClusterBy;\n        return mergedOptions;\n    }\n    runOneStep(calcGraph, clusterMap, options) {\n        const { dimensions, height, width, gravity, center, speed, clustering, nodeClusterBy, clusterGravity: propsClusterGravity, } = options;\n        const area = height * width;\n        const maxDisplace = Math.sqrt(area) / 10;\n        const nodes = calcGraph.getAllNodes();\n        const k2 = area / (nodes.length + 1);\n        const k = Math.sqrt(k2);\n        const displacements = {};\n        this.applyCalculate(calcGraph, displacements, k, k2);\n        // gravity for clusters\n        if (clustering) {\n            // reset the clustering centers\n            for (const key in clusterMap) {\n                clusterMap[key].cx = 0;\n                clusterMap[key].cy = 0;\n                clusterMap[key].count = 0;\n            }\n            // re-compute clustering centers\n            nodes.forEach((node) => {\n                const { data } = node; // node is one of layoutNodes, which is formatted and data field exists\n                const c = clusterMap[data[nodeClusterBy]];\n                if (isNumber(data.x)) {\n                    c.cx += data.x;\n                }\n                if (isNumber(data.y)) {\n                    c.cy += data.y;\n                }\n                c.count++;\n            });\n            for (const key in clusterMap) {\n                clusterMap[key].cx /= clusterMap[key].count;\n                clusterMap[key].cy /= clusterMap[key].count;\n            }\n            // compute the cluster gravity forces\n            const clusterGravity = (propsClusterGravity || gravity);\n            nodes.forEach((node, j) => {\n                const { id, data } = node;\n                if (!isNumber(data.x) || !isNumber(data.y))\n                    return;\n                const c = clusterMap[data[nodeClusterBy]];\n                const distLength = Math.sqrt((data.x - c.cx) * (data.x - c.cx) + (data.y - c.cy) * (data.y - c.cy));\n                const gravityForce = k * clusterGravity;\n                displacements[id].x -= (gravityForce * (data.x - c.cx)) / distLength;\n                displacements[id].y -= (gravityForce * (data.y - c.cy)) / distLength;\n            });\n        }\n        // gravity\n        nodes.forEach((node, j) => {\n            const { id, data } = node;\n            if (!isNumber(data.x) || !isNumber(data.y))\n                return;\n            const gravityForce = 0.01 * k * gravity;\n            displacements[id].x -= gravityForce * (data.x - center[0]);\n            displacements[id].y -= gravityForce * (data.y - center[1]);\n            if (dimensions === 3) {\n                displacements[id].z -= gravityForce * (data.z - center[2]);\n            }\n        });\n        // move\n        nodes.forEach((node, j) => {\n            const { id, data } = node;\n            if (isNumber(data.fx) && isNumber(data.fy)) {\n                data.x = data.fx;\n                data.y = data.fy;\n                if (dimensions === 3) {\n                    data.z = data.fz;\n                }\n                return;\n            }\n            if (!isNumber(data.x) || !isNumber(data.y))\n                return;\n            const distLength = Math.sqrt(displacements[id].x * displacements[id].x +\n                displacements[id].y * displacements[id].y +\n                (dimensions === 3 ? displacements[id].z * displacements[id].z : 0));\n            if (distLength > 0) {\n                // && !n.isFixed()\n                const limitedDist = Math.min(maxDisplace * (speed / SPEED_DIVISOR), distLength);\n                calcGraph.mergeNodeData(id, {\n                    x: data.x + (displacements[id].x / distLength) * limitedDist,\n                    y: data.y + (displacements[id].y / distLength) * limitedDist,\n                    z: dimensions === 3\n                        ? data.z + (displacements[id].z / distLength) * limitedDist\n                        : undefined,\n                });\n            }\n        });\n    }\n    applyCalculate(calcGraph, displacements, k, k2) {\n        this.calRepulsive(calcGraph, displacements, k2);\n        this.calAttractive(calcGraph, displacements, k);\n    }\n    calRepulsive(calcGraph, displacements, k2) {\n        const nodes = calcGraph.getAllNodes();\n        nodes.forEach(({ data: v, id: vid }, i) => {\n            displacements[vid] = { x: 0, y: 0, z: 0 };\n            nodes.forEach(({ data: u, id: uid }, j) => {\n                if (i <= j ||\n                    !isNumber(v.x) ||\n                    !isNumber(u.x) ||\n                    !isNumber(v.y) ||\n                    !isNumber(u.y)) {\n                    return;\n                }\n                let vecX = v.x - u.x;\n                let vecY = v.y - u.y;\n                let vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n                let lengthSqr = vecX * vecX + vecY * vecY + vecZ * vecZ;\n                if (lengthSqr === 0) {\n                    lengthSqr = 1;\n                    vecX = 0.01;\n                    vecY = 0.01;\n                    vecZ = 0.01;\n                }\n                const common = k2 / lengthSqr;\n                const dispX = vecX * common;\n                const dispY = vecY * common;\n                const dispZ = vecZ * common;\n                displacements[vid].x += dispX;\n                displacements[vid].y += dispY;\n                displacements[uid].x -= dispX;\n                displacements[uid].y -= dispY;\n                if (this.options.dimensions === 3) {\n                    displacements[vid].z += dispZ;\n                    displacements[uid].z -= dispZ;\n                }\n            });\n        });\n    }\n    calAttractive(calcGraph, displacements, k) {\n        const edges = calcGraph.getAllEdges();\n        edges.forEach((e) => {\n            const { source, target } = e;\n            if (!source || !target || source === target) {\n                return;\n            }\n            const { data: u } = calcGraph.getNode(source);\n            const { data: v } = calcGraph.getNode(target);\n            if (!isNumber(v.x) ||\n                !isNumber(u.x) ||\n                !isNumber(v.y) ||\n                !isNumber(u.y)) {\n                return;\n            }\n            const vecX = v.x - u.x;\n            const vecY = v.y - u.y;\n            const vecZ = this.options.dimensions === 3 ? v.z - u.z : 0;\n            const common = Math.sqrt(vecX * vecX + vecY * vecY + vecZ * vecZ) / k;\n            const dispX = vecX * common;\n            const dispY = vecY * common;\n            const dispZ = vecZ * common;\n            displacements[source].x += dispX;\n            displacements[source].y += dispY;\n            displacements[target].x -= dispX;\n            displacements[target].y -= dispY;\n            if (this.options.dimensions === 3) {\n                displacements[source].z += dispZ;\n                displacements[target].z -= dispZ;\n            }\n        });\n    }\n}\n//# sourceMappingURL=fruchterman.js.map",null,"import { __awaiter } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport { cloneFormatData, formatNumberFn, formatSizeFn } from './util';\nimport { handleSingleNodeGraph } from './util/common';\nimport { parseSize } from './util/size';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    begin: [0, 0],\n    preventOverlap: true,\n    preventOverlapPadding: 10,\n    condense: false,\n    rows: undefined,\n    cols: undefined,\n    position: undefined,\n    sortBy: 'degree',\n    nodeSize: 30,\n    width: 300,\n    height: 300,\n};\n/**\n * <zh/> 网格布局\n *\n * <en/> Grid layout\n */\nexport class GridLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'grid';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericGridLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericGridLayout(true, graph, options);\n        });\n    }\n    genericGridLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { begin = [0, 0], condense, preventOverlapPadding, preventOverlap, rows: propsRows, cols: propsCols, nodeSpacing: paramNodeSpacing, nodeSize: paramNodeSize, width: propsWidth, height: propsHeight, position, } = mergedOptions;\n            let { sortBy } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const n = nodes === null || nodes === void 0 ? void 0 : nodes.length;\n            // Need no layout if there is no node.\n            if (!n || n === 1) {\n                return handleSingleNodeGraph(graph, assign, begin);\n            }\n            const layoutNodes = nodes.map((node) => cloneFormatData(node));\n            if (\n            // `id` should be reserved keyword\n            sortBy !== 'id' &&\n                (!isString(sortBy) || layoutNodes[0].data[sortBy] === undefined)) {\n                sortBy = 'degree';\n            }\n            if (sortBy === 'degree') {\n                layoutNodes.sort((n1, n2) => graph.getDegree(n2.id, 'both') - graph.getDegree(n1.id, 'both'));\n            }\n            else if (sortBy === 'id') {\n                // sort nodes by ID\n                layoutNodes.sort((n1, n2) => {\n                    if (isNumber(n2.id) && isNumber(n1.id)) {\n                        return n2.id - n1.id;\n                    }\n                    return `${n1.id}`.localeCompare(`${n2.id}`);\n                });\n            }\n            else {\n                // sort nodes by value\n                layoutNodes.sort((n1, n2) => n2.data[sortBy] - n1.data[sortBy]);\n            }\n            const width = !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n            const cells = n;\n            const rcs = { rows: propsRows, cols: propsCols };\n            // if rows or columns were set in self, use those values\n            if (propsRows != null && propsCols != null) {\n                rcs.rows = propsRows;\n                rcs.cols = propsCols;\n            }\n            else if (propsRows != null && propsCols == null) {\n                rcs.rows = propsRows;\n                rcs.cols = Math.ceil(cells / rcs.rows);\n            }\n            else if (propsRows == null && propsCols != null) {\n                rcs.cols = propsCols;\n                rcs.rows = Math.ceil(cells / rcs.cols);\n            }\n            else {\n                // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n                // width/height * splits^2 = cells where splits is number of times to split width\n                const splits = Math.sqrt((cells * height) / width);\n                rcs.rows = Math.round(splits);\n                rcs.cols = Math.round((width / height) * splits);\n            }\n            rcs.rows = Math.max(rcs.rows, 1);\n            rcs.cols = Math.max(rcs.cols, 1);\n            if (rcs.cols * rcs.rows > cells) {\n                // otherwise use the automatic values and adjust accordingly\n                // if rounding was up, see if we can reduce rows or columns\n                const sm = small(rcs);\n                const lg = large(rcs);\n                // reducing the small side takes away the most cells, so try it first\n                if ((sm - 1) * lg >= cells) {\n                    small(rcs, sm - 1);\n                }\n                else if ((lg - 1) * sm >= cells) {\n                    large(rcs, lg - 1);\n                }\n            }\n            else {\n                // if rounding was too low, add rows or columns\n                while (rcs.cols * rcs.rows < cells) {\n                    const sm = small(rcs);\n                    const lg = large(rcs);\n                    // try to add to larger side first (adds less in multiplication)\n                    if ((lg + 1) * sm >= cells) {\n                        large(rcs, lg + 1);\n                    }\n                    else {\n                        small(rcs, sm + 1);\n                    }\n                }\n            }\n            let cellWidth = condense ? 0 : width / rcs.cols;\n            let cellHeight = condense ? 0 : height / rcs.rows;\n            if (preventOverlap || paramNodeSpacing) {\n                const nodeSpacing = formatNumberFn(10, paramNodeSpacing);\n                const nodeSize = formatSizeFn(30, paramNodeSize, false);\n                layoutNodes.forEach((node) => {\n                    if (!node.data.x || !node.data.y) {\n                        // for bb\n                        node.data.x = 0;\n                        node.data.y = 0;\n                    }\n                    const oNode = graph.getNode(node.id);\n                    const [nodeW, nodeH] = parseSize(nodeSize(oNode) || 30);\n                    const p = nodeSpacing !== undefined ? nodeSpacing(node) : preventOverlapPadding;\n                    const w = nodeW + p;\n                    const h = nodeH + p;\n                    cellWidth = Math.max(cellWidth, w);\n                    cellHeight = Math.max(cellHeight, h);\n                });\n            }\n            const cellUsed = {}; // e.g. 'c-0-2' => true\n            // to keep track of current cell position\n            const rc = { row: 0, col: 0 };\n            // get a cache of all the manual positions\n            const id2manPos = {};\n            for (let i = 0; i < layoutNodes.length; i++) {\n                const node = layoutNodes[i];\n                let rcPos;\n                if (position) {\n                    // TODO: not sure the api name\n                    rcPos = position(graph.getNode(node.id));\n                }\n                if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n                    // must have at least row or col def'd\n                    const pos = {\n                        row: rcPos.row,\n                        col: rcPos.col,\n                    };\n                    if (pos.col === undefined) {\n                        // find unused col\n                        pos.col = 0;\n                        while (used(cellUsed, pos)) {\n                            pos.col++;\n                        }\n                    }\n                    else if (pos.row === undefined) {\n                        // find unused row\n                        pos.row = 0;\n                        while (used(cellUsed, pos)) {\n                            pos.row++;\n                        }\n                    }\n                    id2manPos[node.id] = pos;\n                    use(cellUsed, pos);\n                }\n                getPos(node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed);\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            if (assign) {\n                layoutNodes.forEach((node) => {\n                    graph.mergeNodeData(node.id, {\n                        x: node.data.x,\n                        y: node.data.y,\n                    });\n                });\n            }\n            return result;\n        });\n    }\n}\nconst small = (rcs, val) => {\n    let res;\n    const rows = rcs.rows || 5;\n    const cols = rcs.cols || 5;\n    if (val == null) {\n        res = Math.min(rows, cols);\n    }\n    else {\n        const min = Math.min(rows, cols);\n        if (min === rcs.rows) {\n            rcs.rows = val;\n        }\n        else {\n            rcs.cols = val;\n        }\n    }\n    return res;\n};\nconst large = (rcs, val) => {\n    let result;\n    const usedRows = rcs.rows || 5;\n    const usedCols = rcs.cols || 5;\n    if (val == null) {\n        result = Math.max(usedRows, usedCols);\n    }\n    else {\n        const max = Math.max(usedRows, usedCols);\n        if (max === rcs.rows) {\n            rcs.rows = val;\n        }\n        else {\n            rcs.cols = val;\n        }\n    }\n    return result;\n};\nconst used = (cellUsed, rc) => cellUsed[`c-${rc.row}-${rc.col}`] || false;\nconst use = (cellUsed, rc) => (cellUsed[`c-${rc.row}-${rc.col}`] = true);\nconst moveToNextCell = (rcs, rc) => {\n    const cols = rcs.cols || 5;\n    rc.col++;\n    if (rc.col >= cols) {\n        rc.col = 0;\n        rc.row++;\n    }\n};\nconst getPos = (node, begin, cellWidth, cellHeight, id2manPos, rcs, rc, cellUsed) => {\n    let x;\n    let y;\n    // see if we have a manual position set\n    const rcPos = id2manPos[node.id];\n    if (rcPos) {\n        x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n        y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    }\n    else {\n        // otherwise set automatically\n        while (used(cellUsed, rc)) {\n            moveToNextCell(rcs, rc);\n        }\n        x = rc.col * cellWidth + cellWidth / 2 + begin[0];\n        y = rc.row * cellHeight + cellHeight / 2 + begin[1];\n        use(cellUsed, rc);\n        moveToNextCell(rcs, rc);\n    }\n    node.data.x = x;\n    node.data.y = y;\n};\n//# sourceMappingURL=grid.js.map",null,"import { __awaiter } from \"tslib\";\nimport { isString } from '@antv/util';\nimport { cloneFormatData, floydWarshall, formatNodeSizeToNumber, getAdjMatrix, getEuclideanDistance, } from '../util';\nimport { handleSingleNodeGraph } from '../util/common';\nimport { mds } from './mds';\nimport { radialNonoverlapForce, } from './radial-nonoverlap-force';\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    maxIteration: 1000,\n    focusNode: null,\n    unitRadius: null,\n    linkDistance: 50,\n    preventOverlap: false,\n    strictRadial: true,\n    maxPreventOverlapIteration: 200,\n    sortStrength: 10,\n};\n/**\n * <zh/> 径向布局\n *\n * <en/> Radial layout\n */\nexport class RadialLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'radial';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericRadialLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericRadialLayout(true, graph, options);\n        });\n    }\n    genericRadialLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { width: propsWidth, height: propsHeight, center: propsCenter, focusNode: propsFocusNode, unitRadius: propsUnitRadius, nodeSize, nodeSpacing, strictRadial, preventOverlap, maxPreventOverlapIteration, sortBy, linkDistance = 50, sortStrength = 10, maxIteration = 1000, } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const edges = graph.getAllEdges();\n            const width = !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n            const center = (!propsCenter ? [width / 2, height / 2] : propsCenter);\n            if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length) || nodes.length === 1) {\n                return handleSingleNodeGraph(graph, assign, center);\n            }\n            let focusNode = nodes[0];\n            if (isString(propsFocusNode)) {\n                for (let i = 0; i < nodes.length; i++) {\n                    if (nodes[i].id === propsFocusNode) {\n                        focusNode = nodes[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                focusNode = propsFocusNode || nodes[0];\n            }\n            // the index of the focusNode in data\n            const focusIndex = getIndexById(nodes, focusNode.id);\n            // the graph-theoretic distance (shortest path distance) matrix\n            const adjMatrix = getAdjMatrix({ nodes, edges }, false);\n            const distances = floydWarshall(adjMatrix);\n            const maxDistance = maxToFocus(distances, focusIndex);\n            // replace first node in unconnected component to the circle at (maxDistance + 1)\n            handleInfinity(distances, focusIndex, maxDistance + 1);\n            // the shortest path distance from each node to focusNode\n            const focusNodeD = distances[focusIndex];\n            let semiWidth = width - center[0] > center[0] ? center[0] : width - center[0];\n            let semiHeight = height - center[1] > center[1] ? center[1] : height - center[1];\n            if (semiWidth === 0) {\n                semiWidth = width / 2;\n            }\n            if (semiHeight === 0) {\n                semiHeight = height / 2;\n            }\n            // the maxRadius of the graph\n            const maxRadius = Math.min(semiWidth, semiHeight);\n            const maxD = Math.max(...focusNodeD);\n            // the radius for each nodes away from focusNode\n            const radii = [];\n            const unitRadius = !propsUnitRadius ? maxRadius / maxD : propsUnitRadius;\n            focusNodeD.forEach((value, i) => {\n                radii[i] = value * unitRadius;\n            });\n            const idealDistances = eIdealDisMatrix(nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength);\n            // the weight matrix, Wij = 1 / dij^(-2)\n            const weights = getWeightMatrix(idealDistances);\n            // the initial positions from mds, move the graph to origin, centered at focusNode\n            const mdsResult = mds(linkDistance, idealDistances, linkDistance);\n            let positions = mdsResult.map(([x, y]) => ({\n                x: (isNaN(x) ? Math.random() * linkDistance : x) -\n                    mdsResult[focusIndex][0],\n                y: (isNaN(y) ? Math.random() * linkDistance : y) -\n                    mdsResult[focusIndex][1],\n            }));\n            this.run(maxIteration, positions, weights, idealDistances, radii, focusIndex);\n            let nodeSizeFunc;\n            // stagger the overlapped nodes\n            if (preventOverlap) {\n                nodeSizeFunc = formatNodeSizeToNumber(nodeSize, nodeSpacing);\n                const nonoverlapForceParams = {\n                    nodes,\n                    nodeSizeFunc,\n                    positions,\n                    radii,\n                    height,\n                    width,\n                    strictRadial: Boolean(strictRadial),\n                    focusIdx: focusIndex,\n                    iterations: maxPreventOverlapIteration || 200,\n                    k: positions.length / 4.5,\n                };\n                positions = radialNonoverlapForce(graph, nonoverlapForceParams);\n            }\n            // move the graph to center\n            const layoutNodes = [];\n            positions.forEach((p, i) => {\n                const cnode = cloneFormatData(nodes[i]);\n                cnode.data.x = p.x + center[0];\n                cnode.data.y = p.y + center[1];\n                layoutNodes.push(cnode);\n            });\n            if (assign) {\n                layoutNodes.forEach((node) => graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y,\n                }));\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges,\n            };\n            return result;\n        });\n    }\n    run(maxIteration, positions, weights, idealDistances, radii, focusIndex) {\n        for (let i = 0; i <= maxIteration; i++) {\n            const param = i / maxIteration;\n            this.oneIteration(param, positions, radii, idealDistances, weights, focusIndex);\n        }\n    }\n    oneIteration(param, positions, radii, distances, weights, focusIndex) {\n        const vparam = 1 - param;\n        positions.forEach((v, i) => {\n            // v\n            const originDis = getEuclideanDistance(v, { x: 0, y: 0 });\n            const reciODis = originDis === 0 ? 0 : 1 / originDis;\n            if (i === focusIndex) {\n                return;\n            }\n            let xMolecule = 0;\n            let yMolecule = 0;\n            let denominator = 0;\n            positions.forEach((u, j) => {\n                // u\n                if (i === j) {\n                    return;\n                }\n                // the euclidean distance between v and u\n                const edis = getEuclideanDistance(v, u);\n                const reciEdis = edis === 0 ? 0 : 1 / edis;\n                const idealDis = distances[j][i];\n                // same for x and y\n                denominator += weights[i][j];\n                // x\n                xMolecule += weights[i][j] * (u.x + idealDis * (v.x - u.x) * reciEdis);\n                // y\n                yMolecule += weights[i][j] * (u.y + idealDis * (v.y - u.y) * reciEdis);\n            });\n            const reciR = radii[i] === 0 ? 0 : 1 / radii[i];\n            denominator *= vparam;\n            denominator += param * reciR * reciR;\n            // x\n            xMolecule *= vparam;\n            xMolecule += param * reciR * v.x * reciODis;\n            v.x = xMolecule / denominator;\n            // y\n            yMolecule *= vparam;\n            yMolecule += param * reciR * v.y * reciODis;\n            v.y = yMolecule / denominator;\n        });\n    }\n}\nconst eIdealDisMatrix = (nodes, distances, linkDistance, radii, unitRadius, sortBy, sortStrength) => {\n    if (!nodes)\n        return [];\n    const result = [];\n    if (distances) {\n        // cache the value of field sortBy for nodes to avoid dupliate calculation\n        const sortValueCache = {};\n        distances.forEach((row, i) => {\n            const newRow = [];\n            row.forEach((v, j) => {\n                var _a, _b;\n                if (i === j) {\n                    newRow.push(0);\n                }\n                else if (radii[i] === radii[j]) {\n                    // i and j are on the same circle\n                    if (sortBy === 'data') {\n                        // sort the nodes on the same circle according to the ordering of the data\n                        newRow.push((v * (Math.abs(i - j) * sortStrength)) / (radii[i] / unitRadius));\n                    }\n                    else if (sortBy) {\n                        // sort the nodes on the same circle according to the attributes\n                        let iValue;\n                        let jValue;\n                        if (sortValueCache[nodes[i].id]) {\n                            iValue = sortValueCache[nodes[i].id];\n                        }\n                        else {\n                            const value = (sortBy === 'id'\n                                ? nodes[i].id\n                                : (_a = nodes[i].data) === null || _a === void 0 ? void 0 : _a[sortBy]) || 0;\n                            if (isString(value)) {\n                                iValue = value.charCodeAt(0);\n                            }\n                            else {\n                                iValue = value;\n                            }\n                            sortValueCache[nodes[i].id] = iValue;\n                        }\n                        if (sortValueCache[nodes[j].id]) {\n                            jValue = sortValueCache[nodes[j].id];\n                        }\n                        else {\n                            const value = (sortBy === 'id'\n                                ? nodes[j].id\n                                : (_b = nodes[j].data) === null || _b === void 0 ? void 0 : _b[sortBy]) || 0;\n                            if (isString(value)) {\n                                jValue = value.charCodeAt(0);\n                            }\n                            else {\n                                jValue = value;\n                            }\n                            sortValueCache[nodes[j].id] = jValue;\n                        }\n                        newRow.push((v * (Math.abs(iValue - jValue) * sortStrength)) /\n                            (radii[i] / unitRadius));\n                    }\n                    else {\n                        newRow.push((v * linkDistance) / (radii[i] / unitRadius));\n                    }\n                }\n                else {\n                    // i and j are on different circles\n                    const link = (linkDistance + unitRadius) / 2;\n                    newRow.push(v * link);\n                }\n            });\n            result.push(newRow);\n        });\n    }\n    return result;\n};\nconst getWeightMatrix = (idealDistances) => {\n    const rows = idealDistances.length;\n    const cols = idealDistances[0].length;\n    const result = [];\n    for (let i = 0; i < rows; i++) {\n        const row = [];\n        for (let j = 0; j < cols; j++) {\n            if (idealDistances[i][j] !== 0) {\n                row.push(1 / (idealDistances[i][j] * idealDistances[i][j]));\n            }\n            else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    return result;\n};\nconst getIndexById = (array, id) => {\n    let index = -1;\n    array.forEach((a, i) => {\n        if (a.id === id) {\n            index = i;\n        }\n    });\n    return Math.max(index, 0);\n};\nconst handleInfinity = (matrix, focusIndex, step) => {\n    const length = matrix.length;\n    // 遍历 matrix 中遍历 focus 对应行\n    for (let i = 0; i < length; i++) {\n        // matrix 关注点对应行的 Inf 项\n        if (matrix[focusIndex][i] === Infinity) {\n            matrix[focusIndex][i] = step;\n            matrix[i][focusIndex] = step;\n            // 遍历 matrix 中的 i 行，i 行中非 Inf 项若在 focus 行为 Inf，则替换 focus 行的那个 Inf\n            for (let j = 0; j < length; j++) {\n                if (matrix[i][j] !== Infinity && matrix[focusIndex][j] === Infinity) {\n                    matrix[focusIndex][j] = step + matrix[i][j];\n                    matrix[j][focusIndex] = step + matrix[i][j];\n                }\n            }\n        }\n    }\n    // 处理其他行的 Inf。根据该行对应点与 focus 距离以及 Inf 项点 与 focus 距离，决定替换值\n    for (let i = 0; i < length; i++) {\n        if (i === focusIndex) {\n            continue;\n        }\n        for (let j = 0; j < length; j++) {\n            if (matrix[i][j] === Infinity) {\n                let minus = Math.abs(matrix[focusIndex][i] - matrix[focusIndex][j]);\n                minus = minus === 0 ? 1 : minus;\n                matrix[i][j] = minus;\n            }\n        }\n    }\n};\nconst maxToFocus = (matrix, focusIndex) => {\n    let max = 0;\n    for (let i = 0; i < matrix[focusIndex].length; i++) {\n        if (matrix[focusIndex][i] === Infinity) {\n            continue;\n        }\n        max = matrix[focusIndex][i] > max ? matrix[focusIndex][i] : max;\n    }\n    return max;\n};\n//# sourceMappingURL=index.js.map",null,"import { Matrix as MLMatrix, SingularValueDecomposition } from 'ml-matrix';\nexport const mds = (dimension, distances, linkDistance) => {\n    try {\n        // square distances\n        const M = MLMatrix.mul(MLMatrix.pow(distances, 2), -0.5);\n        // double centre the rows/columns\n        const rowMeans = M.mean('row');\n        const colMeans = M.mean('column');\n        const totalMean = M.mean();\n        M.add(totalMean).subRowVector(rowMeans).subColumnVector(colMeans);\n        // take the SVD of the double centred matrix, and return the\n        // points from it\n        const ret = new SingularValueDecomposition(M);\n        const eigenValues = MLMatrix.sqrt(ret.diagonalMatrix).diagonal();\n        return ret.leftSingularVectors.toJSON().map((row) => {\n            return MLMatrix.mul([row], [eigenValues])\n                .toJSON()[0]\n                .splice(0, dimension);\n        });\n    }\n    catch (_a) {\n        const res = [];\n        for (let i = 0; i < distances.length; i++) {\n            const x = Math.random() * linkDistance;\n            const y = Math.random() * linkDistance;\n            res.push([x, y]);\n        }\n        return res;\n    }\n};\n//# sourceMappingURL=mds.js.map",null,"const SPEED_DIVISOR = 800;\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    iterations: 10,\n    height: 10,\n    width: 10,\n    speed: 100,\n    gravity: 10,\n    k: 5,\n};\nexport const radialNonoverlapForce = (graph, options) => {\n    const mergedOptions = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    const { positions, iterations, width, k, speed = 100, strictRadial, focusIdx, radii = [], nodeSizeFunc, } = mergedOptions;\n    const nodes = graph.getAllNodes();\n    const disp = [];\n    const maxDisplace = width / 10;\n    for (let i = 0; i < iterations; i++) {\n        positions.forEach((_, k) => {\n            disp[k] = { x: 0, y: 0 };\n        });\n        // 给重叠的节点增加斥力\n        getRepulsion(nodes, positions, disp, k, radii, nodeSizeFunc);\n        updatePositions(positions, disp, speed, strictRadial, focusIdx, maxDisplace, width, radii);\n    }\n    return positions;\n};\nconst getRepulsion = (nodes, positions, disp, k, radii, nodeSizeFunc) => {\n    positions.forEach((v, i) => {\n        disp[i] = { x: 0, y: 0 };\n        positions.forEach((u, j) => {\n            if (i === j) {\n                return;\n            }\n            // v and u are not on the same circle, return\n            if (radii[i] !== radii[j]) {\n                return;\n            }\n            let vecx = v.x - u.x;\n            let vecy = v.y - u.y;\n            let vecLength = Math.sqrt(vecx * vecx + vecy * vecy);\n            if (vecLength === 0) {\n                vecLength = 1;\n                const sign = i > j ? 1 : -1;\n                vecx = 0.01 * sign;\n                vecy = 0.01 * sign;\n            }\n            // these two nodes overlap\n            if (vecLength < nodeSizeFunc(nodes[i]) / 2 + nodeSizeFunc(nodes[j]) / 2) {\n                const common = (k * k) / vecLength;\n                disp[i].x += (vecx / vecLength) * common;\n                disp[i].y += (vecy / vecLength) * common;\n            }\n        });\n    });\n};\nconst updatePositions = (positions, disp, speed, strictRadial, focusIdx, maxDisplace, width, radii) => {\n    const maxDisp = maxDisplace || width / 10;\n    if (strictRadial) {\n        disp.forEach((di, i) => {\n            const vx = positions[i].x - positions[focusIdx].x;\n            const vy = positions[i].y - positions[focusIdx].y;\n            const vLength = Math.sqrt(vx * vx + vy * vy);\n            let vpx = vy / vLength;\n            let vpy = -vx / vLength;\n            const diLength = Math.sqrt(di.x * di.x + di.y * di.y);\n            let alpha = Math.acos((vpx * di.x + vpy * di.y) / diLength);\n            if (alpha > Math.PI / 2) {\n                alpha -= Math.PI / 2;\n                vpx *= -1;\n                vpy *= -1;\n            }\n            const tdispLength = Math.cos(alpha) * diLength;\n            di.x = vpx * tdispLength;\n            di.y = vpy * tdispLength;\n        });\n    }\n    // move\n    positions.forEach((n, i) => {\n        if (i === focusIdx) {\n            return;\n        }\n        const distLength = Math.sqrt(disp[i].x * disp[i].x + disp[i].y * disp[i].y);\n        if (distLength > 0 && i !== focusIdx) {\n            const limitedDist = Math.min(maxDisp * (speed / SPEED_DIVISOR), distLength);\n            n.x += (disp[i].x / distLength) * limitedDist;\n            n.y += (disp[i].y / distLength) * limitedDist;\n            if (strictRadial) {\n                let vx = n.x - positions[focusIdx].x;\n                let vy = n.y - positions[focusIdx].y;\n                const nfDis = Math.sqrt(vx * vx + vy * vy);\n                vx = (vx / nfDis) * radii[i];\n                vy = (vy / nfDis) * radii[i];\n                n.x = positions[focusIdx].x + vx;\n                n.y = positions[focusIdx].y + vy;\n            }\n        }\n    });\n    return positions;\n};\n//# sourceMappingURL=radial-nonoverlap-force.js.map",null,"import { __awaiter } from \"tslib\";\nconst DEFAULTS_LAYOUT_OPTIONS = {\n    center: [0, 0],\n    width: 300,\n    height: 300,\n};\n/**\n * <zh/> 随机布局\n *\n * <en/> Random layout\n */\nexport class RandomLayout {\n    constructor(options = {}) {\n        this.options = options;\n        this.id = 'random';\n        this.options = Object.assign(Object.assign({}, DEFAULTS_LAYOUT_OPTIONS), options);\n    }\n    /**\n     * Return the positions of nodes and edges(if needed).\n     */\n    execute(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.genericRandomLayout(false, graph, options);\n        });\n    }\n    /**\n     * To directly assign the positions to the nodes.\n     */\n    assign(graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.genericRandomLayout(true, graph, options);\n        });\n    }\n    genericRandomLayout(assign, graph, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mergedOptions = Object.assign(Object.assign({}, this.options), options);\n            const { center: propsCenter, width: propsWidth, height: propsHeight, } = mergedOptions;\n            const nodes = graph.getAllNodes();\n            const layoutScale = 0.9;\n            const width = !propsWidth && typeof window !== 'undefined'\n                ? window.innerWidth\n                : propsWidth;\n            const height = !propsHeight && typeof window !== 'undefined'\n                ? window.innerHeight\n                : propsHeight;\n            const center = !propsCenter\n                ? [width / 2, height / 2]\n                : propsCenter;\n            const layoutNodes = [];\n            if (nodes) {\n                nodes.forEach((node) => {\n                    layoutNodes.push({\n                        id: node.id,\n                        data: {\n                            x: (Math.random() - 0.5) * layoutScale * width + center[0],\n                            y: (Math.random() - 0.5) * layoutScale * height + center[1],\n                        },\n                    });\n                });\n            }\n            if (assign) {\n                layoutNodes.forEach((node) => graph.mergeNodeData(node.id, {\n                    x: node.data.x,\n                    y: node.data.y,\n                }));\n            }\n            const result = {\n                nodes: layoutNodes,\n                edges: graph.getAllEdges(),\n            };\n            return result;\n        });\n    }\n}\n//# sourceMappingURL=random.js.map",null],"names":["$7041f28448bd7176$var$currentLayout","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$4ce669c46e60ac46$export$1050f835b63b671e","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","adopt","then","apply","$28d316e2c4fea3a4$var$graphlib","window","graphlib","$c397w","Graph","json","alg","version","$dE3aD","$abbbdff860cc0ef5$var$Graph","opts","_isDirected","has","directed","_isMultigraph","multigraph","_isCompound","compound","_label","undefined","_defaultNodeLabelFn","constant","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","$abbbdff860cc0ef5$var$incrementOrInitEntry","map","k","$abbbdff860cc0ef5$var$decrementOrRemoveEntry","$abbbdff860cc0ef5$var$edgeArgsToId","isDirected","v_","w_","name","v","w","tmp","isUndefined","$abbbdff860cc0ef5$var$edgeObjToId","edgeObj","prototype","_nodeCount","_edgeCount","isMultigraph","isCompound","setGraph","label","graph","setDefaultNodeLabel","newDefault","isFunction","nodeCount","nodes","keys","sources","self","filter","isEmpty","sinks","setNodes","vs","args","arguments","each","length","setNode","node","hasNode","removeNode","removeEdge","_removeFromParentsChildList","children","child","setParent","parent","ancestor","predecessors","predsV","successors","sucsV","neighbors","preds","union","isLeaf","filterNodes","copy","constructor","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edgeCount","edges","values","setPath","reduce","valueSpecified","arg0","$abbbdff860cc0ef5$var$edgeArgsToObj","Object","freeze","hasEdge","inEdges","u","inV","outEdges","outV","nodeEdges","concat","$9ef17868adc3ead7$var$lodash","clone","isArray","size","transform","_","$kzaQ8","$abWak","$jqArt","$9isRA","$sviK3","$lwZY6","$l0BR0","$4qSSq","$fCZ0B","$ixbZL","$2viWo","$63iG1","$fMYcx","$kWuVO","$hcU9w","$fb83i","$6Lnro","$8yjfX","$kBTZK","$5M7nH","$fNGSJ","$j7Pgn","$6ngQz","$ef8f7c1e1e396ef4$var$argsTag","$ef8f7c1e1e396ef4$var$funcTag","$ef8f7c1e1e396ef4$var$objectTag","$ef8f7c1e1e396ef4$var$cloneableTags","$ef8f7c1e1e396ef4$var$baseClone","bitmask","customizer","key","object","stack","isDeep","isFlat","isFull","isArr","tag","isFunc","stacked","get","set","forEach","subValue","add","keysFunc","props","$nSdhU","$5e7qB","$lwBwT","$jkZPF","$kPppJ","$4ai1a","$76b80cf11a0f2b5c$var$Stack","entries","data","__data__","clear","$e0n50","$5hsQa","$5BwSU","$dSo0a","$al82B","$047c33bbac81ea74$var$ListCache","index","entry","$6Lgbm","$3d84e967a041191e$var$splice","$3d84e967a041191e$var$arrayProto","Array","splice","pop","$gJ8Nu","array","other","push","$krNFA","$hmXFj","pairs","$30861294fbf1d724$var$LARGE_ARRAY_SIZE","$ee2cdba6ed8fd054$var$Map","$4J8an","$24c2f","$8P65K","$jszNw","$iUDp4","$oJAWi","$18154a6d5586aeca$var$reIsHostCtor","$18154a6d5586aeca$var$objectProto","$18154a6d5586aeca$var$funcToString","$18154a6d5586aeca$var$funcProto","Function","toString","$18154a6d5586aeca$var$hasOwnProperty","hasOwnProperty","$18154a6d5586aeca$var$reIsNative","RegExp","replace","pattern","test","$fuLlh","$bx7XH","$cDy9R","$4cbWB","$b47e6184f4c9f4e2$var$symToStringTag","toStringTag","$022ab99c54b0f974$var$Symbol","$6c6tI","Symbol","$kXUyy","$4828e37eb1667bff$var$freeSelf","$4828e37eb1667bff$var$root","$f43530384b453fea$var$freeGlobal","$93339f9ed5fb3826$var$objectProto","$93339f9ed5fb3826$var$hasOwnProperty","$93339f9ed5fb3826$var$nativeObjectToString","$93339f9ed5fb3826$var$symToStringTag","isOwn","unmasked","$30e18c4f146c6604$var$nativeObjectToString","$30e18c4f146c6604$var$objectProto","type","uid","$byoEp","$dc4c05a43effb81f$var$maskSrcKey","exec","IE_PROTO","func","$8695fdceb6b3f4ed$var$coreJsData","$04a59c2ea517d01f$var$funcToString","$04a59c2ea517d01f$var$funcProto","$9wvKI","$bRsFs","$3gWGz","$jySyt","$6sETD","$ca52c60406ed3ce3$var$MapCache","$5no0Y","$i2PMW","$9GpTD","$dMNK2","$7OSfN","$kEYBO","$3ea1ba884f7746ce$var$Hash","$11stn","$0bebf8868a36a122$var$nativeCreate","$a09657b6c9450056$var$hasOwnProperty","$a09657b6c9450056$var$objectProto","$5b174996fcb05ff7$var$hasOwnProperty","$5b174996fcb05ff7$var$objectProto","$dFA1a","$c2ceU","iteratee","$hJTMd","$6c4c2f22cfddb999$var$hasOwnProperty","$6c4c2f22cfddb999$var$objectProto","objValue","$u8Dni","$05a980011bfd032f$var$defineProperty","$awXOT","source","isNew","newValue","$5j16r","$2FU6Q","$1AdOh","$gSPEM","$2bPgf","$lNCBD","$3562c","$3dcf951634f947a4$var$hasOwnProperty","$3dcf951634f947a4$var$objectProto","inherited","isArg","isBuff","isType","skipIndexes","String","n","$l732U","$ksPtD","$19845f3b98b3f7f2$var$objectProto","$19845f3b98b3f7f2$var$hasOwnProperty","$19845f3b98b3f7f2$var$propertyIsEnumerable","propertyIsEnumerable","$19845f3b98b3f7f2$var$isArguments","$4ec950be4909898e$var$isArray","$b4Yjw","freeExports","nodeType","freeModule","Buffer","moduleExports","nativeIsBuffer","isBuffer","$fdec1eef3a6e7c18$var$reIsUint","$1juqX","$f90Bo","$2t01p","$23e6850eb1f6811b$var$nodeIsTypedArray","isTypedArray","$23e6850eb1f6811b$var$isTypedArray","$4VGZv","$0f4f2c51759600f4$var$typedArrayTags","freeProcess","process","nodeUtil","types","require","binding","$5D2Yf","$3SSWJ","$1f2aef476e79e052$var$hasOwnProperty","$1f2aef476e79e052$var$objectProto","$010ec1a60c2212c5$var$objectProto","Ctor","$2d4109681b9673ed$var$nativeKeys","$02bSW","arg","$eWK3r","$dlhgd","$ae1a34ee63820b25$var$hasOwnProperty","$ae1a34ee63820b25$var$objectProto","isProto","allocUnsafe","buffer","slice","$75aoi","$DZS2r","$gBmnO","$52810f6c45656625$var$propertyIsEnumerable","$52810f6c45656625$var$objectProto","$52810f6c45656625$var$nativeGetSymbols","getOwnPropertySymbols","$52810f6c45656625$var$getSymbols","symbol","predicate","resIndex","$7WMrL","$1m8p8","$ir9nt","$5c9387bbb7816aca$var$getSymbolsIn","offset","$d6c205cf4a55ab3f$var$getPrototype","getPrototypeOf","$ln55n","symbolsFunc","$7SUY3","$7WNGP","$c4Q9m","$fMtOL","$b7ea0968e821dbcb$var$mapTag","$b7ea0968e821dbcb$var$promiseTag","$b7ea0968e821dbcb$var$setTag","$b7ea0968e821dbcb$var$weakMapTag","$b7ea0968e821dbcb$var$dataViewTag","$b7ea0968e821dbcb$var$dataViewCtorString","$b7ea0968e821dbcb$var$mapCtorString","$b7ea0968e821dbcb$var$promiseCtorString","$b7ea0968e821dbcb$var$setCtorString","$b7ea0968e821dbcb$var$weakMapCtorString","$b7ea0968e821dbcb$var$getTag","ArrayBuffer","ctorString","$5bd9c41d747d7a41$var$DataView","$5c947e88ddf097e0$var$Promise","$8cae4fa6500b3c0d$var$Set","$b7d277e2cca75970$var$WeakMap","$f3f137c902216681$var$hasOwnProperty","$f3f137c902216681$var$objectProto","input","$fcG3q","$6HB4o","$9m6Ai","$8uhQw","$3NUbh","$gP712","arrayBuffer","byteLength","$c3f6d9f6ae281964$var$Uint8Array","Uint8Array","dataView","byteOffset","$6cfb46a6de05aaa1$var$reFlags","regexp","lastIndex","$62def7ee15ea9bf6$var$symbolProto","$62def7ee15ea9bf6$var$symbolValueOf","valueOf","typedArray","$hV6rv","$d0bcc1eb6d508c59$var$objectCreate","create","$d0bcc1eb6d508c59$var$baseCreate","proto","$37t2C","$f012b2c72deb1244$var$nodeIsMap","isMap","$f012b2c72deb1244$var$isMap","$6YXMP","$b80cb20dfe61b605$var$nodeIsSet","isSet","$b80cb20dfe61b605$var$isSet","$2wHzT","$dgzF1","collection","$bOxbJ","$1d705f9446c9ea79$var$baseEach","$agmzx","$lWo9e","$ff91bf0b44aabb6d$var$baseFor","$9kvL4","fromRight","iterable","eachFunc","$1OIBO","$auydN","$91VgU","$hIvDM","$kQ1gz","$3J2jz","$xhuH3","$2eBWT","$8gtlO","matchData","$1AEGU","noCustomizer","srcValue","$0640a722fe1a5ae6$var$COMPARE_PARTIAL_FLAG","$chAvj","$1288b79dd1362898$var$baseIsEqual","$6ZeD2","$3EDcd","$4a2PS","$8f13638673771e84$var$argsTag","$8f13638673771e84$var$arrayTag","$8f13638673771e84$var$objectTag","$8f13638673771e84$var$hasOwnProperty","$8f13638673771e84$var$objectProto","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","$7UV5f","$28204","$6thNy","isPartial","arrLength","othLength","arrStacked","othStacked","seen","arrValue","othValue","compared","othIndex","$kcw1D","$5VfkT","$5c3a0af69952bf03$var$SetCache","cache","$cLJxa","$acQM1","$2a93830eab61f571$var$symbolProto","$2a93830eab61f571$var$symbolValueOf","message","convert","$307a4bb5e2cbc81f$var$hasOwnProperty","$307a4bb5e2cbc81f$var$objectProto","objProps","objLength","othProps","objStacked","skipCtor","objCtor","othCtor","$3OiOJ","$hu792","$byOzL","$dE0Np","$bILU9","path","$f2b9a57087e1d365$var$COMPARE_PARTIAL_FLAG","$cKBte","defaultValue","$jm9v1","$aNrd2","$9W9zf","$j04ie","$9eefa0d78952b95f$var$reIsDeepProp","$9eefa0d78952b95f$var$reIsPlainProp","$kHdHL","$7dc3962ae283ab12$var$rePropName","$7dc3962ae283ab12$var$reEscapeChar","$7dc3962ae283ab12$var$stringToPath","string","charCodeAt","match","number","quote","subString","$c8Nnd","$8d6c87e8e7838861$var$memoize","resolver","TypeError","memoized","Cache","$dM8DA","$4l7sD","$a07675429b0ed87e$var$INFINITY","$a07675429b0ed87e$var$symbolProto","$a07675429b0ed87e$var$symbolToString","$a07675429b0ed87e$var$baseToString","$8888f6a808eb0e14$var$INFINITY","$kQOKJ","$jptYe","hasFunc","$79aVJ","$hrnKg","$l4vpG","$f57256bb11b5b2af$var$hasOwnProperty","$f57256bb11b5b2af$var$objectProto","$61077e4affdce168$var$hasOwnProperty","$61077e4affdce168$var$objectProto","$aElIh","$2eQb6","$9sSmW","accumulator","initAccum","$7G2fC","$8etUN","$klJKL","$iqzji","$b5jGx","$ed09427566ef8743$var$asciiSize","$d6a60b8dc846a37e$var$reHasUnicode","$811f6e6660e323d4$var$rsAstralRange","$811f6e6660e323d4$var$rsCombo","$811f6e6660e323d4$var$rsFitz","$811f6e6660e323d4$var$rsNonAstral","$811f6e6660e323d4$var$rsRegional","$811f6e6660e323d4$var$rsSurrPair","$811f6e6660e323d4$var$reOptMod","$811f6e6660e323d4$var$rsModifier","$811f6e6660e323d4$var$rsOptVar","$811f6e6660e323d4$var$rsOptJoin","join","$811f6e6660e323d4$var$reUnicode","isArrLike","$5PH3S","$2WVBI","$2eV3d","$bK0EM","$adfe6e5d8181f932$var$union","arrays","$jfVlw","$43f31e49104db88d$var$baseFlatten","depth","isStrict","$e04be6ca01730077$var$spreadableSymbol","isConcatSpreadable","$dqf3K","$37GKK","start","$3W5k5","$9c5962941f2b869d$var$nativeMax","Math","max","otherArgs","$dLIsd","$2463306520d28a19$var$setToString","$9jbDA","$b9IkD","$a06225c996f4b897$var$baseSetToString","$6c6eea609b86201e$var$nativeNow","Date","now","count","lastCalled","stamp","remaining","$6c6eea609b86201e$var$HOT_SPAN","$f277b","$8ZF7f","$7gjXW","comparator","includes","isCommon","outer","computed","seenIndex","$030fg","$f8TvI","$8er12","$jHziP","fromIndex","$hzUgc","$549983d1a56609b3$var$createSet","$jRbvr","$eK8oE","write","g","options","nodeValue","edgeValue","read","components","dijkstra","dijkstraAll","findCycles","floydWarshall","isAcyclic","postorder","preorder","prim","tarjan","topsort","cmpt","visited","cmpts","dfs","$f2pjm","weightFn","edgeFn","$609985fa2aab41f8$var$runDijkstra","vEntry","results","pq","updateNeighbors","wEntry","weight","distance","predecessor","decrease","Number","POSITIVE_INFINITY","removeMin","$609985fa2aab41f8$var$DEFAULT_WEIGHT_FUNC","$af2aad3c37a2d705$var$PriorityQueue","_arr","_keyIndices","x","priority","min","keyIndices","arr","_decrease","_swap","_heapify","i","l","r","largest","j","origArrI","origArrJ","$8icgS","weightFunc","edgeFunc","acc","$2qJhE","onStack","lowlink","$5b7916b02e8f5e57$var$DEFAULT_WEIGHT_FUNC","d","rowK","rowI","ik","kj","ij","altDistance","$j1lry","CycleException","$dd8ebe871a4caa75$var$topsort","visit","$dd8ebe871a4caa75$var$CycleException","$l5l9v","order","navigation","bind","$f59a78ffcfedb05f$var$doDfs","pri","edgeWeight","$Zsaag","$gALro","$cd7Ze","$gMe1c","$2o807","$3054986badb7bc36$require$normalizeRanks","normalizeRanks","$8tz2F","$3054986badb7bc36$require$removeEmptyRanks","removeEmptyRanks","$16kgn","$jLtz5","$6YXm4","$jsxFr","$cYHD5","$3054986badb7bc36$require$Graph","$3vj6M","time","debugTiming","notime","layoutGraph","$3054986badb7bc36$var$canonicalize","inputGraph","merge","$3054986badb7bc36$var$graphDefaults","$3054986badb7bc36$var$selectNumberAttrs","$3054986badb7bc36$var$graphNumAttrs","pick","$3054986badb7bc36$var$graphAttrs","defaults","$3054986badb7bc36$var$nodeNumAttrs","$3054986badb7bc36$var$nodeDefaults","$3054986badb7bc36$var$edgeDefaults","$3054986badb7bc36$var$edgeNumAttrs","$3054986badb7bc36$var$edgeAttrs","ranksep","minlen","labelpos","toLowerCase","rankdir","width","labeloffset","height","selfEdges","run","asNonCompoundGraph","rank","addDummyNode","cleanup","maxRank","borderTop","minRank","borderBottom","dummy","labelRank","layers","buildLayerMatrix","layer","orderShift","selfEdge","adjust","selfNode","y","dx","dy","points","t","b","last","borderLeft","borderRight","abs","undo","$3054986badb7bc36$var$translateGraph","minX","maxX","minY","maxY","graphLabel","marginX","marginx","marginY","marginy","getExtremes","attrs","h","p","p1","p2","nodeV","nodeW","unshift","intersectRect","reversed","reverse","inputLabel","layoutLabel","edgesep","nodesep","obj","mapValues","newAttrs","$0b8b8b31932dc1d4$var$lodash","cloneDeep","find","flatten","forIn","minBy","range","sortBy","uniqueId","zipObject","$bf232277dc3e8e51$var$CLONE_DEEP_FLAG","$6DXVX","$d6285b031a2ca3df$var$objectProto","$d6285b031a2ca3df$var$hasOwnProperty","$d6285b031a2ca3df$var$defaults","guard","propsIndex","propsLength","$849a8d2cbef2fc9b$var$find","$6wHaX","findIndexFunc","$fBxK8","$3263d136fa2742b0$var$nativeMax","$dbLah","remainder","$1cUEk","$99a0e366acb3761e$var$INFINITY","sign","$1PiJ0","$0e12dad8b501fcab$var$NAN","$0e12dad8b501fcab$var$reIsBadHex","$0e12dad8b501fcab$var$reIsBinary","$0e12dad8b501fcab$var$reIsOctal","$0e12dad8b501fcab$var$freeParseInt","parseInt","isBinary","$abCj9","$15491443b586dd5d$var$reTrimStart","$76a8a59d44c96da0$var$reWhitespace","charAt","$hoJOA","$eQm2o","current","$dHpxK","$7ede807763a90f63$var$merge","$e9ipw","srcIndex","$7MZGu","$2gsyT","$lBht1","$9f931ae1acbd9a64$var$baseMerge","$gXcQ0","$c0GdO","mergeFunc","isTyped","$c57c1d5e12709d80$var$objectProto","$c57c1d5e12709d80$var$funcToString","$c57c1d5e12709d80$var$funcProto","$c57c1d5e12709d80$var$hasOwnProperty","$c57c1d5e12709d80$var$objectCtorString","assigner","$l8ksv","$iK3qQ","$ba32168b89409542$var$pick","$fPgAj","paths","$29t2n","$8SrgH","nested","$dLuFW","$54d4740bf8af0c83$var$range","$8iDWn","$bbHDs","end","$825291daed3e053c$var$nativeCeil","ceil","$825291daed3e053c$var$nativeMax","$c2mLX","$518c1a310f432661$var$sortBy","iteratees","$e8gxq","$icOnV","orders","comparer","sort","$8Zp98","objCriteria","criteria","othCriteria","ordersLength","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","$7d9dd3587c2b1799$var$idCounter","prefix","$jsOea","assignFunc","valsLength","$5GMPT","fas","acyclicer","forwardName","$4246c1c9eca47a09$require$Graph","$g08PX","fasGraph","maxIn","maxOut","buckets","zeroIdx","state","$4246c1c9eca47a09$var$DEFAULT_WEIGHT_FN","out","prevWeight","$4246c1c9eca47a09$var$assignBucket","$4246c1c9eca47a09$var$doGreedyFAS","dequeue","$4246c1c9eca47a09$var$removeNode","collectPredecessors","uEntry","enqueue","$ba63804a530e65f3$var$List","sentinel","_next","_prev","_sentinel","$ba63804a530e65f3$var$unlink","$ba63804a530e65f3$var$filterOutLinks","strs","curr","JSON","stringify","dummyChains","$8e3ce4e91573bffc$var$normalizeEdge","vRank","wRank","edgeLabel","origLabel","$1bd4077d40ad527f$require$Graph","$1bd4077d40ad527f$var$addDummyNode","$1bd4077d40ad527f$var$maxRank","simplify","simplified","simpleLabel","successorWeights","weightMap","sucs","predecessorWeights","rect","point","sx","sy","layering","delta","nodeRankFactor","addBorderNode","partition","fn","lhs","rhs","console","log","$c36c00c99f5855c1$var$longestPath","$dih8c","longestPath","$2gZew","$j10J1","ranker","$c36c00c99f5855c1$var$longestPathRanker","slack","$1a7c930c31aa3210$require$Graph","$1a7c930c31aa3210$require$slack","$1a7c930c31aa3210$var$tightTree","edgeV","$1a7c930c31aa3210$var$findMinSlackEdge","$1a7c930c31aa3210$var$shiftRanks","$dd7eac5002e584a9$require$slack","$dd7eac5002e584a9$require$initRank","$dd7eac5002e584a9$var$preorder","$dd7eac5002e584a9$var$postorder","$dd7eac5002e584a9$require$simplify","$dd7eac5002e584a9$var$networkSimplex","f","$dd7eac5002e584a9$var$initLowLimValues","$dd7eac5002e584a9$var$initCutValues","$dd7eac5002e584a9$var$leaveEdge","$dd7eac5002e584a9$var$enterEdge","$dd7eac5002e584a9$var$exchangeEdges","childLab","cutvalue","$dd7eac5002e584a9$var$calcCutValue","childIsTail","graphEdge","cutValue","isOutEdge","pointsToHead","otherWeight","tree","otherCutValue","root","$dd7eac5002e584a9$var$dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","$dd7eac5002e584a9$var$isDescendant","flipped","rootLabel","initLowLimValues","initCutValues","calcCutValue","leaveEdge","enterEdge","exchangeEdges","postorderNums","pathData","$62bc36c345cb8b1f$var$findPath","lca","vPath","wPath","pathIdx","pathV","ascending","depths","nodeSep","nestingRoot","$0cd611cc81de3f62$var$sumWeights","$0cd611cc81de3f62$var$dfs","top","bottom","childNode","childTop","childBottom","thisWeight","nestingEdge","$e6395714f4c7ebbf$var$addBorderNode","prop","sg","sgNode","prev","borderType","$5156635b098a1f64$var$swapWidthHeight","$5156635b098a1f64$var$swapWidthHeightOne","$5156635b098a1f64$var$reverseYOne","$5156635b098a1f64$var$swapXYOne","rankDir","$g2Xww","$fMlSg","$gGdHX","$k9Bjy","$5tdo0","$e2aabf7e75035512$require$Graph","$e2aabf7e75035512$var$buildLayerGraphs","ranks","relationship","$e2aabf7e75035512$var$assignOrder","downLayerGraphs","upLayerGraphs","best","bestCC","lastBest","$e2aabf7e75035512$var$sweepLayerGraphs","layerGraphs","biasRight","cg","lg","sorted","cc","simpleNodes","orderedVs","$b7cc4e7b70f93383$var$twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","weightSum","$ikoBy","$iemhI","$gn4d4","$c24b33af254cd91a$var$sortSubgraph","movable","bl","br","subgraphs","barycenters","subgraphResult","target","barycenter","blPred","brPred","nodeU","sum","mappedEntries","indegree","entryV","entryW","$d45ad2112b8384a4$var$doResolveConflicts","sourceSet","handleIn","merged","$d45ad2112b8384a4$var$mergeEntries","handleOut","$beb20f4d12854d48$var$consumeUnsortable","unsortable","bias","parts","sortable","vsIndex","$eac197c20b35ba6d$require$Graph","$eac197c20b35ba6d$var$createRootNode","rootPrev","prevChild","$972cee824597e309$require$positionX","$8Ibf3","positionX","rankSep","prevY","maxHeight","$657b273346bf5b18$require$Graph","$657b273346bf5b18$var$findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","$657b273346bf5b18$var$findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","$657b273346bf5b18$var$addConflict","$657b273346bf5b18$var$findType2Conflicts","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","conflictsV","$657b273346bf5b18$var$hasConflict","$657b273346bf5b18$var$verticalAlignment","neighborFn","align","prevIdx","ws","mp","floor","il","$657b273346bf5b18$var$horizontalCompaction","reverseSep","edgeSep","blockGraph","sepFn","xs","blockG","vRoot","uRoot","prevMax","iterate","setXsFunc","nextNodesFunc","elem","$657b273346bf5b18$var$findSmallestWidthAlignment","xss","NEGATIVE_INFINITY","halfWidth","$657b273346bf5b18$var$width","$657b273346bf5b18$var$alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","$657b273346bf5b18$var$balance","ul","ignore","adjustedLayering","inner","smallestWidth","findType1Conflicts","findType2Conflicts","addConflict","hasConflict","verticalAlignment","horizontalCompaction","alignCoordinates","findSmallestWidthAlignment","balance","$1787eeb151b11b97$require$Graph","debugOrdering","layerMatrix","style","SuppressedError","$aaeeac4e1ce28945$export$2e2bcd8739ae039","EventEmitter","_events","on","evt","callback","once","emit","_this","_i","events","wildcardEvents","doEmit","es","_a","off","length_1","getEvents","$6b3d8ad76db0a5af$export$35f2fded3a66c010","queue","navigator","shift","$6b3d8ad76db0a5af$export$c02af4b0c096197c","$960c856159ad6b26$var$defaultFilter","$960c856159ad6b26$export$6a7fe3ef90e8d566","nodeFilter","edgeFilter","cacheEnabled","inEdgesMap","Map","outEdgesMap","bothEdgesMap","allNodesMap","allEdgesMap","getEdgeDetail","startAutoCache","clearCache","refreshCache","updateCache","getAllNodes","involvedNodeIds","involvedEdgeIds","Set","oldEdgesSet","getRelatedEdges","bothEdges","from","getNode","delete","getEdge","handleGraphChanged","stopAutoCache","event","changes","change","propertyName","oldValue","checkNodeExistence","areNeighbors","firstNodeId","secondNodeId","getNeighbors","some","neighbor","direction","getDegree","getSuccessors","getPredecessors","hasTreeStructure","treeKey","getRoots","getChildren","getParent","getAllEdges","bfs","in","both","$49867c5a46937b53$export$614db49f3febe941","nodeMap","edgeMap","treeIndices","batchCount","onChanged","addNodes","addEdges","addTree","batch","commit","reduceChanges","mergedChanges","isNewlyAdded","pastChange","sameId","nodeId","findIndex","existingChange","newParentId","doAddNode","childrenMap","addNode","doRemoveNode","doRemoveEdge","parentMap","removeNodes","idList","updateNodeDataProperty","mergeNodeData","patch","updateNodeData","update","checkEdgeExistence","doAddEdge","bothEdgesOfSource","bothEdgesOfTarget","addEdge","removeEdges","updateEdgeSource","oldSource","updateEdgeTarget","oldTarget","updateEdgeDataProperty","updateEdgeData","mergeEdgeData","checkTreeExistence","attachTreeStructure","detachTreeStructure","getAncestors","ancestors","oldParent","newParent","oldParentId","dfsTree","bfsTree","newGraph","oldNode","oldEdge","oldParentMap","oldChildrenMap","toJSON","createView","$9d65ffd50b68f22a$export$be5234c0b764b6e0","$9d65ffd50b68f22a$export$39fb953702b7fcd7","$9d65ffd50b68f22a$export$89981d4b8d9f48aa","$9d65ffd50b68f22a$export$ddc31dfe7c269837","$9d65ffd50b68f22a$var$throwMarker","$9d65ffd50b68f22a$var$isObject","val","$9d65ffd50b68f22a$export$ab8f1c00731ee83e","canHandle","serialize","port1","port2","MessageChannel","$9d65ffd50b68f22a$export$9b7f6e342a8cbd38","deserialize","port","$9d65ffd50b68f22a$export$4997ffc0176396a6","ep","pendingListeners","addEventListener","ev","$9d65ffd50b68f22a$var$createProxy","isProxyReleased","proxy","Proxy","_target","$9d65ffd50b68f22a$var$throwIfProxyReleased","$9d65ffd50b68f22a$var$proxyFinalizers","unregister","$9d65ffd50b68f22a$var$releaseEndpoint","$9d65ffd50b68f22a$var$requestResponseMessage","$9d65ffd50b68f22a$var$fromWireValue","rawValue","transferables","$9d65ffd50b68f22a$var$toWireValue","_thisArg","rawArgumentList","argumentList","$9d65ffd50b68f22a$var$processArguments","construct","$9d65ffd50b68f22a$var$registerProxy","newCount","$9d65ffd50b68f22a$var$proxyCounter","isError","serialized","assign","allowedOrigins","returnValue","$9d65ffd50b68f22a$var$isAllowedOrigin","origin","allowedOrigin","warn","transfers","$9d65ffd50b68f22a$var$transferCache","catch","wireValue","postMessage","removeEventListener","$9d65ffd50b68f22a$var$closeEndPoint","error","endpoint","close","isReleased","WeakMap","FinalizationRegistry","processed","handler","serializedValue","msg","fill","random","MAX_SAFE_INTEGER","$9cadcb45972fb445$export$2e2bcd8739ae039","$a56a813b584c158d$var$filterOutLinks","$a56a813b584c158d$var$unlink","$a56a813b584c158d$export$2e2bcd8739ae039","shortcut","$50166dbcebed5312$var$List","$50166dbcebed5312$var$DEFAULT_WEIGHT_FN","$50166dbcebed5312$export$b96a088aeac42554","$50166dbcebed5312$var$buildState","$50166dbcebed5312$var$doGreedyFAS","flat","$50166dbcebed5312$var$removeNode","_b","$50166dbcebed5312$var$assignBucket","rangeMax","$a9f4156122401558$export$889ea624f2cb2c57","$a9f4156122401558$var$dfsFAS","$a9f4156122401558$export$21f930c44940fd98","$10a62036c6f8d4c5$var$safeSort","valueA","valueB","$10a62036c6f8d4c5$export$ecf34c2268abf7a0","$10a62036c6f8d4c5$export$798b53621063651","$10a62036c6f8d4c5$export$556dc3686e4a2bd5","$10a62036c6f8d4c5$export$918056458ccab0","$10a62036c6f8d4c5$export$4a227323f5de0b79","$10a62036c6f8d4c5$export$aca89c9d4c6bb8ae","layeringNodes","rankMax","$10a62036c6f8d4c5$export$978bfc7f0ad7d28e","va","vb","$10a62036c6f8d4c5$export$5747adf39cbd8007","Infinity","$10a62036c6f8d4c5$export$45a0c732a9a44b01","$10a62036c6f8d4c5$export$6589834e22e3d497","$10a62036c6f8d4c5$export$b29f828819edca8d","$10a62036c6f8d4c5$export$8c826aa0fa59ac68","a","valA","$10a62036c6f8d4c5$var$doDFS","$10a62036c6f8d4c5$export$51b654aff22fc5a6","$7f8e6bb2288f5f8b$export$9a52541ba49edb51","$7f8e6bb2288f5f8b$var$addBorderNode","$0335f3b7cf097843$export$2c0e788bcc82013","rd","$0335f3b7cf097843$var$swapWidthHeight","$0335f3b7cf097843$export$21f930c44940fd98","$0335f3b7cf097843$var$reverseY","$0335f3b7cf097843$var$swapXY","$0335f3b7cf097843$var$swapWidthHeightOne","$0335f3b7cf097843$var$reverseYOne","$0335f3b7cf097843$var$swapXYOne","$b171da702b6df92a$export$889ea624f2cb2c57","$b171da702b6df92a$var$treeDepths","maxDepth","$b171da702b6df92a$var$sumWeights","$b171da702b6df92a$var$dfs","$b171da702b6df92a$export$de863c629cb9919d","$f9e327107fa56550$var$DUMMY_NODE_EDGE_LABEL","$f9e327107fa56550$export$889ea624f2cb2c57","$f9e327107fa56550$var$normalizeEdge","nodeData","originalEdge","$f9e327107fa56550$export$21f930c44940fd98","currentV","$fca728a03c30d69f$export$2e2bcd8739ae039","$e6fbce6f7b4fd252$var$clone","rst","$0b54d47d35faf7ff$export$def0b5ae5036962c","$a1babae24a587fa7$export$eeb2d75ed1ad428","$a1babae24a587fa7$var$createRootNode","$9f2c76ba88d20d06$var$twoLayerCrossCount","unflat","unsort","$9f2c76ba88d20d06$export$4487b4ec3754a783","$43e929ed0789eb2b$export$a68885affb54ae0d","fixOrderNodes","beforeSort","fixorder","isNaN","$50afe3eed0704582$export$d54b347d68b9b5f6","$b5135247d7b926d4$var$doResolveConflicts","$b5135247d7b926d4$var$mergeEntries","filtered","picked","$b5135247d7b926d4$export$2e2bcd8739ae039","_c","$7513a7c087597837$export$97db5808d8f88186","usePrev","keepNodeOrder","hasFixOrder","$7513a7c087597837$var$compareWithBias","$7513a7c087597837$var$consumeUnsortable","iindex","$7dfdf35c149298b9$export$734a84c77ae2f1e","_d","$7dfdf35c149298b9$var$mergeBarycenters","$7dfdf35c149298b9$var$expandSubgraphs","vss","$a5dcf47086ff4819$export$aaaeab0fac9a3ccb","mxRank","range1","range2","$a5dcf47086ff4819$var$buildLayerGraphs","$a5dcf47086ff4819$var$assignOrder","$a5dcf47086ff4819$var$sweepLayerGraphs","lnode","$579587ea8e36cbfa$export$5eded36975f147bd","nodeOrder","$9141d8e8c2a8fdc0$var$dfsBothOrder","$9141d8e8c2a8fdc0$var$findPath","$9141d8e8c2a8fdc0$export$f30289267ab03372","startV","$a75ba29232d6f7f6$export$a2336058547dd16b","$a75ba29232d6f7f6$export$3c5c9b7b489ac6ee","$a75ba29232d6f7f6$export$d6a30e6c78fac74","$a75ba29232d6f7f6$export$f384d2f2a62cea4b","scanIfNeeded","params","scanCache","cacheKey","scanned","vv","ww","$a75ba29232d6f7f6$export$76734886d09d2999","$a75ba29232d6f7f6$export$983b95e2e3722091","$a75ba29232d6f7f6$export$40e1a979a22b42db","$a75ba29232d6f7f6$export$1c98a49158fa9de5","$a75ba29232d6f7f6$export$5aee1a5bd9743d8f","$a75ba29232d6f7f6$export$870d8cbd39818c9","$a75ba29232d6f7f6$export$7e3df82ee760448c","$a75ba29232d6f7f6$export$13efda6d80c8a88","$6e343856ddbefab2$var$positionY","$6e343856ddbefab2$var$positionX","graphAlign","xsKey","$6e343856ddbefab2$export$5880b8b5730aff45","ng","$3799158e00fecef4$export$cebe150c9dd2da2e","$3799158e00fecef4$export$837d78d6ca62db5a","forwardVisited","dfsForward","nextRank","currRank","$3799158e00fecef4$export$3748e8b0e9529e9c","$81492305c54c425a$export$1d03f990b5f20c77","$81492305c54c425a$var$tightTree","$81492305c54c425a$var$findMinSlackEdge","$81492305c54c425a$var$shiftRanks","$81492305c54c425a$export$1db489075cbdd4","$81492305c54c425a$var$tightTreeWithLayer","tn","$63a436eb07084564$export$fb928ed1fa9faa94","og","$63a436eb07084564$export$cd95219fca51d6fa","$63a436eb07084564$export$124e51299b9d9c89","$63a436eb07084564$export$43036cc3e8211896","$63a436eb07084564$export$7df03ef35ad8e1f8","$63a436eb07084564$export$f29e43b66b35aab7","$63a436eb07084564$var$assignCutValue","$63a436eb07084564$export$36e827898034dd48","$63a436eb07084564$var$isTreeEdge","$63a436eb07084564$var$dfsAssignLowLim","useNextLim","$63a436eb07084564$var$isDescendant","existed","$63a436eb07084564$var$updateRanks","$ada4a0ee058866d6$export$fbc8bcd33b574fbc","$ada4a0ee058866d6$var$networkSimplexRanker","$ada4a0ee058866d6$var$tightTreeRanker","$ada4a0ee058866d6$var$longestPathRanker","$605cbe9b1d3a694f$export$b3219800bda33a1f","dimension","edgeLabelSpace","prevGraph","$605cbe9b1d3a694f$var$inheritOrder","$605cbe9b1d3a694f$var$buildLayoutGraph","$605cbe9b1d3a694f$var$makeSpaceForEdgeLabels","$605cbe9b1d3a694f$var$runLayout","$605cbe9b1d3a694f$var$updateInputGraph","$605cbe9b1d3a694f$var$removeSelfEdges","$605cbe9b1d3a694f$var$injectEdgeLabelProxies","$605cbe9b1d3a694f$var$assignRankMinMax","$605cbe9b1d3a694f$var$removeEdgeLabelProxies","$605cbe9b1d3a694f$var$insertSelfEdges","$605cbe9b1d3a694f$var$positionSelfEdges","$605cbe9b1d3a694f$var$removeBorderNodes","$605cbe9b1d3a694f$var$fixupEdgeLabelCoords","$605cbe9b1d3a694f$var$translateGraph","$605cbe9b1d3a694f$var$assignNodeIntersects","$605cbe9b1d3a694f$var$reversePointsForReversedEdges","currG","prevG","prevNode","_order","_rank","$605cbe9b1d3a694f$var$nodeNumAttrs","$605cbe9b1d3a694f$var$nodeDefaults","$605cbe9b1d3a694f$var$edgeNumAttrs","$605cbe9b1d3a694f$var$edgeDefaults","$605cbe9b1d3a694f$var$edgeAttrs","$605cbe9b1d3a694f$var$canonicalize","defaultAttrs","$605cbe9b1d3a694f$var$selectNumberAttrs","pickedProperties","$9db318b25eeb9fa0$export$9cd59f9826255e47","getTime","cp","$9db318b25eeb9fa0$export$8630667bbca04569","initRange","cloned","$60dead5513d90bd9$export$2e2bcd8739ae039","$93c5c1f45dc66437$export$2e2bcd8739ae039","$42c5e25589525d06$export$880c59a0ae1158a1","z","$0a789d93f195d394$export$54ea943624daf252","$0a789d93f195d394$export$dbd46949b4b9980d","resultIsNumber","$0a789d93f195d394$export$3a7a80b0f3334abe","nodeSize","nodeSpacing","defaultNodeSize","nodeSizeFunc","nodeSpacingFunc","bboxSize","dataSize","$df440d22cac5c475$var$DEFAULTS_LAYOUT_OPTIONS","controlPoints","radial","focusNode","$df440d22cac5c475$var$getControlPoints","sourceNode","targetNode","layerCoordsArr","isHorizontal","isDifferentLayer","filterControlPointsOutOfBoundary","sourceX","sourceY","targetX","targetY","sourceLayer","indexOf","sourceNextLayerCoord","firstControlPoint","insertStartControlPoint","targetLayer","layerDiff","targetLastLayerCoord","lastControlPoints","insertEndControlPoint","$dd5b35eb4e609074$export$3f5334baeb17ae93","center","$aa34fcd309b753d3$var$DEFAULTS_LAYOUT_OPTIONS","radius","startRadius","endRadius","startAngle","endAngle","PI","clockwise","divisions","ordering","angleRatio","$aa34fcd309b753d3$var$topologyOrdering","orderedCNodes","pickFlags","foundChild","ii","$aa34fcd309b753d3$var$calculateCenter","calculatedWidth","calculatedHeight","calculatedCenter","innerWidth","innerHeight","$7545a33aa1e40079$export$2e2bcd8739ae039","$6ba9229e0ed76d17$export$43bee75e5e14138e","$960ff972045b2e6c$var$DEFAULTS_LAYOUT_OPTIONS","preventOverlap","sweep","equidistant","maxLevelDiff","$960ff972045b2e6c$export$9347783c4f7c1005","execute","genericConcentricLayout","maxNodeSize","propsCenter","propsWidth","propsHeight","propsSortBy","propsMaxLevelDiff","propsSweep","layoutNodes","maxNodeSpacing","currentSize","cnode","nodeIdxMap","n1","n2","maxValueNode","levels","currentLevel","diff","minDist","firstLvlHasMulti","rStep","maxR","level","dTheta","dcos","cos","dsin","sin","sqrt","rDeltaMax","rr","rDelta","theta","$83939962230503a0$var$add","xm","ym","xp","yp","right","_root","leaf","x0","_x0","y0","_y0","x1","_x1","y1","_y1","_x","_y","$90d47b8ce333b8e5$export$2e2bcd8739ae039","$68d6e2e34d4d6fcf$export$e6fafc98131d2a44","$ad79df58142e57c2$export$6f0a21aeb844a64c","$931875583ffa81b8$export$2e2bcd8739ae039","$931875583ffa81b8$var$Quadtree","NaN","addAll","$931875583ffa81b8$var$leaf_copy","$931875583ffa81b8$var$treeProto","$f4cec970825c3c67$var$add","zm","zp","deep","z0","_z0","z1","_z1","_z","$2220a65d06df47aa$export$2e2bcd8739ae039","$47f5bc969651f9c3$export$e6fafc98131d2a44","$d575502cd4a3de1f$export$6f0a21aeb844a64c","$13352fc31f4f860f$export$f56e419c070182d8","$9431a2c1ce26e0cb$export$2e2bcd8739ae039","$9431a2c1ce26e0cb$var$Octree","$9431a2c1ce26e0cb$var$leaf_copy","cover","xz","yz","extent","x2","y2","q","x3","y3","quads","d2","remove","retainer","previous","removeAll","visitAfter","$9431a2c1ce26e0cb$var$treeProto","$b6856b13833883c2$var$accumulate","treeNode","accWeight","accX","accY","accZ","accSize","numChildren","Float64Array","zz","z2","z3","octs","dz","$b6856b13833883c2$var$apply","arg1","arg2","arg3","dimensions","len2","len3","len1","param","vx","vy","vz","$92cd346d3bd9f938$var$DEFAULTS_LAYOUT_OPTIONS","maxIteration","gravity","factor","edgeStrength","nodeStrength","coulombDisScale","damping","maxSpeed","minMovement","interval","linkDistance","clusterNodeStrength","distanceThresholdMode","$92cd346d3bd9f938$export$9a500154086f6247","timeInterval","judgingDistance","running","genericForceLayout","stop","clearInterval","tick","iterations","lastResult","lastOptions","runOneStep","lastCalcGraph","lastGraph","lastVelMap","updatePosition","lastLayoutNodes","lastLayoutEdges","lastAssign","mergedOptions","formattedOptions","formatOptions","getMass","mass","layoutEdges","velMap","calcGraph","formatCentripetal","onTick","iter","setInterval","$92cd346d3bd9f938$var$formatOutNodes","massWeight","degree","linkDistanceFn","sameTypeLeafMap","clusters","centripetalOptions","leafCluster","clustering","nodeClusterBy","calcNodes","basicCentripetal","single","others","$92cd346d3bd9f938$var$getSameTypeLeafMap","siblingLeaves","sameTypeLeaves","centerPos","$92cd346d3bd9f938$var$getAvgNodePosition","centerInfo","item","cluster","sameTypeNodes","accMap","calcEdges","monitor","calRepulsive","calAttractive","calGravity","updateVelocity","energy","calTotalEnergy","coulombDisScale2","weightParam","calcNode","$b6856b13833883c2$var$computeForce","vecX","vecY","vecZ","vecLength","direX","direY","direZ","massSource","massTarget","sourceMassRatio","targetMassRatio","disX","disY","disZ","getCenter","defaultGravity","inDegree","outDegree","forceCenter","centerX","centerY","strength","centriCenter","centriX","centriY","centriZ","centerStrength","singleStrength","leafStrength","othersStrength","vLength","param2","fx","fy","fz","distX","distY","distZ","distanceMagnitude","$92cd346d3bd9f938$var$getCoreNodeAndSiblingLeaves","coreNode","$92cd346d3bd9f938$var$getSameTypeNodes","relativeNodes","typeName","totalNodes","$2de0c695164809c4$var$toString","$2de0c695164809c4$export$b587624c098d7880","endsWith","$0baf16655112703d$export$2e2bcd8739ae039","output","currentMin","_options$fromIndex","_options$toIndex","toIndex","isInteger","minValue","currentMax","maxValue","RangeError","_options$min","autoMinMax","_options$max","$32acbc006b852959$var$indent","repeat","$32acbc006b852959$var$indentData","$32acbc006b852959$export$66f7e3f9359f0f9e","matrix","maxRows","maxColumns","maxNumSize","padMinus","$32acbc006b852959$var$inspectData","rows","columns","maxI","maxJ","loop","line","num","$32acbc006b852959$var$formatNumber2","padEnd","len","str","fix","toFixed","startsWith","exp","toExponential","$da7aaf9942a3acc4$export$1c43f07899a70228","$da7aaf9942a3acc4$export$9f3f99fd4fb91358","$da7aaf9942a3acc4$export$af0312fee396fd93","vector","to1DArray","$da7aaf9942a3acc4$export$d13fb0648ea9f6c7","$da7aaf9942a3acc4$export$da114b648d798864","startRow","endRow","startColumn","endColumn","$da7aaf9942a3acc4$var$checkNumber","$da7aaf9942a3acc4$export$9ffbd50e3873ea06","$da7aaf9942a3acc4$export$f0dd04159b94e070","$d20607c8c82d3b0f$export$4b275fa73feb14fa","from1DArray","newRows","newColumns","newData","newMatrix","$d20607c8c82d3b0f$export$2e2bcd8739ae039","row","column","rowVector","columnVector","zeros","ones","rand","randInt","round","eye","diag","matrix1","matrix2","checkMatrix","isMatrix","klass","to2DArray","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isDistance","isEchelonForm","previousColumn","checked","isReducedEchelonForm","echelonForm","iMax","swapRows","reducedEchelonForm","m","maxRow","pivot","setSubMatrix","neg","mulS","getRow","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","by","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","dot","cumulativeSum","vector2","vector1","mmul","Bcolj","s","mpow","scalar","bb","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","mmulStrassen","r1","c1","r2","c2","embed","mat","cols","c","resultat","blockMult","halfRows","halfCols","subMatrix","sub","c11","c12","c21","c22","scaleRows","isFinite","scaleColumns","flipRows","middle","first","flipColumns","kroneckerProduct","kroneckerSum","AxI","IxB","transpose","sortRows","compareFunction","$d20607c8c82d3b0f$var$compareNumbers","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","rowIndices","columnIndices","rowIndex","columnIndex","trace","to","product","mean","variance","unbiased","sum1","sum2","standardDeviation","scale","divider","iterator","col","for","randomInt","diagonal","identity","negate","tensorProduct","nRows","nColumns","arrayData","every","element","removeRow","addRow","removeColumn","newRow","addColumn","AbstractMatrix","addS","addM","Matrix","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cosh","expm1","fround","log1p","log10","log2","sinh","tan","tanh","trunc","pow","powS","powM","$11b776c954f0aef0$export$2e2bcd8739ae039","$fde1c2dcebdd06e9$export$39cf33a0d758f8b4","$ce73bb3df5d80b5b$export$2e2bcd8739ae039","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","alpha","MIN_VALUE","ks","cs","sn","sp","spm1","epm1","sk","ek","solve","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","X","ucols","Y","condition","norm2","tol","leftSingularVectors","diagonalMatrix","$e4d865a10babc9da$export$fbbf4bd85aaff6bd","adjMatrix","dist","$e4d865a10babc9da$export$b7dd8b2289c43065","sIndex","tIndex","$e4d865a10babc9da$export$f89d8f511263c5b","ratio","$e4d865a10babc9da$export$4d7b865a5fd254d3","halfSize","left","$e4d865a10babc9da$export$58ff206e6557f2f0","$e4d865a10babc9da$export$6c2da045c9b1be36","mode","stopFns","stopBranchFn","stopAllFn","$b3ade54c9d7b6e23$var$DEFAULTS_LAYOUT_OPTIONS","$b3ade54c9d7b6e23$export$6b075c289f9d9aa8","genericMDSLayout","distances","$b3ade54c9d7b6e23$var$handleInfinity","positions","$b3ade54c9d7b6e23$var$runMDS","maxDistance","M","rowMeans","colMeans","totalMean","ret","eigenValues","$5c9f98f9b91eed31$export$6db3e338b9f8fea2","layout","$ec66f2af978f3a33$var$FORCE_LAYOUT_TYPE_MAP","gForce","force2","d3force","fruchterman","forceAtlas2","force","$ec66f2af978f3a33$var$DEFAULTS_LAYOUT_OPTIONS","comboPadding","$ec66f2af978f3a33$var$executeLayout","$e9ee084a8ef3e04c$var$toString","$fc5e4ee51ccb3ebf$export$2e2bcd8739ae039","$15db18227e015d3e$export$2e2bcd8739ae039","$15db18227e015d3e$var$_deepMix","src","maxLevel","$15db18227e015d3e$var$hasOwn","property","hasOwn","$6b58deacb9cbb42a$export$2e2bcd8739ae039","elements","$8decd245a1872fb9$var$hasOwnProperty","$8decd245a1872fb9$export$2e2bcd8739ae039","$a2f2fe6e26446039$export$2e2bcd8739ae039","initialize","$3cc5547f90c3d791$export$2e2bcd8739ae039","$6b4de4abbd0b0ab1$export$2e2bcd8739ae039","$8943c4e559031338$var$x","$8943c4e559031338$var$y","$8943c4e559031338$export$2e2bcd8739ae039","radii","xi","yi","ri","ri2","prepare","quad","rj","_random","$fe54ec893d8aca5a$var$index","$fe54ec893d8aca5a$var$find","nodeById","$fe54ec893d8aca5a$export$2e2bcd8739ae039","links","strengths","link","initializeStrength","initializeDistance","$5f4629e300d5fac4$var$noop","$5f4629e300d5fac4$var$dispatch","$5f4629e300d5fac4$var$Dispatch","$5f4629e300d5fac4$var$set","typename","T","typenames","trim","split","$5f4629e300d5fac4$var$get","that","$983ef41e0479cc7a$var$taskHead","$983ef41e0479cc7a$var$taskTail","$983ef41e0479cc7a$var$frame","$983ef41e0479cc7a$var$timeout","$983ef41e0479cc7a$var$interval","$983ef41e0479cc7a$var$clockLast","$983ef41e0479cc7a$var$clockNow","$983ef41e0479cc7a$var$clockSkew","$983ef41e0479cc7a$var$clock","performance","$983ef41e0479cc7a$var$setFrame","requestAnimationFrame","setTimeout","$983ef41e0479cc7a$export$461939dd4422153","$983ef41e0479cc7a$var$clearNow","$983ef41e0479cc7a$export$c57e9b2d8b9e4de","_call","_time","$983ef41e0479cc7a$export$9dc4ecf953986f04","delay","restart","$983ef41e0479cc7a$var$wake","$983ef41e0479cc7a$export$d60154c1d7f3990e","$983ef41e0479cc7a$var$nap","t0","t2","t1","$983ef41e0479cc7a$var$sleep","$983ef41e0479cc7a$var$poke","clearTimeout","$3c51ee1f934d4bfb$export$d141bba7fdc215a3","$3c51ee1f934d4bfb$export$4a5767248b18ef41","$3c51ee1f934d4bfb$var$initialAngle","$d9804b8672ebf17d$export$2e2bcd8739ae039","distanceMin2","distanceMax2","theta2","accumulate","distanceMin","distanceMax","$9dfa59f47d4fbf16$export$2e2bcd8739ae039","radiuses","$33483a8678f8fab3$export$2e2bcd8739ae039","$105aa014e41bb8e2$export$2e2bcd8739ae039","$465548e1faf77560$export$8ff17a5dd8c72f61","config","inputNodeAttrs","outputNodeAttrs","simulationAttrs","forceMap","manyBody","collide","context","forceSimulation","simulation","genericLayout","getResult","setFixedPosition","position","getOptions","_options","promise","setSimulation","nodesResult","edgeResult","initSimulation","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","$91414088188ff396$var$a","initializeNodes","$3c51ee1f934d4bfb$var$initialRadius","angle","initializeForce","randomSource","closest","$465548e1faf77560$var$apply","method","$c69e818ff67516f1$export$2e2bcd8739ae039","sz","$2e2dc9eef50bf4c2$var$add","$80f10b9c54513b5b$export$2e2bcd8739ae039","$f0811b954d7f0d09$export$e6fafc98131d2a44","$7a3f1e75af4c0371$export$2e2bcd8739ae039","$7a3f1e75af4c0371$var$Binarytree","$7a3f1e75af4c0371$var$leaf_copy","$7a3f1e75af4c0371$var$treeProto","$494eee40e0cbed93$export$2e2bcd8739ae039","$caa8cc0c93472ec1$export$2e2bcd8739ae039","$9946e066c1170270$var$x","$9946e066c1170270$var$y","$9946e066c1170270$var$z","$9946e066c1170270$export$2e2bcd8739ae039","nDim","zi","arg4","arg5","arg6","$4927b6ae91da5193$var$index","$4927b6ae91da5193$var$find","$4927b6ae91da5193$export$2e2bcd8739ae039","$66c47472392496d1$export$d141bba7fdc215a3","$66c47472392496d1$export$4a5767248b18ef41","$66c47472392496d1$export$df995fae86a55f06","halves","$66c47472392496d1$var$initialAngleRoll","$66c47472392496d1$var$initialAngleYaw","$333f423018e73891$export$2e2bcd8739ae039","$649e282b79f7cda5$export$2e2bcd8739ae039","initNodes","$385bdf1f65f911f3$export$2e2bcd8739ae039","$40a0669f8da73b90$export$2e2bcd8739ae039","$321ffd38c95a9021$export$2e2bcd8739ae039","$212b038eae3e1418$exports","debug","util","$4c0edf0487870c01$export$248f0a26949d24d9","defaultOptions","genericDagreLayout","__esModule","default","mapping","$d204286452318e3e$export$2e2bcd8739ae039","rx","ry","distanceTo","bo","hypot","setPos","resetForce","addForce","F","contains","nenwMass","$5d974aad89a7f8a8$export$2e2bcd8739ae039","xmid","ymid","massCenter","getLength","halfLen","NW","NE","SW","SE","$972905a276045d8d$export$2e2bcd8739ae039","body","insert","_isExternal","_putBody","updateForce","$4c1ed8fdef031a27$var$DEFAULTS_LAYOUT_OPTIONS","kr","kg","dissuadeHubs","ksmax","tao","$0957c668a07db458$var$DEFAULTS_LAYOUT_OPTIONS","speed","clusterGravity","$901ae2dc3d3ba2b6$var$DEFAULTS_LAYOUT_OPTIONS","begin","preventOverlapPadding","condense","$901ae2dc3d3ba2b6$var$small","rcs","res","$901ae2dc3d3ba2b6$var$large","usedRows","usedCols","$901ae2dc3d3ba2b6$var$used","cellUsed","rc","$901ae2dc3d3ba2b6$var$use","$901ae2dc3d3ba2b6$var$moveToNextCell","$901ae2dc3d3ba2b6$var$getPos","cellWidth","cellHeight","id2manPos","rcPos","$15cb736e04d72afa$export$d708eb154746899c","$8861122576ccad6e$var$DEFAULTS_LAYOUT_OPTIONS","$8861122576ccad6e$export$53e8e49630801d47","strictRadial","focusIdx","disp","maxDisplace","$8861122576ccad6e$var$getRepulsion","$8861122576ccad6e$var$updatePositions","vecx","vecy","common","maxDisp","di","vpx","vpy","diLength","tdispLength","distLength","limitedDist","nfDis","$a372b9cc25c90c6c$var$DEFAULTS_LAYOUT_OPTIONS","unitRadius","maxPreventOverlapIteration","sortStrength","$a372b9cc25c90c6c$var$eIdealDisMatrix","sortValueCache","iValue","jValue","$a372b9cc25c90c6c$var$getWeightMatrix","idealDistances","$a372b9cc25c90c6c$var$getIndexById","$a372b9cc25c90c6c$var$handleInfinity","focusIndex","minus","$a372b9cc25c90c6c$var$maxToFocus","$13c6e781d6b0b74c$var$DEFAULTS_LAYOUT_OPTIONS","$10d7fd9d474c2b3f$export$4bb7493d241fd8a5","circular","genericCircularLayout","paramNodeSpacing","paramNodeSize","nSize","perimeter","astep","angleStep","$aa34fcd309b753d3$var$degreeOrdering","orderedNodes","nodeA","nodeB","divN","concentric","mds","genericRandomLayout","grid","genericGridLayout","propsRows","propsCols","localeCompare","cells","splits","sm","nodeH","genericRadialLayout","propsFocusNode","propsUnitRadius","focusNodeD","semiWidth","semiHeight","maxRadius","maxD","weights","mdsResult","oneIteration","vparam","originDis","reciODis","xMolecule","yMolecule","denominator","edis","reciEdis","idealDis","reciR","numDimensions","$be5ed28a6f104ec4$var$a","$66c47472392496d1$var$initialRadius","rollAngle","yawAngle","genericFruchtermanLayout","lastClusterMap","clusterMap","clusterValue","cx","cy","propsClusterGravity","area","k2","displacements","applyCalculate","gravityForce","vid","lengthSqr","dispX","dispY","dispZ","genericForceAtlas2Layout","prune","sizes","getSizes","sourceDegree","targetDegree","postOptions","barnesHut","nodeNum","iteration","preForces","bodies","oneStep","preventOverlapIters","krPrime","getAttrForces","getOptRepGraForces","getRepGraForces","updatePos","dir","eucliDis","fa1","fa2","minx","maxx","miny","maxy","quadTree","fg","nodei","degreei","nodej","degreej","fr","swgns","trans","swgG","traG","usingSg","minusNorm","addNorm","preSG","absForce","dnx","dny","dagre","antvDagre","ranksepFunc","nodesepFunc","sortByCombo","preset","ranksepfunc","nodesepfunc","horisep","vertisep","verti","hori","parentId","layoutTopLeft","layerCoords","isInvert","point1","point2","ps","comboCombined","genericComboCombinedLayout","outerPositions","initVals","outerLayout","propsOuterLayout","_isCombo","combos","comboMap","combo","comboNodes","innerGraphLayoutPromises","getInnerGraphs","all","outerNodeIds","outerLayoutNodes","nodeAncestorIdMap","allHaveNoPosition","cacheCombo","comboLayoutNode","outerLayoutEdges","sourceAncestorId","targetAncestorId","outerLayoutGraph","outerLayoutPreset","animate","sourceSize","targetSize","comboNode","outerPosition","layoutNode","spacingFunc","comboPaddingFunc","spacing","larger","innerLayout","innerGraphLayout","innerLayoutOptions","innerLayoutPromises","getSize","padding","nsize","innerLayoutNodeIds","innerLayoutNodes","oriNode","innerGraphData","minNodeSize","size0","size1","innerGraphCore","stopLayout","calculateLayout","payload","layoutCtor"],"version":3,"file":"worker.1c31f1cd.js.map"}